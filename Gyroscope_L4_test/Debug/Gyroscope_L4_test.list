
Gyroscope_L4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000502c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080051c0  080051c0  000151c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005230  08005230  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005230  08005230  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005230  08005230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080052a8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080052a8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bd3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001982  00000000  00000000  00029c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f97b  00000000  00000000  0002c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdc6  00000000  00000000  0004c15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bca04  00000000  00000000  00057f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a1c  00000000  00000000  00114978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051a4 	.word	0x080051a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080051a4 	.word	0x080051a4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 f9bd 	bl	8000f1a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f836 	bl	8000c10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f000 f8b8 	bl	8000d18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba8:	f000 f878 	bl	8000c9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (BSP_Gyroscope_Init(&hi2c1,&buf) == ERROR)
 8000bac:	4913      	ldr	r1, [pc, #76]	; (8000bfc <main+0x64>)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <main+0x68>)
 8000bb0:	f002 fbc0 	bl	8003334 <BSP_Gyroscope_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d101      	bne.n	8000bbe <main+0x26>
      {
    	  Error_Handler();
 8000bba:	f000 f8c5 	bl	8000d48 <Error_Handler>
      }
     if (BSP_Gyroscope_SelfTest(&hi2c1,&buf_1)==ERROR)
 8000bbe:	4911      	ldr	r1, [pc, #68]	; (8000c04 <main+0x6c>)
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <main+0x68>)
 8000bc2:	f002 fbd9 	bl	8003378 <BSP_Gyroscope_SelfTest>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d101      	bne.n	8000bd0 <main+0x38>
      {
    	  Error_Handler();
 8000bcc:	f000 f8bc 	bl	8000d48 <Error_Handler>
      }
      if (BSP_Gyroscope_ReadRegister(&hi2c1,0x65,&val,&buf_1) == ERROR)  //&hi2c1,0x41,&val
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <main+0x6c>)
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <main+0x70>)
 8000bd4:	2165      	movs	r1, #101	; 0x65
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <main+0x68>)
 8000bd8:	f002 fece 	bl	8003978 <BSP_Gyroscope_ReadRegister>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <main+0x4e>
      {
    	  Error_Handler();
 8000be2:	f000 f8b1 	bl	8000d48 <Error_Handler>
      }
      if (BSP_Gyroscope_GetValues(&hi2c1, &gyro_data,&buf_1) == ERROR)
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <main+0x6c>)
 8000be8:	4908      	ldr	r1, [pc, #32]	; (8000c0c <main+0x74>)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <main+0x68>)
 8000bec:	f002 ff04 	bl	80039f8 <BSP_Gyroscope_GetValues>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <main+0x62>
      {
    	  Error_Handler();
 8000bf6:	f000 f8a7 	bl	8000d48 <Error_Handler>
      }
  /* USER CODE END 2 */

  /* Infinite loop */
  while(1);
 8000bfa:	e7fe      	b.n	8000bfa <main+0x62>
 8000bfc:	20000120 	.word	0x20000120
 8000c00:	2000008c 	.word	0x2000008c
 8000c04:	20000121 	.word	0x20000121
 8000c08:	200000e0 	.word	0x200000e0
 8000c0c:	200000e8 	.word	0x200000e8

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2244      	movs	r2, #68	; 0x44
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fb9c 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c36:	f001 fa3f 	bl	80020b8 <HAL_PWREx_ControlVoltageScaling>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c40:	f000 f882 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c44:	2310      	movs	r3, #16
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c50:	2360      	movs	r3, #96	; 0x60
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fa81 	bl	8002164 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c68:	f000 f86e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fe81 	bl	800298c <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c90:	f000 f85a 	bl	8000d48 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3758      	adds	r7, #88	; 0x58
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	f640 6214 	movw	r2, #3604	; 0xe14
 8000cac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cda:	f000 fbe3 	bl	80014a4 <HAL_I2C_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 f830 	bl	8000d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cec:	f001 f93e 	bl	8001f6c <HAL_I2CEx_ConfigAnalogFilter>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000cf6:	f000 f827 	bl	8000d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cfe:	f001 f980 	bl	8002002 <HAL_I2CEx_ConfigDigitalFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d08:	f000 f81e 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000008c 	.word	0x2000008c
 8000d14:	40005400 	.word	0x40005400

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_GPIO_Init+0x2c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <MX_GPIO_Init+0x2c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_GPIO_Init+0x2c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09e      	sub	sp, #120	; 0x78
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2254      	movs	r2, #84	; 0x54
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 facb 	bl	800435c <memset>
  if(hi2c->Instance==I2C1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <HAL_I2C_MspInit+0xa8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d137      	bne.n	8000e40 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 ffc1 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000de8:	f7ff ffae 	bl	8000d48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_I2C_MspInit+0xac>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <HAL_I2C_MspInit+0xac>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_I2C_MspInit+0xac>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0a:	2312      	movs	r3, #18
 8000e0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e16:	2304      	movs	r3, #4
 8000e18:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f000 f9d4 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_I2C_MspInit+0xac>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_I2C_MspInit+0xac>)
 8000e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e32:	6593      	str	r3, [r2, #88]	; 0x58
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_I2C_MspInit+0xac>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3778      	adds	r7, #120	; 0x78
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f892 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ecc:	f7ff ffea 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	; (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f003 fa0d 	bl	8004314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f7ff fe4d 	bl	8000b98 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f0c:	08005238 	.word	0x08005238
  ldr r2, =_sbss
 8000f10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f14:	20000168 	.word	0x20000168

08000f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>

08000f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f91f 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f80e 	bl	8000f4c <HAL_InitTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e001      	b.n	8000f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3c:	f7ff ff0c 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_InitTick+0x6c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d023      	beq.n	8000fa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_InitTick+0x70>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x6c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f91d 	bl	80011b6 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10f      	bne.n	8000fa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d809      	bhi.n	8000f9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f8f5 	bl	800117e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_InitTick+0x74>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e007      	b.n	8000fac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e004      	b.n	8000fac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e001      	b.n	8000fac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000124 	.word	0x20000124

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000124 	.word	0x20000124

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff47 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff5c 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffb0 	bl	8001124 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e148      	b.n	8001472 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 813a 	beq.w	800146c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x40>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 0201 	and.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d017      	beq.n	80012ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	6939      	ldr	r1, [r7, #16]
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8094 	beq.w	800146c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b52      	ldr	r3, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001348:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6613      	str	r3, [r2, #96]	; 0x60
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 8001352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135c:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <HAL_GPIO_Init+0x2c4>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001386:	d00d      	beq.n	80013a4 <HAL_GPIO_Init+0x1d4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a43      	ldr	r2, [pc, #268]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_GPIO_Init+0x1d0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a42      	ldr	r2, [pc, #264]	; (800149c <HAL_GPIO_Init+0x2cc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <HAL_GPIO_Init+0x1cc>
 8001398:	2302      	movs	r3, #2
 800139a:	e004      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 800139c:	2307      	movs	r3, #7
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a4:	2300      	movs	r3, #0
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b6:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_GPIO_Init+0x2c4>)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e8:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	f47f aeaf 	bne.w	80011e0 <HAL_GPIO_Init+0x10>
  }
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	48000400 	.word	0x48000400
 800149c:	48000800 	.word	0x48000800
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e081      	b.n	80015ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fc68 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2224      	movs	r2, #36	; 0x24
 80014d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e006      	b.n	800152c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800152a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d104      	bne.n	800153e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800153c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69d9      	ldr	r1, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1a      	ldr	r2, [r3, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2220      	movs	r2, #32
 80015a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	817b      	strh	r3, [r7, #10]
 80015d6:	460b      	mov	r3, r1
 80015d8:	813b      	strh	r3, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	f040 80f9 	bne.w	80017de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <HAL_I2C_Mem_Write+0x34>
 80015f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0ed      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_I2C_Mem_Write+0x4e>
 800160e:	2302      	movs	r3, #2
 8001610:	e0e6      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800161a:	f7ff fce7 	bl	8000fec <HAL_GetTick>
 800161e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2319      	movs	r3, #25
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 fac3 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0d1      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2221      	movs	r2, #33	; 0x21
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800165c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001664:	88f8      	ldrh	r0, [r7, #6]
 8001666:	893a      	ldrh	r2, [r7, #8]
 8001668:	8979      	ldrh	r1, [r7, #10]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4603      	mov	r3, r0
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f9d3 	bl	8001a20 <I2C_RequestMemoryWrite>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0a9      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001690:	b29b      	uxth	r3, r3
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d90e      	bls.n	80016b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	22ff      	movs	r2, #255	; 0xff
 800169a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	8979      	ldrh	r1, [r7, #10]
 80016a4:	2300      	movs	r3, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fc2b 	bl	8001f08 <I2C_TransferConfig>
 80016b2:	e00f      	b.n	80016d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	8979      	ldrh	r1, [r7, #10]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fc1a 	bl	8001f08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 faad 	bl	8001c38 <I2C_WaitOnTXISFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e07b      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d034      	beq.n	800178c <HAL_I2C_Mem_Write+0x1c8>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	2b00      	cmp	r3, #0
 8001728:	d130      	bne.n	800178c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fa3f 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e04d      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d90e      	bls.n	800176c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	22ff      	movs	r2, #255	; 0xff
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	b2da      	uxtb	r2, r3
 800175a:	8979      	ldrh	r1, [r7, #10]
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fbcf 	bl	8001f08 <I2C_TransferConfig>
 800176a:	e00f      	b.n	800178c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	b2da      	uxtb	r2, r3
 800177c:	8979      	ldrh	r1, [r7, #10]
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 fbbe 	bl	8001f08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d19e      	bne.n	80016d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 fa8c 	bl	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e01a      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2220      	movs	r2, #32
 80017b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_I2C_Mem_Write+0x224>)
 80017be:	400b      	ands	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fe00e800 	.word	0xfe00e800

080017ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	817b      	strh	r3, [r7, #10]
 80017fe:	460b      	mov	r3, r1
 8001800:	813b      	strh	r3, [r7, #8]
 8001802:	4613      	mov	r3, r2
 8001804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	f040 80fd 	bne.w	8001a0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_I2C_Mem_Read+0x34>
 800181a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0f1      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_I2C_Mem_Read+0x4e>
 8001836:	2302      	movs	r3, #2
 8001838:	e0ea      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001842:	f7ff fbd3 	bl	8000fec <HAL_GetTick>
 8001846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2319      	movs	r3, #25
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f9af 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0d5      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2222      	movs	r2, #34	; 0x22
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2240      	movs	r2, #64	; 0x40
 8001870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a3a      	ldr	r2, [r7, #32]
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800188c:	88f8      	ldrh	r0, [r7, #6]
 800188e:	893a      	ldrh	r2, [r7, #8]
 8001890:	8979      	ldrh	r1, [r7, #10]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4603      	mov	r3, r0
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f913 	bl	8001ac8 <I2C_RequestMemoryRead>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0ad      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d90e      	bls.n	80018dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	8979      	ldrh	r1, [r7, #10]
 80018cc:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <HAL_I2C_Mem_Read+0x22c>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fb17 	bl	8001f08 <I2C_TransferConfig>
 80018da:	e00f      	b.n	80018fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	8979      	ldrh	r1, [r7, #10]
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_I2C_Mem_Read+0x22c>)
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fb06 	bl	8001f08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	2200      	movs	r2, #0
 8001904:	2104      	movs	r1, #4
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f956 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07c      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d034      	beq.n	80019bc <HAL_I2C_Mem_Read+0x1d0>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	d130      	bne.n	80019bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	2200      	movs	r2, #0
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f927 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e04d      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d90e      	bls.n	800199c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	22ff      	movs	r2, #255	; 0xff
 8001982:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	b2da      	uxtb	r2, r3
 800198a:	8979      	ldrh	r1, [r7, #10]
 800198c:	2300      	movs	r3, #0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fab7 	bl	8001f08 <I2C_TransferConfig>
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	8979      	ldrh	r1, [r7, #10]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 faa6 	bl	8001f08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d19a      	bne.n	80018fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f974 	bl	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e01a      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2220      	movs	r2, #32
 80019e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_I2C_Mem_Read+0x230>)
 80019ee:	400b      	ands	r3, r1
 80019f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
  }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	80002400 	.word	0x80002400
 8001a1c:	fe00e800 	.word	0xfe00e800

08001a20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	817b      	strh	r3, [r7, #10]
 8001a32:	460b      	mov	r3, r1
 8001a34:	813b      	strh	r3, [r7, #8]
 8001a36:	4613      	mov	r3, r2
 8001a38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	8979      	ldrh	r1, [r7, #10]
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <I2C_RequestMemoryWrite+0xa4>)
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 fa5d 	bl	8001f08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	69b9      	ldr	r1, [r7, #24]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f8f0 	bl	8001c38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e02c      	b.n	8001abc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a68:	893b      	ldrh	r3, [r7, #8]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
 8001a72:	e015      	b.n	8001aa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a74:	893b      	ldrh	r3, [r7, #8]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f8d6 	bl	8001c38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e012      	b.n	8001abc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a96:	893b      	ldrh	r3, [r7, #8]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f884 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	80002000 	.word	0x80002000

08001ac8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	817b      	strh	r3, [r7, #10]
 8001ada:	460b      	mov	r3, r1
 8001adc:	813b      	strh	r3, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	8979      	ldrh	r1, [r7, #10]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <I2C_RequestMemoryRead+0xa4>)
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fa0a 	bl	8001f08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f89d 	bl	8001c38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e02c      	b.n	8001b62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d105      	bne.n	8001b1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b0e:	893b      	ldrh	r3, [r7, #8]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
 8001b18:	e015      	b.n	8001b46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b1a:	893b      	ldrh	r3, [r7, #8]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f883 	bl	8001c38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e012      	b.n	8001b62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b3c:	893b      	ldrh	r3, [r7, #8]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	; 0x40
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f831 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	80002000 	.word	0x80002000

08001b70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d103      	bne.n	8001b8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d007      	beq.n	8001bac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	619a      	str	r2, [r3, #24]
  }
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc8:	e022      	b.n	8001c10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d01e      	beq.n	8001c10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd2:	f7ff fa0b 	bl	8000fec <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d302      	bcc.n	8001be8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d113      	bne.n	8001c10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	f043 0220 	orr.w	r2, r3, #32
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e00f      	b.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d0cd      	beq.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c44:	e02c      	b.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f870 	bl	8001d30 <I2C_IsErrorOccurred>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e02a      	b.n	8001cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d01e      	beq.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c62:	f7ff f9c3 	bl	8000fec <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d302      	bcc.n	8001c78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d113      	bne.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e007      	b.n	8001cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d1cb      	bne.n	8001c46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc4:	e028      	b.n	8001d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f830 	bl	8001d30 <I2C_IsErrorOccurred>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e026      	b.n	8001d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cda:	f7ff f987 	bl	8000fec <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d302      	bcc.n	8001cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d113      	bne.n	8001d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e007      	b.n	8001d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d1cf      	bne.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d075      	beq.n	8001e48 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2210      	movs	r2, #16
 8001d62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d64:	e056      	b.n	8001e14 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d052      	beq.n	8001e14 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7ff f93d 	bl	8000fec <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_IsErrorOccurred+0x54>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d147      	bne.n	8001e14 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da6:	d12e      	bne.n	8001e06 <I2C_IsErrorOccurred+0xd6>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dae:	d02a      	beq.n	8001e06 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d027      	beq.n	8001e06 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001dc6:	f7ff f911 	bl	8000fec <HAL_GetTick>
 8001dca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dcc:	e01b      	b.n	8001e06 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001dce:	f7ff f90d 	bl	8000fec <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b19      	cmp	r3, #25
 8001dda:	d914      	bls.n	8001e06 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d1dc      	bne.n	8001dce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d003      	beq.n	8001e2a <I2C_IsErrorOccurred+0xfa>
 8001e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d09d      	beq.n	8001d66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2220      	movs	r2, #32
 8001e38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01c      	beq.n	8001ef8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff fe56 	bl	8001b70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <I2C_IsErrorOccurred+0x1d4>)
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	fe00e800 	.word	0xfe00e800

08001f08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	817b      	strh	r3, [r7, #10]
 8001f16:	4613      	mov	r3, r2
 8001f18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f20:	7a7b      	ldrb	r3, [r7, #9]
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	0d5b      	lsrs	r3, r3, #21
 8001f42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <I2C_TransferConfig+0x60>)
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	ea02 0103 	and.w	r1, r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	03ff63ff 	.word	0x03ff63ff

08001f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d138      	bne.n	8001ff4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e032      	b.n	8001ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b20      	cmp	r3, #32
 8002016:	d139      	bne.n	800208c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002022:	2302      	movs	r3, #2
 8002024:	e033      	b.n	800208e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2224      	movs	r2, #36	; 0x24
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002054:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40007000 	.word	0x40007000

080020b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c6:	d130      	bne.n	800212a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d038      	beq.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2232      	movs	r2, #50	; 0x32
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	3301      	adds	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020fc:	e002      	b.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3b01      	subs	r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d102      	bne.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f2      	bne.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002124:	d110      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e00f      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d007      	beq.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000
 800215c:	20000000 	.word	0x20000000
 8002160:	431bde83 	.word	0x431bde83

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	f000 bc02 	b.w	800297c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002178:	4b96      	ldr	r3, [pc, #600]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002182:	4b94      	ldr	r3, [pc, #592]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80e4 	beq.w	8002362 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4c>
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	f040 808b 	bne.w	80022be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 8087 	bne.w	80022be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b0:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_OscConfig+0x64>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e3d9      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1a      	ldr	r2, [r3, #32]
 80021cc:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <HAL_RCC_OscConfig+0x7e>
 80021d8:	4b7e      	ldr	r3, [pc, #504]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e0:	e005      	b.n	80021ee <HAL_RCC_OscConfig+0x8a>
 80021e2:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d223      	bcs.n	800223a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fd54 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e3ba      	b.n	800297c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002206:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	496d      	ldr	r1, [pc, #436]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002224:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	4968      	ldr	r1, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	e025      	b.n	8002286 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223a:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4960      	ldr	r1, [pc, #384]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002258:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	495b      	ldr	r1, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fd14 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e37a      	b.n	800297c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002286:	f000 fc81 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4950      	ldr	r1, [pc, #320]	; (80023d8 <HAL_RCC_OscConfig+0x274>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <HAL_RCC_OscConfig+0x278>)
 80022a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022a6:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fe4e 	bl	8000f4c <HAL_InitTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d052      	beq.n	8002360 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	e35e      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d032      	beq.n	800232c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a42      	ldr	r2, [pc, #264]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fe8b 	bl	8000fec <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022da:	f7fe fe87 	bl	8000fec <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e347      	b.n	800297c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a35      	ldr	r2, [pc, #212]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4930      	ldr	r1, [pc, #192]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	492b      	ldr	r1, [pc, #172]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
 800232a:	e01a      	b.n	8002362 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800232c:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a28      	ldr	r2, [pc, #160]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002338:	f7fe fe58 	bl	8000fec <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002340:	f7fe fe54 	bl	8000fec <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e314      	b.n	800297c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1dc>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d073      	beq.n	8002456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d005      	beq.n	8002380 <HAL_RCC_OscConfig+0x21c>
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d10e      	bne.n	8002398 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d10b      	bne.n	8002398 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d063      	beq.n	8002454 <HAL_RCC_OscConfig+0x2f0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d15f      	bne.n	8002454 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e2f1      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x24c>
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e025      	b.n	80023fc <HAL_RCC_OscConfig+0x298>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b8:	d114      	bne.n	80023e4 <HAL_RCC_OscConfig+0x280>
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e013      	b.n	80023fc <HAL_RCC_OscConfig+0x298>
 80023d4:	40021000 	.word	0x40021000
 80023d8:	080051c0 	.word	0x080051c0
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000004 	.word	0x20000004
 80023e4:	4ba0      	ldr	r3, [pc, #640]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a9f      	ldr	r2, [pc, #636]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b9d      	ldr	r3, [pc, #628]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a9c      	ldr	r2, [pc, #624]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fdf2 	bl	8000fec <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fdee 	bl	8000fec <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e2ae      	b.n	800297c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241e:	4b92      	ldr	r3, [pc, #584]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x2a8>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fdde 	bl	8000fec <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fdda 	bl	8000fec <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e29a      	b.n	800297c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x2d0>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d060      	beq.n	8002524 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d005      	beq.n	8002474 <HAL_RCC_OscConfig+0x310>
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d119      	bne.n	80024a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d116      	bne.n	80024a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002474:	4b7c      	ldr	r3, [pc, #496]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x328>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e277      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	4973      	ldr	r1, [pc, #460]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a0:	e040      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d023      	beq.n	80024f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024aa:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fd99 	bl	8000fec <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7fe fd95 	bl	8000fec <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e255      	b.n	800297c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d0:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	495f      	ldr	r1, [pc, #380]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
 80024f0:	e018      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5c      	ldr	r2, [pc, #368]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fd75 	bl	8000fec <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe fd71 	bl	8000fec <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e231      	b.n	800297c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d03c      	beq.n	80025aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01c      	beq.n	8002572 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fd50 	bl	8000fec <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002550:	f7fe fd4c 	bl	8000fec <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e20c      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ef      	beq.n	8002550 <HAL_RCC_OscConfig+0x3ec>
 8002570:	e01b      	b.n	80025aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fd33 	bl	8000fec <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fd2f 	bl	8000fec <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1ef      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ef      	bne.n	800258a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80a6 	beq.w	8002704 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6593      	str	r3, [r2, #88]	; 0x58
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCC_OscConfig+0x508>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d118      	bne.n	8002622 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_OscConfig+0x508>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x508>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fc:	f7fe fcf6 	bl	8000fec <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002604:	f7fe fcf2 	bl	8000fec <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1b2      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_RCC_OscConfig+0x508>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x4d8>
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800263a:	e029      	b.n	8002690 <HAL_RCC_OscConfig+0x52c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d115      	bne.n	8002670 <HAL_RCC_OscConfig+0x50c>
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x52c>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	4b9a      	ldr	r3, [pc, #616]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	4a99      	ldr	r2, [pc, #612]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002680:	4b96      	ldr	r3, [pc, #600]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a95      	ldr	r2, [pc, #596]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d016      	beq.n	80026c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fca8 	bl	8000fec <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe fca4 	bl	8000fec <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e162      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b6:	4b89      	ldr	r3, [pc, #548]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ed      	beq.n	80026a0 <HAL_RCC_OscConfig+0x53c>
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fc91 	bl	8000fec <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fc8d 	bl	8000fec <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e14b      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e4:	4b7d      	ldr	r3, [pc, #500]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ed      	bne.n	80026ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b78      	ldr	r3, [pc, #480]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	4a77      	ldr	r2, [pc, #476]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002702:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03c      	beq.n	800278a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01c      	beq.n	8002752 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002718:	4b70      	ldr	r3, [pc, #448]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 800271a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271e:	4a6f      	ldr	r2, [pc, #444]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fc60 	bl	8000fec <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002730:	f7fe fc5c 	bl	8000fec <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e11c      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002742:	4b66      	ldr	r3, [pc, #408]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ef      	beq.n	8002730 <HAL_RCC_OscConfig+0x5cc>
 8002750:	e01b      	b.n	800278a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002752:	4b62      	ldr	r3, [pc, #392]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002758:	4a60      	ldr	r2, [pc, #384]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe fc43 	bl	8000fec <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276a:	f7fe fc3f 	bl	8000fec <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0ff      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800277c:	4b57      	ldr	r3, [pc, #348]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 800277e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ef      	bne.n	800276a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80f3 	beq.w	800297a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	2b02      	cmp	r3, #2
 800279a:	f040 80c9 	bne.w	8002930 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800279e:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 0203 	and.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d12c      	bne.n	800280c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	3b01      	subs	r3, #1
 80027be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d123      	bne.n	800280c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d11b      	bne.n	800280c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d113      	bne.n	800280c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	3b01      	subs	r3, #1
 80027f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d109      	bne.n	800280c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	3b01      	subs	r3, #1
 8002806:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d06b      	beq.n	80028e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d062      	beq.n	80028d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0ac      	b.n	800297c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002822:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800282e:	f7fe fbdd 	bl	8000fec <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe fbd9 	bl	8000fec <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e099      	b.n	800297c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_RCC_OscConfig+0x77c>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002864:	3a01      	subs	r2, #1
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	4311      	orrs	r1, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800286e:	0212      	lsls	r2, r2, #8
 8002870:	4311      	orrs	r1, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002876:	0852      	lsrs	r2, r2, #1
 8002878:	3a01      	subs	r2, #1
 800287a:	0552      	lsls	r2, r2, #21
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002882:	0852      	lsrs	r2, r2, #1
 8002884:	3a01      	subs	r2, #1
 8002886:	0652      	lsls	r2, r2, #25
 8002888:	4311      	orrs	r1, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800288e:	06d2      	lsls	r2, r2, #27
 8002890:	430a      	orrs	r2, r1
 8002892:	4912      	ldr	r1, [pc, #72]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 8002894:	4313      	orrs	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028b0:	f7fe fb9c 	bl	8000fec <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe fb98 	bl	8000fec <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e058      	b.n	800297c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_RCC_OscConfig+0x778>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d6:	e050      	b.n	800297a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e04f      	b.n	800297c <HAL_RCC_OscConfig+0x818>
 80028dc:	40021000 	.word	0x40021000
 80028e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d144      	bne.n	800297a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 80028f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a20      	ldr	r2, [pc, #128]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 8002902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002908:	f7fe fb70 	bl	8000fec <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fb6c 	bl	8000fec <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e02c      	b.n	800297c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x7ac>
 800292e:	e024      	b.n	800297a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d01f      	beq.n	8002976 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 800293c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe fb53 	bl	8000fec <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe fb4f 	bl	8000fec <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e00f      	b.n	800297c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4905      	ldr	r1, [pc, #20]	; (8002984 <HAL_RCC_OscConfig+0x820>)
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_OscConfig+0x824>)
 8002970:	4013      	ands	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
 8002974:	e001      	b.n	800297a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	feeefffc 	.word	0xfeeefffc

0800298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0e7      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b75      	ldr	r3, [pc, #468]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d910      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b72      	ldr	r3, [pc, #456]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 0207 	bic.w	r2, r3, #7
 80029b6:	4970      	ldr	r1, [pc, #448]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cf      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d010      	beq.n	80029fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d908      	bls.n	80029fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4960      	ldr	r1, [pc, #384]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d04c      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d121      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0a6      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e09a      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a42:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e08e      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a52:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e086      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4943      	ldr	r1, [pc, #268]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a74:	f7fe faba 	bl	8000fec <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fab6 	bl	8000fec <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e06e      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d208      	bcs.n	8002ad2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	492b      	ldr	r1, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d210      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 0207 	bic.w	r2, r3, #7
 8002ae8:	4923      	ldr	r1, [pc, #140]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af0:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCC_ClockConfig+0x1ec>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e036      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4918      	ldr	r1, [pc, #96]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4910      	ldr	r1, [pc, #64]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b40:	f000 f824 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	490b      	ldr	r1, [pc, #44]	; (8002b80 <HAL_RCC_ClockConfig+0x1f4>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1fc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe f9f1 	bl	8000f4c <HAL_InitTick>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	080051c0 	.word	0x080051c0
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9a:	4b3e      	ldr	r3, [pc, #248]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d121      	bne.n	8002bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d11e      	bne.n	8002bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e005      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bdc:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002be8:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e004      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d134      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d003      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0xac>
 8002c30:	e005      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c34:	617b      	str	r3, [r7, #20]
      break;
 8002c36:	e005      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c3a:	617b      	str	r3, [r7, #20]
      break;
 8002c3c:	e002      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	617b      	str	r3, [r7, #20]
      break;
 8002c42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	3301      	adds	r3, #1
 8002c50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	fb03 f202 	mul.w	r2, r3, r2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	0e5b      	lsrs	r3, r3, #25
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	3301      	adds	r3, #1
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c84:	69bb      	ldr	r3, [r7, #24]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	080051d0 	.word	0x080051d0
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	007a1200 	.word	0x007a1200

08002ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cbc:	f7ff f9ee 	bl	800209c <HAL_PWREx_GetVoltageRange>
 8002cc0:	6178      	str	r0, [r7, #20]
 8002cc2:	e014      	b.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cce:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cdc:	f7ff f9de 	bl	800209c <HAL_PWREx_GetVoltageRange>
 8002ce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf4:	d10b      	bne.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d919      	bls.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8002d00:	d902      	bls.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d02:	2302      	movs	r3, #2
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e013      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d08:	2301      	movs	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e010      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d902      	bls.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d14:	2303      	movs	r3, #3
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e00a      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d102      	bne.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d20:	2302      	movs	r3, #2
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	e004      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b70      	cmp	r3, #112	; 0x70
 8002d2a:	d101      	bne.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 0207 	bic.w	r2, r3, #7
 8002d38:	4909      	ldr	r1, [pc, #36]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d70:	2300      	movs	r3, #0
 8002d72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d031      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d88:	d01a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d8e:	d814      	bhi.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d98:	d10f      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a5c      	ldr	r2, [pc, #368]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002da6:	e00c      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f9ce 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002db8:	e003      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc8:	4b51      	ldr	r3, [pc, #324]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	494e      	ldr	r1, [pc, #312]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dde:	e001      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 809e 	beq.w	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df6:	4b46      	ldr	r3, [pc, #280]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	4b40      	ldr	r3, [pc, #256]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6593      	str	r3, [r2, #88]	; 0x58
 8002e18:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e28:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a39      	ldr	r2, [pc, #228]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e34:	f7fe f8da 	bl	8000fec <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e3a:	e009      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fe f8d6 	bl	8000fec <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d902      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e4e:	e005      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d15a      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e62:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01e      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d019      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eaa:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d016      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f896 	bl	8000fec <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec2:	e00b      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fe f892 	bl	8000fec <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d902      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	74fb      	strb	r3, [r7, #19]
            break;
 8002eda:	e006      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ec      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	4904      	ldr	r1, [pc, #16]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f06:	e009      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
 8002f0c:	e006      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1c:	7c7b      	ldrb	r3, [r7, #17]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b8a      	ldr	r3, [pc, #552]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	4a89      	ldr	r2, [pc, #548]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3a:	4b84      	ldr	r3, [pc, #528]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	f023 0203 	bic.w	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4980      	ldr	r1, [pc, #512]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 020c 	bic.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	4978      	ldr	r1, [pc, #480]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f7e:	4b73      	ldr	r3, [pc, #460]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	496f      	ldr	r1, [pc, #444]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	4967      	ldr	r1, [pc, #412]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fc2:	4b62      	ldr	r3, [pc, #392]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	495e      	ldr	r1, [pc, #376]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	4956      	ldr	r1, [pc, #344]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003006:	4b51      	ldr	r3, [pc, #324]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	494d      	ldr	r1, [pc, #308]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d028      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003028:	4b48      	ldr	r3, [pc, #288]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4945      	ldr	r1, [pc, #276]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003046:	d106      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a3f      	ldr	r2, [pc, #252]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003052:	60d3      	str	r3, [r2, #12]
 8003054:	e011      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800305e:	d10c      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f872 	bl	8003150 <RCCEx_PLLSAI1_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d028      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	492d      	ldr	r1, [pc, #180]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4a28      	ldr	r2, [pc, #160]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b0:	60d3      	str	r3, [r2, #12]
 80030b2:	e011      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2101      	movs	r1, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f843 	bl	8003150 <RCCEx_PLLSAI1_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01c      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003102:	d10c      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	2102      	movs	r1, #2
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f820 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800312a:	4b08      	ldr	r3, [pc, #32]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003140:	7cbb      	ldrb	r3, [r7, #18]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800315e:	4b74      	ldr	r3, [pc, #464]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d018      	beq.n	800319c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800316a:	4b71      	ldr	r3, [pc, #452]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d10d      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
       ||
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003182:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
       ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d047      	beq.n	8003226 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e044      	b.n	8003226 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d018      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0x86>
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d825      	bhi.n	80031f4 <RCCEx_PLLSAI1_Config+0xa4>
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d002      	beq.n	80031b2 <RCCEx_PLLSAI1_Config+0x62>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d009      	beq.n	80031c4 <RCCEx_PLLSAI1_Config+0x74>
 80031b0:	e020      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11d      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c2:	e01a      	b.n	80031fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031c4:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d116      	bne.n	80031fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d4:	e013      	b.n	80031fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031d6:	4b56      	ldr	r3, [pc, #344]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031e2:	4b53      	ldr	r3, [pc, #332]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031f2:	e006      	b.n	8003202 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e004      	b.n	8003204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003202:	bf00      	nop
    }

    if(status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800320a:	4b49      	ldr	r3, [pc, #292]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	430b      	orrs	r3, r1
 8003220:	4943      	ldr	r1, [pc, #268]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d17c      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800322c:	4b40      	ldr	r3, [pc, #256]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3f      	ldr	r2, [pc, #252]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003238:	f7fd fed8 	bl	8000fec <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800323e:	e009      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003240:	f7fd fed4 	bl	8000fec <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	73fb      	strb	r3, [r7, #15]
        break;
 8003252:	e005      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ef      	bne.n	8003240 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d15f      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d110      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	0211      	lsls	r1, r2, #8
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68d2      	ldr	r2, [r2, #12]
 8003282:	06d2      	lsls	r2, r2, #27
 8003284:	430a      	orrs	r2, r1
 8003286:	492a      	ldr	r1, [pc, #168]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	610b      	str	r3, [r1, #16]
 800328c:	e027      	b.n	80032de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d112      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800329c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6892      	ldr	r2, [r2, #8]
 80032a4:	0211      	lsls	r1, r2, #8
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6912      	ldr	r2, [r2, #16]
 80032aa:	0852      	lsrs	r2, r2, #1
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0552      	lsls	r2, r2, #21
 80032b0:	430a      	orrs	r2, r1
 80032b2:	491f      	ldr	r1, [pc, #124]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	610b      	str	r3, [r1, #16]
 80032b8:	e011      	b.n	80032de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6892      	ldr	r2, [r2, #8]
 80032ca:	0211      	lsls	r1, r2, #8
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6952      	ldr	r2, [r2, #20]
 80032d0:	0852      	lsrs	r2, r2, #1
 80032d2:	3a01      	subs	r2, #1
 80032d4:	0652      	lsls	r2, r2, #25
 80032d6:	430a      	orrs	r2, r1
 80032d8:	4915      	ldr	r1, [pc, #84]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fd fe7f 	bl	8000fec <HAL_GetTick>
 80032ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032f0:	e009      	b.n	8003306 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032f2:	f7fd fe7b 	bl	8000fec <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d902      	bls.n	8003306 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	73fb      	strb	r3, [r7, #15]
          break;
 8003304:	e005      	b.n	8003312 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ef      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4903      	ldr	r1, [pc, #12]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003322:	4313      	orrs	r3, r2
 8003324:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000

08003334 <BSP_Gyroscope_Init>:
  * @retval ErrorStatus
  *         ERROR-     0
  *         SUCCESS-   1
  */
ErrorStatus BSP_Gyroscope_Init(I2C_HandleTypeDef *hi2c,uint8_t *buf)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]


	(hi2c->Devaddress)=dev_addr; //device address
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	22d0      	movs	r2, #208	; 0xd0
 8003342:	64da      	str	r2, [r3, #76]	; 0x4c
	(hi2c->State)=HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	(hi2c->Mode)=HAL_I2C_MODE_MASTER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2210      	movs	r2, #16
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	(hi2c->XferSize)=1;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
	(hi2c->pBuffPtr)=buf;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
	(hi2c->ErrorCode)=HAL_I2C_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	; 0x44

    return SUCCESS;
 8003366:	2300      	movs	r3, #0

	/* USER CODE END I2C1_Init */

}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	0000      	movs	r0, r0
	...

08003378 <BSP_Gyroscope_SelfTest>:
  * @retval ErrorStatus
  *         ERROR-     0
  *         SUCCESS-   1
  */
ErrorStatus BSP_Gyroscope_SelfTest(I2C_HandleTypeDef *hi2c, uint8_t *buf_1)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b090      	sub	sp, #64	; 0x40
 800337c:	af04      	add	r7, sp, #16
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
    uint32_t TIMER_Simulator_Var;
	uint8_t rawData[4];
    float selfTest[6];
    int i;

	(hi2c->Devaddress)=dev_addr; //device address
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	22d0      	movs	r2, #208	; 0xd0
 8003386:	64da      	str	r2, [r3, #76]	; 0x4c
	(hi2c->Memaddress)=0x1B; //This register is used to trigger gyroscope self-test and configure the gyroscopes’ full scale range
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	221b      	movs	r2, #27
 800338c:	651a      	str	r2, [r3, #80]	; 0x50

    *buf_1=0xE0;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	22e0      	movs	r2, #224	; 0xe0
 8003392:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1B, 1, buf_1, 1, 50) != HAL_OK)
 8003394:	2332      	movs	r3, #50	; 0x32
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	2301      	movs	r3, #1
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2301      	movs	r3, #1
 80033a2:	221b      	movs	r2, #27
 80033a4:	21d0      	movs	r1, #208	; 0xd0
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f90c 	bl	80015c4 <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */}
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80033b0:	bf00      	nop
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d006      	beq.n	80033cc <BSP_Gyroscope_SelfTest+0x54>
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	3301      	adds	r3, #1
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	4a72      	ldr	r2, [pc, #456]	; (8003590 <BSP_Gyroscope_SelfTest+0x218>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d9f2      	bls.n	80033b2 <BSP_Gyroscope_SelfTest+0x3a>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	4a71      	ldr	r2, [pc, #452]	; (8003594 <BSP_Gyroscope_SelfTest+0x21c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <BSP_Gyroscope_SelfTest+0x60>
    {
        return ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e2b5      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }


    (hi2c->Memaddress)=0x1C;//This register is used to trigger accelerometer self test and configure the accelerometer full scale range. This register also configures the Digital High Pass Filter (DHPF).
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	221c      	movs	r2, #28
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50

    *buf_1=0xF0;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	22f0      	movs	r2, #240	; 0xf0
 80033e2:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1B, 1, buf_1, 1, 50) != HAL_OK)
 80033e4:	2332      	movs	r3, #50	; 0x32
 80033e6:	9302      	str	r3, [sp, #8]
 80033e8:	2301      	movs	r3, #1
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2301      	movs	r3, #1
 80033f2:	221b      	movs	r2, #27
 80033f4:	21d0      	movs	r1, #208	; 0xd0
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe f8e4 	bl	80015c4 <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */}
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003400:	bf00      	nop
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	d006      	beq.n	800341c <BSP_Gyroscope_SelfTest+0xa4>
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	3301      	adds	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	4a5e      	ldr	r2, [pc, #376]	; (8003590 <BSP_Gyroscope_SelfTest+0x218>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d9f2      	bls.n	8003402 <BSP_Gyroscope_SelfTest+0x8a>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <BSP_Gyroscope_SelfTest+0x21c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <BSP_Gyroscope_SelfTest+0xb0>
    {
        return ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e28d      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }


    (hi2c->Memaddress)=SELF_TEST_X;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	220d      	movs	r2, #13
 800342c:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_X, 1, buf_1, 1, 50) != HAL_OK)
 800342e:	2332      	movs	r3, #50	; 0x32
 8003430:	9302      	str	r3, [sp, #8]
 8003432:	2301      	movs	r3, #1
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2301      	movs	r3, #1
 800343c:	220d      	movs	r2, #13
 800343e:	21d0      	movs	r1, #208	; 0xd0
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fe f9d3 	bl	80017ec <HAL_I2C_Mem_Read>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <BSP_Gyroscope_SelfTest+0xd8>
    {
    	return ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e279      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }
    /* Wait for end of transfer */

    TIMER_Simulator_Var = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003454:	bf00      	nop
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	d006      	beq.n	8003470 <BSP_Gyroscope_SelfTest+0xf8>
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	3301      	adds	r3, #1
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	4a49      	ldr	r2, [pc, #292]	; (8003590 <BSP_Gyroscope_SelfTest+0x218>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d9f2      	bls.n	8003456 <BSP_Gyroscope_SelfTest+0xde>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	4a48      	ldr	r2, [pc, #288]	; (8003594 <BSP_Gyroscope_SelfTest+0x21c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <BSP_Gyroscope_SelfTest+0x104>
    {
        return ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e263      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }
    rawData[0] = *buf_1;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


    (hi2c->Memaddress)=SELF_TEST_Y;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	220e      	movs	r2, #14
 8003488:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_Y, 1, buf_1, 1, 50) != HAL_OK)
 800348a:	2332      	movs	r3, #50	; 0x32
 800348c:	9302      	str	r3, [sp, #8]
 800348e:	2301      	movs	r3, #1
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2301      	movs	r3, #1
 8003498:	220e      	movs	r2, #14
 800349a:	21d0      	movs	r1, #208	; 0xd0
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fe f9a5 	bl	80017ec <HAL_I2C_Mem_Read>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <BSP_Gyroscope_SelfTest+0x134>
    {
    	return ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e24b      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }
    /* Wait for end of transfer */


    TIMER_Simulator_Var = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80034b0:	bf00      	nop
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d006      	beq.n	80034cc <BSP_Gyroscope_SelfTest+0x154>
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	3301      	adds	r3, #1
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	4a32      	ldr	r2, [pc, #200]	; (8003590 <BSP_Gyroscope_SelfTest+0x218>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d9f2      	bls.n	80034b2 <BSP_Gyroscope_SelfTest+0x13a>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	4a31      	ldr	r2, [pc, #196]	; (8003594 <BSP_Gyroscope_SelfTest+0x21c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <BSP_Gyroscope_SelfTest+0x160>
    {
        return ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e235      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }
    rawData[1] = *buf_1;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


    (hi2c->Memaddress)=SELF_TEST_Z;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	220f      	movs	r2, #15
 80034e4:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_Z, 1, buf_1, 1, 50) != HAL_OK)
 80034e6:	2332      	movs	r3, #50	; 0x32
 80034e8:	9302      	str	r3, [sp, #8]
 80034ea:	2301      	movs	r3, #1
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2301      	movs	r3, #1
 80034f4:	220f      	movs	r2, #15
 80034f6:	21d0      	movs	r1, #208	; 0xd0
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7fe f977 	bl	80017ec <HAL_I2C_Mem_Read>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <BSP_Gyroscope_SelfTest+0x190>
    {
    	return ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e21d      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }
    /* Wait for end of transfer */


    TIMER_Simulator_Var = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 800350c:	bf00      	nop
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	d006      	beq.n	8003528 <BSP_Gyroscope_SelfTest+0x1b0>
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	3301      	adds	r3, #1
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <BSP_Gyroscope_SelfTest+0x218>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d9f2      	bls.n	800350e <BSP_Gyroscope_SelfTest+0x196>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <BSP_Gyroscope_SelfTest+0x21c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <BSP_Gyroscope_SelfTest+0x1bc>
    {
        return ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e207      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }
    rawData[2] = *buf_1;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


    (hi2c->Memaddress)=SELF_TEST_A;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2210      	movs	r2, #16
 8003540:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_A, 1, buf_1, 1, 50) != HAL_OK)
 8003542:	2332      	movs	r3, #50	; 0x32
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	2301      	movs	r3, #1
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2301      	movs	r3, #1
 8003550:	2210      	movs	r2, #16
 8003552:	21d0      	movs	r1, #208	; 0xd0
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fe f949 	bl	80017ec <HAL_I2C_Mem_Read>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <BSP_Gyroscope_SelfTest+0x1ec>
    {
    	return ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e1ef      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    }
    /* Wait for end of transfer */


    TIMER_Simulator_Var = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003568:	bf00      	nop
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	d006      	beq.n	8003584 <BSP_Gyroscope_SelfTest+0x20c>
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	3301      	adds	r3, #1
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <BSP_Gyroscope_SelfTest+0x218>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d9f2      	bls.n	800356a <BSP_Gyroscope_SelfTest+0x1f2>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	4a03      	ldr	r2, [pc, #12]	; (8003594 <BSP_Gyroscope_SelfTest+0x21c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d105      	bne.n	8003598 <BSP_Gyroscope_SelfTest+0x220>
    {
        return ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e1d9      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
 8003590:	000ffffe 	.word	0x000ffffe
 8003594:	000fffff 	.word	0x000fffff
    }
    rawData[3] = *buf_1;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27



    // Extract the acceleration test results first
    selfTest[0] = (rawData[0] >> 3) | (rawData[3] & 0x30) >> 4 ; // XA_TEST result is a five-bit unsigned integer
 80035a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ae:	111b      	asrs	r3, r3, #4
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035be:	edc7 7a03 	vstr	s15, [r7, #12]
    selfTest[1] = (rawData[1] >> 3) | (rawData[3] & 0x0C) >> 2 ; // YA_TEST result is a five-bit unsigned integer
 80035c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d0:	109b      	asrs	r3, r3, #2
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	4313      	orrs	r3, r2
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e0:	edc7 7a04 	vstr	s15, [r7, #16]
    selfTest[2] = (rawData[2] >> 3) | (rawData[3] & 0x03) >> 0 ; // ZA_TEST result is a five-bit unsigned integer
 80035e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	4313      	orrs	r3, r2
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003600:	edc7 7a05 	vstr	s15, [r7, #20]
    // Extract the gyration test results first
    selfTest[3] = rawData[0]  & 0x1F ; // XG_TEST result is a five-bit unsigned integer
 8003604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	ee07 3a90 	vmov	s15, r3
 8003610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003614:	edc7 7a06 	vstr	s15, [r7, #24]
    selfTest[4] = rawData[1]  & 0x1F ; // YG_TEST result is a five-bit unsigned integer
 8003618:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003628:	edc7 7a07 	vstr	s15, [r7, #28]
    selfTest[5] = rawData[2]  & 0x1F ; // ZG_TEST result is a five-bit unsigned integer
 800362c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Process results to allow final comparison with factory set values
    factoryTrim[0] = (int)(4096.0*0.34)*(int)(pow( (0.92/0.34), (((float)selfTest[0] - 1.0)/30.0)));  // FT[Xa] factory trim calculation
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fc ff28 	bl	8000498 <__aeabi_f2d>
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	4bc4      	ldr	r3, [pc, #784]	; (8003960 <BSP_Gyroscope_SelfTest+0x5e8>)
 800364e:	f7fc fdc3 	bl	80001d8 <__aeabi_dsub>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	4bc1      	ldr	r3, [pc, #772]	; (8003964 <BSP_Gyroscope_SelfTest+0x5ec>)
 8003660:	f7fd f89c 	bl	800079c <__aeabi_ddiv>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	ec43 2b17 	vmov	d7, r2, r3
 800366c:	eeb0 1a47 	vmov.f32	s2, s14
 8003670:	eef0 1a67 	vmov.f32	s3, s15
 8003674:	ed9f 0bb6 	vldr	d0, [pc, #728]	; 8003950 <BSP_Gyroscope_SelfTest+0x5d8>
 8003678:	f000 fe78 	bl	800436c <pow>
 800367c:	ec53 2b10 	vmov	r2, r3, d0
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	f7fd fa10 	bl	8000aa8 <__aeabi_d2iz>
 8003688:	4603      	mov	r3, r0
 800368a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369a:	4bb3      	ldr	r3, [pc, #716]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
    factoryTrim[1] = (int)(4096.0*0.34)*(int)(pow( (0.92/0.34), (((float)selfTest[1] - 1.0)/30.0)));  // FT[Ya] factory trim calculation
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc fef8 	bl	8000498 <__aeabi_f2d>
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	4bac      	ldr	r3, [pc, #688]	; (8003960 <BSP_Gyroscope_SelfTest+0x5e8>)
 80036ae:	f7fc fd93 	bl	80001d8 <__aeabi_dsub>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	4ba9      	ldr	r3, [pc, #676]	; (8003964 <BSP_Gyroscope_SelfTest+0x5ec>)
 80036c0:	f7fd f86c 	bl	800079c <__aeabi_ddiv>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	ec43 2b17 	vmov	d7, r2, r3
 80036cc:	eeb0 1a47 	vmov.f32	s2, s14
 80036d0:	eef0 1a67 	vmov.f32	s3, s15
 80036d4:	ed9f 0b9e 	vldr	d0, [pc, #632]	; 8003950 <BSP_Gyroscope_SelfTest+0x5d8>
 80036d8:	f000 fe48 	bl	800436c <pow>
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd f9e0 	bl	8000aa8 <__aeabi_d2iz>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	4b9b      	ldr	r3, [pc, #620]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 80036fc:	edc3 7a01 	vstr	s15, [r3, #4]
    factoryTrim[2] = (int)(4096.0*0.34)*(int)(pow( (0.92/0.34), (((float)selfTest[2] - 1.0)/30.0)));  // FT[Za] factory trim calculation
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc fec8 	bl	8000498 <__aeabi_f2d>
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	4b94      	ldr	r3, [pc, #592]	; (8003960 <BSP_Gyroscope_SelfTest+0x5e8>)
 800370e:	f7fc fd63 	bl	80001d8 <__aeabi_dsub>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	4b91      	ldr	r3, [pc, #580]	; (8003964 <BSP_Gyroscope_SelfTest+0x5ec>)
 8003720:	f7fd f83c 	bl	800079c <__aeabi_ddiv>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	ec43 2b17 	vmov	d7, r2, r3
 800372c:	eeb0 1a47 	vmov.f32	s2, s14
 8003730:	eef0 1a67 	vmov.f32	s3, s15
 8003734:	ed9f 0b86 	vldr	d0, [pc, #536]	; 8003950 <BSP_Gyroscope_SelfTest+0x5d8>
 8003738:	f000 fe18 	bl	800436c <pow>
 800373c:	ec53 2b10 	vmov	r2, r3, d0
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f7fd f9b0 	bl	8000aa8 <__aeabi_d2iz>
 8003748:	4603      	mov	r3, r0
 800374a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375a:	4b83      	ldr	r3, [pc, #524]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 800375c:	edc3 7a02 	vstr	s15, [r3, #8]
    factoryTrim[3] =  (int)( 25.0*131.0)*(int)(pow( 1.046, ((float)selfTest[3] - 1.0) ));              // FT[Xg] factory trim calculation
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fc fe98 	bl	8000498 <__aeabi_f2d>
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	4b7c      	ldr	r3, [pc, #496]	; (8003960 <BSP_Gyroscope_SelfTest+0x5e8>)
 800376e:	f7fc fd33 	bl	80001d8 <__aeabi_dsub>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	ec43 2b17 	vmov	d7, r2, r3
 800377a:	eeb0 1a47 	vmov.f32	s2, s14
 800377e:	eef0 1a67 	vmov.f32	s3, s15
 8003782:	ed9f 0b75 	vldr	d0, [pc, #468]	; 8003958 <BSP_Gyroscope_SelfTest+0x5e0>
 8003786:	f000 fdf1 	bl	800436c <pow>
 800378a:	ec53 2b10 	vmov	r2, r3, d0
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	f7fd f989 	bl	8000aa8 <__aeabi_d2iz>
 8003796:	4603      	mov	r3, r0
 8003798:	f640 42cb 	movw	r2, #3275	; 0xccb
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	ee07 3a90 	vmov	s15, r3
 80037a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a8:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 80037aa:	edc3 7a03 	vstr	s15, [r3, #12]
    factoryTrim[4] =  (int)(-25.0*131.0)*(int)(pow( 1.046, ((float)selfTest[4] - 1.0) ));              // FT[Yg] factory trim calculation
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fe71 	bl	8000498 <__aeabi_f2d>
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	4b69      	ldr	r3, [pc, #420]	; (8003960 <BSP_Gyroscope_SelfTest+0x5e8>)
 80037bc:	f7fc fd0c 	bl	80001d8 <__aeabi_dsub>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	ec43 2b17 	vmov	d7, r2, r3
 80037c8:	eeb0 1a47 	vmov.f32	s2, s14
 80037cc:	eef0 1a67 	vmov.f32	s3, s15
 80037d0:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8003958 <BSP_Gyroscope_SelfTest+0x5e0>
 80037d4:	f000 fdca 	bl	800436c <pow>
 80037d8:	ec53 2b10 	vmov	r2, r3, d0
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fd f962 	bl	8000aa8 <__aeabi_d2iz>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4a61      	ldr	r2, [pc, #388]	; (800396c <BSP_Gyroscope_SelfTest+0x5f4>)
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f4:	4b5c      	ldr	r3, [pc, #368]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 80037f6:	edc3 7a04 	vstr	s15, [r3, #16]
    factoryTrim[5] =  (int)( 25.0*131.0)*(int)(pow( 1.046, ((float)selfTest[5] - 1.0) ));              // FT[Zg] factory trim calculation
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc fe4b 	bl	8000498 <__aeabi_f2d>
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	4b56      	ldr	r3, [pc, #344]	; (8003960 <BSP_Gyroscope_SelfTest+0x5e8>)
 8003808:	f7fc fce6 	bl	80001d8 <__aeabi_dsub>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	ec43 2b17 	vmov	d7, r2, r3
 8003814:	eeb0 1a47 	vmov.f32	s2, s14
 8003818:	eef0 1a67 	vmov.f32	s3, s15
 800381c:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8003958 <BSP_Gyroscope_SelfTest+0x5e0>
 8003820:	f000 fda4 	bl	800436c <pow>
 8003824:	ec53 2b10 	vmov	r2, r3, d0
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fd f93c 	bl	8000aa8 <__aeabi_d2iz>
 8003830:	4603      	mov	r3, r0
 8003832:	f640 42cb 	movw	r2, #3275	; 0xccb
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003842:	4b49      	ldr	r3, [pc, #292]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 8003844:	edc3 7a05 	vstr	s15, [r3, #20]

    for (i = 0; i < 6; i++)
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
 800384c:	e038      	b.n	80038c0 <BSP_Gyroscope_SelfTest+0x548>
        destination[i] =(100.0*((float)selfTest[i] - factoryTrim[i])/factoryTrim[i]); // Report percent differences
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	3330      	adds	r3, #48	; 0x30
 8003854:	443b      	add	r3, r7
 8003856:	3b24      	subs	r3, #36	; 0x24
 8003858:	ed93 7a00 	vldr	s14, [r3]
 800385c:	4a42      	ldr	r2, [pc, #264]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	edd3 7a00 	vldr	s15, [r3]
 8003868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386c:	ee17 0a90 	vmov	r0, s15
 8003870:	f7fc fe12 	bl	8000498 <__aeabi_f2d>
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <BSP_Gyroscope_SelfTest+0x5f8>)
 800387a:	f7fc fe65 	bl	8000548 <__aeabi_dmul>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4614      	mov	r4, r2
 8003884:	461d      	mov	r5, r3
 8003886:	4a38      	ldr	r2, [pc, #224]	; (8003968 <BSP_Gyroscope_SelfTest+0x5f0>)
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fe01 	bl	8000498 <__aeabi_f2d>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f7fc ff7d 	bl	800079c <__aeabi_ddiv>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	f7fd f925 	bl	8000af8 <__aeabi_d2f>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4930      	ldr	r1, [pc, #192]	; (8003974 <BSP_Gyroscope_SelfTest+0x5fc>)
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 6; i++)
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	3301      	adds	r3, #1
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	ddc3      	ble.n	800384e <BSP_Gyroscope_SelfTest+0x4d6>

    if(destination[0]<1 && destination[1]<1 && destination[2] < 1 && destination[3] < 1 && destination[4] < 1 && destination[5] < 1)
 80038c6:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <BSP_Gyroscope_SelfTest+0x5fc>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d8:	d533      	bpl.n	8003942 <BSP_Gyroscope_SelfTest+0x5ca>
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <BSP_Gyroscope_SelfTest+0x5fc>)
 80038dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80038e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ec:	d529      	bpl.n	8003942 <BSP_Gyroscope_SelfTest+0x5ca>
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <BSP_Gyroscope_SelfTest+0x5fc>)
 80038f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80038f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003900:	d51f      	bpl.n	8003942 <BSP_Gyroscope_SelfTest+0x5ca>
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <BSP_Gyroscope_SelfTest+0x5fc>)
 8003904:	edd3 7a03 	vldr	s15, [r3, #12]
 8003908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800390c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d515      	bpl.n	8003942 <BSP_Gyroscope_SelfTest+0x5ca>
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <BSP_Gyroscope_SelfTest+0x5fc>)
 8003918:	edd3 7a04 	vldr	s15, [r3, #16]
 800391c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003928:	d50b      	bpl.n	8003942 <BSP_Gyroscope_SelfTest+0x5ca>
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <BSP_Gyroscope_SelfTest+0x5fc>)
 800392c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	d501      	bpl.n	8003942 <BSP_Gyroscope_SelfTest+0x5ca>
        return SUCCESS;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <BSP_Gyroscope_SelfTest+0x5cc>
    return      ERROR;
 8003942:	2301      	movs	r3, #1
}
 8003944:	4618      	mov	r0, r3
 8003946:	3730      	adds	r7, #48	; 0x30
 8003948:	46bd      	mov	sp, r7
 800394a:	bdb0      	pop	{r4, r5, r7, pc}
 800394c:	f3af 8000 	nop.w
 8003950:	a5a5a5a5 	.word	0xa5a5a5a5
 8003954:	4005a5a5 	.word	0x4005a5a5
 8003958:	7ef9db23 	.word	0x7ef9db23
 800395c:	3ff0bc6a 	.word	0x3ff0bc6a
 8003960:	3ff00000 	.word	0x3ff00000
 8003964:	403e0000 	.word	0x403e0000
 8003968:	20000128 	.word	0x20000128
 800396c:	fffff335 	.word	0xfffff335
 8003970:	40590000 	.word	0x40590000
 8003974:	20000140 	.word	0x20000140

08003978 <BSP_Gyroscope_ReadRegister>:
  *         ERROR-     0
  *         SUCCESS-   1
  */

ErrorStatus BSP_Gyroscope_ReadRegister(I2C_HandleTypeDef *hi2c,uint16_t addr, uint8_t *data_buffer,uint8_t* buf_1)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af04      	add	r7, sp, #16
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	460b      	mov	r3, r1
 8003986:	817b      	strh	r3, [r7, #10]
    uint32_t TIMER_Simulator_Var;


    (hi2c->Memaddress)=addr;//addr is value of register we want to read
 8003988:	897a      	ldrh	r2, [r7, #10]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, addr, 1, buf_1, 1u, 50) != HAL_OK)
 800398e:	897a      	ldrh	r2, [r7, #10]
 8003990:	2332      	movs	r3, #50	; 0x32
 8003992:	9302      	str	r3, [sp, #8]
 8003994:	2301      	movs	r3, #1
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2301      	movs	r3, #1
 800399e:	21d0      	movs	r1, #208	; 0xd0
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7fd ff23 	bl	80017ec <HAL_I2C_Mem_Read>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <BSP_Gyroscope_ReadRegister+0x38>
    {
    	return ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e01a      	b.n	80039e6 <BSP_Gyroscope_ReadRegister+0x6e>
    }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80039b4:	bf00      	nop
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d006      	beq.n	80039d0 <BSP_Gyroscope_ReadRegister+0x58>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <BSP_Gyroscope_ReadRegister+0x78>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d9f2      	bls.n	80039b6 <BSP_Gyroscope_ReadRegister+0x3e>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <BSP_Gyroscope_ReadRegister+0x7c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <BSP_Gyroscope_ReadRegister+0x64>
    {
        return ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e004      	b.n	80039e6 <BSP_Gyroscope_ReadRegister+0x6e>
    }


    *data_buffer=*buf_1;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	701a      	strb	r2, [r3, #0]

    return SUCCESS;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	000ffffe 	.word	0x000ffffe
 80039f4:	000fffff 	.word	0x000fffff

080039f8 <BSP_Gyroscope_GetValues>:
  * @retval ErrorStatus
  *         ERROR-     0
  *         SUCCESS-   1
  */
ErrorStatus BSP_Gyroscope_GetValues(I2C_HandleTypeDef *hi2c, BSP_GyrFetchTypeDef* BSP_GyrFetchStructure,uint8_t *buf_1)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af04      	add	r7, sp, #16
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
    uint32_t TIMER_Simulator_Var;


    /*******/

	(hi2c->Devaddress)=dev_addr; //device address
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	22d0      	movs	r2, #208	; 0xd0
 8003a08:	64da      	str	r2, [r3, #76]	; 0x4c
	(hi2c->Memaddress)=0x6B;    // power management 1 register
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	226b      	movs	r2, #107	; 0x6b
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50


    *buf_1=0x00; // for setting bit 6 of this register to 0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x6B, 1, buf_1, 1, 50) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2232      	movs	r2, #50	; 0x32
 8003a1a:	9202      	str	r2, [sp, #8]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	9201      	str	r2, [sp, #4]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2301      	movs	r3, #1
 8003a24:	226b      	movs	r2, #107	; 0x6b
 8003a26:	21d0      	movs	r1, #208	; 0xd0
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7fd fdcb 	bl	80015c4 <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */  }
    /* Wait the end of transfer */


    TIMER_Simulator_Var = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003a32:	bf00      	nop
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d006      	beq.n	8003a4e <BSP_Gyroscope_GetValues+0x56>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	3301      	adds	r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4a97      	ldr	r2, [pc, #604]	; (8003ca8 <BSP_Gyroscope_GetValues+0x2b0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d9f2      	bls.n	8003a34 <BSP_Gyroscope_GetValues+0x3c>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	4a96      	ldr	r2, [pc, #600]	; (8003cac <BSP_Gyroscope_GetValues+0x2b4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d102      	bne.n	8003a5c <BSP_Gyroscope_GetValues+0x64>
    {
        return ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f000 bc35 	b.w	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }


	(hi2c->Memaddress)=0x1B;  //gyroscope configuration register
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	221b      	movs	r2, #27
 8003a60:	651a      	str	r2, [r3, #80]	; 0x50

    *buf_1=0x00; // for writing 00000010 into configuration register
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1B, 1, &buf_1, 1, 50) != HAL_OK)
 8003a68:	2332      	movs	r3, #50	; 0x32
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2301      	movs	r3, #1
 8003a76:	221b      	movs	r2, #27
 8003a78:	21d0      	movs	r1, #208	; 0xd0
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7fd fda2 	bl	80015c4 <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */  }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003a84:	bf00      	nop
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d006      	beq.n	8003aa0 <BSP_Gyroscope_GetValues+0xa8>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4a83      	ldr	r2, [pc, #524]	; (8003ca8 <BSP_Gyroscope_GetValues+0x2b0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d9f2      	bls.n	8003a86 <BSP_Gyroscope_GetValues+0x8e>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	4a82      	ldr	r2, [pc, #520]	; (8003cac <BSP_Gyroscope_GetValues+0x2b4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d102      	bne.n	8003aae <BSP_Gyroscope_GetValues+0xb6>
    {
        return ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f000 bc0c 	b.w	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }


	(hi2c->Memaddress)=0x1C;  //accelerometer configuration register
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	221c      	movs	r2, #28
 8003ab2:	651a      	str	r2, [r3, #80]	; 0x50

    *buf_1=0x00; // for writing 00000000 into configuration register
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1C, 1, buf_1, 1, 50) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2232      	movs	r2, #50	; 0x32
 8003abe:	9202      	str	r2, [sp, #8]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	9201      	str	r2, [sp, #4]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	221c      	movs	r2, #28
 8003aca:	21d0      	movs	r1, #208	; 0xd0
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7fd fd79 	bl	80015c4 <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */  }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003ad6:	bf00      	nop
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d006      	beq.n	8003af2 <BSP_Gyroscope_GetValues+0xfa>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4a6e      	ldr	r2, [pc, #440]	; (8003ca8 <BSP_Gyroscope_GetValues+0x2b0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d9f2      	bls.n	8003ad8 <BSP_Gyroscope_GetValues+0xe0>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a6d      	ldr	r2, [pc, #436]	; (8003cac <BSP_Gyroscope_GetValues+0x2b4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <BSP_Gyroscope_GetValues+0x106>
    {
        return ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e3e3      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    /*************/




    (hi2c->Memaddress)=0x41;  //contains temperature value
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2241      	movs	r2, #65	; 0x41
 8003b02:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x41, 1, buf_1, 1, 50) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2232      	movs	r2, #50	; 0x32
 8003b08:	9202      	str	r2, [sp, #8]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	9201      	str	r2, [sp, #4]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2301      	movs	r3, #1
 8003b12:	2241      	movs	r2, #65	; 0x41
 8003b14:	21d0      	movs	r1, #208	; 0xd0
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7fd fe68 	bl	80017ec <HAL_I2C_Mem_Read>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <BSP_Gyroscope_GetValues+0x12e>
    {
    	return ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e3cf      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    // Wait the end of transfer

    TIMER_Simulator_Var = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003b2a:	bf00      	nop
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d006      	beq.n	8003b46 <BSP_Gyroscope_GetValues+0x14e>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	4a59      	ldr	r2, [pc, #356]	; (8003ca8 <BSP_Gyroscope_GetValues+0x2b0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d9f2      	bls.n	8003b2c <BSP_Gyroscope_GetValues+0x134>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <BSP_Gyroscope_GetValues+0x2b4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <BSP_Gyroscope_GetValues+0x15a>
    {
        return ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e3b9      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    temp=temp|(*buf_1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b21a      	sxth	r2, r3
 8003b58:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <BSP_Gyroscope_GetValues+0x2b8>)
 8003b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <BSP_Gyroscope_GetValues+0x2b8>)
 8003b64:	801a      	strh	r2, [r3, #0]
    temp=temp<<8;
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <BSP_Gyroscope_GetValues+0x2b8>)
 8003b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	4b4f      	ldr	r3, [pc, #316]	; (8003cb0 <BSP_Gyroscope_GetValues+0x2b8>)
 8003b72:	801a      	strh	r2, [r3, #0]

    (hi2c->Memaddress)=0x42;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2242      	movs	r2, #66	; 0x42
 8003b78:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x42, 1, buf_1, 1, 50) != HAL_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2232      	movs	r2, #50	; 0x32
 8003b7e:	9202      	str	r2, [sp, #8]
 8003b80:	2201      	movs	r2, #1
 8003b82:	9201      	str	r2, [sp, #4]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2301      	movs	r3, #1
 8003b88:	2242      	movs	r2, #66	; 0x42
 8003b8a:	21d0      	movs	r1, #208	; 0xd0
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7fd fe2d 	bl	80017ec <HAL_I2C_Mem_Read>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <BSP_Gyroscope_GetValues+0x1a4>
    {
    	return ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e394      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    // Wait the end of transfer

    TIMER_Simulator_Var = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003ba0:	bf00      	nop
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d006      	beq.n	8003bbc <BSP_Gyroscope_GetValues+0x1c4>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4a3c      	ldr	r2, [pc, #240]	; (8003ca8 <BSP_Gyroscope_GetValues+0x2b0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d9f2      	bls.n	8003ba2 <BSP_Gyroscope_GetValues+0x1aa>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4a3b      	ldr	r2, [pc, #236]	; (8003cac <BSP_Gyroscope_GetValues+0x2b4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <BSP_Gyroscope_GetValues+0x1d0>
    {
        return ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e37e      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    temp=temp | (*buf_1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b21a      	sxth	r2, r3
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <BSP_Gyroscope_GetValues+0x2b8>)
 8003bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <BSP_Gyroscope_GetValues+0x2b8>)
 8003bda:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x43;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2243      	movs	r2, #67	; 0x43
 8003be0:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x43, 1, buf_1, 1, 50) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2232      	movs	r2, #50	; 0x32
 8003be6:	9202      	str	r2, [sp, #8]
 8003be8:	2201      	movs	r2, #1
 8003bea:	9201      	str	r2, [sp, #4]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	2243      	movs	r2, #67	; 0x43
 8003bf2:	21d0      	movs	r1, #208	; 0xd0
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7fd fdf9 	bl	80017ec <HAL_I2C_Mem_Read>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <BSP_Gyroscope_GetValues+0x20c>
    {
    	return ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e360      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003c08:	bf00      	nop
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d006      	beq.n	8003c24 <BSP_Gyroscope_GetValues+0x22c>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <BSP_Gyroscope_GetValues+0x2b0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d9f2      	bls.n	8003c0a <BSP_Gyroscope_GetValues+0x212>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4a21      	ldr	r2, [pc, #132]	; (8003cac <BSP_Gyroscope_GetValues+0x2b4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <BSP_Gyroscope_GetValues+0x238>
    {
        return ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e34a      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    gyr_x=gyr_x|(*buf_1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	4b1f      	ldr	r3, [pc, #124]	; (8003cb4 <BSP_Gyroscope_GetValues+0x2bc>)
 8003c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <BSP_Gyroscope_GetValues+0x2bc>)
 8003c42:	801a      	strh	r2, [r3, #0]
    gyr_x=gyr_x<<8;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <BSP_Gyroscope_GetValues+0x2bc>)
 8003c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	b21a      	sxth	r2, r3
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <BSP_Gyroscope_GetValues+0x2bc>)
 8003c50:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x44;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2244      	movs	r2, #68	; 0x44
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x44, 1, buf_1, 1, 50) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2232      	movs	r2, #50	; 0x32
 8003c5c:	9202      	str	r2, [sp, #8]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	9201      	str	r2, [sp, #4]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2301      	movs	r3, #1
 8003c66:	2244      	movs	r2, #68	; 0x44
 8003c68:	21d0      	movs	r1, #208	; 0xd0
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7fd fdbe 	bl	80017ec <HAL_I2C_Mem_Read>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <BSP_Gyroscope_GetValues+0x282>
    {
    	return ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e325      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003c7e:	bf00      	nop
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d006      	beq.n	8003c9a <BSP_Gyroscope_GetValues+0x2a2>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <BSP_Gyroscope_GetValues+0x2b0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d9f2      	bls.n	8003c80 <BSP_Gyroscope_GetValues+0x288>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a03      	ldr	r2, [pc, #12]	; (8003cac <BSP_Gyroscope_GetValues+0x2b4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10a      	bne.n	8003cb8 <BSP_Gyroscope_GetValues+0x2c0>
    {
        return ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e30f      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
 8003ca6:	bf00      	nop
 8003ca8:	000ffffe 	.word	0x000ffffe
 8003cac:	000fffff 	.word	0x000fffff
 8003cb0:	20000164 	.word	0x20000164
 8003cb4:	2000015e 	.word	0x2000015e
    }
    gyr_x=gyr_x | (*buf_1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	4b9a      	ldr	r3, [pc, #616]	; (8003f28 <BSP_Gyroscope_GetValues+0x530>)
 8003cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b21a      	sxth	r2, r3
 8003cc8:	4b97      	ldr	r3, [pc, #604]	; (8003f28 <BSP_Gyroscope_GetValues+0x530>)
 8003cca:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x45;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2245      	movs	r2, #69	; 0x45
 8003cd0:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x45, 1, buf_1, 1, 50) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2232      	movs	r2, #50	; 0x32
 8003cd6:	9202      	str	r2, [sp, #8]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	9201      	str	r2, [sp, #4]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2301      	movs	r3, #1
 8003ce0:	2245      	movs	r2, #69	; 0x45
 8003ce2:	21d0      	movs	r1, #208	; 0xd0
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7fd fd81 	bl	80017ec <HAL_I2C_Mem_Read>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <BSP_Gyroscope_GetValues+0x2fc>
    {
    	return ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e2e8      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003cf8:	bf00      	nop
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d006      	beq.n	8003d14 <BSP_Gyroscope_GetValues+0x31c>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	4a87      	ldr	r2, [pc, #540]	; (8003f2c <BSP_Gyroscope_GetValues+0x534>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d9f2      	bls.n	8003cfa <BSP_Gyroscope_GetValues+0x302>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4a86      	ldr	r2, [pc, #536]	; (8003f30 <BSP_Gyroscope_GetValues+0x538>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <BSP_Gyroscope_GetValues+0x328>
    {
        return ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e2d2      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    gyr_y=gyr_y|(*buf_1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b21a      	sxth	r2, r3
 8003d26:	4b83      	ldr	r3, [pc, #524]	; (8003f34 <BSP_Gyroscope_GetValues+0x53c>)
 8003d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	b21a      	sxth	r2, r3
 8003d30:	4b80      	ldr	r3, [pc, #512]	; (8003f34 <BSP_Gyroscope_GetValues+0x53c>)
 8003d32:	801a      	strh	r2, [r3, #0]
    gyr_y=gyr_y<<8;
 8003d34:	4b7f      	ldr	r3, [pc, #508]	; (8003f34 <BSP_Gyroscope_GetValues+0x53c>)
 8003d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	b21a      	sxth	r2, r3
 8003d3e:	4b7d      	ldr	r3, [pc, #500]	; (8003f34 <BSP_Gyroscope_GetValues+0x53c>)
 8003d40:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x46;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2246      	movs	r2, #70	; 0x46
 8003d46:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x46, 1, buf_1, 1, 50) != HAL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2232      	movs	r2, #50	; 0x32
 8003d4c:	9202      	str	r2, [sp, #8]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2301      	movs	r3, #1
 8003d56:	2246      	movs	r2, #70	; 0x46
 8003d58:	21d0      	movs	r1, #208	; 0xd0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7fd fd46 	bl	80017ec <HAL_I2C_Mem_Read>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <BSP_Gyroscope_GetValues+0x372>
    {
    	return ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e2ad      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003d6e:	bf00      	nop
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d006      	beq.n	8003d8a <BSP_Gyroscope_GetValues+0x392>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4a69      	ldr	r2, [pc, #420]	; (8003f2c <BSP_Gyroscope_GetValues+0x534>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d9f2      	bls.n	8003d70 <BSP_Gyroscope_GetValues+0x378>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	; (8003f30 <BSP_Gyroscope_GetValues+0x538>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d101      	bne.n	8003d96 <BSP_Gyroscope_GetValues+0x39e>
    {
        return ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e297      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    gyr_y= gyr_y|(*buf_1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b21a      	sxth	r2, r3
 8003d9c:	4b65      	ldr	r3, [pc, #404]	; (8003f34 <BSP_Gyroscope_GetValues+0x53c>)
 8003d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b21a      	sxth	r2, r3
 8003da6:	4b63      	ldr	r3, [pc, #396]	; (8003f34 <BSP_Gyroscope_GetValues+0x53c>)
 8003da8:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x47;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2247      	movs	r2, #71	; 0x47
 8003dae:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x47, 1, buf_1, 1, 50) != HAL_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2232      	movs	r2, #50	; 0x32
 8003db4:	9202      	str	r2, [sp, #8]
 8003db6:	2201      	movs	r2, #1
 8003db8:	9201      	str	r2, [sp, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	2247      	movs	r2, #71	; 0x47
 8003dc0:	21d0      	movs	r1, #208	; 0xd0
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7fd fd12 	bl	80017ec <HAL_I2C_Mem_Read>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <BSP_Gyroscope_GetValues+0x3da>
    {
    	return ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e279      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003dd6:	bf00      	nop
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d006      	beq.n	8003df2 <BSP_Gyroscope_GetValues+0x3fa>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	3301      	adds	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4a4f      	ldr	r2, [pc, #316]	; (8003f2c <BSP_Gyroscope_GetValues+0x534>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d9f2      	bls.n	8003dd8 <BSP_Gyroscope_GetValues+0x3e0>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4a4e      	ldr	r2, [pc, #312]	; (8003f30 <BSP_Gyroscope_GetValues+0x538>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <BSP_Gyroscope_GetValues+0x406>
    {
        return ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e263      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    gyr_z=gyr_z|(*buf_1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b21a      	sxth	r2, r3
 8003e04:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <BSP_Gyroscope_GetValues+0x540>)
 8003e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b21a      	sxth	r2, r3
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <BSP_Gyroscope_GetValues+0x540>)
 8003e10:	801a      	strh	r2, [r3, #0]
    gyr_z=gyr_z<<8;
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <BSP_Gyroscope_GetValues+0x540>)
 8003e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	b21a      	sxth	r2, r3
 8003e1c:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <BSP_Gyroscope_GetValues+0x540>)
 8003e1e:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x48;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2248      	movs	r2, #72	; 0x48
 8003e24:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x48, 1, buf_1, 1, 50) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2232      	movs	r2, #50	; 0x32
 8003e2a:	9202      	str	r2, [sp, #8]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	9201      	str	r2, [sp, #4]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2301      	movs	r3, #1
 8003e34:	2248      	movs	r2, #72	; 0x48
 8003e36:	21d0      	movs	r1, #208	; 0xd0
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7fd fcd7 	bl	80017ec <HAL_I2C_Mem_Read>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <BSP_Gyroscope_GetValues+0x450>
    {
    	return ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e23e      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003e4c:	bf00      	nop
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d006      	beq.n	8003e68 <BSP_Gyroscope_GetValues+0x470>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4a32      	ldr	r2, [pc, #200]	; (8003f2c <BSP_Gyroscope_GetValues+0x534>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d9f2      	bls.n	8003e4e <BSP_Gyroscope_GetValues+0x456>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <BSP_Gyroscope_GetValues+0x538>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <BSP_Gyroscope_GetValues+0x47c>
    {
        return ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e228      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    gyr_z =gyr_z|(*buf_1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b21a      	sxth	r2, r3
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <BSP_Gyroscope_GetValues+0x540>)
 8003e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	b21a      	sxth	r2, r3
 8003e84:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <BSP_Gyroscope_GetValues+0x540>)
 8003e86:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x3B;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	223b      	movs	r2, #59	; 0x3b
 8003e8c:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3B, 1, buf_1, 1, 50) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2232      	movs	r2, #50	; 0x32
 8003e92:	9202      	str	r2, [sp, #8]
 8003e94:	2201      	movs	r2, #1
 8003e96:	9201      	str	r2, [sp, #4]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	223b      	movs	r2, #59	; 0x3b
 8003e9e:	21d0      	movs	r1, #208	; 0xd0
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7fd fca3 	bl	80017ec <HAL_I2C_Mem_Read>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <BSP_Gyroscope_GetValues+0x4b8>
    {
    	return ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e20a      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003eb4:	bf00      	nop
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d006      	beq.n	8003ed0 <BSP_Gyroscope_GetValues+0x4d8>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <BSP_Gyroscope_GetValues+0x534>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d9f2      	bls.n	8003eb6 <BSP_Gyroscope_GetValues+0x4be>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <BSP_Gyroscope_GetValues+0x538>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <BSP_Gyroscope_GetValues+0x4e4>
    {
        return ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e1f4      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    acc_x=acc_x|(*buf_1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b21a      	sxth	r2, r3
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <BSP_Gyroscope_GetValues+0x544>)
 8003ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b21a      	sxth	r2, r3
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <BSP_Gyroscope_GetValues+0x544>)
 8003eee:	801a      	strh	r2, [r3, #0]
    acc_x=acc_x<<8;
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <BSP_Gyroscope_GetValues+0x544>)
 8003ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	b21a      	sxth	r2, r3
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <BSP_Gyroscope_GetValues+0x544>)
 8003efc:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x3C;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	223c      	movs	r2, #60	; 0x3c
 8003f02:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3C, 1, buf_1, 1, 50) != HAL_OK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2232      	movs	r2, #50	; 0x32
 8003f08:	9202      	str	r2, [sp, #8]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	9201      	str	r2, [sp, #4]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2301      	movs	r3, #1
 8003f12:	223c      	movs	r2, #60	; 0x3c
 8003f14:	21d0      	movs	r1, #208	; 0xd0
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7fd fc68 	bl	80017ec <HAL_I2C_Mem_Read>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <BSP_Gyroscope_GetValues+0x548>
    {
    	return ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1cf      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
 8003f26:	bf00      	nop
 8003f28:	2000015e 	.word	0x2000015e
 8003f2c:	000ffffe 	.word	0x000ffffe
 8003f30:	000fffff 	.word	0x000fffff
 8003f34:	20000160 	.word	0x20000160
 8003f38:	20000162 	.word	0x20000162
 8003f3c:	20000158 	.word	0x20000158
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003f44:	bf00      	nop
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d006      	beq.n	8003f60 <BSP_Gyroscope_GetValues+0x568>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3301      	adds	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4a8f      	ldr	r2, [pc, #572]	; (8004198 <BSP_Gyroscope_GetValues+0x7a0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d9f2      	bls.n	8003f46 <BSP_Gyroscope_GetValues+0x54e>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4a8e      	ldr	r2, [pc, #568]	; (800419c <BSP_Gyroscope_GetValues+0x7a4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <BSP_Gyroscope_GetValues+0x574>
    {
        return ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e1ac      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    acc_x = acc_x|(*buf_1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b21a      	sxth	r2, r3
 8003f72:	4b8b      	ldr	r3, [pc, #556]	; (80041a0 <BSP_Gyroscope_GetValues+0x7a8>)
 8003f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	b21a      	sxth	r2, r3
 8003f7c:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <BSP_Gyroscope_GetValues+0x7a8>)
 8003f7e:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x3D;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	223d      	movs	r2, #61	; 0x3d
 8003f84:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3D, 1, buf_1, 1, 50) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2232      	movs	r2, #50	; 0x32
 8003f8a:	9202      	str	r2, [sp, #8]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	9201      	str	r2, [sp, #4]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2301      	movs	r3, #1
 8003f94:	223d      	movs	r2, #61	; 0x3d
 8003f96:	21d0      	movs	r1, #208	; 0xd0
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7fd fc27 	bl	80017ec <HAL_I2C_Mem_Read>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <BSP_Gyroscope_GetValues+0x5b0>
    {
    	return ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e18e      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /*Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003fac:	bf00      	nop
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d006      	beq.n	8003fc8 <BSP_Gyroscope_GetValues+0x5d0>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4a75      	ldr	r2, [pc, #468]	; (8004198 <BSP_Gyroscope_GetValues+0x7a0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d9f2      	bls.n	8003fae <BSP_Gyroscope_GetValues+0x5b6>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4a74      	ldr	r2, [pc, #464]	; (800419c <BSP_Gyroscope_GetValues+0x7a4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <BSP_Gyroscope_GetValues+0x5dc>
    {
        return ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e178      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    acc_y=acc_y|(*buf_1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	b21a      	sxth	r2, r3
 8003fda:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <BSP_Gyroscope_GetValues+0x7ac>)
 8003fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	b21a      	sxth	r2, r3
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <BSP_Gyroscope_GetValues+0x7ac>)
 8003fe6:	801a      	strh	r2, [r3, #0]
    acc_y=acc_y<<8;
 8003fe8:	4b6e      	ldr	r3, [pc, #440]	; (80041a4 <BSP_Gyroscope_GetValues+0x7ac>)
 8003fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	b21a      	sxth	r2, r3
 8003ff2:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <BSP_Gyroscope_GetValues+0x7ac>)
 8003ff4:	801a      	strh	r2, [r3, #0]

    (hi2c->Memaddress)=0x3E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	223e      	movs	r2, #62	; 0x3e
 8003ffa:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3E, 1, buf_1, 1, 50) != HAL_OK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2232      	movs	r2, #50	; 0x32
 8004000:	9202      	str	r2, [sp, #8]
 8004002:	2201      	movs	r2, #1
 8004004:	9201      	str	r2, [sp, #4]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2301      	movs	r3, #1
 800400a:	223e      	movs	r2, #62	; 0x3e
 800400c:	21d0      	movs	r1, #208	; 0xd0
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7fd fbec 	bl	80017ec <HAL_I2C_Mem_Read>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <BSP_Gyroscope_GetValues+0x626>
    {
    	return ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e153      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004022:	bf00      	nop
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d006      	beq.n	800403e <BSP_Gyroscope_GetValues+0x646>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3301      	adds	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4a57      	ldr	r2, [pc, #348]	; (8004198 <BSP_Gyroscope_GetValues+0x7a0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d9f2      	bls.n	8004024 <BSP_Gyroscope_GetValues+0x62c>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4a56      	ldr	r2, [pc, #344]	; (800419c <BSP_Gyroscope_GetValues+0x7a4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <BSP_Gyroscope_GetValues+0x652>
    {
        return ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e13d      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    acc_y = acc_y|(*buf_1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b21a      	sxth	r2, r3
 8004050:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <BSP_Gyroscope_GetValues+0x7ac>)
 8004052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004056:	4313      	orrs	r3, r2
 8004058:	b21a      	sxth	r2, r3
 800405a:	4b52      	ldr	r3, [pc, #328]	; (80041a4 <BSP_Gyroscope_GetValues+0x7ac>)
 800405c:	801a      	strh	r2, [r3, #0]

    (hi2c->Memaddress)=0x3F;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	223f      	movs	r2, #63	; 0x3f
 8004062:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3F, 1, buf_1, 1, 50) != HAL_OK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2232      	movs	r2, #50	; 0x32
 8004068:	9202      	str	r2, [sp, #8]
 800406a:	2201      	movs	r2, #1
 800406c:	9201      	str	r2, [sp, #4]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	2301      	movs	r3, #1
 8004072:	223f      	movs	r2, #63	; 0x3f
 8004074:	21d0      	movs	r1, #208	; 0xd0
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7fd fbb8 	bl	80017ec <HAL_I2C_Mem_Read>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <BSP_Gyroscope_GetValues+0x68e>
    {
    	return ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e11f      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 800408a:	bf00      	nop
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b20      	cmp	r3, #32
 8004096:	d006      	beq.n	80040a6 <BSP_Gyroscope_GetValues+0x6ae>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3301      	adds	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4a3d      	ldr	r2, [pc, #244]	; (8004198 <BSP_Gyroscope_GetValues+0x7a0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d9f2      	bls.n	800408c <BSP_Gyroscope_GetValues+0x694>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4a3c      	ldr	r2, [pc, #240]	; (800419c <BSP_Gyroscope_GetValues+0x7a4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <BSP_Gyroscope_GetValues+0x6ba>
    {
        return ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e109      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    acc_z= acc_z|(*buf_1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <BSP_Gyroscope_GetValues+0x7b0>)
 80040ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040be:	4313      	orrs	r3, r2
 80040c0:	b21a      	sxth	r2, r3
 80040c2:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <BSP_Gyroscope_GetValues+0x7b0>)
 80040c4:	801a      	strh	r2, [r3, #0]
    acc_z=acc_z<<8;
 80040c6:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <BSP_Gyroscope_GetValues+0x7b0>)
 80040c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	b21a      	sxth	r2, r3
 80040d0:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <BSP_Gyroscope_GetValues+0x7b0>)
 80040d2:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x40;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x40, 1, buf_1, 1, 50) != HAL_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2232      	movs	r2, #50	; 0x32
 80040de:	9202      	str	r2, [sp, #8]
 80040e0:	2201      	movs	r2, #1
 80040e2:	9201      	str	r2, [sp, #4]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	2301      	movs	r3, #1
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	21d0      	movs	r1, #208	; 0xd0
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7fd fb7d 	bl	80017ec <HAL_I2C_Mem_Read>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <BSP_Gyroscope_GetValues+0x704>
    {
    	return ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0e4      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004100:	bf00      	nop
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	d006      	beq.n	800411c <BSP_Gyroscope_GetValues+0x724>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3301      	adds	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4a20      	ldr	r2, [pc, #128]	; (8004198 <BSP_Gyroscope_GetValues+0x7a0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d9f2      	bls.n	8004102 <BSP_Gyroscope_GetValues+0x70a>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4a1f      	ldr	r2, [pc, #124]	; (800419c <BSP_Gyroscope_GetValues+0x7a4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <BSP_Gyroscope_GetValues+0x730>
    {
        return ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0ce      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
    }
    acc_z= acc_z|(*buf_1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b21a      	sxth	r2, r3
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <BSP_Gyroscope_GetValues+0x7b0>)
 8004130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004134:	4313      	orrs	r3, r2
 8004136:	b21a      	sxth	r2, r3
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <BSP_Gyroscope_GetValues+0x7b0>)
 800413a:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x68;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2268      	movs	r2, #104	; 0x68
 8004140:	651a      	str	r2, [r3, #80]	; 0x50

    *buf_1=0x07; // for writing 00000111 into configuration register
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2207      	movs	r2, #7
 8004146:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1C, 1, buf_1, 1, 50) != HAL_OK){
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2232      	movs	r2, #50	; 0x32
 800414c:	9202      	str	r2, [sp, #8]
 800414e:	2201      	movs	r2, #1
 8004150:	9201      	str	r2, [sp, #4]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2301      	movs	r3, #1
 8004156:	221c      	movs	r2, #28
 8004158:	21d0      	movs	r1, #208	; 0xd0
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7fd fa32 	bl	80015c4 <HAL_I2C_Mem_Write>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <BSP_Gyroscope_GetValues+0x772>
	     return ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0ad      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
	}
//     Wait the end of transfer

    TIMER_Simulator_Var = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 800416e:	bf00      	nop
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b20      	cmp	r3, #32
 800417a:	d006      	beq.n	800418a <BSP_Gyroscope_GetValues+0x792>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3301      	adds	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <BSP_Gyroscope_GetValues+0x7a0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d9f2      	bls.n	8004170 <BSP_Gyroscope_GetValues+0x778>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4a03      	ldr	r2, [pc, #12]	; (800419c <BSP_Gyroscope_GetValues+0x7a4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10c      	bne.n	80041ac <BSP_Gyroscope_GetValues+0x7b4>
    {
        return ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e097      	b.n	80042c6 <BSP_Gyroscope_GetValues+0x8ce>
 8004196:	bf00      	nop
 8004198:	000ffffe 	.word	0x000ffffe
 800419c:	000fffff 	.word	0x000fffff
 80041a0:	20000158 	.word	0x20000158
 80041a4:	2000015a 	.word	0x2000015a
 80041a8:	2000015c 	.word	0x2000015c
    }
    addr = buf_1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <BSP_Gyroscope_GetValues+0x8e8>)
 80041b2:	701a      	strb	r2, [r3, #0]



    BSP_GyrFetchStructure->BSP_Acc_x=((float)acc_x)/16384.0;
 80041b4:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <BSP_Gyroscope_GetValues+0x8ec>)
 80041b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c2:	ee17 0a90 	vmov	r0, s15
 80041c6:	f7fc f967 	bl	8000498 <__aeabi_f2d>
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <BSP_Gyroscope_GetValues+0x8f0>)
 80041d0:	f7fc fae4 	bl	800079c <__aeabi_ddiv>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	e9c1 2300 	strd	r2, r3, [r1]
    BSP_GyrFetchStructure->BSP_Acc_y=((float)acc_y)/16384.0;
 80041de:	4b43      	ldr	r3, [pc, #268]	; (80042ec <BSP_Gyroscope_GetValues+0x8f4>)
 80041e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ec:	ee17 0a90 	vmov	r0, s15
 80041f0:	f7fc f952 	bl	8000498 <__aeabi_f2d>
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <BSP_Gyroscope_GetValues+0x8f0>)
 80041fa:	f7fc facf 	bl	800079c <__aeabi_ddiv>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	e9c1 2302 	strd	r2, r3, [r1, #8]
    BSP_GyrFetchStructure->BSP_Acc_z=((float)acc_z)/16384.0;
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <BSP_Gyroscope_GetValues+0x8f8>)
 800420a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004216:	ee17 0a90 	vmov	r0, s15
 800421a:	f7fc f93d 	bl	8000498 <__aeabi_f2d>
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <BSP_Gyroscope_GetValues+0x8f0>)
 8004224:	f7fc faba 	bl	800079c <__aeabi_ddiv>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    BSP_GyrFetchStructure->BSP_Temp=temp/340.0+ 36.53;
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <BSP_Gyroscope_GetValues+0x8fc>)
 8004234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc f91b 	bl	8000474 <__aeabi_i2d>
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <BSP_Gyroscope_GetValues+0x900>)
 8004244:	f7fc faaa 	bl	800079c <__aeabi_ddiv>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	a31f      	add	r3, pc, #124	; (adr r3, 80042d0 <BSP_Gyroscope_GetValues+0x8d8>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f7fb ffc1 	bl	80001dc <__adddf3>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	e9c1 2306 	strd	r2, r3, [r1, #24]
    BSP_GyrFetchStructure->BSP_Gyr_x=gyr_x/131.0;
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <BSP_Gyroscope_GetValues+0x904>)
 8004266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc f902 	bl	8000474 <__aeabi_i2d>
 8004270:	a319      	add	r3, pc, #100	; (adr r3, 80042d8 <BSP_Gyroscope_GetValues+0x8e0>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f7fc fa91 	bl	800079c <__aeabi_ddiv>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	e9c1 2308 	strd	r2, r3, [r1, #32]
    BSP_GyrFetchStructure->BSP_Gyr_y=gyr_y/131.0;
 8004284:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <BSP_Gyroscope_GetValues+0x908>)
 8004286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f8f2 	bl	8000474 <__aeabi_i2d>
 8004290:	a311      	add	r3, pc, #68	; (adr r3, 80042d8 <BSP_Gyroscope_GetValues+0x8e0>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f7fc fa81 	bl	800079c <__aeabi_ddiv>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    BSP_GyrFetchStructure->BSP_Gyr_z=gyr_z/131.0;
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <BSP_Gyroscope_GetValues+0x90c>)
 80042a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc f8e2 	bl	8000474 <__aeabi_i2d>
 80042b0:	a309      	add	r3, pc, #36	; (adr r3, 80042d8 <BSP_Gyroscope_GetValues+0x8e0>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc fa71 	bl	800079c <__aeabi_ddiv>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30


    return SUCCESS;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	0a3d70a4 	.word	0x0a3d70a4
 80042d4:	404243d7 	.word	0x404243d7
 80042d8:	00000000 	.word	0x00000000
 80042dc:	40606000 	.word	0x40606000
 80042e0:	20000166 	.word	0x20000166
 80042e4:	20000158 	.word	0x20000158
 80042e8:	40d00000 	.word	0x40d00000
 80042ec:	2000015a 	.word	0x2000015a
 80042f0:	2000015c 	.word	0x2000015c
 80042f4:	20000164 	.word	0x20000164
 80042f8:	40754000 	.word	0x40754000
 80042fc:	2000015e 	.word	0x2000015e
 8004300:	20000160 	.word	0x20000160
 8004304:	20000162 	.word	0x20000162

08004308 <__errno>:
 8004308:	4b01      	ldr	r3, [pc, #4]	; (8004310 <__errno+0x8>)
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000000c 	.word	0x2000000c

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4d0d      	ldr	r5, [pc, #52]	; (800434c <__libc_init_array+0x38>)
 8004318:	4c0d      	ldr	r4, [pc, #52]	; (8004350 <__libc_init_array+0x3c>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	2600      	movs	r6, #0
 8004320:	42a6      	cmp	r6, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	4d0b      	ldr	r5, [pc, #44]	; (8004354 <__libc_init_array+0x40>)
 8004326:	4c0c      	ldr	r4, [pc, #48]	; (8004358 <__libc_init_array+0x44>)
 8004328:	f000 ff3c 	bl	80051a4 <_init>
 800432c:	1b64      	subs	r4, r4, r5
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2600      	movs	r6, #0
 8004332:	42a6      	cmp	r6, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	f855 3b04 	ldr.w	r3, [r5], #4
 800433c:	4798      	blx	r3
 800433e:	3601      	adds	r6, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	f855 3b04 	ldr.w	r3, [r5], #4
 8004346:	4798      	blx	r3
 8004348:	3601      	adds	r6, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	08005230 	.word	0x08005230
 8004350:	08005230 	.word	0x08005230
 8004354:	08005230 	.word	0x08005230
 8004358:	08005234 	.word	0x08005234

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <pow>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	ed2d 8b02 	vpush	{d8}
 8004372:	eeb0 8a40 	vmov.f32	s16, s0
 8004376:	eef0 8a60 	vmov.f32	s17, s1
 800437a:	ec55 4b11 	vmov	r4, r5, d1
 800437e:	f000 f867 	bl	8004450 <__ieee754_pow>
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	4620      	mov	r0, r4
 8004388:	4629      	mov	r1, r5
 800438a:	ec57 6b10 	vmov	r6, r7, d0
 800438e:	f7fc fb75 	bl	8000a7c <__aeabi_dcmpun>
 8004392:	2800      	cmp	r0, #0
 8004394:	d13b      	bne.n	800440e <pow+0xa2>
 8004396:	ec51 0b18 	vmov	r0, r1, d8
 800439a:	2200      	movs	r2, #0
 800439c:	2300      	movs	r3, #0
 800439e:	f7fc fb3b 	bl	8000a18 <__aeabi_dcmpeq>
 80043a2:	b1b8      	cbz	r0, 80043d4 <pow+0x68>
 80043a4:	2200      	movs	r2, #0
 80043a6:	2300      	movs	r3, #0
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fc fb34 	bl	8000a18 <__aeabi_dcmpeq>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d146      	bne.n	8004442 <pow+0xd6>
 80043b4:	ec45 4b10 	vmov	d0, r4, r5
 80043b8:	f000 fe63 	bl	8005082 <finite>
 80043bc:	b338      	cbz	r0, 800440e <pow+0xa2>
 80043be:	2200      	movs	r2, #0
 80043c0:	2300      	movs	r3, #0
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7fc fb31 	bl	8000a2c <__aeabi_dcmplt>
 80043ca:	b300      	cbz	r0, 800440e <pow+0xa2>
 80043cc:	f7ff ff9c 	bl	8004308 <__errno>
 80043d0:	2322      	movs	r3, #34	; 0x22
 80043d2:	e01b      	b.n	800440c <pow+0xa0>
 80043d4:	ec47 6b10 	vmov	d0, r6, r7
 80043d8:	f000 fe53 	bl	8005082 <finite>
 80043dc:	b9e0      	cbnz	r0, 8004418 <pow+0xac>
 80043de:	eeb0 0a48 	vmov.f32	s0, s16
 80043e2:	eef0 0a68 	vmov.f32	s1, s17
 80043e6:	f000 fe4c 	bl	8005082 <finite>
 80043ea:	b1a8      	cbz	r0, 8004418 <pow+0xac>
 80043ec:	ec45 4b10 	vmov	d0, r4, r5
 80043f0:	f000 fe47 	bl	8005082 <finite>
 80043f4:	b180      	cbz	r0, 8004418 <pow+0xac>
 80043f6:	4632      	mov	r2, r6
 80043f8:	463b      	mov	r3, r7
 80043fa:	4630      	mov	r0, r6
 80043fc:	4639      	mov	r1, r7
 80043fe:	f7fc fb3d 	bl	8000a7c <__aeabi_dcmpun>
 8004402:	2800      	cmp	r0, #0
 8004404:	d0e2      	beq.n	80043cc <pow+0x60>
 8004406:	f7ff ff7f 	bl	8004308 <__errno>
 800440a:	2321      	movs	r3, #33	; 0x21
 800440c:	6003      	str	r3, [r0, #0]
 800440e:	ecbd 8b02 	vpop	{d8}
 8004412:	ec47 6b10 	vmov	d0, r6, r7
 8004416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004418:	2200      	movs	r2, #0
 800441a:	2300      	movs	r3, #0
 800441c:	4630      	mov	r0, r6
 800441e:	4639      	mov	r1, r7
 8004420:	f7fc fafa 	bl	8000a18 <__aeabi_dcmpeq>
 8004424:	2800      	cmp	r0, #0
 8004426:	d0f2      	beq.n	800440e <pow+0xa2>
 8004428:	eeb0 0a48 	vmov.f32	s0, s16
 800442c:	eef0 0a68 	vmov.f32	s1, s17
 8004430:	f000 fe27 	bl	8005082 <finite>
 8004434:	2800      	cmp	r0, #0
 8004436:	d0ea      	beq.n	800440e <pow+0xa2>
 8004438:	ec45 4b10 	vmov	d0, r4, r5
 800443c:	f000 fe21 	bl	8005082 <finite>
 8004440:	e7c3      	b.n	80043ca <pow+0x5e>
 8004442:	4f01      	ldr	r7, [pc, #4]	; (8004448 <pow+0xdc>)
 8004444:	2600      	movs	r6, #0
 8004446:	e7e2      	b.n	800440e <pow+0xa2>
 8004448:	3ff00000 	.word	0x3ff00000
 800444c:	00000000 	.word	0x00000000

08004450 <__ieee754_pow>:
 8004450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004454:	ed2d 8b06 	vpush	{d8-d10}
 8004458:	b089      	sub	sp, #36	; 0x24
 800445a:	ed8d 1b00 	vstr	d1, [sp]
 800445e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004462:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004466:	ea58 0102 	orrs.w	r1, r8, r2
 800446a:	ec57 6b10 	vmov	r6, r7, d0
 800446e:	d115      	bne.n	800449c <__ieee754_pow+0x4c>
 8004470:	19b3      	adds	r3, r6, r6
 8004472:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004476:	4152      	adcs	r2, r2
 8004478:	4299      	cmp	r1, r3
 800447a:	4b89      	ldr	r3, [pc, #548]	; (80046a0 <__ieee754_pow+0x250>)
 800447c:	4193      	sbcs	r3, r2
 800447e:	f080 84d2 	bcs.w	8004e26 <__ieee754_pow+0x9d6>
 8004482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004486:	4630      	mov	r0, r6
 8004488:	4639      	mov	r1, r7
 800448a:	f7fb fea7 	bl	80001dc <__adddf3>
 800448e:	ec41 0b10 	vmov	d0, r0, r1
 8004492:	b009      	add	sp, #36	; 0x24
 8004494:	ecbd 8b06 	vpop	{d8-d10}
 8004498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449c:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <__ieee754_pow+0x254>)
 800449e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80044a2:	429c      	cmp	r4, r3
 80044a4:	ee10 aa10 	vmov	sl, s0
 80044a8:	463d      	mov	r5, r7
 80044aa:	dc06      	bgt.n	80044ba <__ieee754_pow+0x6a>
 80044ac:	d101      	bne.n	80044b2 <__ieee754_pow+0x62>
 80044ae:	2e00      	cmp	r6, #0
 80044b0:	d1e7      	bne.n	8004482 <__ieee754_pow+0x32>
 80044b2:	4598      	cmp	r8, r3
 80044b4:	dc01      	bgt.n	80044ba <__ieee754_pow+0x6a>
 80044b6:	d10f      	bne.n	80044d8 <__ieee754_pow+0x88>
 80044b8:	b172      	cbz	r2, 80044d8 <__ieee754_pow+0x88>
 80044ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80044be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80044c2:	ea55 050a 	orrs.w	r5, r5, sl
 80044c6:	d1dc      	bne.n	8004482 <__ieee754_pow+0x32>
 80044c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80044cc:	18db      	adds	r3, r3, r3
 80044ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80044d2:	4152      	adcs	r2, r2
 80044d4:	429d      	cmp	r5, r3
 80044d6:	e7d0      	b.n	800447a <__ieee754_pow+0x2a>
 80044d8:	2d00      	cmp	r5, #0
 80044da:	da3b      	bge.n	8004554 <__ieee754_pow+0x104>
 80044dc:	4b72      	ldr	r3, [pc, #456]	; (80046a8 <__ieee754_pow+0x258>)
 80044de:	4598      	cmp	r8, r3
 80044e0:	dc51      	bgt.n	8004586 <__ieee754_pow+0x136>
 80044e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80044e6:	4598      	cmp	r8, r3
 80044e8:	f340 84ac 	ble.w	8004e44 <__ieee754_pow+0x9f4>
 80044ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80044f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80044f4:	2b14      	cmp	r3, #20
 80044f6:	dd0f      	ble.n	8004518 <__ieee754_pow+0xc8>
 80044f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80044fc:	fa22 f103 	lsr.w	r1, r2, r3
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	4293      	cmp	r3, r2
 8004506:	f040 849d 	bne.w	8004e44 <__ieee754_pow+0x9f4>
 800450a:	f001 0101 	and.w	r1, r1, #1
 800450e:	f1c1 0302 	rsb	r3, r1, #2
 8004512:	9304      	str	r3, [sp, #16]
 8004514:	b182      	cbz	r2, 8004538 <__ieee754_pow+0xe8>
 8004516:	e05f      	b.n	80045d8 <__ieee754_pow+0x188>
 8004518:	2a00      	cmp	r2, #0
 800451a:	d15b      	bne.n	80045d4 <__ieee754_pow+0x184>
 800451c:	f1c3 0314 	rsb	r3, r3, #20
 8004520:	fa48 f103 	asr.w	r1, r8, r3
 8004524:	fa01 f303 	lsl.w	r3, r1, r3
 8004528:	4543      	cmp	r3, r8
 800452a:	f040 8488 	bne.w	8004e3e <__ieee754_pow+0x9ee>
 800452e:	f001 0101 	and.w	r1, r1, #1
 8004532:	f1c1 0302 	rsb	r3, r1, #2
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	4b5c      	ldr	r3, [pc, #368]	; (80046ac <__ieee754_pow+0x25c>)
 800453a:	4598      	cmp	r8, r3
 800453c:	d132      	bne.n	80045a4 <__ieee754_pow+0x154>
 800453e:	f1b9 0f00 	cmp.w	r9, #0
 8004542:	f280 8478 	bge.w	8004e36 <__ieee754_pow+0x9e6>
 8004546:	4959      	ldr	r1, [pc, #356]	; (80046ac <__ieee754_pow+0x25c>)
 8004548:	4632      	mov	r2, r6
 800454a:	463b      	mov	r3, r7
 800454c:	2000      	movs	r0, #0
 800454e:	f7fc f925 	bl	800079c <__aeabi_ddiv>
 8004552:	e79c      	b.n	800448e <__ieee754_pow+0x3e>
 8004554:	2300      	movs	r3, #0
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	2a00      	cmp	r2, #0
 800455a:	d13d      	bne.n	80045d8 <__ieee754_pow+0x188>
 800455c:	4b51      	ldr	r3, [pc, #324]	; (80046a4 <__ieee754_pow+0x254>)
 800455e:	4598      	cmp	r8, r3
 8004560:	d1ea      	bne.n	8004538 <__ieee754_pow+0xe8>
 8004562:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004566:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800456a:	ea53 030a 	orrs.w	r3, r3, sl
 800456e:	f000 845a 	beq.w	8004e26 <__ieee754_pow+0x9d6>
 8004572:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <__ieee754_pow+0x260>)
 8004574:	429c      	cmp	r4, r3
 8004576:	dd08      	ble.n	800458a <__ieee754_pow+0x13a>
 8004578:	f1b9 0f00 	cmp.w	r9, #0
 800457c:	f2c0 8457 	blt.w	8004e2e <__ieee754_pow+0x9de>
 8004580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004584:	e783      	b.n	800448e <__ieee754_pow+0x3e>
 8004586:	2302      	movs	r3, #2
 8004588:	e7e5      	b.n	8004556 <__ieee754_pow+0x106>
 800458a:	f1b9 0f00 	cmp.w	r9, #0
 800458e:	f04f 0000 	mov.w	r0, #0
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	f6bf af7a 	bge.w	800448e <__ieee754_pow+0x3e>
 800459a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800459e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80045a2:	e774      	b.n	800448e <__ieee754_pow+0x3e>
 80045a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80045a8:	d106      	bne.n	80045b8 <__ieee754_pow+0x168>
 80045aa:	4632      	mov	r2, r6
 80045ac:	463b      	mov	r3, r7
 80045ae:	4630      	mov	r0, r6
 80045b0:	4639      	mov	r1, r7
 80045b2:	f7fb ffc9 	bl	8000548 <__aeabi_dmul>
 80045b6:	e76a      	b.n	800448e <__ieee754_pow+0x3e>
 80045b8:	4b3e      	ldr	r3, [pc, #248]	; (80046b4 <__ieee754_pow+0x264>)
 80045ba:	4599      	cmp	r9, r3
 80045bc:	d10c      	bne.n	80045d8 <__ieee754_pow+0x188>
 80045be:	2d00      	cmp	r5, #0
 80045c0:	db0a      	blt.n	80045d8 <__ieee754_pow+0x188>
 80045c2:	ec47 6b10 	vmov	d0, r6, r7
 80045c6:	b009      	add	sp, #36	; 0x24
 80045c8:	ecbd 8b06 	vpop	{d8-d10}
 80045cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	f000 bc6c 	b.w	8004eac <__ieee754_sqrt>
 80045d4:	2300      	movs	r3, #0
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	ec47 6b10 	vmov	d0, r6, r7
 80045dc:	f000 fd48 	bl	8005070 <fabs>
 80045e0:	ec51 0b10 	vmov	r0, r1, d0
 80045e4:	f1ba 0f00 	cmp.w	sl, #0
 80045e8:	d129      	bne.n	800463e <__ieee754_pow+0x1ee>
 80045ea:	b124      	cbz	r4, 80045f6 <__ieee754_pow+0x1a6>
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <__ieee754_pow+0x25c>)
 80045ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d123      	bne.n	800463e <__ieee754_pow+0x1ee>
 80045f6:	f1b9 0f00 	cmp.w	r9, #0
 80045fa:	da05      	bge.n	8004608 <__ieee754_pow+0x1b8>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	2000      	movs	r0, #0
 8004602:	492a      	ldr	r1, [pc, #168]	; (80046ac <__ieee754_pow+0x25c>)
 8004604:	f7fc f8ca 	bl	800079c <__aeabi_ddiv>
 8004608:	2d00      	cmp	r5, #0
 800460a:	f6bf af40 	bge.w	800448e <__ieee754_pow+0x3e>
 800460e:	9b04      	ldr	r3, [sp, #16]
 8004610:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004614:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004618:	4323      	orrs	r3, r4
 800461a:	d108      	bne.n	800462e <__ieee754_pow+0x1de>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f7fb fdd8 	bl	80001d8 <__aeabi_dsub>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	e78f      	b.n	800454e <__ieee754_pow+0xfe>
 800462e:	9b04      	ldr	r3, [sp, #16]
 8004630:	2b01      	cmp	r3, #1
 8004632:	f47f af2c 	bne.w	800448e <__ieee754_pow+0x3e>
 8004636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800463a:	4619      	mov	r1, r3
 800463c:	e727      	b.n	800448e <__ieee754_pow+0x3e>
 800463e:	0feb      	lsrs	r3, r5, #31
 8004640:	3b01      	subs	r3, #1
 8004642:	9306      	str	r3, [sp, #24]
 8004644:	9a06      	ldr	r2, [sp, #24]
 8004646:	9b04      	ldr	r3, [sp, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	d102      	bne.n	8004652 <__ieee754_pow+0x202>
 800464c:	4632      	mov	r2, r6
 800464e:	463b      	mov	r3, r7
 8004650:	e7e6      	b.n	8004620 <__ieee754_pow+0x1d0>
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <__ieee754_pow+0x268>)
 8004654:	4598      	cmp	r8, r3
 8004656:	f340 80fb 	ble.w	8004850 <__ieee754_pow+0x400>
 800465a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800465e:	4598      	cmp	r8, r3
 8004660:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <__ieee754_pow+0x260>)
 8004662:	dd0c      	ble.n	800467e <__ieee754_pow+0x22e>
 8004664:	429c      	cmp	r4, r3
 8004666:	dc0f      	bgt.n	8004688 <__ieee754_pow+0x238>
 8004668:	f1b9 0f00 	cmp.w	r9, #0
 800466c:	da0f      	bge.n	800468e <__ieee754_pow+0x23e>
 800466e:	2000      	movs	r0, #0
 8004670:	b009      	add	sp, #36	; 0x24
 8004672:	ecbd 8b06 	vpop	{d8-d10}
 8004676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	f000 bcf0 	b.w	800505e <__math_oflow>
 800467e:	429c      	cmp	r4, r3
 8004680:	dbf2      	blt.n	8004668 <__ieee754_pow+0x218>
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <__ieee754_pow+0x25c>)
 8004684:	429c      	cmp	r4, r3
 8004686:	dd19      	ble.n	80046bc <__ieee754_pow+0x26c>
 8004688:	f1b9 0f00 	cmp.w	r9, #0
 800468c:	dcef      	bgt.n	800466e <__ieee754_pow+0x21e>
 800468e:	2000      	movs	r0, #0
 8004690:	b009      	add	sp, #36	; 0x24
 8004692:	ecbd 8b06 	vpop	{d8-d10}
 8004696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	f000 bcd7 	b.w	800504c <__math_uflow>
 800469e:	bf00      	nop
 80046a0:	fff00000 	.word	0xfff00000
 80046a4:	7ff00000 	.word	0x7ff00000
 80046a8:	433fffff 	.word	0x433fffff
 80046ac:	3ff00000 	.word	0x3ff00000
 80046b0:	3fefffff 	.word	0x3fefffff
 80046b4:	3fe00000 	.word	0x3fe00000
 80046b8:	41e00000 	.word	0x41e00000
 80046bc:	4b60      	ldr	r3, [pc, #384]	; (8004840 <__ieee754_pow+0x3f0>)
 80046be:	2200      	movs	r2, #0
 80046c0:	f7fb fd8a 	bl	80001d8 <__aeabi_dsub>
 80046c4:	a354      	add	r3, pc, #336	; (adr r3, 8004818 <__ieee754_pow+0x3c8>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	4604      	mov	r4, r0
 80046cc:	460d      	mov	r5, r1
 80046ce:	f7fb ff3b 	bl	8000548 <__aeabi_dmul>
 80046d2:	a353      	add	r3, pc, #332	; (adr r3, 8004820 <__ieee754_pow+0x3d0>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	4606      	mov	r6, r0
 80046da:	460f      	mov	r7, r1
 80046dc:	4620      	mov	r0, r4
 80046de:	4629      	mov	r1, r5
 80046e0:	f7fb ff32 	bl	8000548 <__aeabi_dmul>
 80046e4:	4b57      	ldr	r3, [pc, #348]	; (8004844 <__ieee754_pow+0x3f4>)
 80046e6:	4682      	mov	sl, r0
 80046e8:	468b      	mov	fp, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	4620      	mov	r0, r4
 80046ee:	4629      	mov	r1, r5
 80046f0:	f7fb ff2a 	bl	8000548 <__aeabi_dmul>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	a14b      	add	r1, pc, #300	; (adr r1, 8004828 <__ieee754_pow+0x3d8>)
 80046fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046fe:	f7fb fd6b 	bl	80001d8 <__aeabi_dsub>
 8004702:	4622      	mov	r2, r4
 8004704:	462b      	mov	r3, r5
 8004706:	f7fb ff1f 	bl	8000548 <__aeabi_dmul>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	2000      	movs	r0, #0
 8004710:	494d      	ldr	r1, [pc, #308]	; (8004848 <__ieee754_pow+0x3f8>)
 8004712:	f7fb fd61 	bl	80001d8 <__aeabi_dsub>
 8004716:	4622      	mov	r2, r4
 8004718:	4680      	mov	r8, r0
 800471a:	4689      	mov	r9, r1
 800471c:	462b      	mov	r3, r5
 800471e:	4620      	mov	r0, r4
 8004720:	4629      	mov	r1, r5
 8004722:	f7fb ff11 	bl	8000548 <__aeabi_dmul>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4640      	mov	r0, r8
 800472c:	4649      	mov	r1, r9
 800472e:	f7fb ff0b 	bl	8000548 <__aeabi_dmul>
 8004732:	a33f      	add	r3, pc, #252	; (adr r3, 8004830 <__ieee754_pow+0x3e0>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f7fb ff06 	bl	8000548 <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4650      	mov	r0, sl
 8004742:	4659      	mov	r1, fp
 8004744:	f7fb fd48 	bl	80001d8 <__aeabi_dsub>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4680      	mov	r8, r0
 800474e:	4689      	mov	r9, r1
 8004750:	4630      	mov	r0, r6
 8004752:	4639      	mov	r1, r7
 8004754:	f7fb fd42 	bl	80001dc <__adddf3>
 8004758:	2000      	movs	r0, #0
 800475a:	4632      	mov	r2, r6
 800475c:	463b      	mov	r3, r7
 800475e:	4604      	mov	r4, r0
 8004760:	460d      	mov	r5, r1
 8004762:	f7fb fd39 	bl	80001d8 <__aeabi_dsub>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	f7fb fd33 	bl	80001d8 <__aeabi_dsub>
 8004772:	9b04      	ldr	r3, [sp, #16]
 8004774:	9a06      	ldr	r2, [sp, #24]
 8004776:	3b01      	subs	r3, #1
 8004778:	4313      	orrs	r3, r2
 800477a:	4682      	mov	sl, r0
 800477c:	468b      	mov	fp, r1
 800477e:	f040 81e7 	bne.w	8004b50 <__ieee754_pow+0x700>
 8004782:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004838 <__ieee754_pow+0x3e8>
 8004786:	eeb0 8a47 	vmov.f32	s16, s14
 800478a:	eef0 8a67 	vmov.f32	s17, s15
 800478e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004792:	2600      	movs	r6, #0
 8004794:	4632      	mov	r2, r6
 8004796:	463b      	mov	r3, r7
 8004798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800479c:	f7fb fd1c 	bl	80001d8 <__aeabi_dsub>
 80047a0:	4622      	mov	r2, r4
 80047a2:	462b      	mov	r3, r5
 80047a4:	f7fb fed0 	bl	8000548 <__aeabi_dmul>
 80047a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047ac:	4680      	mov	r8, r0
 80047ae:	4689      	mov	r9, r1
 80047b0:	4650      	mov	r0, sl
 80047b2:	4659      	mov	r1, fp
 80047b4:	f7fb fec8 	bl	8000548 <__aeabi_dmul>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4640      	mov	r0, r8
 80047be:	4649      	mov	r1, r9
 80047c0:	f7fb fd0c 	bl	80001dc <__adddf3>
 80047c4:	4632      	mov	r2, r6
 80047c6:	463b      	mov	r3, r7
 80047c8:	4680      	mov	r8, r0
 80047ca:	4689      	mov	r9, r1
 80047cc:	4620      	mov	r0, r4
 80047ce:	4629      	mov	r1, r5
 80047d0:	f7fb feba 	bl	8000548 <__aeabi_dmul>
 80047d4:	460b      	mov	r3, r1
 80047d6:	4604      	mov	r4, r0
 80047d8:	460d      	mov	r5, r1
 80047da:	4602      	mov	r2, r0
 80047dc:	4649      	mov	r1, r9
 80047de:	4640      	mov	r0, r8
 80047e0:	f7fb fcfc 	bl	80001dc <__adddf3>
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <__ieee754_pow+0x3fc>)
 80047e6:	4299      	cmp	r1, r3
 80047e8:	ec45 4b19 	vmov	d9, r4, r5
 80047ec:	4606      	mov	r6, r0
 80047ee:	460f      	mov	r7, r1
 80047f0:	468b      	mov	fp, r1
 80047f2:	f340 82f1 	ble.w	8004dd8 <__ieee754_pow+0x988>
 80047f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80047fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80047fe:	4303      	orrs	r3, r0
 8004800:	f000 81e4 	beq.w	8004bcc <__ieee754_pow+0x77c>
 8004804:	ec51 0b18 	vmov	r0, r1, d8
 8004808:	2200      	movs	r2, #0
 800480a:	2300      	movs	r3, #0
 800480c:	f7fc f90e 	bl	8000a2c <__aeabi_dcmplt>
 8004810:	3800      	subs	r0, #0
 8004812:	bf18      	it	ne
 8004814:	2001      	movne	r0, #1
 8004816:	e72b      	b.n	8004670 <__ieee754_pow+0x220>
 8004818:	60000000 	.word	0x60000000
 800481c:	3ff71547 	.word	0x3ff71547
 8004820:	f85ddf44 	.word	0xf85ddf44
 8004824:	3e54ae0b 	.word	0x3e54ae0b
 8004828:	55555555 	.word	0x55555555
 800482c:	3fd55555 	.word	0x3fd55555
 8004830:	652b82fe 	.word	0x652b82fe
 8004834:	3ff71547 	.word	0x3ff71547
 8004838:	00000000 	.word	0x00000000
 800483c:	bff00000 	.word	0xbff00000
 8004840:	3ff00000 	.word	0x3ff00000
 8004844:	3fd00000 	.word	0x3fd00000
 8004848:	3fe00000 	.word	0x3fe00000
 800484c:	408fffff 	.word	0x408fffff
 8004850:	4bd5      	ldr	r3, [pc, #852]	; (8004ba8 <__ieee754_pow+0x758>)
 8004852:	402b      	ands	r3, r5
 8004854:	2200      	movs	r2, #0
 8004856:	b92b      	cbnz	r3, 8004864 <__ieee754_pow+0x414>
 8004858:	4bd4      	ldr	r3, [pc, #848]	; (8004bac <__ieee754_pow+0x75c>)
 800485a:	f7fb fe75 	bl	8000548 <__aeabi_dmul>
 800485e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004862:	460c      	mov	r4, r1
 8004864:	1523      	asrs	r3, r4, #20
 8004866:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800486a:	4413      	add	r3, r2
 800486c:	9305      	str	r3, [sp, #20]
 800486e:	4bd0      	ldr	r3, [pc, #832]	; (8004bb0 <__ieee754_pow+0x760>)
 8004870:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004874:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004878:	429c      	cmp	r4, r3
 800487a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800487e:	dd08      	ble.n	8004892 <__ieee754_pow+0x442>
 8004880:	4bcc      	ldr	r3, [pc, #816]	; (8004bb4 <__ieee754_pow+0x764>)
 8004882:	429c      	cmp	r4, r3
 8004884:	f340 8162 	ble.w	8004b4c <__ieee754_pow+0x6fc>
 8004888:	9b05      	ldr	r3, [sp, #20]
 800488a:	3301      	adds	r3, #1
 800488c:	9305      	str	r3, [sp, #20]
 800488e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004892:	2400      	movs	r4, #0
 8004894:	00e3      	lsls	r3, r4, #3
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	4bc7      	ldr	r3, [pc, #796]	; (8004bb8 <__ieee754_pow+0x768>)
 800489a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800489e:	ed93 7b00 	vldr	d7, [r3]
 80048a2:	4629      	mov	r1, r5
 80048a4:	ec53 2b17 	vmov	r2, r3, d7
 80048a8:	eeb0 9a47 	vmov.f32	s18, s14
 80048ac:	eef0 9a67 	vmov.f32	s19, s15
 80048b0:	4682      	mov	sl, r0
 80048b2:	f7fb fc91 	bl	80001d8 <__aeabi_dsub>
 80048b6:	4652      	mov	r2, sl
 80048b8:	4606      	mov	r6, r0
 80048ba:	460f      	mov	r7, r1
 80048bc:	462b      	mov	r3, r5
 80048be:	ec51 0b19 	vmov	r0, r1, d9
 80048c2:	f7fb fc8b 	bl	80001dc <__adddf3>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	2000      	movs	r0, #0
 80048cc:	49bb      	ldr	r1, [pc, #748]	; (8004bbc <__ieee754_pow+0x76c>)
 80048ce:	f7fb ff65 	bl	800079c <__aeabi_ddiv>
 80048d2:	ec41 0b1a 	vmov	d10, r0, r1
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fb fe33 	bl	8000548 <__aeabi_dmul>
 80048e2:	2300      	movs	r3, #0
 80048e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e8:	9302      	str	r3, [sp, #8]
 80048ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80048ee:	46ab      	mov	fp, r5
 80048f0:	106d      	asrs	r5, r5, #1
 80048f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80048f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80048fa:	ec41 0b18 	vmov	d8, r0, r1
 80048fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004902:	2200      	movs	r2, #0
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	4614      	mov	r4, r2
 800490a:	461d      	mov	r5, r3
 800490c:	f7fb fe1c 	bl	8000548 <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	f7fb fc5e 	bl	80001d8 <__aeabi_dsub>
 800491c:	ec53 2b19 	vmov	r2, r3, d9
 8004920:	4606      	mov	r6, r0
 8004922:	460f      	mov	r7, r1
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fc56 	bl	80001d8 <__aeabi_dsub>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4650      	mov	r0, sl
 8004932:	4659      	mov	r1, fp
 8004934:	f7fb fc50 	bl	80001d8 <__aeabi_dsub>
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	f7fb fe04 	bl	8000548 <__aeabi_dmul>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4630      	mov	r0, r6
 8004946:	4639      	mov	r1, r7
 8004948:	f7fb fc46 	bl	80001d8 <__aeabi_dsub>
 800494c:	ec53 2b1a 	vmov	r2, r3, d10
 8004950:	f7fb fdfa 	bl	8000548 <__aeabi_dmul>
 8004954:	ec53 2b18 	vmov	r2, r3, d8
 8004958:	ec41 0b19 	vmov	d9, r0, r1
 800495c:	ec51 0b18 	vmov	r0, r1, d8
 8004960:	f7fb fdf2 	bl	8000548 <__aeabi_dmul>
 8004964:	a37c      	add	r3, pc, #496	; (adr r3, 8004b58 <__ieee754_pow+0x708>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
 800496e:	f7fb fdeb 	bl	8000548 <__aeabi_dmul>
 8004972:	a37b      	add	r3, pc, #492	; (adr r3, 8004b60 <__ieee754_pow+0x710>)
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f7fb fc30 	bl	80001dc <__adddf3>
 800497c:	4622      	mov	r2, r4
 800497e:	462b      	mov	r3, r5
 8004980:	f7fb fde2 	bl	8000548 <__aeabi_dmul>
 8004984:	a378      	add	r3, pc, #480	; (adr r3, 8004b68 <__ieee754_pow+0x718>)
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f7fb fc27 	bl	80001dc <__adddf3>
 800498e:	4622      	mov	r2, r4
 8004990:	462b      	mov	r3, r5
 8004992:	f7fb fdd9 	bl	8000548 <__aeabi_dmul>
 8004996:	a376      	add	r3, pc, #472	; (adr r3, 8004b70 <__ieee754_pow+0x720>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fb fc1e 	bl	80001dc <__adddf3>
 80049a0:	4622      	mov	r2, r4
 80049a2:	462b      	mov	r3, r5
 80049a4:	f7fb fdd0 	bl	8000548 <__aeabi_dmul>
 80049a8:	a373      	add	r3, pc, #460	; (adr r3, 8004b78 <__ieee754_pow+0x728>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	f7fb fc15 	bl	80001dc <__adddf3>
 80049b2:	4622      	mov	r2, r4
 80049b4:	462b      	mov	r3, r5
 80049b6:	f7fb fdc7 	bl	8000548 <__aeabi_dmul>
 80049ba:	a371      	add	r3, pc, #452	; (adr r3, 8004b80 <__ieee754_pow+0x730>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f7fb fc0c 	bl	80001dc <__adddf3>
 80049c4:	4622      	mov	r2, r4
 80049c6:	4606      	mov	r6, r0
 80049c8:	460f      	mov	r7, r1
 80049ca:	462b      	mov	r3, r5
 80049cc:	4620      	mov	r0, r4
 80049ce:	4629      	mov	r1, r5
 80049d0:	f7fb fdba 	bl	8000548 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4630      	mov	r0, r6
 80049da:	4639      	mov	r1, r7
 80049dc:	f7fb fdb4 	bl	8000548 <__aeabi_dmul>
 80049e0:	4642      	mov	r2, r8
 80049e2:	4604      	mov	r4, r0
 80049e4:	460d      	mov	r5, r1
 80049e6:	464b      	mov	r3, r9
 80049e8:	ec51 0b18 	vmov	r0, r1, d8
 80049ec:	f7fb fbf6 	bl	80001dc <__adddf3>
 80049f0:	ec53 2b19 	vmov	r2, r3, d9
 80049f4:	f7fb fda8 	bl	8000548 <__aeabi_dmul>
 80049f8:	4622      	mov	r2, r4
 80049fa:	462b      	mov	r3, r5
 80049fc:	f7fb fbee 	bl	80001dc <__adddf3>
 8004a00:	4642      	mov	r2, r8
 8004a02:	4682      	mov	sl, r0
 8004a04:	468b      	mov	fp, r1
 8004a06:	464b      	mov	r3, r9
 8004a08:	4640      	mov	r0, r8
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	f7fb fd9c 	bl	8000548 <__aeabi_dmul>
 8004a10:	4b6b      	ldr	r3, [pc, #428]	; (8004bc0 <__ieee754_pow+0x770>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	4606      	mov	r6, r0
 8004a16:	460f      	mov	r7, r1
 8004a18:	f7fb fbe0 	bl	80001dc <__adddf3>
 8004a1c:	4652      	mov	r2, sl
 8004a1e:	465b      	mov	r3, fp
 8004a20:	f7fb fbdc 	bl	80001dc <__adddf3>
 8004a24:	2000      	movs	r0, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	460d      	mov	r5, r1
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fb fd89 	bl	8000548 <__aeabi_dmul>
 8004a36:	4b62      	ldr	r3, [pc, #392]	; (8004bc0 <__ieee754_pow+0x770>)
 8004a38:	4680      	mov	r8, r0
 8004a3a:	4689      	mov	r9, r1
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb fbc9 	bl	80001d8 <__aeabi_dsub>
 8004a46:	4632      	mov	r2, r6
 8004a48:	463b      	mov	r3, r7
 8004a4a:	f7fb fbc5 	bl	80001d8 <__aeabi_dsub>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4650      	mov	r0, sl
 8004a54:	4659      	mov	r1, fp
 8004a56:	f7fb fbbf 	bl	80001d8 <__aeabi_dsub>
 8004a5a:	ec53 2b18 	vmov	r2, r3, d8
 8004a5e:	f7fb fd73 	bl	8000548 <__aeabi_dmul>
 8004a62:	4622      	mov	r2, r4
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	462b      	mov	r3, r5
 8004a6a:	ec51 0b19 	vmov	r0, r1, d9
 8004a6e:	f7fb fd6b 	bl	8000548 <__aeabi_dmul>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4630      	mov	r0, r6
 8004a78:	4639      	mov	r1, r7
 8004a7a:	f7fb fbaf 	bl	80001dc <__adddf3>
 8004a7e:	4606      	mov	r6, r0
 8004a80:	460f      	mov	r7, r1
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fb fba7 	bl	80001dc <__adddf3>
 8004a8e:	a33e      	add	r3, pc, #248	; (adr r3, 8004b88 <__ieee754_pow+0x738>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	2000      	movs	r0, #0
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
 8004a9a:	f7fb fd55 	bl	8000548 <__aeabi_dmul>
 8004a9e:	4642      	mov	r2, r8
 8004aa0:	ec41 0b18 	vmov	d8, r0, r1
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fb fb95 	bl	80001d8 <__aeabi_dsub>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	f7fb fb8f 	bl	80001d8 <__aeabi_dsub>
 8004aba:	a335      	add	r3, pc, #212	; (adr r3, 8004b90 <__ieee754_pow+0x740>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fd42 	bl	8000548 <__aeabi_dmul>
 8004ac4:	a334      	add	r3, pc, #208	; (adr r3, 8004b98 <__ieee754_pow+0x748>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	4606      	mov	r6, r0
 8004acc:	460f      	mov	r7, r1
 8004ace:	4620      	mov	r0, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	f7fb fd39 	bl	8000548 <__aeabi_dmul>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fb7d 	bl	80001dc <__adddf3>
 8004ae2:	9a07      	ldr	r2, [sp, #28]
 8004ae4:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <__ieee754_pow+0x774>)
 8004ae6:	4413      	add	r3, r2
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f7fb fb76 	bl	80001dc <__adddf3>
 8004af0:	4682      	mov	sl, r0
 8004af2:	9805      	ldr	r0, [sp, #20]
 8004af4:	468b      	mov	fp, r1
 8004af6:	f7fb fcbd 	bl	8000474 <__aeabi_i2d>
 8004afa:	9a07      	ldr	r2, [sp, #28]
 8004afc:	4b32      	ldr	r3, [pc, #200]	; (8004bc8 <__ieee754_pow+0x778>)
 8004afe:	4413      	add	r3, r2
 8004b00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b04:	4606      	mov	r6, r0
 8004b06:	460f      	mov	r7, r1
 8004b08:	4652      	mov	r2, sl
 8004b0a:	465b      	mov	r3, fp
 8004b0c:	ec51 0b18 	vmov	r0, r1, d8
 8004b10:	f7fb fb64 	bl	80001dc <__adddf3>
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	f7fb fb60 	bl	80001dc <__adddf3>
 8004b1c:	4632      	mov	r2, r6
 8004b1e:	463b      	mov	r3, r7
 8004b20:	f7fb fb5c 	bl	80001dc <__adddf3>
 8004b24:	2000      	movs	r0, #0
 8004b26:	4632      	mov	r2, r6
 8004b28:	463b      	mov	r3, r7
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
 8004b2e:	f7fb fb53 	bl	80001d8 <__aeabi_dsub>
 8004b32:	4642      	mov	r2, r8
 8004b34:	464b      	mov	r3, r9
 8004b36:	f7fb fb4f 	bl	80001d8 <__aeabi_dsub>
 8004b3a:	ec53 2b18 	vmov	r2, r3, d8
 8004b3e:	f7fb fb4b 	bl	80001d8 <__aeabi_dsub>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4650      	mov	r0, sl
 8004b48:	4659      	mov	r1, fp
 8004b4a:	e610      	b.n	800476e <__ieee754_pow+0x31e>
 8004b4c:	2401      	movs	r4, #1
 8004b4e:	e6a1      	b.n	8004894 <__ieee754_pow+0x444>
 8004b50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004ba0 <__ieee754_pow+0x750>
 8004b54:	e617      	b.n	8004786 <__ieee754_pow+0x336>
 8004b56:	bf00      	nop
 8004b58:	4a454eef 	.word	0x4a454eef
 8004b5c:	3fca7e28 	.word	0x3fca7e28
 8004b60:	93c9db65 	.word	0x93c9db65
 8004b64:	3fcd864a 	.word	0x3fcd864a
 8004b68:	a91d4101 	.word	0xa91d4101
 8004b6c:	3fd17460 	.word	0x3fd17460
 8004b70:	518f264d 	.word	0x518f264d
 8004b74:	3fd55555 	.word	0x3fd55555
 8004b78:	db6fabff 	.word	0xdb6fabff
 8004b7c:	3fdb6db6 	.word	0x3fdb6db6
 8004b80:	33333303 	.word	0x33333303
 8004b84:	3fe33333 	.word	0x3fe33333
 8004b88:	e0000000 	.word	0xe0000000
 8004b8c:	3feec709 	.word	0x3feec709
 8004b90:	dc3a03fd 	.word	0xdc3a03fd
 8004b94:	3feec709 	.word	0x3feec709
 8004b98:	145b01f5 	.word	0x145b01f5
 8004b9c:	be3e2fe0 	.word	0xbe3e2fe0
 8004ba0:	00000000 	.word	0x00000000
 8004ba4:	3ff00000 	.word	0x3ff00000
 8004ba8:	7ff00000 	.word	0x7ff00000
 8004bac:	43400000 	.word	0x43400000
 8004bb0:	0003988e 	.word	0x0003988e
 8004bb4:	000bb679 	.word	0x000bb679
 8004bb8:	08005200 	.word	0x08005200
 8004bbc:	3ff00000 	.word	0x3ff00000
 8004bc0:	40080000 	.word	0x40080000
 8004bc4:	08005220 	.word	0x08005220
 8004bc8:	08005210 	.word	0x08005210
 8004bcc:	a3b5      	add	r3, pc, #724	; (adr r3, 8004ea4 <__ieee754_pow+0xa54>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	f7fb fb01 	bl	80001dc <__adddf3>
 8004bda:	4622      	mov	r2, r4
 8004bdc:	ec41 0b1a 	vmov	d10, r0, r1
 8004be0:	462b      	mov	r3, r5
 8004be2:	4630      	mov	r0, r6
 8004be4:	4639      	mov	r1, r7
 8004be6:	f7fb faf7 	bl	80001d8 <__aeabi_dsub>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	ec51 0b1a 	vmov	r0, r1, d10
 8004bf2:	f7fb ff39 	bl	8000a68 <__aeabi_dcmpgt>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f47f ae04 	bne.w	8004804 <__ieee754_pow+0x3b4>
 8004bfc:	4aa4      	ldr	r2, [pc, #656]	; (8004e90 <__ieee754_pow+0xa40>)
 8004bfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c02:	4293      	cmp	r3, r2
 8004c04:	f340 8108 	ble.w	8004e18 <__ieee754_pow+0x9c8>
 8004c08:	151b      	asrs	r3, r3, #20
 8004c0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c12:	fa4a f303 	asr.w	r3, sl, r3
 8004c16:	445b      	add	r3, fp
 8004c18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004c1c:	4e9d      	ldr	r6, [pc, #628]	; (8004e94 <__ieee754_pow+0xa44>)
 8004c1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004c22:	4116      	asrs	r6, r2
 8004c24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004c28:	2000      	movs	r0, #0
 8004c2a:	ea23 0106 	bic.w	r1, r3, r6
 8004c2e:	f1c2 0214 	rsb	r2, r2, #20
 8004c32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004c36:	fa4a fa02 	asr.w	sl, sl, r2
 8004c3a:	f1bb 0f00 	cmp.w	fp, #0
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4620      	mov	r0, r4
 8004c44:	4629      	mov	r1, r5
 8004c46:	bfb8      	it	lt
 8004c48:	f1ca 0a00 	rsblt	sl, sl, #0
 8004c4c:	f7fb fac4 	bl	80001d8 <__aeabi_dsub>
 8004c50:	ec41 0b19 	vmov	d9, r0, r1
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	ec51 0b19 	vmov	r0, r1, d9
 8004c5c:	f7fb fabe 	bl	80001dc <__adddf3>
 8004c60:	a37b      	add	r3, pc, #492	; (adr r3, 8004e50 <__ieee754_pow+0xa00>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	2000      	movs	r0, #0
 8004c68:	4604      	mov	r4, r0
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	f7fb fc6c 	bl	8000548 <__aeabi_dmul>
 8004c70:	ec53 2b19 	vmov	r2, r3, d9
 8004c74:	4606      	mov	r6, r0
 8004c76:	460f      	mov	r7, r1
 8004c78:	4620      	mov	r0, r4
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f7fb faac 	bl	80001d8 <__aeabi_dsub>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb faa6 	bl	80001d8 <__aeabi_dsub>
 8004c8c:	a372      	add	r3, pc, #456	; (adr r3, 8004e58 <__ieee754_pow+0xa08>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fc59 	bl	8000548 <__aeabi_dmul>
 8004c96:	a372      	add	r3, pc, #456	; (adr r3, 8004e60 <__ieee754_pow+0xa10>)
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	4689      	mov	r9, r1
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7fb fc50 	bl	8000548 <__aeabi_dmul>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4640      	mov	r0, r8
 8004cae:	4649      	mov	r1, r9
 8004cb0:	f7fb fa94 	bl	80001dc <__adddf3>
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	460d      	mov	r5, r1
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb fa8c 	bl	80001dc <__adddf3>
 8004cc4:	4632      	mov	r2, r6
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	4680      	mov	r8, r0
 8004cca:	4689      	mov	r9, r1
 8004ccc:	f7fb fa84 	bl	80001d8 <__aeabi_dsub>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	f7fb fa7e 	bl	80001d8 <__aeabi_dsub>
 8004cdc:	4642      	mov	r2, r8
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460f      	mov	r7, r1
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	f7fb fc2e 	bl	8000548 <__aeabi_dmul>
 8004cec:	a35e      	add	r3, pc, #376	; (adr r3, 8004e68 <__ieee754_pow+0xa18>)
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	f7fb fc27 	bl	8000548 <__aeabi_dmul>
 8004cfa:	a35d      	add	r3, pc, #372	; (adr r3, 8004e70 <__ieee754_pow+0xa20>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fa6a 	bl	80001d8 <__aeabi_dsub>
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	f7fb fc1e 	bl	8000548 <__aeabi_dmul>
 8004d0c:	a35a      	add	r3, pc, #360	; (adr r3, 8004e78 <__ieee754_pow+0xa28>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fa63 	bl	80001dc <__adddf3>
 8004d16:	4622      	mov	r2, r4
 8004d18:	462b      	mov	r3, r5
 8004d1a:	f7fb fc15 	bl	8000548 <__aeabi_dmul>
 8004d1e:	a358      	add	r3, pc, #352	; (adr r3, 8004e80 <__ieee754_pow+0xa30>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fa58 	bl	80001d8 <__aeabi_dsub>
 8004d28:	4622      	mov	r2, r4
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	f7fb fc0c 	bl	8000548 <__aeabi_dmul>
 8004d30:	a355      	add	r3, pc, #340	; (adr r3, 8004e88 <__ieee754_pow+0xa38>)
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	f7fb fa51 	bl	80001dc <__adddf3>
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	f7fb fc03 	bl	8000548 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4640      	mov	r0, r8
 8004d48:	4649      	mov	r1, r9
 8004d4a:	f7fb fa45 	bl	80001d8 <__aeabi_dsub>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4640      	mov	r0, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f7fb fbf5 	bl	8000548 <__aeabi_dmul>
 8004d5e:	2200      	movs	r2, #0
 8004d60:	ec41 0b19 	vmov	d9, r0, r1
 8004d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d68:	4620      	mov	r0, r4
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	f7fb fa34 	bl	80001d8 <__aeabi_dsub>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	ec51 0b19 	vmov	r0, r1, d9
 8004d78:	f7fb fd10 	bl	800079c <__aeabi_ddiv>
 8004d7c:	4632      	mov	r2, r6
 8004d7e:	4604      	mov	r4, r0
 8004d80:	460d      	mov	r5, r1
 8004d82:	463b      	mov	r3, r7
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	f7fb fbde 	bl	8000548 <__aeabi_dmul>
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	463b      	mov	r3, r7
 8004d90:	f7fb fa24 	bl	80001dc <__adddf3>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7fb fa1c 	bl	80001d8 <__aeabi_dsub>
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	f7fb fa18 	bl	80001d8 <__aeabi_dsub>
 8004da8:	460b      	mov	r3, r1
 8004daa:	4602      	mov	r2, r0
 8004dac:	493a      	ldr	r1, [pc, #232]	; (8004e98 <__ieee754_pow+0xa48>)
 8004dae:	2000      	movs	r0, #0
 8004db0:	f7fb fa12 	bl	80001d8 <__aeabi_dsub>
 8004db4:	ec41 0b10 	vmov	d0, r0, r1
 8004db8:	ee10 3a90 	vmov	r3, s1
 8004dbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc4:	da2b      	bge.n	8004e1e <__ieee754_pow+0x9ce>
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	f000 f966 	bl	8005098 <scalbn>
 8004dcc:	ec51 0b10 	vmov	r0, r1, d0
 8004dd0:	ec53 2b18 	vmov	r2, r3, d8
 8004dd4:	f7ff bbed 	b.w	80045b2 <__ieee754_pow+0x162>
 8004dd8:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <__ieee754_pow+0xa4c>)
 8004dda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004dde:	429e      	cmp	r6, r3
 8004de0:	f77f af0c 	ble.w	8004bfc <__ieee754_pow+0x7ac>
 8004de4:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <__ieee754_pow+0xa50>)
 8004de6:	440b      	add	r3, r1
 8004de8:	4303      	orrs	r3, r0
 8004dea:	d009      	beq.n	8004e00 <__ieee754_pow+0x9b0>
 8004dec:	ec51 0b18 	vmov	r0, r1, d8
 8004df0:	2200      	movs	r2, #0
 8004df2:	2300      	movs	r3, #0
 8004df4:	f7fb fe1a 	bl	8000a2c <__aeabi_dcmplt>
 8004df8:	3800      	subs	r0, #0
 8004dfa:	bf18      	it	ne
 8004dfc:	2001      	movne	r0, #1
 8004dfe:	e447      	b.n	8004690 <__ieee754_pow+0x240>
 8004e00:	4622      	mov	r2, r4
 8004e02:	462b      	mov	r3, r5
 8004e04:	f7fb f9e8 	bl	80001d8 <__aeabi_dsub>
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	f7fb fe22 	bl	8000a54 <__aeabi_dcmpge>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f43f aef3 	beq.w	8004bfc <__ieee754_pow+0x7ac>
 8004e16:	e7e9      	b.n	8004dec <__ieee754_pow+0x99c>
 8004e18:	f04f 0a00 	mov.w	sl, #0
 8004e1c:	e71a      	b.n	8004c54 <__ieee754_pow+0x804>
 8004e1e:	ec51 0b10 	vmov	r0, r1, d0
 8004e22:	4619      	mov	r1, r3
 8004e24:	e7d4      	b.n	8004dd0 <__ieee754_pow+0x980>
 8004e26:	491c      	ldr	r1, [pc, #112]	; (8004e98 <__ieee754_pow+0xa48>)
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f7ff bb30 	b.w	800448e <__ieee754_pow+0x3e>
 8004e2e:	2000      	movs	r0, #0
 8004e30:	2100      	movs	r1, #0
 8004e32:	f7ff bb2c 	b.w	800448e <__ieee754_pow+0x3e>
 8004e36:	4630      	mov	r0, r6
 8004e38:	4639      	mov	r1, r7
 8004e3a:	f7ff bb28 	b.w	800448e <__ieee754_pow+0x3e>
 8004e3e:	9204      	str	r2, [sp, #16]
 8004e40:	f7ff bb7a 	b.w	8004538 <__ieee754_pow+0xe8>
 8004e44:	2300      	movs	r3, #0
 8004e46:	f7ff bb64 	b.w	8004512 <__ieee754_pow+0xc2>
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w
 8004e50:	00000000 	.word	0x00000000
 8004e54:	3fe62e43 	.word	0x3fe62e43
 8004e58:	fefa39ef 	.word	0xfefa39ef
 8004e5c:	3fe62e42 	.word	0x3fe62e42
 8004e60:	0ca86c39 	.word	0x0ca86c39
 8004e64:	be205c61 	.word	0xbe205c61
 8004e68:	72bea4d0 	.word	0x72bea4d0
 8004e6c:	3e663769 	.word	0x3e663769
 8004e70:	c5d26bf1 	.word	0xc5d26bf1
 8004e74:	3ebbbd41 	.word	0x3ebbbd41
 8004e78:	af25de2c 	.word	0xaf25de2c
 8004e7c:	3f11566a 	.word	0x3f11566a
 8004e80:	16bebd93 	.word	0x16bebd93
 8004e84:	3f66c16c 	.word	0x3f66c16c
 8004e88:	5555553e 	.word	0x5555553e
 8004e8c:	3fc55555 	.word	0x3fc55555
 8004e90:	3fe00000 	.word	0x3fe00000
 8004e94:	000fffff 	.word	0x000fffff
 8004e98:	3ff00000 	.word	0x3ff00000
 8004e9c:	4090cbff 	.word	0x4090cbff
 8004ea0:	3f6f3400 	.word	0x3f6f3400
 8004ea4:	652b82fe 	.word	0x652b82fe
 8004ea8:	3c971547 	.word	0x3c971547

08004eac <__ieee754_sqrt>:
 8004eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb0:	ec55 4b10 	vmov	r4, r5, d0
 8004eb4:	4e55      	ldr	r6, [pc, #340]	; (800500c <__ieee754_sqrt+0x160>)
 8004eb6:	43ae      	bics	r6, r5
 8004eb8:	ee10 0a10 	vmov	r0, s0
 8004ebc:	ee10 3a10 	vmov	r3, s0
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	d110      	bne.n	8004ee8 <__ieee754_sqrt+0x3c>
 8004ec6:	ee10 2a10 	vmov	r2, s0
 8004eca:	462b      	mov	r3, r5
 8004ecc:	f7fb fb3c 	bl	8000548 <__aeabi_dmul>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb f980 	bl	80001dc <__adddf3>
 8004edc:	4604      	mov	r4, r0
 8004ede:	460d      	mov	r5, r1
 8004ee0:	ec45 4b10 	vmov	d0, r4, r5
 8004ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	dc10      	bgt.n	8004f0e <__ieee754_sqrt+0x62>
 8004eec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004ef0:	4330      	orrs	r0, r6
 8004ef2:	d0f5      	beq.n	8004ee0 <__ieee754_sqrt+0x34>
 8004ef4:	b15d      	cbz	r5, 8004f0e <__ieee754_sqrt+0x62>
 8004ef6:	ee10 2a10 	vmov	r2, s0
 8004efa:	462b      	mov	r3, r5
 8004efc:	ee10 0a10 	vmov	r0, s0
 8004f00:	f7fb f96a 	bl	80001d8 <__aeabi_dsub>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	f7fb fc48 	bl	800079c <__aeabi_ddiv>
 8004f0c:	e7e6      	b.n	8004edc <__ieee754_sqrt+0x30>
 8004f0e:	1512      	asrs	r2, r2, #20
 8004f10:	d074      	beq.n	8004ffc <__ieee754_sqrt+0x150>
 8004f12:	07d4      	lsls	r4, r2, #31
 8004f14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004f18:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f20:	bf5e      	ittt	pl
 8004f22:	0fda      	lsrpl	r2, r3, #31
 8004f24:	005b      	lslpl	r3, r3, #1
 8004f26:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004f2a:	2400      	movs	r4, #0
 8004f2c:	0fda      	lsrs	r2, r3, #31
 8004f2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004f32:	107f      	asrs	r7, r7, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2516      	movs	r5, #22
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f3e:	1886      	adds	r6, r0, r2
 8004f40:	428e      	cmp	r6, r1
 8004f42:	bfde      	ittt	le
 8004f44:	1b89      	suble	r1, r1, r6
 8004f46:	18b0      	addle	r0, r6, r2
 8004f48:	18a4      	addle	r4, r4, r2
 8004f4a:	0049      	lsls	r1, r1, #1
 8004f4c:	3d01      	subs	r5, #1
 8004f4e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004f52:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004f56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004f5a:	d1f0      	bne.n	8004f3e <__ieee754_sqrt+0x92>
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	f04f 0e20 	mov.w	lr, #32
 8004f62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004f66:	4281      	cmp	r1, r0
 8004f68:	eb06 0c05 	add.w	ip, r6, r5
 8004f6c:	dc02      	bgt.n	8004f74 <__ieee754_sqrt+0xc8>
 8004f6e:	d113      	bne.n	8004f98 <__ieee754_sqrt+0xec>
 8004f70:	459c      	cmp	ip, r3
 8004f72:	d811      	bhi.n	8004f98 <__ieee754_sqrt+0xec>
 8004f74:	f1bc 0f00 	cmp.w	ip, #0
 8004f78:	eb0c 0506 	add.w	r5, ip, r6
 8004f7c:	da43      	bge.n	8005006 <__ieee754_sqrt+0x15a>
 8004f7e:	2d00      	cmp	r5, #0
 8004f80:	db41      	blt.n	8005006 <__ieee754_sqrt+0x15a>
 8004f82:	f100 0801 	add.w	r8, r0, #1
 8004f86:	1a09      	subs	r1, r1, r0
 8004f88:	459c      	cmp	ip, r3
 8004f8a:	bf88      	it	hi
 8004f8c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004f90:	eba3 030c 	sub.w	r3, r3, ip
 8004f94:	4432      	add	r2, r6
 8004f96:	4640      	mov	r0, r8
 8004f98:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004f9c:	f1be 0e01 	subs.w	lr, lr, #1
 8004fa0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004fa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fa8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004fac:	d1db      	bne.n	8004f66 <__ieee754_sqrt+0xba>
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	d006      	beq.n	8004fc0 <__ieee754_sqrt+0x114>
 8004fb2:	1c50      	adds	r0, r2, #1
 8004fb4:	bf13      	iteet	ne
 8004fb6:	3201      	addne	r2, #1
 8004fb8:	3401      	addeq	r4, #1
 8004fba:	4672      	moveq	r2, lr
 8004fbc:	f022 0201 	bicne.w	r2, r2, #1
 8004fc0:	1063      	asrs	r3, r4, #1
 8004fc2:	0852      	lsrs	r2, r2, #1
 8004fc4:	07e1      	lsls	r1, r4, #31
 8004fc6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004fca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004fce:	bf48      	it	mi
 8004fd0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004fd4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004fd8:	4614      	mov	r4, r2
 8004fda:	e781      	b.n	8004ee0 <__ieee754_sqrt+0x34>
 8004fdc:	0ad9      	lsrs	r1, r3, #11
 8004fde:	3815      	subs	r0, #21
 8004fe0:	055b      	lsls	r3, r3, #21
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d0fa      	beq.n	8004fdc <__ieee754_sqrt+0x130>
 8004fe6:	02cd      	lsls	r5, r1, #11
 8004fe8:	d50a      	bpl.n	8005000 <__ieee754_sqrt+0x154>
 8004fea:	f1c2 0420 	rsb	r4, r2, #32
 8004fee:	fa23 f404 	lsr.w	r4, r3, r4
 8004ff2:	1e55      	subs	r5, r2, #1
 8004ff4:	4093      	lsls	r3, r2
 8004ff6:	4321      	orrs	r1, r4
 8004ff8:	1b42      	subs	r2, r0, r5
 8004ffa:	e78a      	b.n	8004f12 <__ieee754_sqrt+0x66>
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	e7f0      	b.n	8004fe2 <__ieee754_sqrt+0x136>
 8005000:	0049      	lsls	r1, r1, #1
 8005002:	3201      	adds	r2, #1
 8005004:	e7ef      	b.n	8004fe6 <__ieee754_sqrt+0x13a>
 8005006:	4680      	mov	r8, r0
 8005008:	e7bd      	b.n	8004f86 <__ieee754_sqrt+0xda>
 800500a:	bf00      	nop
 800500c:	7ff00000 	.word	0x7ff00000

08005010 <with_errno>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	4616      	mov	r6, r2
 8005018:	f7ff f976 	bl	8004308 <__errno>
 800501c:	4629      	mov	r1, r5
 800501e:	6006      	str	r6, [r0, #0]
 8005020:	4620      	mov	r0, r4
 8005022:	bd70      	pop	{r4, r5, r6, pc}

08005024 <xflow>:
 8005024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005026:	4614      	mov	r4, r2
 8005028:	461d      	mov	r5, r3
 800502a:	b108      	cbz	r0, 8005030 <xflow+0xc>
 800502c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005030:	e9cd 2300 	strd	r2, r3, [sp]
 8005034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005038:	4620      	mov	r0, r4
 800503a:	4629      	mov	r1, r5
 800503c:	f7fb fa84 	bl	8000548 <__aeabi_dmul>
 8005040:	2222      	movs	r2, #34	; 0x22
 8005042:	b003      	add	sp, #12
 8005044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005048:	f7ff bfe2 	b.w	8005010 <with_errno>

0800504c <__math_uflow>:
 800504c:	b508      	push	{r3, lr}
 800504e:	2200      	movs	r2, #0
 8005050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005054:	f7ff ffe6 	bl	8005024 <xflow>
 8005058:	ec41 0b10 	vmov	d0, r0, r1
 800505c:	bd08      	pop	{r3, pc}

0800505e <__math_oflow>:
 800505e:	b508      	push	{r3, lr}
 8005060:	2200      	movs	r2, #0
 8005062:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005066:	f7ff ffdd 	bl	8005024 <xflow>
 800506a:	ec41 0b10 	vmov	d0, r0, r1
 800506e:	bd08      	pop	{r3, pc}

08005070 <fabs>:
 8005070:	ec51 0b10 	vmov	r0, r1, d0
 8005074:	ee10 2a10 	vmov	r2, s0
 8005078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800507c:	ec43 2b10 	vmov	d0, r2, r3
 8005080:	4770      	bx	lr

08005082 <finite>:
 8005082:	b082      	sub	sp, #8
 8005084:	ed8d 0b00 	vstr	d0, [sp]
 8005088:	9801      	ldr	r0, [sp, #4]
 800508a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800508e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005092:	0fc0      	lsrs	r0, r0, #31
 8005094:	b002      	add	sp, #8
 8005096:	4770      	bx	lr

08005098 <scalbn>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	ec55 4b10 	vmov	r4, r5, d0
 800509e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80050a2:	4606      	mov	r6, r0
 80050a4:	462b      	mov	r3, r5
 80050a6:	b99a      	cbnz	r2, 80050d0 <scalbn+0x38>
 80050a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80050ac:	4323      	orrs	r3, r4
 80050ae:	d036      	beq.n	800511e <scalbn+0x86>
 80050b0:	4b39      	ldr	r3, [pc, #228]	; (8005198 <scalbn+0x100>)
 80050b2:	4629      	mov	r1, r5
 80050b4:	ee10 0a10 	vmov	r0, s0
 80050b8:	2200      	movs	r2, #0
 80050ba:	f7fb fa45 	bl	8000548 <__aeabi_dmul>
 80050be:	4b37      	ldr	r3, [pc, #220]	; (800519c <scalbn+0x104>)
 80050c0:	429e      	cmp	r6, r3
 80050c2:	4604      	mov	r4, r0
 80050c4:	460d      	mov	r5, r1
 80050c6:	da10      	bge.n	80050ea <scalbn+0x52>
 80050c8:	a32b      	add	r3, pc, #172	; (adr r3, 8005178 <scalbn+0xe0>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	e03a      	b.n	8005146 <scalbn+0xae>
 80050d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80050d4:	428a      	cmp	r2, r1
 80050d6:	d10c      	bne.n	80050f2 <scalbn+0x5a>
 80050d8:	ee10 2a10 	vmov	r2, s0
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb f87c 	bl	80001dc <__adddf3>
 80050e4:	4604      	mov	r4, r0
 80050e6:	460d      	mov	r5, r1
 80050e8:	e019      	b.n	800511e <scalbn+0x86>
 80050ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80050ee:	460b      	mov	r3, r1
 80050f0:	3a36      	subs	r2, #54	; 0x36
 80050f2:	4432      	add	r2, r6
 80050f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80050f8:	428a      	cmp	r2, r1
 80050fa:	dd08      	ble.n	800510e <scalbn+0x76>
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	a120      	add	r1, pc, #128	; (adr r1, 8005180 <scalbn+0xe8>)
 8005100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005104:	da1c      	bge.n	8005140 <scalbn+0xa8>
 8005106:	a120      	add	r1, pc, #128	; (adr r1, 8005188 <scalbn+0xf0>)
 8005108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800510c:	e018      	b.n	8005140 <scalbn+0xa8>
 800510e:	2a00      	cmp	r2, #0
 8005110:	dd08      	ble.n	8005124 <scalbn+0x8c>
 8005112:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800511a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800511e:	ec45 4b10 	vmov	d0, r4, r5
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005128:	da19      	bge.n	800515e <scalbn+0xc6>
 800512a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800512e:	429e      	cmp	r6, r3
 8005130:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005134:	dd0a      	ble.n	800514c <scalbn+0xb4>
 8005136:	a112      	add	r1, pc, #72	; (adr r1, 8005180 <scalbn+0xe8>)
 8005138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e2      	bne.n	8005106 <scalbn+0x6e>
 8005140:	a30f      	add	r3, pc, #60	; (adr r3, 8005180 <scalbn+0xe8>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f7fb f9ff 	bl	8000548 <__aeabi_dmul>
 800514a:	e7cb      	b.n	80050e4 <scalbn+0x4c>
 800514c:	a10a      	add	r1, pc, #40	; (adr r1, 8005178 <scalbn+0xe0>)
 800514e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0b8      	beq.n	80050c8 <scalbn+0x30>
 8005156:	a10e      	add	r1, pc, #56	; (adr r1, 8005190 <scalbn+0xf8>)
 8005158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800515c:	e7b4      	b.n	80050c8 <scalbn+0x30>
 800515e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005162:	3236      	adds	r2, #54	; 0x36
 8005164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005168:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800516c:	4620      	mov	r0, r4
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <scalbn+0x108>)
 8005170:	2200      	movs	r2, #0
 8005172:	e7e8      	b.n	8005146 <scalbn+0xae>
 8005174:	f3af 8000 	nop.w
 8005178:	c2f8f359 	.word	0xc2f8f359
 800517c:	01a56e1f 	.word	0x01a56e1f
 8005180:	8800759c 	.word	0x8800759c
 8005184:	7e37e43c 	.word	0x7e37e43c
 8005188:	8800759c 	.word	0x8800759c
 800518c:	fe37e43c 	.word	0xfe37e43c
 8005190:	c2f8f359 	.word	0xc2f8f359
 8005194:	81a56e1f 	.word	0x81a56e1f
 8005198:	43500000 	.word	0x43500000
 800519c:	ffff3cb0 	.word	0xffff3cb0
 80051a0:	3c900000 	.word	0x3c900000

080051a4 <_init>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr

080051b0 <_fini>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr
