
motordriver_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800435c  0800435c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004364  08004364  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800436c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000270  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009e97  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018e2  00000000  00000000  00029f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a48  00000000  00000000  0002b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007f6  00000000  00000000  0002c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd15  00000000  00000000  0002ca36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b2c5  00000000  00000000  0004c74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4ecc  00000000  00000000  00057a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002bd8  00000000  00000000  0011c8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011f4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004334 	.word	0x08004334

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004334 	.word	0x08004334

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b970 	b.w	8000c9c <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	460f      	mov	r7, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4694      	mov	ip, r2
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0xe2>
 80009ea:	fab2 f382 	clz	r3, r2
 80009ee:	b143      	cbz	r3, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f4:	f1c3 0220 	rsb	r2, r3, #32
 80009f8:	409f      	lsls	r7, r3
 80009fa:	fa20 f202 	lsr.w	r2, r0, r2
 80009fe:	4317      	orrs	r7, r2
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a06:	fa1f f58c 	uxth.w	r5, ip
 8000a0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a0e:	0c22      	lsrs	r2, r4, #16
 8000a10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a18:	fb01 f005 	mul.w	r0, r1, r5
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a28:	f080 811c 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8119 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a46:	fb00 f505 	mul.w	r5, r0, r5
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x90>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x294>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x294>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xbc>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ed 	beq.w	8000c5e <__udivmoddi4+0x28a>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d149      	bne.n	8000b2c <__udivmoddi4+0x158>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xce>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2be>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4617      	mov	r7, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xe6>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8090 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ad4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ade:	fb0e f005 	mul.w	r0, lr, r5
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2b8>
 8000af6:	4645      	mov	r5, r8
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b00:	fb07 2210 	mls	r2, r7, r0, r2
 8000b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x14e>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x14c>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2c2>
 8000b20:	4610      	mov	r0, r2
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b2a:	e79f      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b2c:	f1c1 0720 	rsb	r7, r1, #32
 8000b30:	408b      	lsls	r3, r1
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b42:	40fd      	lsrs	r5, r7
 8000b44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb09 5518 	mls	r5, r9, r8, r5
 8000b56:	0c1c      	lsrs	r4, r3, #16
 8000b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	fa00 f001 	lsl.w	r0, r0, r1
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2b4>
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2b4>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4464      	add	r4, ip
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	b29d      	uxth	r5, r3
 8000b88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2ac>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2ac>
 8000baa:	3b02      	subs	r3, #2
 8000bac:	4464      	add	r4, ip
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46ae      	mov	lr, r5
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x29c>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x298>
 8000bc4:	b156      	cbz	r6, 8000bdc <__udivmoddi4+0x208>
 8000bc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd2:	40ca      	lsrs	r2, r1
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	f1c3 0120 	rsb	r1, r3, #32
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	fa20 f201 	lsr.w	r2, r0, r1
 8000bf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bf4:	409d      	lsls	r5, r3
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1510 	mls	r5, r7, r0, r1
 8000c08:	0c11      	lsrs	r1, r2, #16
 8000c0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c12:	428d      	cmp	r5, r1
 8000c14:	fa04 f403 	lsl.w	r4, r4, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x258>
 8000c1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c24:	428d      	cmp	r5, r1
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1b49      	subs	r1, r1, r5
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c34:	fb07 1115 	mls	r1, r7, r5, r1
 8000c38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x282>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000c4e:	4291      	cmp	r1, r2
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000c52:	3d02      	subs	r5, #2
 8000c54:	4462      	add	r2, ip
 8000c56:	1a52      	subs	r2, r2, r1
 8000c58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0xfc>
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e708      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000c64:	4639      	mov	r1, r7
 8000c66:	e6e6      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x90>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c80:	462b      	mov	r3, r5
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x258>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xd8>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x14e>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca4:	f000 ff02 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f81a 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 fbea 	bl	8001484 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cb0:	f000 f874 	bl	8000d9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cb4:	f000 f912 	bl	8000edc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cb8:	f000 f984 	bl	8000fc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cbc:	f000 f9f8 	bl	80010b0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cc0:	f000 fa7c 	bl	80011bc <MX_TIM8_Init>
  MX_TIM9_Init();
 8000cc4:	f000 fb1a 	bl	80012fc <MX_TIM9_Init>
  MX_TIM12_Init();
 8000cc8:	f000 fb7a 	bl	80013c0 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  set_desired_motorx(25,1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8000cd8 <main+0x38>
 8000cd2:	f003 f935 	bl	8003f40 <set_desired_motorx>
  //  HAL_Delay(5000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <main+0x36>
 8000cd8:	00000000 	.word	0x00000000
 8000cdc:	40390000 	.word	0x40390000

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2230      	movs	r2, #48	; 0x30
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 faf4 	bl	80042dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <SystemClock_Config+0xb4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <SystemClock_Config+0xb4>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <SystemClock_Config+0xb4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <SystemClock_Config+0xb8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <SystemClock_Config+0xb8>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <SystemClock_Config+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 f9e6 	bl	8002120 <HAL_RCC_OscConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d5a:	f000 fc39 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5e:	230f      	movs	r3, #15
 8000d60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fc47 	bl	8002610 <HAL_RCC_ClockConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d88:	f000 fc22 	bl	80015d0 <Error_Handler>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3750      	adds	r7, #80	; 0x50
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b096      	sub	sp, #88	; 0x58
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fa81 	bl	80042dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000ddc:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <MX_TIM1_Init+0x13c>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8000de0:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000dec:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000dee:	2263      	movs	r2, #99	; 0x63
 8000df0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e04:	4833      	ldr	r0, [pc, #204]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000e06:	f001 fdaf 	bl	8002968 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e10:	f000 fbde 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000e22:	f002 f9b9 	bl	8003198 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e2c:	f000 fbd0 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e30:	4828      	ldr	r0, [pc, #160]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000e32:	f001 fde8 	bl	8002a06 <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e3c:	f000 fbc8 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000e50:	f002 ff1c 	bl	8003c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e5a:	f000 fbb9 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5e:	2360      	movs	r3, #96	; 0x60
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4814      	ldr	r0, [pc, #80]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000e84:	f002 f8c6 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e8e:	f000 fb9f 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000eb6:	f002 ff65 	bl	8003d84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ec0:	f000 fb86 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <MX_TIM1_Init+0x138>)
 8000ec6:	f000 fc83 	bl	80017d0 <HAL_TIM_MspPostInit>

}
 8000eca:	bf00      	nop
 8000ecc:	3758      	adds	r7, #88	; 0x58
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000002c 	.word	0x2000002c
 8000ed8:	40010000 	.word	0x40010000

08000edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08e      	sub	sp, #56	; 0x38
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f16:	223f      	movs	r2, #63	; 0x3f
 8000f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f22:	2263      	movs	r2, #99	; 0x63
 8000f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f32:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f34:	f001 fd18 	bl	8002968 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000f3e:	f000 fb47 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f50:	f002 f922 	bl	8003198 <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000f5a:	f000 fb39 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f60:	f001 fd51 	bl	8002a06 <HAL_TIM_PWM_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000f6a:	f000 fb31 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000f7e:	f002 fe85 	bl	8003c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000f88:	f000 fb22 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8c:	2360      	movs	r3, #96	; 0x60
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000fa4:	f002 f836 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000fae:	f000 fb0f 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM2_Init+0xe4>)
 8000fb4:	f000 fc0c 	bl	80017d0 <HAL_TIM_MspPostInit>

}
 8000fb8:	bf00      	nop
 8000fba:	3738      	adds	r7, #56	; 0x38
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000074 	.word	0x20000074

08000fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8000ff6:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <MX_TIM3_Init+0xe8>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8000ffc:	223f      	movs	r2, #63	; 0x3f
 8000ffe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001008:	2263      	movs	r2, #99	; 0x63
 800100a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_TIM3_Init+0xe4>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001018:	4823      	ldr	r0, [pc, #140]	; (80010a8 <MX_TIM3_Init+0xe4>)
 800101a:	f001 fca5 	bl	8002968 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001024:	f000 fad4 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800102e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001032:	4619      	mov	r1, r3
 8001034:	481c      	ldr	r0, [pc, #112]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001036:	f002 f8af 	bl	8003198 <HAL_TIM_ConfigClockSource>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001040:	f000 fac6 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001046:	f001 fcde 	bl	8002a06 <HAL_TIM_PWM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001050:	f000 fabe 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_TIM3_Init+0xe4>)
 8001064:	f002 fe12 	bl	8003c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800106e:	f000 faaf 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2360      	movs	r3, #96	; 0x60
 8001074:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM3_Init+0xe4>)
 800108a:	f001 ffc3 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001094:	f000 fa9c 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM3_Init+0xe4>)
 800109a:	f000 fb99 	bl	80017d0 <HAL_TIM_MspPostInit>

}
 800109e:	bf00      	nop
 80010a0:	3738      	adds	r7, #56	; 0x38
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200000bc 	.word	0x200000bc
 80010ac:	40000400 	.word	0x40000400

080010b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <MX_TIM4_Init+0x104>)
 80010dc:	4a36      	ldr	r2, [pc, #216]	; (80011b8 <MX_TIM4_Init+0x108>)
 80010de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_TIM4_Init+0x104>)
 80010e2:	223f      	movs	r2, #63	; 0x3f
 80010e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <MX_TIM4_Init+0x104>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <MX_TIM4_Init+0x104>)
 80010ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <MX_TIM4_Init+0x104>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_TIM4_Init+0x104>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001100:	482c      	ldr	r0, [pc, #176]	; (80011b4 <MX_TIM4_Init+0x104>)
 8001102:	f001 fc31 	bl	8002968 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 fa60 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	4619      	mov	r1, r3
 800111c:	4825      	ldr	r0, [pc, #148]	; (80011b4 <MX_TIM4_Init+0x104>)
 800111e:	f002 f83b 	bl	8003198 <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001128:	f000 fa52 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800112c:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_TIM4_Init+0x104>)
 800112e:	f001 fd8b 	bl	8002c48 <HAL_TIM_IC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001138:	f000 fa4a 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	481a      	ldr	r0, [pc, #104]	; (80011b4 <MX_TIM4_Init+0x104>)
 800114c:	f002 fd9e 	bl	8003c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001156:	f000 fa3b 	bl	80015d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800115a:	230a      	movs	r3, #10
 800115c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115e:	2301      	movs	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_TIM4_Init+0x104>)
 8001172:	f001 feb2 	bl	8002eda <HAL_TIM_IC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800117c:	f000 fa28 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	2204      	movs	r2, #4
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_TIM4_Init+0x104>)
 8001188:	f001 fea7 	bl	8002eda <HAL_TIM_IC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001192:	f000 fa1d 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	2208      	movs	r2, #8
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM4_Init+0x104>)
 800119e:	f001 fe9c 	bl	8002eda <HAL_TIM_IC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80011a8:	f000 fa12 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000104 	.word	0x20000104
 80011b8:	40000800 	.word	0x40000800

080011bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 f871 	bl	80042dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <MX_TIM8_Init+0x138>)
 80011fc:	4a3e      	ldr	r2, [pc, #248]	; (80012f8 <MX_TIM8_Init+0x13c>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 64-1;
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001202:	223f      	movs	r2, #63	; 0x3f
 8001204:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <MX_TIM8_Init+0x138>)
 800120e:	2263      	movs	r2, #99	; 0x63
 8001210:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <MX_TIM8_Init+0x138>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001224:	4833      	ldr	r0, [pc, #204]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001226:	f001 fb9f 	bl	8002968 <HAL_TIM_Base_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001230:	f000 f9ce 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800123a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123e:	4619      	mov	r1, r3
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001242:	f001 ffa9 	bl	8003198 <HAL_TIM_ConfigClockSource>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800124c:	f000 f9c0 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001250:	4828      	ldr	r0, [pc, #160]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001252:	f001 fbd8 	bl	8002a06 <HAL_TIM_PWM_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800125c:	f000 f9b8 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126c:	4619      	mov	r1, r3
 800126e:	4821      	ldr	r0, [pc, #132]	; (80012f4 <MX_TIM8_Init+0x138>)
 8001270:	f002 fd0c 	bl	8003c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800127a:	f000 f9a9 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127e:	2360      	movs	r3, #96	; 0x60
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800128a:	2300      	movs	r3, #0
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <MX_TIM8_Init+0x138>)
 80012a4:	f001 feb6 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80012ae:	f000 f98f 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM8_Init+0x138>)
 80012d6:	f002 fd55 	bl	8003d84 <HAL_TIMEx_ConfigBreakDeadTime>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80012e0:	f000 f976 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM8_Init+0x138>)
 80012e6:	f000 fa73 	bl	80017d0 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3758      	adds	r7, #88	; 0x58
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000014c 	.word	0x2000014c
 80012f8:	40010400 	.word	0x40010400

080012fc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_TIM9_Init+0xbc>)
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <MX_TIM9_Init+0xc0>)
 8001326:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 64-1;
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_TIM9_Init+0xbc>)
 800132a:	223f      	movs	r2, #63	; 0x3f
 800132c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_TIM9_Init+0xbc>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_TIM9_Init+0xbc>)
 8001336:	2263      	movs	r2, #99	; 0x63
 8001338:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_TIM9_Init+0xbc>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM9_Init+0xbc>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001346:	481c      	ldr	r0, [pc, #112]	; (80013b8 <MX_TIM9_Init+0xbc>)
 8001348:	f001 fb0e 	bl	8002968 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8001352:	f000 f93d 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4619      	mov	r1, r3
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <MX_TIM9_Init+0xbc>)
 8001364:	f001 ff18 	bl	8003198 <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800136e:	f000 f92f 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_TIM9_Init+0xbc>)
 8001374:	f001 fb47 	bl	8002a06 <HAL_TIM_PWM_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 800137e:	f000 f927 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	; 0x60
 8001384:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM9_Init+0xbc>)
 800139a:	f001 fe3b 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 80013a4:	f000 f914 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM9_Init+0xbc>)
 80013aa:	f000 fa11 	bl	80017d0 <HAL_TIM_MspPostInit>

}
 80013ae:	bf00      	nop
 80013b0:	3730      	adds	r7, #48	; 0x30
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000194 	.word	0x20000194
 80013bc:	40014000 	.word	0x40014000

080013c0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_TIM12_Init+0xbc>)
 80013e8:	4a25      	ldr	r2, [pc, #148]	; (8001480 <MX_TIM12_Init+0xc0>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_TIM12_Init+0xbc>)
 80013ee:	223f      	movs	r2, #63	; 0x3f
 80013f0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_TIM12_Init+0xbc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 80013f8:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_TIM12_Init+0xbc>)
 80013fa:	2263      	movs	r2, #99	; 0x63
 80013fc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_TIM12_Init+0xbc>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM12_Init+0xbc>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800140a:	481c      	ldr	r0, [pc, #112]	; (800147c <MX_TIM12_Init+0xbc>)
 800140c:	f001 faac 	bl	8002968 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001416:	f000 f8db 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0320 	add.w	r3, r7, #32
 8001424:	4619      	mov	r1, r3
 8001426:	4815      	ldr	r0, [pc, #84]	; (800147c <MX_TIM12_Init+0xbc>)
 8001428:	f001 feb6 	bl	8003198 <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8001432:	f000 f8cd 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_TIM12_Init+0xbc>)
 8001438:	f001 fae5 	bl	8002a06 <HAL_TIM_PWM_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8001442:	f000 f8c5 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_TIM12_Init+0xbc>)
 800145e:	f001 fdd9 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8001468:	f000 f8b2 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM12_Init+0xbc>)
 800146e:	f000 f9af 	bl	80017d0 <HAL_TIM_MspPostInit>

}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	; 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001dc 	.word	0x200001dc
 8001480:	40001800 	.word	0x40001800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a39      	ldr	r2, [pc, #228]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <MX_GPIO_Init+0x13c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <MX_GPIO_Init+0x13c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a2b      	ldr	r2, [pc, #172]	; (80015c0 <MX_GPIO_Init+0x13c>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <MX_GPIO_Init+0x13c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <MX_GPIO_Init+0x13c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <MX_GPIO_Init+0x13c>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_GPIO_Init+0x13c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001542:	2200      	movs	r2, #0
 8001544:	f248 01ee 	movw	r1, #33006	; 0x80ee
 8001548:	481e      	ldr	r0, [pc, #120]	; (80015c4 <MX_GPIO_Init+0x140>)
 800154a:	f000 fdcf 	bl	80020ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <MX_GPIO_Init+0x144>)
 8001556:	f000 fdc9 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD15 PD1 PD2 PD3
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800155a:	f248 03ee 	movw	r3, #33006	; 0x80ee
 800155e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4814      	ldr	r0, [pc, #80]	; (80015c4 <MX_GPIO_Init+0x140>)
 8001574:	f000 fc1e 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001578:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_GPIO_Init+0x144>)
 8001592:	f000 fc0f 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001596:	2370      	movs	r3, #112	; 0x70
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <MX_GPIO_Init+0x148>)
 80015aa:	f000 fc03 	bl	8001db4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  motor_initialize(&GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fc4c 	bl	8003e50 <motor_initialize>
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b8:	bf00      	nop
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020400 	.word	0x40020400

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b090      	sub	sp, #64	; 0x40
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a59      	ldr	r2, [pc, #356]	; (80017b0 <HAL_TIM_Base_MspInit+0x184>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10e      	bne.n	800166c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
 8001652:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a57      	ldr	r2, [pc, #348]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b55      	ldr	r3, [pc, #340]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
 8001668:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800166a:	e09d      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d10e      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a4d      	ldr	r2, [pc, #308]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001692:	e089      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a47      	ldr	r2, [pc, #284]	; (80017b8 <HAL_TIM_Base_MspInit+0x18c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
}
 80016ba:	e075      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM4)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3e      	ldr	r2, [pc, #248]	; (80017bc <HAL_TIM_Base_MspInit+0x190>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d135      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80016fe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001710:	2302      	movs	r3, #2
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001718:	4619      	mov	r1, r3
 800171a:	4829      	ldr	r0, [pc, #164]	; (80017c0 <HAL_TIM_Base_MspInit+0x194>)
 800171c:	f000 fb4a 	bl	8001db4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	201e      	movs	r0, #30
 8001726:	f000 fb0e 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800172a:	201e      	movs	r0, #30
 800172c:	f000 fb27 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 8001730:	e03a      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM8)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <HAL_TIM_Base_MspInit+0x198>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10e      	bne.n	800175a <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	6453      	str	r3, [r2, #68]	; 0x44
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
}
 8001758:	e026      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM9)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <HAL_TIM_Base_MspInit+0x19c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d10e      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	6453      	str	r3, [r2, #68]	; 0x44
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
}
 8001780:	e012      	b.n	80017a8 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM12)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_TIM_Base_MspInit+0x1a0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d10d      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 8001796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_TIM_Base_MspInit+0x188>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3740      	adds	r7, #64	; 0x40
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40010400 	.word	0x40010400
 80017c8:	40014000 	.word	0x40014000
 80017cc:	40001800 	.word	0x40001800

080017d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a6d      	ldr	r2, [pc, #436]	; (80019a4 <HAL_TIM_MspPostInit+0x1d4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d11f      	bne.n	8001832 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	4b6c      	ldr	r3, [pc, #432]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a6b      	ldr	r2, [pc, #428]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800180e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001820:	2301      	movs	r3, #1
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	4860      	ldr	r0, [pc, #384]	; (80019ac <HAL_TIM_MspPostInit+0x1dc>)
 800182c:	f000 fac2 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001830:	e0b3      	b.n	800199a <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183a:	d11e      	bne.n	800187a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6313      	str	r3, [r2, #48]	; 0x30
 800184c:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001858:	2320      	movs	r3, #32
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001868:	2301      	movs	r3, #1
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	484f      	ldr	r0, [pc, #316]	; (80019b0 <HAL_TIM_MspPostInit+0x1e0>)
 8001874:	f000 fa9e 	bl	8001db4 <HAL_GPIO_Init>
}
 8001878:	e08f      	b.n	800199a <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM3)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a4d      	ldr	r2, [pc, #308]	; (80019b4 <HAL_TIM_MspPostInit+0x1e4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d11e      	bne.n	80018c2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	4a46      	ldr	r2, [pc, #280]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6313      	str	r3, [r2, #48]	; 0x30
 8001894:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b0:	2302      	movs	r3, #2
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	483d      	ldr	r0, [pc, #244]	; (80019b0 <HAL_TIM_MspPostInit+0x1e0>)
 80018bc:	f000 fa7a 	bl	8001db4 <HAL_GPIO_Init>
}
 80018c0:	e06b      	b.n	800199a <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM8)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_TIM_MspPostInit+0x1e8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d11e      	bne.n	800190a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018f8:	2303      	movs	r3, #3
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	482e      	ldr	r0, [pc, #184]	; (80019bc <HAL_TIM_MspPostInit+0x1ec>)
 8001904:	f000 fa56 	bl	8001db4 <HAL_GPIO_Init>
}
 8001908:	e047      	b.n	800199a <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM9)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <HAL_TIM_MspPostInit+0x1f0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d11e      	bne.n	8001952 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001930:	2320      	movs	r3, #32
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001940:	2303      	movs	r3, #3
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	4818      	ldr	r0, [pc, #96]	; (80019ac <HAL_TIM_MspPostInit+0x1dc>)
 800194c:	f000 fa32 	bl	8001db4 <HAL_GPIO_Init>
}
 8001950:	e023      	b.n	800199a <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM12)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_TIM_MspPostInit+0x1f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d11e      	bne.n	800199a <HAL_TIM_MspPostInit+0x1ca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_TIM_MspPostInit+0x1d8>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800198a:	2309      	movs	r3, #9
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <HAL_TIM_MspPostInit+0x1f8>)
 8001996:	f000 fa0d 	bl	8001db4 <HAL_GPIO_Init>
}
 800199a:	bf00      	nop
 800199c:	3738      	adds	r7, #56	; 0x38
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40010400 	.word	0x40010400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40014000 	.word	0x40014000
 80019c4:	40001800 	.word	0x40001800
 80019c8:	40020400 	.word	0x40020400

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f89a 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM4_IRQHandler+0x10>)
 8001a26:	f001 f968 	bl	8002cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000104 	.word	0x20000104

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a5c:	f7ff ffea 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	; (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	; (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a86:	f002 fc31 	bl	80042ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff f909 	bl	8000ca0 <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a9c:	0800436c 	.word	0x0800436c
  ldr r2, =_sbss
 8001aa0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001aa4:	20000280 	.word	0x20000280

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f92b 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	200f      	movs	r0, #15
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fd7c 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f943 	bl	8001d9a <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f90b 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000224 	.word	0x20000224

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000224 	.word	0x20000224

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff3e 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff31 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e16b      	b.n	80020a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 815a 	bne.w	80020a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d005      	beq.n	8001e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d017      	beq.n	8001ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80b4 	beq.w	80020a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b60      	ldr	r3, [pc, #384]	; (80020c0 <HAL_GPIO_Init+0x30c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a5f      	ldr	r2, [pc, #380]	; (80020c0 <HAL_GPIO_Init+0x30c>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_GPIO_Init+0x30c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a5b      	ldr	r2, [pc, #364]	; (80020c4 <HAL_GPIO_Init+0x310>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_GPIO_Init+0x314>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02b      	beq.n	8001fda <HAL_GPIO_Init+0x226>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a51      	ldr	r2, [pc, #324]	; (80020cc <HAL_GPIO_Init+0x318>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d025      	beq.n	8001fd6 <HAL_GPIO_Init+0x222>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a50      	ldr	r2, [pc, #320]	; (80020d0 <HAL_GPIO_Init+0x31c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01f      	beq.n	8001fd2 <HAL_GPIO_Init+0x21e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4f      	ldr	r2, [pc, #316]	; (80020d4 <HAL_GPIO_Init+0x320>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x21a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <HAL_GPIO_Init+0x324>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0x216>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4d      	ldr	r2, [pc, #308]	; (80020dc <HAL_GPIO_Init+0x328>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0x212>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <HAL_GPIO_Init+0x32c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x20e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4b      	ldr	r2, [pc, #300]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_Init+0x20a>
 8001fba:	2307      	movs	r3, #7
 8001fbc:	e00e      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e00c      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	e00a      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	e008      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fca:	2304      	movs	r3, #4
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e004      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x228>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f002 0203 	and.w	r2, r2, #3
 8001fe2:	0092      	lsls	r2, r2, #2
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fec:	4935      	ldr	r1, [pc, #212]	; (80020c4 <HAL_GPIO_Init+0x310>)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201e:	4a32      	ldr	r2, [pc, #200]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_GPIO_Init+0x334>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002072:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_GPIO_Init+0x334>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_GPIO_Init+0x334>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b0f      	cmp	r3, #15
 80020ac:	f67f ae90 	bls.w	8001dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40013800 	.word	0x40013800
 80020c8:	40020000 	.word	0x40020000
 80020cc:	40020400 	.word	0x40020400
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40021400 	.word	0x40021400
 80020e0:	40021800 	.word	0x40021800
 80020e4:	40021c00 	.word	0x40021c00
 80020e8:	40013c00 	.word	0x40013c00

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	619a      	str	r2, [r3, #24]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e267      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d075      	beq.n	800222a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d00c      	beq.n	8002164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214a:	4b85      	ldr	r3, [pc, #532]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002152:	2b08      	cmp	r3, #8
 8002154:	d112      	bne.n	800217c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002162:	d10b      	bne.n	800217c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d05b      	beq.n	8002228 <HAL_RCC_OscConfig+0x108>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d157      	bne.n	8002228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e242      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d106      	bne.n	8002194 <HAL_RCC_OscConfig+0x74>
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e01d      	b.n	80021d0 <HAL_RCC_OscConfig+0xb0>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x98>
 800219e:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6f      	ldr	r2, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6c      	ldr	r2, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0xb0>
 80021b8:	4b69      	ldr	r3, [pc, #420]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a68      	ldr	r2, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a65      	ldr	r2, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fcce 	bl	8001b78 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff fcca 	bl	8001b78 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e207      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0xc0>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fcba 	bl	8001b78 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff fcb6 	bl	8001b78 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1f3      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	4b51      	ldr	r3, [pc, #324]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0xe8>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d063      	beq.n	80022fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800224a:	2b08      	cmp	r3, #8
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x152>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e1c7      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	e03a      	b.n	80022fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x244>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff fc6f 	bl	8001b78 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff fc6b 	bl	8001b78 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1a8      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4925      	ldr	r1, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_OscConfig+0x244>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7ff fc4e 	bl	8001b78 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7ff fc4a 	bl	8001b78 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e187      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d016      	beq.n	8002340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_RCC_OscConfig+0x248>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fc2e 	bl	8001b78 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff fc2a 	bl	8001b78 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e167      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x200>
 800233e:	e01b      	b.n	8002378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x248>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff fc17 	bl	8001b78 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	e00e      	b.n	800236c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234e:	f7ff fc13 	bl	8001b78 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d907      	bls.n	800236c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e150      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
 8002360:	40023800 	.word	0x40023800
 8002364:	42470000 	.word	0x42470000
 8002368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ea      	bne.n	800234e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8097 	beq.w	80024b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a7c      	ldr	r2, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b77      	ldr	r3, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b74      	ldr	r3, [pc, #464]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a73      	ldr	r2, [pc, #460]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fbd3 	bl	8001b78 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7ff fbcf 	bl	8001b78 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e10c      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x2ea>
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a63      	ldr	r2, [pc, #396]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x324>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x30c>
 8002412:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a5e      	ldr	r2, [pc, #376]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a5b      	ldr	r2, [pc, #364]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x324>
 800242c:	4b58      	ldr	r3, [pc, #352]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
 8002438:	4b55      	ldr	r3, [pc, #340]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a54      	ldr	r2, [pc, #336]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7ff fb94 	bl	8001b78 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	e00a      	b.n	800246a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff fb90 	bl	8001b78 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0cb      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ee      	beq.n	8002454 <HAL_RCC_OscConfig+0x334>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff fb7e 	bl	8001b78 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7ff fb7a 	bl	8001b78 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0b5      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002496:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ee      	bne.n	8002480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	4a38      	ldr	r2, [pc, #224]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a1 	beq.w	8002600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d05c      	beq.n	8002584 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d141      	bne.n	8002556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_OscConfig+0x478>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fb4e 	bl	8001b78 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7ff fb4a 	bl	8001b78 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e087      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	3b01      	subs	r3, #1
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	491b      	ldr	r1, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x478>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff fb23 	bl	8001b78 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff fb1f 	bl	8001b78 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e05c      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x416>
 8002554:	e054      	b.n	8002600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x478>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fb0c 	bl	8001b78 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7ff fb08 	bl	8001b78 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e045      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x444>
 8002582:	e03d      	b.n	8002600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e038      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000
 8002598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x4ec>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d028      	beq.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d121      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d11a      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025cc:	4013      	ands	r3, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d111      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	3b01      	subs	r3, #1
 80025e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0cc      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d90c      	bls.n	800264c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800266e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d044      	beq.n	8002730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d119      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e067      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4934      	ldr	r1, [pc, #208]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7ff fa3a 	bl	8001b78 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7ff fa36 	bl	8001b78 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e04f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d1eb      	bne.n	8002708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d20c      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4602      	mov	r2, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	5ccb      	ldrb	r3, [r1, r3]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f99a 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00
 80027cc:	40023800 	.word	0x40023800
 80027d0:	0800434c 	.word	0x0800434c
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b090      	sub	sp, #64	; 0x40
 80027e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
 80027e8:	2300      	movs	r3, #0
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ec:	2300      	movs	r3, #0
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f4:	4b59      	ldr	r3, [pc, #356]	; (800295c <HAL_RCC_GetSysClockFreq+0x180>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d00d      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x40>
 8002800:	2b08      	cmp	r3, #8
 8002802:	f200 80a1 	bhi.w	8002948 <HAL_RCC_GetSysClockFreq+0x16c>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x34>
 800280a:	2b04      	cmp	r3, #4
 800280c:	d003      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x3a>
 800280e:	e09b      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b53      	ldr	r3, [pc, #332]	; (8002960 <HAL_RCC_GetSysClockFreq+0x184>)
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002814:	e09b      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002816:	4b53      	ldr	r3, [pc, #332]	; (8002964 <HAL_RCC_GetSysClockFreq+0x188>)
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800281a:	e098      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281c:	4b4f      	ldr	r3, [pc, #316]	; (800295c <HAL_RCC_GetSysClockFreq+0x180>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <HAL_RCC_GetSysClockFreq+0x180>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d028      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002832:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_RCC_GetSysClockFreq+0x180>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	099b      	lsrs	r3, r3, #6
 8002838:	2200      	movs	r2, #0
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	627a      	str	r2, [r7, #36]	; 0x24
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002844:	2100      	movs	r1, #0
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_GetSysClockFreq+0x188>)
 8002848:	fb03 f201 	mul.w	r2, r3, r1
 800284c:	2300      	movs	r3, #0
 800284e:	fb00 f303 	mul.w	r3, r0, r3
 8002852:	4413      	add	r3, r2
 8002854:	4a43      	ldr	r2, [pc, #268]	; (8002964 <HAL_RCC_GetSysClockFreq+0x188>)
 8002856:	fba0 1202 	umull	r1, r2, r0, r2
 800285a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800285c:	460a      	mov	r2, r1
 800285e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002862:	4413      	add	r3, r2
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	2200      	movs	r2, #0
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	61fa      	str	r2, [r7, #28]
 800286e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002872:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002876:	f7fe f895 	bl	80009a4 <__aeabi_uldivmod>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4613      	mov	r3, r2
 8002880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002882:	e053      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <HAL_RCC_GetSysClockFreq+0x180>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	2200      	movs	r2, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	617a      	str	r2, [r7, #20]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002896:	f04f 0b00 	mov.w	fp, #0
 800289a:	4652      	mov	r2, sl
 800289c:	465b      	mov	r3, fp
 800289e:	f04f 0000 	mov.w	r0, #0
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	0159      	lsls	r1, r3, #5
 80028a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ac:	0150      	lsls	r0, r2, #5
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	ebb2 080a 	subs.w	r8, r2, sl
 80028b6:	eb63 090b 	sbc.w	r9, r3, fp
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028ce:	ebb2 0408 	subs.w	r4, r2, r8
 80028d2:	eb63 0509 	sbc.w	r5, r3, r9
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	00eb      	lsls	r3, r5, #3
 80028e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e4:	00e2      	lsls	r2, r4, #3
 80028e6:	4614      	mov	r4, r2
 80028e8:	461d      	mov	r5, r3
 80028ea:	eb14 030a 	adds.w	r3, r4, sl
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	eb45 030b 	adc.w	r3, r5, fp
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002902:	4629      	mov	r1, r5
 8002904:	028b      	lsls	r3, r1, #10
 8002906:	4621      	mov	r1, r4
 8002908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800290c:	4621      	mov	r1, r4
 800290e:	028a      	lsls	r2, r1, #10
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	2200      	movs	r2, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	60fa      	str	r2, [r7, #12]
 800291c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002920:	f7fe f840 	bl	80009a4 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800293c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetSysClockFreq+0x184>)
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002950:	4618      	mov	r0, r3
 8002952:	3740      	adds	r7, #64	; 0x40
 8002954:	46bd      	mov	sp, r7
 8002956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	00f42400 	.word	0x00f42400
 8002964:	017d7840 	.word	0x017d7840

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fe4c 	bl	800162c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fd2a 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e041      	b.n	8002a9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f839 	bl	8002aa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f000 fcdb 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_TIM_PWM_Start+0x24>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e022      	b.n	8002b22 <HAL_TIM_PWM_Start+0x6a>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d109      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x3e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e015      	b.n	8002b22 <HAL_TIM_PWM_Start+0x6a>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d109      	bne.n	8002b10 <HAL_TIM_PWM_Start+0x58>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e008      	b.n	8002b22 <HAL_TIM_PWM_Start+0x6a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07c      	b.n	8002c24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x82>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	e013      	b.n	8002b62 <HAL_TIM_PWM_Start+0xaa>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x92>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b48:	e00b      	b.n	8002b62 <HAL_TIM_PWM_Start+0xaa>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0xa2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b58:	e003      	b.n	8002b62 <HAL_TIM_PWM_Start+0xaa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 f868 	bl	8003c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_TIM_PWM_Start+0x174>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_TIM_PWM_Start+0xcc>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2c      	ldr	r2, [pc, #176]	; (8002c30 <HAL_TIM_PWM_Start+0x178>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_TIM_PWM_Start+0xd0>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_TIM_PWM_Start+0xd2>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_TIM_PWM_Start+0x174>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d022      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d01d      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_TIM_PWM_Start+0x17c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d018      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_TIM_PWM_Start+0x180>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_TIM_PWM_Start+0x184>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00e      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_TIM_PWM_Start+0x178>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_TIM_PWM_Start+0x188>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d004      	beq.n	8002bee <HAL_TIM_PWM_Start+0x136>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIM_PWM_Start+0x18c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d111      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d010      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c10:	e007      	b.n	8002c22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40001800 	.word	0x40001800

08002c48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e041      	b.n	8002cde <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f839 	bl	8002ce6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f000 fbba 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01b      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f06f 0202 	mvn.w	r2, #2
 8002d2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f001 f923 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8002d4a:	e005      	b.n	8002d58 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fb39 	bl	80033c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fb40 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01b      	beq.n	8002daa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f06f 0204 	mvn.w	r2, #4
 8002d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f001 f8fd 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8002d96:	e005      	b.n	8002da4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fb13 	bl	80033c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb1a 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01b      	beq.n	8002df6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0208 	mvn.w	r2, #8
 8002dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f001 f8d7 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8002de2:	e005      	b.n	8002df0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 faed 	bl	80033c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 faf4 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01b      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0210 	mvn.w	r2, #16
 8002e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2208      	movs	r2, #8
 8002e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f001 f8b1 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8002e2e:	e005      	b.n	8002e3c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fac7 	bl	80033c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 face 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0201 	mvn.w	r2, #1
 8002e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 faa5 	bl	80033b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00c      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 ffd9 	bl	8003e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fa9f 	bl	80033ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0220 	mvn.w	r2, #32
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 ffab 	bl	8003e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e088      	b.n	800300a <HAL_TIM_IC_ConfigChannel+0x130>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11b      	bne.n	8002f3e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002f16:	f000 fccf 	bl	80038b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 020c 	bic.w	r2, r2, #12
 8002f28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6999      	ldr	r1, [r3, #24]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	619a      	str	r2, [r3, #24]
 8002f3c:	e060      	b.n	8003000 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11c      	bne.n	8002f7e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002f54:	f000 fd53 	bl	80039fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6999      	ldr	r1, [r3, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	619a      	str	r2, [r3, #24]
 8002f7c:	e040      	b.n	8003000 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002f94:	f000 fda0 	bl	8003ad8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 020c 	bic.w	r2, r2, #12
 8002fa6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69d9      	ldr	r1, [r3, #28]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	61da      	str	r2, [r3, #28]
 8002fba:	e021      	b.n	8003000 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d11c      	bne.n	8002ffc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002fd2:	f000 fdbd 	bl	8003b50 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fe4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69d9      	ldr	r1, [r3, #28]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	61da      	str	r2, [r3, #28]
 8002ffa:	e001      	b.n	8003000 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003008:	7dfb      	ldrb	r3, [r7, #23]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800302e:	2302      	movs	r3, #2
 8003030:	e0ae      	b.n	8003190 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	f200 809f 	bhi.w	8003180 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	0800307d 	.word	0x0800307d
 800304c:	08003181 	.word	0x08003181
 8003050:	08003181 	.word	0x08003181
 8003054:	08003181 	.word	0x08003181
 8003058:	080030bd 	.word	0x080030bd
 800305c:	08003181 	.word	0x08003181
 8003060:	08003181 	.word	0x08003181
 8003064:	08003181 	.word	0x08003181
 8003068:	080030ff 	.word	0x080030ff
 800306c:	08003181 	.word	0x08003181
 8003070:	08003181 	.word	0x08003181
 8003074:	08003181 	.word	0x08003181
 8003078:	0800313f 	.word	0x0800313f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fa68 	bl	8003558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0208 	orr.w	r2, r2, #8
 8003096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0204 	bic.w	r2, r2, #4
 80030a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6999      	ldr	r1, [r3, #24]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	619a      	str	r2, [r3, #24]
      break;
 80030ba:	e064      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fab8 	bl	8003638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6999      	ldr	r1, [r3, #24]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	021a      	lsls	r2, r3, #8
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	619a      	str	r2, [r3, #24]
      break;
 80030fc:	e043      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fb0d 	bl	8003724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0208 	orr.w	r2, r2, #8
 8003118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0204 	bic.w	r2, r2, #4
 8003128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69d9      	ldr	r1, [r3, #28]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	61da      	str	r2, [r3, #28]
      break;
 800313c:	e023      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fb61 	bl	800380c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69d9      	ldr	r1, [r3, #28]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	021a      	lsls	r2, r3, #8
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	61da      	str	r2, [r3, #28]
      break;
 800317e:	e002      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800318e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_ConfigClockSource+0x1c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0b4      	b.n	800331e <HAL_TIM_ConfigClockSource+0x186>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ec:	d03e      	beq.n	800326c <HAL_TIM_ConfigClockSource+0xd4>
 80031ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f2:	f200 8087 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	f000 8086 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x172>
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003202:	d87f      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b70      	cmp	r3, #112	; 0x70
 8003206:	d01a      	beq.n	800323e <HAL_TIM_ConfigClockSource+0xa6>
 8003208:	2b70      	cmp	r3, #112	; 0x70
 800320a:	d87b      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d050      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003210:	2b60      	cmp	r3, #96	; 0x60
 8003212:	d877      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b50      	cmp	r3, #80	; 0x50
 8003216:	d03c      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xfa>
 8003218:	2b50      	cmp	r3, #80	; 0x50
 800321a:	d873      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d058      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d86f      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d064      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003228:	2b30      	cmp	r3, #48	; 0x30
 800322a:	d86b      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d060      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d867      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05c      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003238:	2b10      	cmp	r3, #16
 800323a:	d05a      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 800323c:	e062      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800324e:	f000 fcd7 	bl	8003c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	609a      	str	r2, [r3, #8]
      break;
 800326a:	e04f      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	f000 fcc0 	bl	8003c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328e:	609a      	str	r2, [r3, #8]
      break;
 8003290:	e03c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 fb7e 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2150      	movs	r1, #80	; 0x50
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fc8d 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 80032b0:	e02c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 fbda 	bl	8003a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2160      	movs	r1, #96	; 0x60
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fc7d 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 80032d0:	e01c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	461a      	mov	r2, r3
 80032e0:	f000 fb5e 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2140      	movs	r1, #64	; 0x40
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fc6d 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 80032f0:	e00c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f000 fc64 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 8003302:	e003      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e000      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800330a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d831      	bhi.n	80033a0 <HAL_TIM_ReadCapturedValue+0x78>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_TIM_ReadCapturedValue+0x1c>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003379 	.word	0x08003379
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033a1 	.word	0x080033a1
 8003350:	080033a1 	.word	0x080033a1
 8003354:	08003383 	.word	0x08003383
 8003358:	080033a1 	.word	0x080033a1
 800335c:	080033a1 	.word	0x080033a1
 8003360:	080033a1 	.word	0x080033a1
 8003364:	0800338d 	.word	0x0800338d
 8003368:	080033a1 	.word	0x080033a1
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080033a1 	.word	0x080033a1
 8003374:	08003397 	.word	0x08003397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	60fb      	str	r3, [r7, #12]

      break;
 8003380:	e00f      	b.n	80033a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	60fb      	str	r3, [r7, #12]

      break;
 800338a:	e00a      	b.n	80033a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	60fb      	str	r3, [r7, #12]

      break;
 8003394:	e005      	b.n	80033a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	60fb      	str	r3, [r7, #12]

      break;
 800339e:	e000      	b.n	80033a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80033a0:	bf00      	nop
  }

  return tmpreg;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a46      	ldr	r2, [pc, #280]	; (800352c <TIM_Base_SetConfig+0x12c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d00f      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a43      	ldr	r2, [pc, #268]	; (8003530 <TIM_Base_SetConfig+0x130>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00b      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a42      	ldr	r2, [pc, #264]	; (8003534 <TIM_Base_SetConfig+0x134>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d007      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a41      	ldr	r2, [pc, #260]	; (8003538 <TIM_Base_SetConfig+0x138>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <TIM_Base_SetConfig+0x13c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a35      	ldr	r2, [pc, #212]	; (800352c <TIM_Base_SetConfig+0x12c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003460:	d027      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a32      	ldr	r2, [pc, #200]	; (8003530 <TIM_Base_SetConfig+0x130>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d023      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a31      	ldr	r2, [pc, #196]	; (8003534 <TIM_Base_SetConfig+0x134>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01f      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a30      	ldr	r2, [pc, #192]	; (8003538 <TIM_Base_SetConfig+0x138>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2f      	ldr	r2, [pc, #188]	; (800353c <TIM_Base_SetConfig+0x13c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d017      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <TIM_Base_SetConfig+0x140>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <TIM_Base_SetConfig+0x144>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2c      	ldr	r2, [pc, #176]	; (8003548 <TIM_Base_SetConfig+0x148>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2b      	ldr	r2, [pc, #172]	; (800354c <TIM_Base_SetConfig+0x14c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <TIM_Base_SetConfig+0x150>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a29      	ldr	r2, [pc, #164]	; (8003554 <TIM_Base_SetConfig+0x154>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a10      	ldr	r2, [pc, #64]	; (800352c <TIM_Base_SetConfig+0x12c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0xf8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <TIM_Base_SetConfig+0x13c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d105      	bne.n	800351e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]
  }
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40010400 	.word	0x40010400
 8003540:	40014000 	.word	0x40014000
 8003544:	40014400 	.word	0x40014400
 8003548:	40014800 	.word	0x40014800
 800354c:	40001800 	.word	0x40001800
 8003550:	40001c00 	.word	0x40001c00
 8003554:	40002000 	.word	0x40002000

08003558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 0201 	bic.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 0302 	bic.w	r3, r3, #2
 80035a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <TIM_OC1_SetConfig+0xd8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_OC1_SetConfig+0x64>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <TIM_OC1_SetConfig+0xdc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10c      	bne.n	80035d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0308 	bic.w	r3, r3, #8
 80035c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a15      	ldr	r2, [pc, #84]	; (8003630 <TIM_OC1_SetConfig+0xd8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_OC1_SetConfig+0x8e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a14      	ldr	r2, [pc, #80]	; (8003634 <TIM_OC1_SetConfig+0xdc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d111      	bne.n	800360a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f023 0210 	bic.w	r2, r3, #16
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0320 	bic.w	r3, r3, #32
 8003682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <TIM_OC2_SetConfig+0xe4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_OC2_SetConfig+0x68>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a21      	ldr	r2, [pc, #132]	; (8003720 <TIM_OC2_SetConfig+0xe8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10d      	bne.n	80036bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <TIM_OC2_SetConfig+0xe4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC2_SetConfig+0x94>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a16      	ldr	r2, [pc, #88]	; (8003720 <TIM_OC2_SetConfig+0xe8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d113      	bne.n	80036f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40010400 	.word	0x40010400

08003724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800376c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a21      	ldr	r2, [pc, #132]	; (8003804 <TIM_OC3_SetConfig+0xe0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_OC3_SetConfig+0x66>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a20      	ldr	r2, [pc, #128]	; (8003808 <TIM_OC3_SetConfig+0xe4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10d      	bne.n	80037a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a16      	ldr	r2, [pc, #88]	; (8003804 <TIM_OC3_SetConfig+0xe0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC3_SetConfig+0x92>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a15      	ldr	r2, [pc, #84]	; (8003808 <TIM_OC3_SetConfig+0xe4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d113      	bne.n	80037de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	621a      	str	r2, [r3, #32]
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	40010000 	.word	0x40010000
 8003808:	40010400 	.word	0x40010400

0800380c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	031b      	lsls	r3, r3, #12
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <TIM_OC4_SetConfig+0xa4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_OC4_SetConfig+0x68>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a11      	ldr	r2, [pc, #68]	; (80038b4 <TIM_OC4_SetConfig+0xa8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d109      	bne.n	8003888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40010400 	.word	0x40010400

080038b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0201 	bic.w	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a28      	ldr	r2, [pc, #160]	; (8003984 <TIM_TI1_SetConfig+0xcc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01b      	beq.n	800391e <TIM_TI1_SetConfig+0x66>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ec:	d017      	beq.n	800391e <TIM_TI1_SetConfig+0x66>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_TI1_SetConfig+0xd0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <TIM_TI1_SetConfig+0x66>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a24      	ldr	r2, [pc, #144]	; (800398c <TIM_TI1_SetConfig+0xd4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00f      	beq.n	800391e <TIM_TI1_SetConfig+0x66>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <TIM_TI1_SetConfig+0xd8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00b      	beq.n	800391e <TIM_TI1_SetConfig+0x66>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a22      	ldr	r2, [pc, #136]	; (8003994 <TIM_TI1_SetConfig+0xdc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <TIM_TI1_SetConfig+0x66>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a21      	ldr	r2, [pc, #132]	; (8003998 <TIM_TI1_SetConfig+0xe0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_TI1_SetConfig+0x66>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <TIM_TI1_SetConfig+0xe4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <TIM_TI1_SetConfig+0x6a>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <TIM_TI1_SetConfig+0x6c>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	e003      	b.n	8003942 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	b2db      	uxtb	r3, r3
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f023 030a 	bic.w	r3, r3, #10
 800395c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f003 030a 	and.w	r3, r3, #10
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40010400 	.word	0x40010400
 8003998:	40014000 	.word	0x40014000
 800399c:	40001800 	.word	0x40001800

080039a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0201 	bic.w	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 030a 	bic.w	r3, r3, #10
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0210 	bic.w	r2, r3, #16
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f023 0210 	bic.w	r2, r3, #16
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	031b      	lsls	r3, r3, #12
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f023 0303 	bic.w	r3, r3, #3
 8003b04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b28:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	031b      	lsls	r3, r3, #12
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ba2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	031b      	lsls	r3, r3, #12
 8003ba8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f043 0307 	orr.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	021a      	lsls	r2, r3, #8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	609a      	str	r2, [r3, #8]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2201      	movs	r2, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	401a      	ands	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e05a      	b.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d01d      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10c      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40010400 	.word	0x40010400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40001800 	.word	0x40001800

08003d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e03d      	b.n	8003e1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <motor_initialize>:
                   FG1-125 PG12  FG pin. PWM input
                   FG2-126 PG13
                   FG3-127 PG14
 */
void motor_initialize(GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	/*Configure GPIO pins : PC10 PC11 PC12 */
	  GPIO_InitStruct->Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003e5e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct->Mode = GPIO_MODE_OUTPUT_PP;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct->Pull = GPIO_NOPULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct->Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOC, GPIO_InitStruct);
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4820      	ldr	r0, [pc, #128]	; (8003ef8 <motor_initialize+0xa8>)
 8003e76:	f7fd ff9d 	bl	8001db4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PD1 PD2 PD3 PD5
	                           PD6 PD7 */
	  GPIO_InitStruct->Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	22ee      	movs	r2, #238	; 0xee
 8003e7e:	601a      	str	r2, [r3, #0]
	                          |GPIO_PIN_6|GPIO_PIN_7;
	  GPIO_InitStruct->Mode = GPIO_MODE_OUTPUT_PP;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct->Pull = GPIO_NOPULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct->Speed = GPIO_SPEED_FREQ_LOW;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOD, GPIO_InitStruct);
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4819      	ldr	r0, [pc, #100]	; (8003efc <motor_initialize+0xac>)
 8003e96:	f7fd ff8d 	bl	8001db4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB4 PB5 PB6 */
	  GPIO_InitStruct->Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2270      	movs	r2, #112	; 0x70
 8003e9e:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct->Mode = GPIO_MODE_INPUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct->Pull = GPIO_NOPULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, GPIO_InitStruct);
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4814      	ldr	r0, [pc, #80]	; (8003f00 <motor_initialize+0xb0>)
 8003eb0:	f7fd ff80 	bl	8001db4 <HAL_GPIO_Init>

    //Initializing CMTMOD to ground(sinusoidal mode)
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET); //CMT1
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2120      	movs	r1, #32
 8003eb8:	4810      	ldr	r0, [pc, #64]	; (8003efc <motor_initialize+0xac>)
 8003eba:	f7fe f917 	bl	80020ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET); //CMT2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2140      	movs	r1, #64	; 0x40
 8003ec2:	480e      	ldr	r0, [pc, #56]	; (8003efc <motor_initialize+0xac>)
 8003ec4:	f7fe f912 	bl	80020ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET); //CMT3
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	480b      	ldr	r0, [pc, #44]	; (8003efc <motor_initialize+0xac>)
 8003ece:	f7fe f90d 	bl	80020ec <HAL_GPIO_WritePin>

    //Initializing BRKMOD to high(dynamic braking mode)
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET); //BRK1
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	4809      	ldr	r0, [pc, #36]	; (8003efc <motor_initialize+0xac>)
 8003ed8:	f7fe f908 	bl	80020ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //BRK2
 8003edc:	2201      	movs	r2, #1
 8003ede:	2104      	movs	r1, #4
 8003ee0:	4806      	ldr	r0, [pc, #24]	; (8003efc <motor_initialize+0xac>)
 8003ee2:	f7fe f903 	bl	80020ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //BRK3
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	2108      	movs	r1, #8
 8003eea:	4804      	ldr	r0, [pc, #16]	; (8003efc <motor_initialize+0xac>)
 8003eec:	f7fe f8fe 	bl	80020ec <HAL_GPIO_WritePin>
    htim12.Init.Period = 100-1;
    htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
*/
    //note-the timer parameters will change so edit accordingly
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40020800 	.word	0x40020800
 8003efc:	40020c00 	.word	0x40020c00
 8003f00:	40020400 	.word	0x40020400

08003f04 <set_rpm_motorx>:
 */

//duty received is as a percentage and our max ARR is 100 so can apply directly

void set_rpm_motorx(double duty,int fr)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f0e:	6078      	str	r0, [r7, #4]
	//reaction wheel in x-direction
	TIM1->CCR1=duty;
 8003f10:	4c09      	ldr	r4, [pc, #36]	; (8003f38 <set_rpm_motorx+0x34>)
 8003f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f16:	f7fc fd25 	bl	8000964 <__aeabi_d2uiz>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6363      	str	r3, [r4, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, fr);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f28:	4804      	ldr	r0, [pc, #16]	; (8003f3c <set_rpm_motorx+0x38>)
 8003f2a:	f7fe f8df 	bl	80020ec <HAL_GPIO_WritePin>
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40020800 	.word	0x40020800

08003f40 <set_desired_motorx>:
 *        int fr: fr or the desired direction given by ADCS
 * return type- void
 */

void set_desired_motorx(double duty,int fr)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	480d      	ldr	r0, [pc, #52]	; (8003f84 <set_desired_motorx+0x44>)
 8003f50:	f7fe fdb2 	bl	8002ab8 <HAL_TIM_PWM_Start>
	duty_dx=duty;
 8003f54:	490c      	ldr	r1, [pc, #48]	; (8003f88 <set_desired_motorx+0x48>)
 8003f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f5a:	e9c1 2300 	strd	r2, r3, [r1]
	frx=fr;
 8003f5e:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <set_desired_motorx+0x4c>)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6013      	str	r3, [r2, #0]
	set_rpm_motorx(duty_dx,frx);
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <set_desired_motorx+0x48>)
 8003f66:	ed93 7b00 	vldr	d7, [r3]
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <set_desired_motorx+0x4c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	eeb0 0a47 	vmov.f32	s0, s14
 8003f74:	eef0 0a67 	vmov.f32	s1, s15
 8003f78:	f7ff ffc4 	bl	8003f04 <set_rpm_motorx>
	//test_pwmip_x(duty_dx);
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	2000002c 	.word	0x2000002c
 8003f88:	20000230 	.word	0x20000230
 8003f8c:	20000228 	.word	0x20000228

08003f90 <HAL_TIM_IC_CaptureCallback>:
 * param- TIM_HandleTypeDef *htim : timer variable
 * return type- void
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b08e      	sub	sp, #56	; 0x38
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7f1b      	ldrb	r3, [r3, #28]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d171      	bne.n	8004084 <HAL_TIM_IC_CaptureCallback+0xf4>
	{
		if (Is_First_Captured_x==0) // if the first value is not captured
 8003fa0:	4b8b      	ldr	r3, [pc, #556]	; (80041d0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1x = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8003fa8:	2100      	movs	r1, #0
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff f9bc 	bl	8003328 <HAL_TIM_ReadCapturedValue>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4a88      	ldr	r2, [pc, #544]	; (80041d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fb4:	6013      	str	r3, [r2, #0]
			Is_First_Captured_x = 1;  // set the first captured as true
 8003fb6:	4b86      	ldr	r3, [pc, #536]	; (80041d0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
				Is_First_Captured_z = 0; // set it back to false

			}
		}

}
 8003fbc:	e176      	b.n	80042ac <HAL_TIM_IC_CaptureCallback+0x31c>
			IC_Val2x = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff f9b1 	bl	8003328 <HAL_TIM_ReadCapturedValue>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a83      	ldr	r2, [pc, #524]	; (80041d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fca:	6013      	str	r3, [r2, #0]
			if (IC_Val2x > IC_Val1x)
 8003fcc:	4b82      	ldr	r3, [pc, #520]	; (80041d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b80      	ldr	r3, [pc, #512]	; (80041d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d908      	bls.n	8003fea <HAL_TIM_IC_CaptureCallback+0x5a>
				Difference_x = IC_Val2x-IC_Val1x;
 8003fd8:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b7d      	ldr	r3, [pc, #500]	; (80041d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b7d      	ldr	r3, [pc, #500]	; (80041dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e00e      	b.n	8004008 <HAL_TIM_IC_CaptureCallback+0x78>
			else if (IC_Val1x > IC_Val2x)
 8003fea:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b7a      	ldr	r3, [pc, #488]	; (80041d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d908      	bls.n	8004008 <HAL_TIM_IC_CaptureCallback+0x78>
				Difference_x = (100 - IC_Val1x) + IC_Val2x;
 8003ff6:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	3364      	adds	r3, #100	; 0x64
 8004002:	461a      	mov	r2, r3
 8004004:	4b75      	ldr	r3, [pc, #468]	; (80041dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8004006:	601a      	str	r2, [r3, #0]
			double refClock = TIMCLOCK/(PRESCALAR);
 8004008:	a36f      	add	r3, pc, #444	; (adr r3, 80041c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	e9c7 2304 	strd	r2, r3, [r7, #16]
			double mFactor = 1000000/refClock;
 8004012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004016:	a16c      	add	r1, pc, #432	; (adr r1, 80041c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800401c:	f7fc fbba 	bl	8000794 <__aeabi_ddiv>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	e9c7 2302 	strd	r2, r3, [r7, #8]
			fbx_duty = (Difference_x*mFactor)*100/htim8.Init.Period;
 8004028:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7fc fa1d 	bl	800046c <__aeabi_i2d>
 8004032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004036:	f7fc fa83 	bl	8000540 <__aeabi_dmul>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8004048:	f7fc fa7a 	bl	8000540 <__aeabi_dmul>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4614      	mov	r4, r2
 8004052:	461d      	mov	r5, r3
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc f9f7 	bl	800044c <__aeabi_ui2d>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4620      	mov	r0, r4
 8004064:	4629      	mov	r1, r5
 8004066:	f7fc fb95 	bl	8000794 <__aeabi_ddiv>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	495e      	ldr	r1, [pc, #376]	; (80041e8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8004070:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2200      	movs	r2, #0
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured_x = 0; // set it back to false
 800407c:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <HAL_TIM_IC_CaptureCallback+0x240>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	e113      	b.n	80042ac <HAL_TIM_IC_CaptureCallback+0x31c>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7f1b      	ldrb	r3, [r3, #28]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d171      	bne.n	8004170 <HAL_TIM_IC_CaptureCallback+0x1e0>
			if (Is_First_Captured_y==0) // if the first value is not captured
 800408c:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_TIM_IC_CaptureCallback+0x25c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <HAL_TIM_IC_CaptureCallback+0x11a>
				IC_Val1y = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8004094:	2104      	movs	r1, #4
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff f946 	bl	8003328 <HAL_TIM_ReadCapturedValue>
 800409c:	4603      	mov	r3, r0
 800409e:	4a54      	ldr	r2, [pc, #336]	; (80041f0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80040a0:	6013      	str	r3, [r2, #0]
				Is_First_Captured_y = 1;  // set the first captured as true
 80040a2:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_TIM_IC_CaptureCallback+0x25c>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
}
 80040a8:	e100      	b.n	80042ac <HAL_TIM_IC_CaptureCallback+0x31c>
				IC_Val2y = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80040aa:	2104      	movs	r1, #4
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff f93b 	bl	8003328 <HAL_TIM_ReadCapturedValue>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4a4f      	ldr	r2, [pc, #316]	; (80041f4 <HAL_TIM_IC_CaptureCallback+0x264>)
 80040b6:	6013      	str	r3, [r2, #0]
				if (IC_Val2y > IC_Val1y)
 80040b8:	4b4e      	ldr	r3, [pc, #312]	; (80041f4 <HAL_TIM_IC_CaptureCallback+0x264>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b4c      	ldr	r3, [pc, #304]	; (80041f0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d908      	bls.n	80040d6 <HAL_TIM_IC_CaptureCallback+0x146>
					Difference_y = IC_Val2y-IC_Val1y;
 80040c4:	4b4b      	ldr	r3, [pc, #300]	; (80041f4 <HAL_TIM_IC_CaptureCallback+0x264>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	4b49      	ldr	r3, [pc, #292]	; (80041f8 <HAL_TIM_IC_CaptureCallback+0x268>)
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e00e      	b.n	80040f4 <HAL_TIM_IC_CaptureCallback+0x164>
				else if (IC_Val1y > IC_Val2y)
 80040d6:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <HAL_TIM_IC_CaptureCallback+0x264>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d908      	bls.n	80040f4 <HAL_TIM_IC_CaptureCallback+0x164>
					Difference_y = (100 - IC_Val1y) + IC_Val2y;
 80040e2:	4b44      	ldr	r3, [pc, #272]	; (80041f4 <HAL_TIM_IC_CaptureCallback+0x264>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	3364      	adds	r3, #100	; 0x64
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_TIM_IC_CaptureCallback+0x268>)
 80040f2:	601a      	str	r2, [r3, #0]
				double refClock = TIMCLOCK/(PRESCALAR);
 80040f4:	a334      	add	r3, pc, #208	; (adr r3, 80041c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
				double mFactor = 1000000/refClock;
 80040fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004102:	a131      	add	r1, pc, #196	; (adr r1, 80041c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004108:	f7fc fb44 	bl	8000794 <__aeabi_ddiv>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	e9c7 2306 	strd	r2, r3, [r7, #24]
				fby_duty = (Difference_y*mFactor)*100/htim9.Init.Period;
 8004114:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <HAL_TIM_IC_CaptureCallback+0x268>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fc f9a7 	bl	800046c <__aeabi_i2d>
 800411e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004122:	f7fc fa0d 	bl	8000540 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8004134:	f7fc fa04 	bl	8000540 <__aeabi_dmul>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4614      	mov	r4, r2
 800413e:	461d      	mov	r5, r3
 8004140:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <HAL_TIM_IC_CaptureCallback+0x26c>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fc f981 	bl	800044c <__aeabi_ui2d>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4620      	mov	r0, r4
 8004150:	4629      	mov	r1, r5
 8004152:	f7fc fb1f 	bl	8000794 <__aeabi_ddiv>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4929      	ldr	r1, [pc, #164]	; (8004200 <HAL_TIM_IC_CaptureCallback+0x270>)
 800415c:	e9c1 2300 	strd	r2, r3, [r1]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2200      	movs	r2, #0
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
				Is_First_Captured_y = 0; // set it back to false
 8004168:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_TIM_IC_CaptureCallback+0x25c>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
}
 800416e:	e09d      	b.n	80042ac <HAL_TIM_IC_CaptureCallback+0x31c>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7f1b      	ldrb	r3, [r3, #28]
 8004174:	2b04      	cmp	r3, #4
 8004176:	f040 8099 	bne.w	80042ac <HAL_TIM_IC_CaptureCallback+0x31c>
			if (Is_First_Captured_z==0) // if the first value is not captured
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_TIM_IC_CaptureCallback+0x274>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <HAL_TIM_IC_CaptureCallback+0x208>
				IC_Val1z = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8004182:	2108      	movs	r1, #8
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff f8cf 	bl	8003328 <HAL_TIM_ReadCapturedValue>
 800418a:	4603      	mov	r3, r0
 800418c:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_TIM_IC_CaptureCallback+0x278>)
 800418e:	6013      	str	r3, [r2, #0]
				Is_First_Captured_z = 1;  // set the first captured as true
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <HAL_TIM_IC_CaptureCallback+0x274>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	e089      	b.n	80042ac <HAL_TIM_IC_CaptureCallback+0x31c>
				IC_Val2z = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8004198:	2108      	movs	r1, #8
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff f8c4 	bl	8003328 <HAL_TIM_ReadCapturedValue>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4a1a      	ldr	r2, [pc, #104]	; (800420c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80041a4:	6013      	str	r3, [r2, #0]
				if (IC_Val2z > IC_Val1z)
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b17      	ldr	r3, [pc, #92]	; (8004208 <HAL_TIM_IC_CaptureCallback+0x278>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d930      	bls.n	8004214 <HAL_TIM_IC_CaptureCallback+0x284>
					Difference_z = IC_Val2z-IC_Val1z;
 80041b2:	4b16      	ldr	r3, [pc, #88]	; (800420c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_TIM_IC_CaptureCallback+0x278>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <HAL_TIM_IC_CaptureCallback+0x280>)
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e036      	b.n	8004232 <HAL_TIM_IC_CaptureCallback+0x2a2>
 80041c4:	f3af 8000 	nop.w
 80041c8:	00000000 	.word	0x00000000
 80041cc:	412e8480 	.word	0x412e8480
 80041d0:	20000274 	.word	0x20000274
 80041d4:	20000250 	.word	0x20000250
 80041d8:	2000025c 	.word	0x2000025c
 80041dc:	20000268 	.word	0x20000268
 80041e0:	40590000 	.word	0x40590000
 80041e4:	2000014c 	.word	0x2000014c
 80041e8:	20000238 	.word	0x20000238
 80041ec:	20000278 	.word	0x20000278
 80041f0:	20000254 	.word	0x20000254
 80041f4:	20000260 	.word	0x20000260
 80041f8:	2000026c 	.word	0x2000026c
 80041fc:	20000194 	.word	0x20000194
 8004200:	20000240 	.word	0x20000240
 8004204:	2000027c 	.word	0x2000027c
 8004208:	20000258 	.word	0x20000258
 800420c:	20000264 	.word	0x20000264
 8004210:	20000270 	.word	0x20000270
				else if (IC_Val1z > IC_Val2z)
 8004214:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <HAL_TIM_IC_CaptureCallback+0x334>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d908      	bls.n	8004232 <HAL_TIM_IC_CaptureCallback+0x2a2>
					Difference_z = (100 - IC_Val1z) + IC_Val2z;
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_TIM_IC_CaptureCallback+0x334>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	3364      	adds	r3, #100	; 0x64
 800422c:	461a      	mov	r2, r3
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <HAL_TIM_IC_CaptureCallback+0x338>)
 8004230:	601a      	str	r2, [r3, #0]
				double refClock = TIMCLOCK/(PRESCALAR);
 8004232:	a321      	add	r3, pc, #132	; (adr r3, 80042b8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				double mFactor = 1000000/refClock;
 800423c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004240:	a11d      	add	r1, pc, #116	; (adr r1, 80042b8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8004242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004246:	f7fc faa5 	bl	8000794 <__aeabi_ddiv>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				fbz_duty = (Difference_z*mFactor)*100/htim12.Init.Period;
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_TIM_IC_CaptureCallback+0x338>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fc f908 	bl	800046c <__aeabi_i2d>
 800425c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004260:	f7fc f96e 	bl	8000540 <__aeabi_dmul>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4610      	mov	r0, r2
 800426a:	4619      	mov	r1, r3
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_TIM_IC_CaptureCallback+0x33c>)
 8004272:	f7fc f965 	bl	8000540 <__aeabi_dmul>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4614      	mov	r4, r2
 800427c:	461d      	mov	r5, r3
 800427e:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc f8e2 	bl	800044c <__aeabi_ui2d>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4620      	mov	r0, r4
 800428e:	4629      	mov	r1, r5
 8004290:	f7fc fa80 	bl	8000794 <__aeabi_ddiv>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_TIM_IC_CaptureCallback+0x344>)
 800429a:	e9c1 2300 	strd	r2, r3, [r1]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
				Is_First_Captured_z = 0; // set it back to false
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_TIM_IC_CaptureCallback+0x348>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
}
 80042ac:	bf00      	nop
 80042ae:	3738      	adds	r7, #56	; 0x38
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bdb0      	pop	{r4, r5, r7, pc}
 80042b4:	f3af 8000 	nop.w
 80042b8:	00000000 	.word	0x00000000
 80042bc:	412e8480 	.word	0x412e8480
 80042c0:	20000258 	.word	0x20000258
 80042c4:	20000264 	.word	0x20000264
 80042c8:	20000270 	.word	0x20000270
 80042cc:	40590000 	.word	0x40590000
 80042d0:	200001dc 	.word	0x200001dc
 80042d4:	20000248 	.word	0x20000248
 80042d8:	2000027c 	.word	0x2000027c

080042dc <memset>:
 80042dc:	4402      	add	r2, r0
 80042de:	4603      	mov	r3, r0
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d100      	bne.n	80042e6 <memset+0xa>
 80042e4:	4770      	bx	lr
 80042e6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ea:	e7f9      	b.n	80042e0 <memset+0x4>

080042ec <__libc_init_array>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4d0d      	ldr	r5, [pc, #52]	; (8004324 <__libc_init_array+0x38>)
 80042f0:	4c0d      	ldr	r4, [pc, #52]	; (8004328 <__libc_init_array+0x3c>)
 80042f2:	1b64      	subs	r4, r4, r5
 80042f4:	10a4      	asrs	r4, r4, #2
 80042f6:	2600      	movs	r6, #0
 80042f8:	42a6      	cmp	r6, r4
 80042fa:	d109      	bne.n	8004310 <__libc_init_array+0x24>
 80042fc:	4d0b      	ldr	r5, [pc, #44]	; (800432c <__libc_init_array+0x40>)
 80042fe:	4c0c      	ldr	r4, [pc, #48]	; (8004330 <__libc_init_array+0x44>)
 8004300:	f000 f818 	bl	8004334 <_init>
 8004304:	1b64      	subs	r4, r4, r5
 8004306:	10a4      	asrs	r4, r4, #2
 8004308:	2600      	movs	r6, #0
 800430a:	42a6      	cmp	r6, r4
 800430c:	d105      	bne.n	800431a <__libc_init_array+0x2e>
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	f855 3b04 	ldr.w	r3, [r5], #4
 8004314:	4798      	blx	r3
 8004316:	3601      	adds	r6, #1
 8004318:	e7ee      	b.n	80042f8 <__libc_init_array+0xc>
 800431a:	f855 3b04 	ldr.w	r3, [r5], #4
 800431e:	4798      	blx	r3
 8004320:	3601      	adds	r6, #1
 8004322:	e7f2      	b.n	800430a <__libc_init_array+0x1e>
 8004324:	08004364 	.word	0x08004364
 8004328:	08004364 	.word	0x08004364
 800432c:	08004364 	.word	0x08004364
 8004330:	08004368 	.word	0x08004368

08004334 <_init>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr

08004340 <_fini>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr
