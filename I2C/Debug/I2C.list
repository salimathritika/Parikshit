
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08003950  08003950  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003950  08003950  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08003958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          0000007c  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000590d  00000000  00000000  0002013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011b0  00000000  00000000  00025a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000668  00000000  00000000  00026bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004b6  00000000  00000000  00027260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ece1  00000000  00000000  00027716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000074be  00000000  00000000  000363f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000585ae  00000000  00000000  0003d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000019cc  00000000  00000000  00095e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00097830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800384c 	.word	0x0800384c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800384c 	.word	0x0800384c

080001c8 <CPAL_HAL_NVICInit>:
  * @brief  Configure NVIC Priority Group.
  * @param  None.
  * @retval None. 
  */
void CPAL_HAL_NVICInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
 /* Set NVIC Group Priority */
  NVIC_PriorityGroupConfig (CPAL_NVIC_PRIOGROUP);
 80001cc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80001d0:	f002 fdf6 	bl	8002dc0 <NVIC_PriorityGroupConfig>
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da0b      	bge.n	8000204 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	490c      	ldr	r1, [pc, #48]	; (8000224 <NVIC_SetPriority+0x4c>)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	f003 030f 	and.w	r3, r3, #15
 80001f8:	3b04      	subs	r3, #4
 80001fa:	0112      	lsls	r2, r2, #4
 80001fc:	b2d2      	uxtb	r2, r2
 80001fe:	440b      	add	r3, r1
 8000200:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000202:	e009      	b.n	8000218 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4907      	ldr	r1, [pc, #28]	; (8000228 <NVIC_SetPriority+0x50>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	e000e100 	.word	0xe000e100

0800022c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800023a:	d301      	bcc.n	8000240 <SysTick_Config+0x14>
 800023c:	2301      	movs	r3, #1
 800023e:	e011      	b.n	8000264 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000246:	4a09      	ldr	r2, [pc, #36]	; (800026c <SysTick_Config+0x40>)
 8000248:	3b01      	subs	r3, #1
 800024a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800024c:	210f      	movs	r1, #15
 800024e:	f04f 30ff 	mov.w	r0, #4294967295
 8000252:	f7ff ffc1 	bl	80001d8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <SysTick_Config+0x40>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <SysTick_Config+0x40>)
 800025e:	2207      	movs	r2, #7
 8000260:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000262:	2300      	movs	r3, #0
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	e000e010 	.word	0xe000e010

08000270 <CPAL_I2C_Init>:
  *         CPAL_InitTypeDef structure.
  * @param  pDevInitStruct : Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL 
  */
uint32_t CPAL_I2C_Init(CPAL_InitTypeDef* pDevInitStruct) 
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_Init> : I2C Device Init");
  
  /* If CPAL_State is not BUSY */
  if ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) 
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	7b1b      	ldrb	r3, [r3, #12]
 800027c:	b2db      	uxtb	r3, r3
 800027e:	2b01      	cmp	r3, #1
 8000280:	d00a      	beq.n	8000298 <CPAL_I2C_Init+0x28>
     || (pDevInitStruct->CPAL_State == CPAL_STATE_ERROR) 
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	7b1b      	ldrb	r3, [r3, #12]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b10      	cmp	r3, #16
 800028a:	d005      	beq.n	8000298 <CPAL_I2C_Init+0x28>
     || (pDevInitStruct->CPAL_State == CPAL_STATE_DISABLED))
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	7b1b      	ldrb	r3, [r3, #12]
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	f040 80ee 	bne.w	8000474 <CPAL_I2C_Init+0x204>
      return CPAL_FAIL;
    }
#endif /* CPAL_I2C_IT_PROGMODEL */ 
        
    /* Disable I2Cx Device */
    __CPAL_I2C_HAL_DISABLE_DEV(pDevInitStruct->CPAL_Dev);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	461a      	mov	r2, r3
 800029e:	4b78      	ldr	r3, [pc, #480]	; (8000480 <CPAL_I2C_Init+0x210>)
 80002a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	4b74      	ldr	r3, [pc, #464]	; (8000480 <CPAL_I2C_Init+0x210>)
 80002b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80002b4:	f022 0201 	bic.w	r2, r2, #1
 80002b8:	b292      	uxth	r2, r2
 80002ba:	801a      	strh	r2, [r3, #0]
    
    CPAL_LOG("\n\rLOG : I2C Device Disabled"); 
    
    /* Deinitialize I2Cx GPIO */
    CPAL_I2C_HAL_GPIODeInit(pDevInitStruct->CPAL_Dev);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 fa79 	bl	80027b8 <CPAL_I2C_HAL_GPIODeInit>
    
    CPAL_LOG("\n\rLOG : I2C Device IOs Deinit");
    
    /* Deinitialize I2Cx Clock */
    CPAL_I2C_HAL_CLKDeInit(pDevInitStruct->CPAL_Dev);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 f9e2 	bl	8002694 <CPAL_I2C_HAL_CLKDeInit>
    
    CPAL_LOG("\n\rLOG : I2C Device Clock Deinit");
    
#ifdef CPAL_I2C_DMA_PROGMODEL    
    /* Deinitialize DMA Channels */
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_DMA)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	78db      	ldrb	r3, [r3, #3]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d107      	bne.n	80002e8 <CPAL_I2C_Init+0x78>
    {
      CPAL_I2C_HAL_DMADeInit(pDevInitStruct->CPAL_Dev, pDevInitStruct->CPAL_Direction);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	785b      	ldrb	r3, [r3, #1]
 80002e0:	4619      	mov	r1, r3
 80002e2:	4610      	mov	r0, r2
 80002e4:	f002 fb8e 	bl	8002a04 <CPAL_I2C_HAL_DMADeInit>
    
    /*----------------------------------------------------------------------------
    Peripheral Clock Initialization
    ---------------------------------------------------------------------------*/   
    /* Initialize I2Cx Clock */
    CPAL_I2C_HAL_CLKInit(pDevInitStruct->CPAL_Dev);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 f9ad 	bl	800264c <CPAL_I2C_HAL_CLKInit>
    
	/*----------------------------------------------------------------------------
    GPIO pins configuration
    ---------------------------------------------------------------------------*/
    /* Initialize I2Cx GPIO */
    CPAL_I2C_HAL_GPIOInit(pDevInitStruct->CPAL_Dev);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 f9f0 	bl	80026dc <CPAL_I2C_HAL_GPIOInit>
	       
    /*----------------------------------------------------------------------------
    Peripheral Initialization
    ---------------------------------------------------------------------------*/   
    /* Enable I2Cx Device */
    __CPAL_I2C_HAL_ENABLE_DEV(pDevInitStruct->CPAL_Dev); 
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4b5f      	ldr	r3, [pc, #380]	; (8000480 <CPAL_I2C_Init+0x210>)
 8000304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	b29a      	uxth	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	4b5b      	ldr	r3, [pc, #364]	; (8000480 <CPAL_I2C_Init+0x210>)
 8000314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000318:	f042 0201 	orr.w	r2, r2, #1
 800031c:	b292      	uxth	r2, r2
 800031e:	801a      	strh	r2, [r3, #0]
    
    CPAL_LOG("\n\rLOG : I2C Device Enabled"); 
    
    /* Initialize I2Cx device with parameters stored in pCPAL_I2C_Struct */
    I2C_Init(CPAL_I2C_DEVICE[pDevInitStruct->CPAL_Dev], pDevInitStruct->pCPAL_I2C_Struct);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b56      	ldr	r3, [pc, #344]	; (8000480 <CPAL_I2C_Init+0x210>)
 8000328:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	4619      	mov	r1, r3
 8000332:	4610      	mov	r0, r2
 8000334:	f002 ffbe 	bl	80032b4 <I2C_Init>
    
    CPAL_LOG("\n\rLOG : I2C Device Config");   
    
    /* If General Call Mode Option Bit Selected */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_GENCALL) != 0)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d011      	beq.n	8000368 <CPAL_I2C_Init+0xf8>
    {
      /* Enable GENERAL CALL Address Mode */
      __CPAL_I2C_HAL_ENABLE_GENCALL(pDevInitStruct->CPAL_Dev); 
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	4b4d      	ldr	r3, [pc, #308]	; (8000480 <CPAL_I2C_Init+0x210>)
 800034c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	b29a      	uxth	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4b49      	ldr	r3, [pc, #292]	; (8000480 <CPAL_I2C_Init+0x210>)
 800035c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000364:	b292      	uxth	r2, r2
 8000366:	801a      	strh	r2, [r3, #0]
      
      CPAL_LOG("\n\rLOG : I2C Device GENCALL Mode Enabled"); 
    }
    
    /* If Dual Address Mode Option Bit Selected */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_DUALADDR) != 0)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	2b00      	cmp	r3, #0
 8000372:	d03d      	beq.n	80003f0 <CPAL_I2C_Init+0x180>
    {
      /* Enable Dual Address Mode */
     __CPAL_I2C_HAL_ENABLE_DUALADDR(pDevInitStruct->CPAL_Dev);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	4b41      	ldr	r3, [pc, #260]	; (8000480 <CPAL_I2C_Init+0x210>)
 800037c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000380:	899b      	ldrh	r3, [r3, #12]
 8000382:	b29a      	uxth	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	4b3d      	ldr	r3, [pc, #244]	; (8000480 <CPAL_I2C_Init+0x210>)
 800038c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000390:	f042 0201 	orr.w	r2, r2, #1
 8000394:	b292      	uxth	r2, r2
 8000396:	819a      	strh	r2, [r3, #12]
      
      /* Configure OAR2 */
      __CPAL_I2C_HAL_OAR2_CONF(pDevInitStruct->CPAL_Dev, (uint8_t)(pDevInitStruct->wCPAL_Options & 0x000000FE));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	461a      	mov	r2, r3
 800039e:	4b38      	ldr	r3, [pc, #224]	; (8000480 <CPAL_I2C_Init+0x210>)
 80003a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003a4:	899b      	ldrh	r3, [r3, #12]
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	4b34      	ldr	r3, [pc, #208]	; (8000480 <CPAL_I2C_Init+0x210>)
 80003b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003b4:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 80003b8:	b292      	uxth	r2, r2
 80003ba:	819a      	strh	r2, [r3, #12]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <CPAL_I2C_Init+0x210>)
 80003c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c8:	899b      	ldrh	r3, [r3, #12]
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	b21a      	sxth	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80003da:	b21b      	sxth	r3, r3
 80003dc:	4313      	orrs	r3, r2
 80003de:	b21a      	sxth	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4619      	mov	r1, r3
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <CPAL_I2C_Init+0x210>)
 80003e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003ec:	b292      	uxth	r2, r2
 80003ee:	819a      	strh	r2, [r3, #12]
         
      CPAL_LOG("\n\rLOG : I2C Device DUAL ADDR Mode Enabled"); 
    }    

    /* If NACK Slave Own Address option bit selected */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NACK_ADD) != 0)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d011      	beq.n	8000420 <CPAL_I2C_Init+0x1b0>
    {
      /* Disable Acknowledgement of own Address */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <CPAL_I2C_Init+0x210>)
 8000404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29a      	uxth	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4619      	mov	r1, r3
 8000412:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <CPAL_I2C_Init+0x210>)
 8000414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800041c:	b292      	uxth	r2, r2
 800041e:	801a      	strh	r2, [r3, #0]
#ifdef CPAL_I2C_DMA_PROGMODEL
    /*----------------------------------------------------------------------------
    DMA Initialization : 
    ---------------------------------------------------------------------------*/   
    /* If DMA Programming model is selected*/
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_DMA) 
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	78db      	ldrb	r3, [r3, #3]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d108      	bne.n	800043a <CPAL_I2C_Init+0x1ca>
    {
      /* Initialize I2Cx DMA Channels */
      CPAL_I2C_HAL_DMAInit(pDevInitStruct->CPAL_Dev, pDevInitStruct->CPAL_Direction, pDevInitStruct->wCPAL_Options);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	7818      	ldrb	r0, [r3, #0]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7859      	ldrb	r1, [r3, #1]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	461a      	mov	r2, r3
 8000436:	f002 f9f3 	bl	8002820 <CPAL_I2C_HAL_DMAInit>
    
    /*----------------------------------------------------------------------------
    Peripheral and DMA interrupts Initialization
    ---------------------------------------------------------------------------*/
    /* Initialize I2Cx Interrupts */
    CPAL_I2C_HAL_ITInit(pDevInitStruct->CPAL_Dev, pDevInitStruct->wCPAL_Options, pDevInitStruct->CPAL_Direction, pDevInitStruct->CPAL_ProgModel);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	7818      	ldrb	r0, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6959      	ldr	r1, [r3, #20]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	785a      	ldrb	r2, [r3, #1]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	78db      	ldrb	r3, [r3, #3]
 800044a:	f002 fb03 	bl	8002a54 <CPAL_I2C_HAL_ITInit>
    
    CPAL_LOG("\n\rLOG : I2C Device IT Init");
    
    /* Update CPAL_State to CPAL_STATE_READY */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rLOG : I2C Device Ready"); 
    
    /* Initialize Timeout Procedure */
    _CPAL_TIMEOUT_INIT();
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <CPAL_I2C_Init+0x214>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <CPAL_I2C_Init+0x218>)
 800045a:	fba2 2303 	umull	r2, r3, r2, r3
 800045e:	099b      	lsrs	r3, r3, #6
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fee3 	bl	800022c <SysTick_Config>
 8000466:	2100      	movs	r1, #0
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f7ff feb4 	bl	80001d8 <NVIC_SetPriority>
    
    return CPAL_PASS;
 8000470:	2300      	movs	r3, #0
 8000472:	e000      	b.n	8000476 <CPAL_I2C_Init+0x206>
  /* If CPAL_State is BUSY (a transaction is still on going) Exit Init function */
  else 
  {
    CPAL_LOG("\n\rERROR : I2C Device Busy"); 
    
    return CPAL_FAIL; 
 8000474:	2301      	movs	r3, #1
  }
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	2000006c 	.word	0x2000006c
 8000484:	200000c4 	.word	0x200000c4
 8000488:	10624dd3 	.word	0x10624dd3

0800048c <CPAL_I2C_StructInit>:
  *         to the specified parameters in the CPAL_I2CDevTypeDef structure.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_StructInit(CPAL_InitTypeDef* pDevInitStruct) 
{   
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* Initialize I2C_InitStructure to their default values */
  I2C_InitStructure.I2C_ClockSpeed          = 100000;                        /* Initialize the I2C_ClockSpeed member */
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <CPAL_I2C_StructInit+0x80>)
 8000496:	4a1e      	ldr	r2, [pc, #120]	; (8000510 <CPAL_I2C_StructInit+0x84>)
 8000498:	601a      	str	r2, [r3, #0]
  I2C_InitStructure.I2C_Mode                = I2C_Mode_I2C;                  /* Initialize the I2C_Mode member */
 800049a:	4b1c      	ldr	r3, [pc, #112]	; (800050c <CPAL_I2C_StructInit+0x80>)
 800049c:	2200      	movs	r2, #0
 800049e:	809a      	strh	r2, [r3, #4]
  I2C_InitStructure.I2C_DutyCycle           = I2C_DutyCycle_2;               /* Initialize the I2C_DutyCycle member */
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <CPAL_I2C_StructInit+0x80>)
 80004a2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80004a6:	80da      	strh	r2, [r3, #6]
  I2C_InitStructure.I2C_OwnAddress1         = 0;                             /* Initialize the I2C_OwnAddress1 member */
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <CPAL_I2C_StructInit+0x80>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	811a      	strh	r2, [r3, #8]
  I2C_InitStructure.I2C_Ack                 = I2C_Ack_Enable;                /* Initialize the I2C_Ack member */
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <CPAL_I2C_StructInit+0x80>)
 80004b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004b4:	815a      	strh	r2, [r3, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;  /* Initialize the I2C_AcknowledgedAddress member */
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <CPAL_I2C_StructInit+0x80>)
 80004b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004bc:	819a      	strh	r2, [r3, #12]
  
  /* Initialize pDevInitStruct parameter to their default values */
  pDevInitStruct-> CPAL_Direction     = CPAL_DIRECTION_TXRX;                  /* Transmitter and Receiver direction selected */
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2203      	movs	r2, #3
 80004c2:	705a      	strb	r2, [r3, #1]
  pDevInitStruct-> CPAL_Mode          = CPAL_MODE_MASTER;                     /* Mode Master selected */
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	709a      	strb	r2, [r3, #2]
  pDevInitStruct-> CPAL_ProgModel     = CPAL_PROGMODEL_DMA;                   /* DMA Programming Model selected */
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2202      	movs	r2, #2
 80004ce:	70da      	strb	r2, [r3, #3]
  pDevInitStruct-> pCPAL_TransferTx   = pNULL;                                /* Point pCPAL_TransferTx to a Null pointer */
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  pDevInitStruct-> pCPAL_TransferRx   = pNULL;                                /* Point pCPAL_TransferRx to a Null pointer */ 
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  pDevInitStruct-> CPAL_State         = CPAL_STATE_DISABLED;                  /* Device Disabled */
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	731a      	strb	r2, [r3, #12]
  pDevInitStruct-> wCPAL_DevError     = CPAL_I2C_ERR_NONE;                    /* No Device Error */
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  pDevInitStruct-> wCPAL_Options      = ((uint32_t)0x00000000);               /* No Options selected */
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
  pDevInitStruct-> wCPAL_Timeout      = ((uint32_t)CPAL_I2C_TIMEOUT_DEFAULT); /* Set timeout value to CPAL_I2C_TIMEOUT_DEFAULT */
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f04f 32ff 	mov.w	r2, #4294967295
 80004f4:	619a      	str	r2, [r3, #24]
  pDevInitStruct-> pCPAL_I2C_Struct   = &I2C_InitStructure;                   /* Point to I2C_InitStructure (with default values) */
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <CPAL_I2C_StructInit+0x80>)
 80004fa:	61da      	str	r2, [r3, #28]
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_StructInit> : I2C Device Structure set to Default Value"); 
  
  return CPAL_PASS;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200000e4 	.word	0x200000e4
 8000510:	000186a0 	.word	0x000186a0

08000514 <CPAL_I2C_Read>:
  *         from a selected device in a selected location address.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Read(CPAL_InitTypeDef* pDevInitStruct)
{    
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
          - Enable Event Interrupt                                               */
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_Read> : I2C Device Perform Read OP");
  
   /* If Device is Busy (a transaction is still on going) Exit Read function */
   if (((pDevInitStruct->CPAL_State & CPAL_STATE_BUSY) != 0)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7b1b      	ldrb	r3, [r3, #12]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d109      	bne.n	800053e <CPAL_I2C_Read+0x2a>
      || (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	7b1b      	ldrb	r3, [r3, #12]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b03      	cmp	r3, #3
 8000532:	d004      	beq.n	800053e <CPAL_I2C_Read+0x2a>
      || (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX))
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	7b1b      	ldrb	r3, [r3, #12]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b05      	cmp	r3, #5
 800053c:	d101      	bne.n	8000542 <CPAL_I2C_Read+0x2e>
  {
    CPAL_LOG("\n\rERROR : I2C Device Busy"); 
    
    return CPAL_FAIL;
 800053e:	2301      	movs	r3, #1
 8000540:	e292      	b.n	8000a68 <CPAL_I2C_Read+0x554>
  }  
  /* If CPAL_State is CPAL_STATE_DISABLED (device is not initialized) Exit Read function */  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_DISABLED)  
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7b1b      	ldrb	r3, [r3, #12]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <CPAL_I2C_Read+0x3c>
  {
    CPAL_LOG("\n\rERROR : I2C Device Not Initialized"); 
    
    return CPAL_FAIL;
 800054c:	2301      	movs	r3, #1
 800054e:	e28b      	b.n	8000a68 <CPAL_I2C_Read+0x554>
  }  
  /* If CPAL_State is CPAL_STATE_ERROR (Error occurred ) */
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_ERROR)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	7b1b      	ldrb	r3, [r3, #12]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b10      	cmp	r3, #16
 8000558:	d101      	bne.n	800055e <CPAL_I2C_Read+0x4a>
  {
    CPAL_LOG("\n\rERROR : I2C Device Error"); 
    
    return CPAL_FAIL;
 800055a:	2301      	movs	r3, #1
 800055c:	e284      	b.n	8000a68 <CPAL_I2C_Read+0x554>
  }  
  /* If CPAL_State is CPAL_STATE_READY */
  else
  {
    /* Update CPAL_State to CPAL_STATE_BUSY */
    pDevInitStruct->CPAL_State = CPAL_STATE_BUSY;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2202      	movs	r2, #2
 8000562:	731a      	strb	r2, [r3, #12]
   
    /* No Stop Condition Generation Mode option bit not selected */   
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP_MODE) == 0)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800056c:	2b00      	cmp	r3, #0
 800056e:	d129      	bne.n	80005c4 <CPAL_I2C_Read+0xb0>
    {
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2206      	movs	r2, #6
 8000574:	619a      	str	r2, [r3, #24]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	4b7c      	ldr	r3, [pc, #496]	; (8000770 <CPAL_I2C_Read+0x25c>)
 800057e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000582:	8b1b      	ldrh	r3, [r3, #24]
 8000584:	b29b      	uxth	r3, r3
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	2b00      	cmp	r3, #0
 800058c:	d008      	beq.n	80005a0 <CPAL_I2C_Read+0x8c>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d004      	beq.n	80005a0 <CPAL_I2C_Read+0x8c>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059e:	d1ea      	bne.n	8000576 <CPAL_I2C_Read+0x62>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d004      	beq.n	80005b2 <CPAL_I2C_Read+0x9e>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b0:	d104      	bne.n	80005bc <CPAL_I2C_Read+0xa8>
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f001 f83c 	bl	8001630 <CPAL_I2C_Timeout>
 80005b8:	4603      	mov	r3, r0
 80005ba:	e255      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f04f 32ff 	mov.w	r2, #4294967295
 80005c2:	619a      	str	r2, [r3, #24]
    }

#ifdef CPAL_I2C_DMA_1BYTE_CASE              
    /* If One byte transfer with DMA programming model */
    if ((pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_DMA) 
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	78db      	ldrb	r3, [r3, #3]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d10d      	bne.n	80005e8 <CPAL_I2C_Read+0xd4>
       && (pDevInitStruct->pCPAL_TransferRx->wNumData == 1))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d108      	bne.n	80005e8 <CPAL_I2C_Read+0xd4>
    {
      /* Affect 1Byte DMA option to wCPAL_Options */
      pDevInitStruct->wCPAL_Options |= CPAL_DMA_1BYTE_CASE;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	615a      	str	r2, [r3, #20]
      
      /* Change ProgModel to Interrupt */
      pDevInitStruct->CPAL_ProgModel = CPAL_PROGMODEL_INTERRUPT;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2201      	movs	r2, #1
 80005e6:	70da      	strb	r2, [r3, #3]
    }
#endif /* CPAL_I2C_DMA_1BYTE_CASE */
    
#ifdef CPAL_I2C_MASTER_MODE    
    /* If "No Memory Address" Option Bit is not selected and Master Mode selected */
    if (((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0) 
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f040 81e1 	bne.w	80009b8 <CPAL_I2C_Read+0x4a4>
       && (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER ))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789b      	ldrb	r3, [r3, #2]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 81dc 	bne.w	80009b8 <CPAL_I2C_Read+0x4a4>
    {       
      CPAL_LOG("\n\rLOG : I2C Device Master No Addr Mem Mode");
      
      /* Generate Start */
      __CPAL_I2C_HAL_START(pDevInitStruct->CPAL_Dev);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <CPAL_I2C_Read+0x25c>)
 8000608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	b29a      	uxth	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4b56      	ldr	r3, [pc, #344]	; (8000770 <CPAL_I2C_Read+0x25c>)
 8000618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800061c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000620:	b292      	uxth	r2, r2
 8000622:	801a      	strh	r2, [r3, #0]
      
      /* Wait until SB flag is set */
      __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_SB(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_SB);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	221f      	movs	r2, #31
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <CPAL_I2C_Read+0x25c>)
 8000632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000636:	8a9b      	ldrh	r3, [r3, #20]
 8000638:	b29b      	uxth	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d108      	bne.n	8000654 <CPAL_I2C_Read+0x140>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d004      	beq.n	8000654 <CPAL_I2C_Read+0x140>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000652:	d1ea      	bne.n	800062a <CPAL_I2C_Read+0x116>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d004      	beq.n	8000666 <CPAL_I2C_Read+0x152>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000664:	d104      	bne.n	8000670 <CPAL_I2C_Read+0x15c>
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 ffe2 	bl	8001630 <CPAL_I2C_Timeout>
 800066c:	4603      	mov	r3, r0
 800066e:	e1fb      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f04f 32ff 	mov.w	r2, #4294967295
 8000676:	619a      	str	r2, [r3, #24]
      
      /* Send Device Address */
      /* If 7 Bit Addressing Mode */
      if (pDevInitStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress == I2C_AcknowledgedAddress_7bit)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000682:	d139      	bne.n	80006f8 <CPAL_I2C_Read+0x1e4>
      {             
        /* Send Slave address with bit0 reset for write -- ORIGINAL */
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr1) & (uint8_t)(~I2C_OAR1_ADD0)));   
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	b29a      	uxth	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <CPAL_I2C_Read+0x25c>)
 8000696:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800069a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800069e:	b292      	uxth	r2, r2
 80006a0:	821a      	strh	r2, [r3, #16]
        /* Send Slave address with bit0 set for read for MCP */
        // __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr1)));   
        
        /* Wait until ADDR flag is reset */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_ADDR(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_ADDR);        
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2204      	movs	r2, #4
 80006a6:	619a      	str	r2, [r3, #24]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <CPAL_I2C_Read+0x25c>)
 80006b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006b4:	8a9b      	ldrh	r3, [r3, #20]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	f003 0302 	and.w	r3, r3, #2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d108      	bne.n	80006d2 <CPAL_I2C_Read+0x1be>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d004      	beq.n	80006d2 <CPAL_I2C_Read+0x1be>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d1ea      	bne.n	80006a8 <CPAL_I2C_Read+0x194>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d004      	beq.n	80006e4 <CPAL_I2C_Read+0x1d0>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e2:	d104      	bne.n	80006ee <CPAL_I2C_Read+0x1da>
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 ffa3 	bl	8001630 <CPAL_I2C_Timeout>
 80006ea:	4603      	mov	r3, r0
 80006ec:	e1bc      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	e077      	b.n	80007e8 <CPAL_I2C_Read+0x2d4>
  #ifdef CPAL_I2C_10BIT_ADDR_MODE
      /* If 10 Bit Addressing Mode */
      else
      {
        /* Declare local variable that contains Address Header */
        uint8_t I2CHeaderAddress = 0x00;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
        
        /* Calculate Header Address  */ 
        I2CHeaderAddress = (uint8_t)((((pDevInitStruct->pCPAL_TransferRx->wAddr1) & 0xFF00) >>7) | 0xF0);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	09db      	lsrs	r3, r3, #7
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 030e 	and.w	r3, r3, #14
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f063 030f 	orn	r3, r3, #15
 8000710:	73fb      	strb	r3, [r7, #15]
        
        /* Send Header Address */ 
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), I2CHeaderAddress);   
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <CPAL_I2C_Read+0x25c>)
 800071a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800071e:	7bfa      	ldrb	r2, [r7, #15]
 8000720:	b292      	uxth	r2, r2
 8000722:	821a      	strh	r2, [r3, #16]
        
        /* Wait until ADD10 flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_ADD10(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_ADD10); 
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2204      	movs	r2, #4
 8000728:	619a      	str	r2, [r3, #24]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <CPAL_I2C_Read+0x25c>)
 8000732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000736:	8a9b      	ldrh	r3, [r3, #20]
 8000738:	b29b      	uxth	r3, r3
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	2b00      	cmp	r3, #0
 8000740:	d108      	bne.n	8000754 <CPAL_I2C_Read+0x240>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d004      	beq.n	8000754 <CPAL_I2C_Read+0x240>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000752:	d1ea      	bne.n	800072a <CPAL_I2C_Read+0x216>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d004      	beq.n	8000766 <CPAL_I2C_Read+0x252>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d106      	bne.n	8000774 <CPAL_I2C_Read+0x260>
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 ff62 	bl	8001630 <CPAL_I2C_Timeout>
 800076c:	4603      	mov	r3, r0
 800076e:	e17b      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 8000770:	2000006c 	.word	0x2000006c
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f04f 32ff 	mov.w	r2, #4294967295
 800077a:	619a      	str	r2, [r3, #24]
        
        /* Send Slave address with bit0 reset for write */
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(pDevInitStruct->pCPAL_TransferRx->wAddr1));   
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	4b8a      	ldr	r3, [pc, #552]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 800078c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000790:	b292      	uxth	r2, r2
 8000792:	821a      	strh	r2, [r3, #16]
        
        /* Wait until ADDR flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_ADDR(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_ADDR);         
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2204      	movs	r2, #4
 8000798:	619a      	str	r2, [r3, #24]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 80007a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a6:	8a9b      	ldrh	r3, [r3, #20]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d108      	bne.n	80007c4 <CPAL_I2C_Read+0x2b0>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d004      	beq.n	80007c4 <CPAL_I2C_Read+0x2b0>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c2:	d1ea      	bne.n	800079a <CPAL_I2C_Read+0x286>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d004      	beq.n	80007d6 <CPAL_I2C_Read+0x2c2>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d104      	bne.n	80007e0 <CPAL_I2C_Read+0x2cc>
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 ff2a 	bl	8001630 <CPAL_I2C_Timeout>
 80007dc:	4603      	mov	r3, r0
 80007de:	e143      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f04f 32ff 	mov.w	r2, #4294967295
 80007e6:	619a      	str	r2, [r3, #24]
  #endif /* CPAL_I2C_10BIT_ADDR_MODE */     
      
      CPAL_LOG("\n\rLOG : I2C Device Target Address Sent ");
      
      /* Clear ADDR flag: (Read SR1 followed by read of SR2), SR1 read operation is already done */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev); 
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b71      	ldr	r3, [pc, #452]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 80007f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f4:	8a9b      	ldrh	r3, [r3, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 80007fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000802:	8b1b      	ldrh	r3, [r3, #24]
      
      /* Wait until TXE flag is set */ 
      __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2203      	movs	r2, #3
 8000808:	619a      	str	r2, [r3, #24]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 8000812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000816:	8a9b      	ldrh	r3, [r3, #20]
 8000818:	b29b      	uxth	r3, r3
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	2b00      	cmp	r3, #0
 8000820:	d108      	bne.n	8000834 <CPAL_I2C_Read+0x320>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d004      	beq.n	8000834 <CPAL_I2C_Read+0x320>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000832:	d1ea      	bne.n	800080a <CPAL_I2C_Read+0x2f6>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d004      	beq.n	8000846 <CPAL_I2C_Read+0x332>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000844:	d104      	bne.n	8000850 <CPAL_I2C_Read+0x33c>
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 fef2 	bl	8001630 <CPAL_I2C_Timeout>
 800084c:	4603      	mov	r3, r0
 800084e:	e10b      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f04f 32ff 	mov.w	r2, #4294967295
 8000856:	619a      	str	r2, [r3, #24]
      
      /* If 8 Bit register mode */
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_16BIT_REG) == 0)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d136      	bne.n	80008d2 <CPAL_I2C_Read+0x3be>
      {
        /* Send Register Address */
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(((pDevInitStruct->pCPAL_TransferRx->wAddr2)& 0x00FF))); 
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4b50      	ldr	r3, [pc, #320]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 8000874:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000878:	b292      	uxth	r2, r2
 800087a:	821a      	strh	r2, [r3, #16]
        
        /* Wait until TXE flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2203      	movs	r2, #3
 8000880:	619a      	str	r2, [r3, #24]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 800088a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088e:	8a9b      	ldrh	r3, [r3, #20]
 8000890:	b29b      	uxth	r3, r3
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	2b00      	cmp	r3, #0
 8000898:	d108      	bne.n	80008ac <CPAL_I2C_Read+0x398>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d004      	beq.n	80008ac <CPAL_I2C_Read+0x398>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008aa:	d1ea      	bne.n	8000882 <CPAL_I2C_Read+0x36e>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d004      	beq.n	80008be <CPAL_I2C_Read+0x3aa>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d104      	bne.n	80008c8 <CPAL_I2C_Read+0x3b4>
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 feb6 	bl	8001630 <CPAL_I2C_Timeout>
 80008c4:	4603      	mov	r3, r0
 80008c6:	e0cf      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f04f 32ff 	mov.w	r2, #4294967295
 80008ce:	619a      	str	r2, [r3, #24]
        /* Wait until TXE flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
      }      
  #endif /* CPAL_16BIT_REG_OPTION */
      
      CPAL_LOG("\n\rLOG : I2C Device Target Memory Address Sent");      
 80008d0:	e07a      	b.n	80009c8 <CPAL_I2C_Read+0x4b4>
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(((pDevInitStruct->pCPAL_TransferRx->wAddr2)& 0xFF00) >>8));  
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 80008e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008e8:	b292      	uxth	r2, r2
 80008ea:	821a      	strh	r2, [r3, #16]
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2203      	movs	r2, #3
 80008f0:	619a      	str	r2, [r3, #24]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 80008fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fe:	8a9b      	ldrh	r3, [r3, #20]
 8000900:	b29b      	uxth	r3, r3
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	2b00      	cmp	r3, #0
 8000908:	d108      	bne.n	800091c <CPAL_I2C_Read+0x408>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d004      	beq.n	800091c <CPAL_I2C_Read+0x408>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091a:	d1ea      	bne.n	80008f2 <CPAL_I2C_Read+0x3de>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d004      	beq.n	800092e <CPAL_I2C_Read+0x41a>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092c:	d104      	bne.n	8000938 <CPAL_I2C_Read+0x424>
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 fe7e 	bl	8001630 <CPAL_I2C_Timeout>
 8000934:	4603      	mov	r3, r0
 8000936:	e097      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f04f 32ff 	mov.w	r2, #4294967295
 800093e:	619a      	str	r2, [r3, #24]
        __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr2)& 0x00FF));  
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 8000950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000954:	b292      	uxth	r2, r2
 8000956:	821a      	strh	r2, [r3, #16]
        pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_TXE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2203      	movs	r2, #3
 800095c:	619a      	str	r2, [r3, #24]
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2203      	movs	r2, #3
 8000962:	619a      	str	r2, [r3, #24]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <CPAL_I2C_Read+0x4a0>)
 800096c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000970:	8a9b      	ldrh	r3, [r3, #20]
 8000972:	b29b      	uxth	r3, r3
 8000974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000978:	2b00      	cmp	r3, #0
 800097a:	d108      	bne.n	800098e <CPAL_I2C_Read+0x47a>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d004      	beq.n	800098e <CPAL_I2C_Read+0x47a>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d1ea      	bne.n	8000964 <CPAL_I2C_Read+0x450>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d004      	beq.n	80009a0 <CPAL_I2C_Read+0x48c>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099e:	d104      	bne.n	80009aa <CPAL_I2C_Read+0x496>
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 fe45 	bl	8001630 <CPAL_I2C_Timeout>
 80009a6:	4603      	mov	r3, r0
 80009a8:	e05e      	b.n	8000a68 <CPAL_I2C_Read+0x554>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	619a      	str	r2, [r3, #24]
      CPAL_LOG("\n\rLOG : I2C Device Target Memory Address Sent");      
 80009b2:	e009      	b.n	80009c8 <CPAL_I2C_Read+0x4b4>
 80009b4:	2000006c 	.word	0x2000006c
    }  
   else 
#endif /* CPAL_I2C_MASTER_MODE */   
      if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_DMA)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	78db      	ldrb	r3, [r3, #3]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d103      	bne.n	80009c8 <CPAL_I2C_Read+0x4b4>
    {     
      CPAL_LOG("\n\rLOG : I2C Device Master No Memory Address Mode ");
      
       /* Switch Programing Mode Enable DMA or IT Buffer */
      CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_RX);
 80009c0:	2102      	movs	r1, #2
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f001 fd82 	bl	80024cc <CPAL_I2C_Enable_DMA_IT>
    }   
    
    /* Update CPAL_State to CPAL_STATE_READY_RX */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY_RX;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2205      	movs	r2, #5
 80009cc:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rLOG : I2C Device Ready RX"); 
        
    
    /* If Master Mode selected */
    if (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER )
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	789b      	ldrb	r3, [r3, #2]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d115      	bne.n	8000a02 <CPAL_I2C_Read+0x4ee>
    {
#ifdef CPAL_I2C_MASTER_MODE 
      CPAL_LOG("\n\rLOG : I2C Device Master");
      
      /* Generate Start */
     __CPAL_I2C_HAL_START(pDevInitStruct->CPAL_Dev);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <CPAL_I2C_Read+0x55c>)
 80009de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <CPAL_I2C_Read+0x55c>)
 80009ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009f6:	b292      	uxth	r2, r2
 80009f8:	801a      	strh	r2, [r3, #0]
      
     CPAL_LOG("\n\rLOG : I2C Device Generates Start"); 
         
      /* Initialize Timeout value */
      pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_SB;      
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	221f      	movs	r2, #31
 80009fe:	619a      	str	r2, [r3, #24]
 8000a00:	e01f      	b.n	8000a42 <CPAL_I2C_Read+0x52e>
    /* If Slave Mode selected */
    else   
    {   
#ifdef CPAL_I2C_SLAVE_MODE      
      /* If NACK Slave Own Address option bit selected */
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NACK_ADD) != 0)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d011      	beq.n	8000a32 <CPAL_I2C_Read+0x51e>
      {
        /* Enable Acknowledgement of Own address */
        __CPAL_I2C_HAL_ENABLE_ACK(pDevInitStruct->CPAL_Dev);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <CPAL_I2C_Read+0x55c>)
 8000a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <CPAL_I2C_Read+0x55c>)
 8000a26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	801a      	strh	r2, [r3, #0]
      }   
      
      if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	78db      	ldrb	r3, [r3, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d103      	bne.n	8000a42 <CPAL_I2C_Read+0x52e>
      {       
        /* Enable IT Buffer */
        CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_RX);
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f001 fd45 	bl	80024cc <CPAL_I2C_Enable_DMA_IT>
    } 
    
    CPAL_LOG("\n\rLOG : I2C Device EVT IT Enabled");   
    
    /* Enable EVENT Interrupts*/
     __CPAL_I2C_HAL_ENABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <CPAL_I2C_Read+0x55c>)
 8000a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4e:	889b      	ldrh	r3, [r3, #4]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <CPAL_I2C_Read+0x55c>)
 8000a5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a62:	b292      	uxth	r2, r2
 8000a64:	809a      	strh	r2, [r3, #4]
  }
  
  return CPAL_PASS;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000006c 	.word	0x2000006c

08000a74 <CPAL_I2C_EV_IRQHandler>:
  *         and for transfer phase in case of using Interrupt Programming Model.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_EV_IRQHandler( CPAL_InitTypeDef* pDevInitStruct)
{     
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  __IO uint16_t I2CFlagStatus = 0x0000;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	81fb      	strh	r3, [r7, #14]
  
  /* Read I2C1 Status Registers 1 and 2 */
  I2CFlagStatus = __CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev); 
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <CPAL_I2C_EV_IRQHandler+0x118>)
 8000a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8c:	8a9b      	ldrh	r3, [r3, #20]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	81fb      	strh	r3, [r7, #14]
 
#ifdef CPAL_I2C_MASTER_MODE
  /*----------------------------------------------------------------------------------------------*/
  /*---------------------------------- If Master Mode selected ----------------------------------*/
  if (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d140      	bne.n	8000b22 <CPAL_I2C_EV_IRQHandler+0xae>
  { 
    /*----------------------------------------*/  
    /*------------- If SB event --------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_SB ) != 0)
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <CPAL_I2C_EV_IRQHandler+0x42>
    {       
      return I2C_MASTER_START_Handle(pDevInitStruct);        
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 fdd5 	bl	800165c <I2C_MASTER_START_Handle>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	e066      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
    } 
    
    /*----------------------------------------*/
    /*------------- If ADDR event ------------*/
    if((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_ADDR ) != 0)
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d004      	beq.n	8000acc <CPAL_I2C_EV_IRQHandler+0x58>
    {  
      return I2C_MASTER_ADDR_Handle(pDevInitStruct);              
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 fe4c 	bl	8001760 <I2C_MASTER_ADDR_Handle>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	e05b      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
    }
    
 #ifdef CPAL_I2C_10BIT_ADDR_MODE
    /*----------------------------------------*/
    /*------------- If ADD10 event *----------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_ADD10) != 0)
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d004      	beq.n	8000ae2 <CPAL_I2C_EV_IRQHandler+0x6e>
    { 
      return I2C_MASTER_ADD10_Handle(pDevInitStruct);  
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f001 f82d 	bl	8001b38 <I2C_MASTER_ADD10_Handle>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e050      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
 #endif /* CPAL_I2C_10BIT_ADDR_MODE */
    
 #ifdef CPAL_I2C_IT_PROGMODEL   
    /*----------------------------------------*/
    /*------------- If TXE event -------------*/
    if (((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_TXE) != 0) && (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX))
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d009      	beq.n	8000b02 <CPAL_I2C_EV_IRQHandler+0x8e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b1b      	ldrb	r3, [r3, #12]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b06      	cmp	r3, #6
 8000af6:	d104      	bne.n	8000b02 <CPAL_I2C_EV_IRQHandler+0x8e>
    {  
      return I2C_MASTER_TXE_Handle(pDevInitStruct); 
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f001 f855 	bl	8001ba8 <I2C_MASTER_TXE_Handle>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e040      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
 #endif /* CPAL_I2C_IT_PROGMODEL */
    
 #if defined (CPAL_I2C_IT_PROGMODEL) || defined (CPAL_I2C_DMA_1BYTE_CASE)    
    /*----------------------------------------*/
    /*------------- If RXNE event ------------*/
    if (((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_RXNE) != 0) && (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX))
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d009      	beq.n	8000b22 <CPAL_I2C_EV_IRQHandler+0xae>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7b1b      	ldrb	r3, [r3, #12]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	d104      	bne.n	8000b22 <CPAL_I2C_EV_IRQHandler+0xae>
    { 
      return I2C_MASTER_RXNE_Handle(pDevInitStruct); 
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f001 f911 	bl	8001d40 <I2C_MASTER_RXNE_Handle>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	e030      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
#endif /* CPAL_I2C_MASTER_MODE */
 
#ifdef CPAL_I2C_SLAVE_MODE  
  /*----------------------------------------------------------------------------------------------*/
  /*---------------------------------- If Slave Mode selected ------------------------------------*/
  if (pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d12b      	bne.n	8000b82 <CPAL_I2C_EV_IRQHandler+0x10e>
  {  
    /*----------------------------------------*/        
    /*------------- If ADDR event ------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_ADDR ) != 0)
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d004      	beq.n	8000b40 <CPAL_I2C_EV_IRQHandler+0xcc>
    { 
      return I2C_SLAVE_ADDR_Handle(pDevInitStruct); 
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 fb2e 	bl	8002198 <I2C_SLAVE_ADDR_Handle>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	e021      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
    }    

 #ifdef CPAL_I2C_IT_PROGMODEL    
    /*----------------------------------------*/
    /*------------- If TXE event -------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_TXE) != 0)
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <CPAL_I2C_EV_IRQHandler+0xe2>
    { 
      return I2C_SLAVE_TXE_Handle(pDevInitStruct); 
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f001 fc2b 	bl	80023a8 <I2C_SLAVE_TXE_Handle>
 8000b52:	4603      	mov	r3, r0
 8000b54:	e016      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
    }  
    
    /*----------------------------------------*/
    /*------------- If RXNE event ------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_RXNE) != 0)
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <CPAL_I2C_EV_IRQHandler+0xf8>
    { 
      return I2C_SLAVE_RXNE_Handle(pDevInitStruct); 
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f001 fc52 	bl	800240c <I2C_SLAVE_RXNE_Handle>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	e00b      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
    }    
 #endif /* CPAL_I2C_IT_PROGMODEL */
    
    /*----------------------------------------*/
    /*------------- If STOPF event ------------*/
    if ((I2CFlagStatus & (uint16_t)CPAL_I2C_EVT_STOPF) != 0)
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d004      	beq.n	8000b82 <CPAL_I2C_EV_IRQHandler+0x10e>
    { 
      return I2C_SLAVE_STOP_Handle(pDevInitStruct); 
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 fb39 	bl	80021f0 <I2C_SLAVE_STOP_Handle>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	e000      	b.n	8000b84 <CPAL_I2C_EV_IRQHandler+0x110>
    }
  }
#endif /* CPAL_I2C_SLAVE_MODE */
  
  return CPAL_PASS;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000006c 	.word	0x2000006c

08000b90 <CPAL_I2C_ER_IRQHandler>:
  *         user functions.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_ER_IRQHandler(CPAL_InitTypeDef* pDevInitStruct)
{  
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* If AF detected in Slave mode transmitter */
  if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && (pDevInitStruct->pCPAL_TransferTx->wNumData == 0) &&
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	789b      	ldrb	r3, [r3, #2]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d16e      	bne.n	8000c7e <CPAL_I2C_ER_IRQHandler+0xee>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d169      	bne.n	8000c7e <CPAL_I2C_ER_IRQHandler+0xee>
      ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) || (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7b1b      	ldrb	r3, [r3, #12]
 8000bae:	b2db      	uxtb	r3, r3
  if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && (pDevInitStruct->pCPAL_TransferTx->wNumData == 0) &&
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d004      	beq.n	8000bbe <CPAL_I2C_ER_IRQHandler+0x2e>
      ((pDevInitStruct->CPAL_State == CPAL_STATE_READY) || (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7b1b      	ldrb	r3, [r3, #12]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d15f      	bne.n	8000c7e <CPAL_I2C_ER_IRQHandler+0xee>
  {      
    /* Clear error flags that can be cleared by writing to SR register */
    __CPAL_I2C_HAL_CLEAR_ERROR((pDevInitStruct->CPAL_Dev));  
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b6b      	ldr	r3, [pc, #428]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bca:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8000bce:	829a      	strh	r2, [r3, #20]
    
    /* If Interrupt Programming Model */
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	f040 80c8 	bne.w	8000d6a <CPAL_I2C_ER_IRQHandler+0x1da>
    {  
#ifdef CPAL_I2C_IT_PROGMODEL  
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be6:	889b      	ldrh	r3, [r3, #4]
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4b60      	ldr	r3, [pc, #384]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000bf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000bf6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bfa:	b292      	uxth	r2, r2
 8000bfc:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0a:	889b      	ldrh	r3, [r3, #4]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4619      	mov	r1, r3
 8000c14:	4b57      	ldr	r3, [pc, #348]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000c16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device BUFF IT Disabled"); 
      
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2206      	movs	r2, #6
 8000c26:	619a      	str	r2, [r3, #24]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b51      	ldr	r3, [pc, #324]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c34:	8b1b      	ldrh	r3, [r3, #24]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <CPAL_I2C_ER_IRQHandler+0xc2>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d004      	beq.n	8000c52 <CPAL_I2C_ER_IRQHandler+0xc2>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d1ea      	bne.n	8000c28 <CPAL_I2C_ER_IRQHandler+0x98>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d004      	beq.n	8000c64 <CPAL_I2C_ER_IRQHandler+0xd4>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c62:	d104      	bne.n	8000c6e <CPAL_I2C_ER_IRQHandler+0xde>
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fce3 	bl	8001630 <CPAL_I2C_Timeout>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	e07e      	b.n	8000d6c <CPAL_I2C_ER_IRQHandler+0x1dc>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	619a      	str	r2, [r3, #24]
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY;  
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	731a      	strb	r2, [r3, #12]
    if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8000c7c:	e075      	b.n	8000d6a <CPAL_I2C_ER_IRQHandler+0x1da>
    }   
  }  
  else
  {
    /* Read Error Register and affect to wCPAL_DevError */
    pDevInitStruct->wCPAL_DevError = __CPAL_I2C_HAL_GET_ERROR(pDevInitStruct->CPAL_Dev);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	8a9b      	ldrh	r3, [r3, #20]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	611a      	str	r2, [r3, #16]
    
    /* Set Device state to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2210      	movs	r2, #16
 8000c9a:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\r\n\rERROR <CPAL_I2C_ErrorHandler> : I2C Device Error"); 
    
    /* Clear error flags that can be cleared by writing to SR register */
    __CPAL_I2C_HAL_CLEAR_ERROR((pDevInitStruct->CPAL_Dev)); 
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8000cac:	829a      	strh	r2, [r3, #20]
    
    /* If Bus error occurred ---------------------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_BERR) != 0)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d025      	beq.n	8000d06 <CPAL_I2C_ER_IRQHandler+0x176>
    {      
      CPAL_LOG("\n\rERROR : I2C Device BERR"); 
      
      /* Generate I2C software reset in order to release SDA and SCL lines */
      __CPAL_I2C_HAL_SWRST(pDevInitStruct->CPAL_Dev);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000cd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	8013      	strh	r3, [r2, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cfe:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000d02:	b292      	uxth	r2, r2
 8000d04:	801a      	strh	r2, [r3, #0]
      CPAL_I2C_BERR_UserCallback(pDevInitStruct->CPAL_Dev);    
#endif /* USE_MULTIPLE_ERROR_CALLBACK */
    }
    
    /* If Arbitration Loss error occurred --------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_ARLO) != 0)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d025      	beq.n	8000d5e <CPAL_I2C_ER_IRQHandler+0x1ce>
    {
      CPAL_LOG("\n\rERROR : I2C Device ARLO"); 
      
      /* Generate I2C software reset in order to release SDA and SCL lines */    
      __CPAL_I2C_HAL_SWRST(pDevInitStruct->CPAL_Dev);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000d2a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	8013      	strh	r3, [r2, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <CPAL_I2C_ER_IRQHandler+0x1e4>)
 8000d52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d56:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000d5a:	b292      	uxth	r2, r2
 8000d5c:	801a      	strh	r2, [r3, #0]
      CPAL_I2C_ARLO_UserCallback(pDevInitStruct->CPAL_Dev);  
#endif /* USE_MULTIPLE_ERROR_CALLBACK */    
    }
    
    /* If Overrun error occurred -----------------------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_OVR) != 0)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
      CPAL_I2C_OVR_UserCallback(pDevInitStruct->CPAL_Dev);
#endif /* USE_MULTIPLE_ERROR_CALLBACK */    
    }
        
    /* If Acknowledge Failure error occurred -----------------------------------*/
    if ((pDevInitStruct->wCPAL_DevError & CPAL_I2C_ERR_AF) != 0)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
    }   
        
    /* USE_SINGLE_ERROR_CALLBACK is defined in cpal_conf.h file */
#if defined(USE_SINGLE_ERROR_CALLBACK)  
    /* Call Error UserCallback */  
    CPAL_I2C_ERR_UserCallback(pDevInitStruct->CPAL_Dev , pDevInitStruct->wCPAL_DevError);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
#endif /* USE_SINGLE_ERROR_CALLBACK */
  }
  
  return CPAL_PASS;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000006c 	.word	0x2000006c

08000d78 <CPAL_I2C_DMA_TX_IRQHandler>:
  *         used for data transmission. 
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_DMA_TX_IRQHandler(CPAL_InitTypeDef* pDevInitStruct)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value to default (no timeout initiated) */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT; 
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f04f 32ff 	mov.w	r2, #4294967295
 8000d86:	619a      	str	r2, [r3, #24]
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_DMA_TX_IRQHandler> : I2C Device TX DMA ");
  
  /*------------- If TC interrupt ------------*/
  if((__CPAL_I2C_HAL_GET_DMATX_TCIT(pDevInitStruct->CPAL_Dev)) != 0)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b72      	ldr	r3, [pc, #456]	; (8000f58 <CPAL_I2C_DMA_TX_IRQHandler+0x1e0>)
 8000d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <CPAL_I2C_DMA_TX_IRQHandler+0x4c>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <CPAL_I2C_DMA_TX_IRQHandler+0x1e4>)
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	4b69      	ldr	r3, [pc, #420]	; (8000f58 <CPAL_I2C_DMA_TX_IRQHandler+0x1e0>)
 8000db2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	e012      	b.n	8000dea <CPAL_I2C_DMA_TX_IRQHandler+0x72>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b64      	ldr	r3, [pc, #400]	; (8000f5c <CPAL_I2C_DMA_TX_IRQHandler+0x1e4>)
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <CPAL_I2C_DMA_TX_IRQHandler+0x1e0>)
 8000dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 811e 	beq.w	800102c <CPAL_I2C_DMA_TX_IRQHandler+0x2b4>
  {  
    CPAL_LOG("\n\rLOG : I2C Device TX Complete");
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferTx->wNumData = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
    
    /* Call DMA TX TC UserCallback */
    CPAL_I2C_DMATXTC_UserCallback(pDevInitStruct);
    
    /* If DMA Normal mode */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_DMATX_CIRCULAR) == 0)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f040 8186 	bne.w	8001112 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
    {           
      /* If Master Mode selected */
      if (pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER) 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f040 80ac 	bne.w	8000f68 <CPAL_I2C_DMA_TX_IRQHandler+0x1f0>
      {
 #ifdef CPAL_I2C_MASTER_MODE         
        /* Disable DMA Request */
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev); 
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b52      	ldr	r3, [pc, #328]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	889b      	ldrh	r3, [r3, #4]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4b4e      	ldr	r3, [pc, #312]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000e28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e30:	b292      	uxth	r2, r2
 8000e32:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2205      	movs	r2, #5
 8000e38:	619a      	str	r2, [r3, #24]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e46:	8a9b      	ldrh	r3, [r3, #20]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d108      	bne.n	8000e64 <CPAL_I2C_DMA_TX_IRQHandler+0xec>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d004      	beq.n	8000e64 <CPAL_I2C_DMA_TX_IRQHandler+0xec>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e62:	d1ea      	bne.n	8000e3a <CPAL_I2C_DMA_TX_IRQHandler+0xc2>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d004      	beq.n	8000e76 <CPAL_I2C_DMA_TX_IRQHandler+0xfe>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d104      	bne.n	8000e80 <CPAL_I2C_DMA_TX_IRQHandler+0x108>
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fbda 	bl	8001630 <CPAL_I2C_Timeout>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	e18c      	b.n	800119a <CPAL_I2C_DMA_TX_IRQHandler+0x422>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f04f 32ff 	mov.w	r2, #4294967295
 8000e86:	619a      	str	r2, [r3, #24]
        
        /* No Stop Condition Generation option bit not selected */   
        if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d13b      	bne.n	8000f0c <CPAL_I2C_DMA_TX_IRQHandler+0x194>
        {          
          /* Generate Stop Condition */
          __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000eac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb4:	b292      	uxth	r2, r2
 8000eb6:	801a      	strh	r2, [r3, #0]
          
          /* Wait until Busy flag is reset */         
          __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2206      	movs	r2, #6
 8000ebc:	619a      	str	r2, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	8b1b      	ldrh	r3, [r3, #24]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <CPAL_I2C_DMA_TX_IRQHandler+0x170>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d004      	beq.n	8000ee8 <CPAL_I2C_DMA_TX_IRQHandler+0x170>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee6:	d1ea      	bne.n	8000ebe <CPAL_I2C_DMA_TX_IRQHandler+0x146>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d004      	beq.n	8000efa <CPAL_I2C_DMA_TX_IRQHandler+0x182>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d104      	bne.n	8000f04 <CPAL_I2C_DMA_TX_IRQHandler+0x18c>
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fb98 	bl	8001630 <CPAL_I2C_Timeout>
 8000f00:	4603      	mov	r3, r0
 8000f02:	e14a      	b.n	800119a <CPAL_I2C_DMA_TX_IRQHandler+0x422>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0a:	619a      	str	r2, [r3, #24]
        }
        
        /* Disable DMA Channel */                 
        __CPAL_I2C_HAL_DISABLE_DMATX(pDevInitStruct->CPAL_Dev);        
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <CPAL_I2C_DMA_TX_IRQHandler+0x1ec>)
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <CPAL_I2C_DMA_TX_IRQHandler+0x1ec>)
 8000f22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);   
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	889b      	ldrh	r3, [r3, #4]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <CPAL_I2C_DMA_TX_IRQHandler+0x1e8>)
 8000f44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f4c:	b292      	uxth	r2, r2
 8000f4e:	809a      	strh	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device Master TX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	731a      	strb	r2, [r3, #12]
 8000f56:	e0dc      	b.n	8001112 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
 8000f58:	08003908 	.word	0x08003908
 8000f5c:	200000a8 	.word	0x200000a8
 8000f60:	2000006c 	.word	0x2000006c
 8000f64:	20000090 	.word	0x20000090
 #endif /* CPAL_I2C_MASTER_MODE */  
      else
      {
 #ifdef CPAL_I2C_SLAVE_MODE    	      
        /* Disable DMA Request and Channel */
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);      
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b8d      	ldr	r3, [pc, #564]	; (80011a4 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	889b      	ldrh	r3, [r3, #4]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4b89      	ldr	r3, [pc, #548]	; (80011a4 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000f80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	809a      	strh	r2, [r3, #4]
        __CPAL_I2C_HAL_DISABLE_DMATX(pDevInitStruct->CPAL_Dev);      
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b85      	ldr	r3, [pc, #532]	; (80011a8 <CPAL_I2C_DMA_TX_IRQHandler+0x430>)
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4b81      	ldr	r3, [pc, #516]	; (80011a8 <CPAL_I2C_DMA_TX_IRQHandler+0x430>)
 8000fa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b7c      	ldr	r3, [pc, #496]	; (80011a4 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb8:	889b      	ldrh	r3, [r3, #4]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4b78      	ldr	r3, [pc, #480]	; (80011a4 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000fc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fcc:	b292      	uxth	r2, r2
 8000fce:	809a      	strh	r2, [r3, #4]
        
        /* Wait until Busy flag is reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	619a      	str	r2, [r3, #24]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <CPAL_I2C_DMA_TX_IRQHandler+0x42c>)
 8000fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe2:	8b1b      	ldrh	r3, [r3, #24]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d008      	beq.n	8001000 <CPAL_I2C_DMA_TX_IRQHandler+0x288>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d004      	beq.n	8001000 <CPAL_I2C_DMA_TX_IRQHandler+0x288>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffe:	d1ea      	bne.n	8000fd6 <CPAL_I2C_DMA_TX_IRQHandler+0x25e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d004      	beq.n	8001012 <CPAL_I2C_DMA_TX_IRQHandler+0x29a>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d104      	bne.n	800101c <CPAL_I2C_DMA_TX_IRQHandler+0x2a4>
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fb0c 	bl	8001630 <CPAL_I2C_Timeout>
 8001018:	4603      	mov	r3, r0
 800101a:	e0be      	b.n	800119a <CPAL_I2C_DMA_TX_IRQHandler+0x422>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 32ff 	mov.w	r2, #4294967295
 8001022:	619a      	str	r2, [r3, #24]
        
        CPAL_LOG("\n\rLOG : I2C Device Slave TX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	731a      	strb	r2, [r3, #12]
 800102a:	e072      	b.n	8001112 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
    } 
    /* Call TX TC UserCallback */
    CPAL_I2C_TXTC_UserCallback(pDevInitStruct);
  }
  /*------------- If HT interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMATX_HTIT(pDevInitStruct->CPAL_Dev)) != 0)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <CPAL_I2C_DMA_TX_IRQHandler+0x2f0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4b55      	ldr	r3, [pc, #340]	; (80011ac <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 8001056:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf14      	ite	ne
 8001060:	2301      	movne	r3, #1
 8001062:	2300      	moveq	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	e012      	b.n	800108e <CPAL_I2C_DMA_TX_IRQHandler+0x316>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 800107e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf14      	ite	ne
 8001088:	2301      	movne	r3, #1
 800108a:	2300      	moveq	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d13f      	bne.n	8001112 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
    
    /* Call DMA TX HT UserCallback */
    CPAL_I2C_DMATXHT_UserCallback(pDevInitStruct);
  }  
  /*------------- If TE interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMATX_TEIT(pDevInitStruct->CPAL_Dev)) != 0)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d013      	beq.n	80010ce <CPAL_I2C_DMA_TX_IRQHandler+0x356>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 80010ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 80010bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	e012      	b.n	80010f4 <CPAL_I2C_DMA_TX_IRQHandler+0x37c>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 80010d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 80010e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00c      	beq.n	8001112 <CPAL_I2C_DMA_TX_IRQHandler+0x39a>
  { 
    CPAL_LOG("\n\rERROR : I2C Device TX DMA Transfer Error ");
    
    /* Update CPAL_State to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR; 
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2210      	movs	r2, #16
 80010fc:	731a      	strb	r2, [r3, #12]
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferTx->wNumData = __CPAL_I2C_HAL_DMATX_GET_CNDT(pDevInitStruct->CPAL_Dev);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <CPAL_I2C_DMA_TX_IRQHandler+0x430>)
 8001106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	6852      	ldr	r2, [r2, #4]
 8001110:	605a      	str	r2, [r3, #4]
    /* Call DMA TX TE UserCallback */
    CPAL_I2C_DMATXTE_UserCallback(pDevInitStruct); 
  }  
  
   /* Clear DMA Interrupt Flag */
    __CPAL_I2C_HAL_CLEAR_DMATX_IT(pDevInitStruct->CPAL_Dev);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <CPAL_I2C_DMA_TX_IRQHandler+0x440>)
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01c      	beq.n	8001160 <CPAL_I2C_DMA_TX_IRQHandler+0x3e8>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <CPAL_I2C_DMA_TX_IRQHandler+0x440>)
 800112e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 800113a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800113e:	ea42 0103 	orr.w	r1, r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 800114a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 8001156:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800115a:	430a      	orrs	r2, r1
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	e01b      	b.n	8001198 <CPAL_I2C_DMA_TX_IRQHandler+0x420>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <CPAL_I2C_DMA_TX_IRQHandler+0x440>)
 8001168:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <CPAL_I2C_DMA_TX_IRQHandler+0x434>)
 8001174:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001178:	ea42 0103 	orr.w	r1, r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <CPAL_I2C_DMA_TX_IRQHandler+0x43c>)
 8001184:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <CPAL_I2C_DMA_TX_IRQHandler+0x438>)
 8001190:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001194:	430a      	orrs	r2, r1
 8001196:	609a      	str	r2, [r3, #8]
  
  return CPAL_PASS;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000006c 	.word	0x2000006c
 80011a8:	20000090 	.word	0x20000090
 80011ac:	08003914 	.word	0x08003914
 80011b0:	200000a8 	.word	0x200000a8
 80011b4:	08003920 	.word	0x08003920
 80011b8:	08003908 	.word	0x08003908

080011bc <CPAL_I2C_DMA_RX_IRQHandler>:
  *         used for data reception.  
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C_DMA_RX_IRQHandler(CPAL_InitTypeDef* pDevInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value to default (no timeout initiated) */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT; 
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	619a      	str	r2, [r3, #24]
  
  CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_DMA_RX_IRQHandler> : I2C Device RX DMA ");
  
  /*------------- If TC interrupt ------------*/
  if ((__CPAL_I2C_HAL_GET_DMARX_TCIT(pDevInitStruct->CPAL_Dev)) != 0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b94      	ldr	r3, [pc, #592]	; (8001424 <CPAL_I2C_DMA_RX_IRQHandler+0x268>)
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <CPAL_I2C_DMA_RX_IRQHandler+0x4c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b90      	ldr	r3, [pc, #576]	; (8001428 <CPAL_I2C_DMA_RX_IRQHandler+0x26c>)
 80011e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <CPAL_I2C_DMA_RX_IRQHandler+0x268>)
 80011f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	e012      	b.n	800122e <CPAL_I2C_DMA_RX_IRQHandler+0x72>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b86      	ldr	r3, [pc, #536]	; (8001428 <CPAL_I2C_DMA_RX_IRQHandler+0x26c>)
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4b81      	ldr	r3, [pc, #516]	; (8001424 <CPAL_I2C_DMA_RX_IRQHandler+0x268>)
 800121e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80da 	beq.w	80013e8 <CPAL_I2C_DMA_RX_IRQHandler+0x22c>
  {   
    CPAL_LOG("\n\rLOG : I2C Device RX Complete");
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferRx->wNumData = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
       
    /* Call DMA RX TC UserCallback */
    CPAL_I2C_DMARXTC_UserCallback(pDevInitStruct);
    
    /* If DMA Normal model */
    if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_DMARX_CIRCULAR) == 0)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 814c 	bne.w	80014e2 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
    {      
      /* If Master Mode selected */
      if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	789b      	ldrb	r3, [r3, #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 8086 	bne.w	8001360 <CPAL_I2C_DMA_RX_IRQHandler+0x1a4>
      {         
 #ifdef CPAL_I2C_MASTER_MODE 
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b74      	ldr	r3, [pc, #464]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	4b70      	ldr	r3, [pc, #448]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 800126c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001274:	b292      	uxth	r2, r2
 8001276:	801a      	strh	r2, [r3, #0]
        
        /* Disable DMA Request and Channel */          
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b6b      	ldr	r3, [pc, #428]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8001290:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001298:	b292      	uxth	r2, r2
 800129a:	809a      	strh	r2, [r3, #4]
        
        /* Wait until Busy flag is reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2206      	movs	r2, #6
 80012a0:	619a      	str	r2, [r3, #24]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b60      	ldr	r3, [pc, #384]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80012aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ae:	8b1b      	ldrh	r3, [r3, #24]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d008      	beq.n	80012cc <CPAL_I2C_DMA_RX_IRQHandler+0x110>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d004      	beq.n	80012cc <CPAL_I2C_DMA_RX_IRQHandler+0x110>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ca:	d1ea      	bne.n	80012a2 <CPAL_I2C_DMA_RX_IRQHandler+0xe6>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d004      	beq.n	80012de <CPAL_I2C_DMA_RX_IRQHandler+0x122>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d104      	bne.n	80012e8 <CPAL_I2C_DMA_RX_IRQHandler+0x12c>
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f9a6 	bl	8001630 <CPAL_I2C_Timeout>
 80012e4:	4603      	mov	r3, r0
 80012e6:	e140      	b.n	800156a <CPAL_I2C_DMA_RX_IRQHandler+0x3ae>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f04f 32ff 	mov.w	r2, #4294967295
 80012ee:	619a      	str	r2, [r3, #24]
        
        /* Disable DMA Channel */
        __CPAL_I2C_HAL_DISABLE_DMARX(pDevInitStruct->CPAL_Dev);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 8001306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8001318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131c:	889b      	ldrh	r3, [r3, #4]
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	4b41      	ldr	r3, [pc, #260]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8001328:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800132c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001330:	b292      	uxth	r2, r2
 8001332:	809a      	strh	r2, [r3, #4]
        
        /* Disable DMA automatic NACK generation */
        __CPAL_I2C_HAL_DISABLE_LAST(pDevInitStruct->CPAL_Dev);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b3c      	ldr	r3, [pc, #240]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 800134c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001354:	b292      	uxth	r2, r2
 8001356:	809a      	strh	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device Master RX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	731a      	strb	r2, [r3, #12]
 800135e:	e0c0      	b.n	80014e2 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
        /* Call RX TC UserCallback */
        CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
      
 #endif /* CPAL_I2C_MASTER_MODE */        
      }      
      else if ((pDevInitStruct->CPAL_Mode == CPAL_MODE_SLAVE) && ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) != 0))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	789b      	ldrb	r3, [r3, #2]
 8001364:	2b01      	cmp	r3, #1
 8001366:	f040 80bc 	bne.w	80014e2 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80b5 	beq.w	80014e2 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
      {     
 #ifdef CPAL_I2C_SLAVE_MODE     
        /* Disable DMA Request */          
        __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);          
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	889b      	ldrh	r3, [r3, #4]
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 8001390:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001398:	b292      	uxth	r2, r2
 800139a:	809a      	strh	r2, [r3, #4]
        
        /* Disable DMA Channel */
        __CPAL_I2C_HAL_DISABLE_DMARX(pDevInitStruct->CPAL_Dev);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <CPAL_I2C_DMA_RX_IRQHandler+0x274>)
 80013b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
        
        /* Disable EVENT Interrupt */
        __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	889b      	ldrh	r3, [r3, #4]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <CPAL_I2C_DMA_RX_IRQHandler+0x270>)
 80013d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013dc:	b292      	uxth	r2, r2
 80013de:	809a      	strh	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device Slave RX DMA Disabled");
        
        /* Update CPAL_State to CPAL_STATE_READY */
        pDevInitStruct->CPAL_State = CPAL_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	731a      	strb	r2, [r3, #12]
 80013e6:	e07c      	b.n	80014e2 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
      /* Call RX TC UserCallback */
      CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
    }
  }  
  /*------------- If HT interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMARX_HTIT(pDevInitStruct->CPAL_Dev)) != 0)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <CPAL_I2C_DMA_RX_IRQHandler+0x278>)
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01d      	beq.n	8001438 <CPAL_I2C_DMA_RX_IRQHandler+0x27c>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <CPAL_I2C_DMA_RX_IRQHandler+0x26c>)
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4619      	mov	r1, r3
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <CPAL_I2C_DMA_RX_IRQHandler+0x278>)
 8001412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e01c      	b.n	800145e <CPAL_I2C_DMA_RX_IRQHandler+0x2a2>
 8001424:	0800392c 	.word	0x0800392c
 8001428:	200000a8 	.word	0x200000a8
 800142c:	2000006c 	.word	0x2000006c
 8001430:	2000009c 	.word	0x2000009c
 8001434:	08003938 	.word	0x08003938
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8001440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <CPAL_I2C_DMA_RX_IRQHandler+0x3bc>)
 800144e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d13f      	bne.n	80014e2 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
    
    /* Call DMA RX HT UserCallback */
    CPAL_I2C_DMARXHT_UserCallback(pDevInitStruct);
  }  
  /*------------- If TE interrupt ------------*/
  else if ((__CPAL_I2C_HAL_GET_DMARX_TEIT(pDevInitStruct->CPAL_Dev)) != 0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b44      	ldr	r3, [pc, #272]	; (800157c <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 800146a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d013      	beq.n	800149e <CPAL_I2C_DMA_RX_IRQHandler+0x2e2>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 800147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	4b3c      	ldr	r3, [pc, #240]	; (800157c <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 800148c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	bf14      	ite	ne
 8001496:	2301      	movne	r3, #1
 8001498:	2300      	moveq	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	e012      	b.n	80014c4 <CPAL_I2C_DMA_RX_IRQHandler+0x308>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 80014b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00c      	beq.n	80014e2 <CPAL_I2C_DMA_RX_IRQHandler+0x326>
  {   
    CPAL_LOG("\n\rERROR : I2C Device RX DMA Transfer Error ");
    
    /* Update CPAL_State to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR; 
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2210      	movs	r2, #16
 80014cc:	731a      	strb	r2, [r3, #12]
    
    /* Update remaining number of data */
    pDevInitStruct->pCPAL_TransferRx->wNumData = __CPAL_I2C_HAL_DMARX_GET_CNDT(pDevInitStruct->CPAL_Dev);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <CPAL_I2C_DMA_RX_IRQHandler+0x3c4>)
 80014d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	6852      	ldr	r2, [r2, #4]
 80014e0:	605a      	str	r2, [r3, #4]
    /* Call DMA RX TE UserCallback */
    CPAL_I2C_DMARXTE_UserCallback(pDevInitStruct); 
  }
  
  /* Clear DMA Interrupt Flag */
  __CPAL_I2C_HAL_CLEAR_DMARX_IT(pDevInitStruct->CPAL_Dev);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <CPAL_I2C_DMA_RX_IRQHandler+0x3c8>)
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01c      	beq.n	8001530 <CPAL_I2C_DMA_RX_IRQHandler+0x374>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <CPAL_I2C_DMA_RX_IRQHandler+0x3c8>)
 80014fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <CPAL_I2C_DMA_RX_IRQHandler+0x3bc>)
 800150a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800150e:	ea42 0103 	orr.w	r1, r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 800151a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8001526:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	e01b      	b.n	8001568 <CPAL_I2C_DMA_RX_IRQHandler+0x3ac>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <CPAL_I2C_DMA_RX_IRQHandler+0x3c8>)
 8001538:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <CPAL_I2C_DMA_RX_IRQHandler+0x3bc>)
 8001544:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001548:	ea42 0103 	orr.w	r1, r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <CPAL_I2C_DMA_RX_IRQHandler+0x3c0>)
 8001554:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <CPAL_I2C_DMA_RX_IRQHandler+0x3b8>)
 8001560:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001564:	430a      	orrs	r2, r1
 8001566:	609a      	str	r2, [r3, #8]
  
  return CPAL_PASS;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000a8 	.word	0x200000a8
 8001578:	08003938 	.word	0x08003938
 800157c:	08003944 	.word	0x08003944
 8001580:	2000009c 	.word	0x2000009c
 8001584:	0800392c 	.word	0x0800392c

08001588 <SysTick_Handler>:
  * @brief  This function Manages I2C Timeouts when waiting for specific events.
  * @param  None
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
void CPAL_I2C_TIMEOUT_Manager(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  uint32_t index = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  
  /* Manage I2C timeouts conditions */
  for (index = 0; index < CPAL_I2C_DEV_NUM; index ++)
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e040      	b.n	800161a <SysTick_Handler+0x92>
  {
    if (I2C_DevStructures[index] != pNULL)
 8001598:	4a24      	ldr	r2, [pc, #144]	; (800162c <SysTick_Handler+0xa4>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d037      	beq.n	8001614 <SysTick_Handler+0x8c>
    {
      /* If Timeout occurred  */
      if (I2C_DevStructures[index]->wCPAL_Timeout == CPAL_I2C_TIMEOUT_DETECTED)
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <SysTick_Handler+0xa4>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d121      	bne.n	80015f6 <SysTick_Handler+0x6e>
      {
        /* Reinitialize Timeout Value */
        I2C_DevStructures[index]->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <SysTick_Handler+0xa4>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	619a      	str	r2, [r3, #24]
        
        /* update CPAL_State to CPAL_STATE_ERROR */
        I2C_DevStructures[index]->CPAL_State = CPAL_STATE_ERROR;
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <SysTick_Handler+0xa4>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	2210      	movs	r2, #16
 80015ca:	731a      	strb	r2, [r3, #12]
        
        /* In case of Device Error Timeout_Callback should not be called */
        if (I2C_DevStructures[index]->wCPAL_DevError == CPAL_I2C_ERR_NONE)
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <SysTick_Handler+0xa4>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d11c      	bne.n	8001614 <SysTick_Handler+0x8c>
        {        
          /* update wCPAL_DevError to CPAL_I2C_ERR_TIMEOUT */
          I2C_DevStructures[index]->wCPAL_DevError = CPAL_I2C_ERR_TIMEOUT;
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <SysTick_Handler+0xa4>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	22ff      	movs	r2, #255	; 0xff
 80015e4:	611a      	str	r2, [r3, #16]
          
          CPAL_LOG("\n\r\n\rLOG <CPAL_I2C_TIMEOUT_Manager> : I2C Device Timeout Error");
          
          /* Call CPAL_TIMEOUT_UserCallback */
          CPAL_TIMEOUT_UserCallback(I2C_DevStructures[index]);
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <SysTick_Handler+0xa4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fb94 	bl	8002d1c <CPAL_TIMEOUT_UserCallback>
 80015f4:	e00e      	b.n	8001614 <SysTick_Handler+0x8c>
        }              
      }     
       /* If Timeout is triggered (wCPAL_Timeout != CPAL_I2C_TIMEOUT_DEFAULT)*/
      else if (I2C_DevStructures[index]->wCPAL_Timeout != CPAL_I2C_TIMEOUT_DEFAULT)
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <SysTick_Handler+0xa4>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d006      	beq.n	8001614 <SysTick_Handler+0x8c>
      {
        /* Decrement the timeout value */
        I2C_DevStructures[index]->wCPAL_Timeout--;
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <SysTick_Handler+0xa4>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	3a01      	subs	r2, #1
 8001612:	619a      	str	r2, [r3, #24]
  for (index = 0; index < CPAL_I2C_DEV_NUM; index ++)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d9bb      	bls.n	8001598 <SysTick_Handler+0x10>
      } 
    }
  }  
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <CPAL_I2C_Timeout>:
  * @brief  This function Manages I2C Timeouts when Timeout occurred.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Timeout (CPAL_InitTypeDef* pDevInitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f04f 32ff 	mov.w	r2, #4294967295
 800163e:	619a      	str	r2, [r3, #24]
  
  /* update CPAL_State to CPAL_STATE_ERROR */
  pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2210      	movs	r2, #16
 8001644:	731a      	strb	r2, [r3, #12]
  
  /* update wCPAL_DevError to CPAL_I2C_ERR_TIMEOUT */
  pDevInitStruct->wCPAL_DevError = CPAL_I2C_ERR_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	22ff      	movs	r2, #255	; 0xff
 800164a:	611a      	str	r2, [r3, #16]
  
  /* Call Timeout Callback and quit current function */
  return (CPAL_TIMEOUT_UserCallback(pDevInitStruct));
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f001 fb65 	bl	8002d1c <CPAL_TIMEOUT_UserCallback>
 8001652:	4603      	mov	r3, r0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <I2C_MASTER_START_Handle>:
  * @brief  Handles Master Start condition (SB) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_START_Handle(CPAL_InitTypeDef* pDevInitStruct)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  #ifdef CPAL_I2C_10BIT_ADDR_MODE  
  /* Declare local variable that contains Address Header */
  uint8_t I2CHeaderAddress = 0x00;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
  #endif /* CPAL_I2C_10BIT_ADDR_MODE */

  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f04f 32ff 	mov.w	r2, #4294967295
 800166e:	619a      	str	r2, [r3, #24]
  CPAL_LOG("\n\r\n\rLOG <I2C_EV_IRQHandler> : I2C Device Master IT"); 
  
  CPAL_LOG("\n\rLOG : I2C Device Start Acknowledged"); 
  
  /* If 7 bit Addressing Mode selected */
  if (pDevInitStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress == I2C_AcknowledgedAddress_7bit)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	899b      	ldrh	r3, [r3, #12]
 8001676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800167a:	d12d      	bne.n	80016d8 <I2C_MASTER_START_Handle+0x7c>
  {        
    CPAL_LOG("\n\rLOG : I2C Device 7bit Address");
    
    /* Send Address */
    /* If Master run as receiver */
    if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7b1b      	ldrb	r3, [r3, #12]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b05      	cmp	r3, #5
 8001684:	d112      	bne.n	80016ac <I2C_MASTER_START_Handle+0x50>
    {
      /* Send Slave address with bit0 set for read */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferRx->wAddr1) | I2C_OAR1_ADD0));  
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <I2C_MASTER_START_Handle+0x100>)
 800169c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016a0:	b292      	uxth	r2, r2
 80016a2:	821a      	strh	r2, [r3, #16]
      
      /* Update CPAL_State to CPAL_STATE_BUSY */
      pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_RX; 
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	220a      	movs	r2, #10
 80016a8:	731a      	strb	r2, [r3, #12]
 80016aa:	e011      	b.n	80016d0 <I2C_MASTER_START_Handle+0x74>
    }    
    /* If Master run as Transmitter */
    else
    {
      /* Send Slave address with bit0 reset for write */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr1) & (~I2C_OAR1_ADD0)));        
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <I2C_MASTER_START_Handle+0x100>)
 80016be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016c6:	b292      	uxth	r2, r2
 80016c8:	821a      	strh	r2, [r3, #16]
      
      /* Update CPAL_State to CPAL_STATE_BUSY */
      pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_TX; 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2206      	movs	r2, #6
 80016ce:	731a      	strb	r2, [r3, #12]
    }
    
    CPAL_LOG("\n\rLOG : I2C Device Target Address Sent");
    
    /* Initialize Timeout value */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_ADDR;             
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2204      	movs	r2, #4
 80016d4:	619a      	str	r2, [r3, #24]
 80016d6:	e03a      	b.n	800174e <I2C_MASTER_START_Handle+0xf2>
  else
  {  
    CPAL_LOG("\n\rLOG : I2C Device 10bit Address");
    								      
    /* If Master run as receiver */
    if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7b1b      	ldrb	r3, [r3, #12]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d10b      	bne.n	80016fa <I2C_MASTER_START_Handle+0x9e>
    {
      /* Calculate RX Header Address  */ 
      I2CHeaderAddress = ((((pDevInitStruct->pCPAL_TransferRx->wAddr1) & 0xFF00) >>7) | 0xF0);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	09db      	lsrs	r3, r3, #7
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f003 030e 	and.w	r3, r3, #14
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f063 030f 	orn	r3, r3, #15
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e01d      	b.n	8001736 <I2C_MASTER_START_Handle+0xda>
    }    
    /* If Master run as Transmitter */
    else if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7b1b      	ldrb	r3, [r3, #12]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b03      	cmp	r3, #3
 8001702:	d10b      	bne.n	800171c <I2C_MASTER_START_Handle+0xc0>
    {
      /* Calculate TX Header Address */ 
      I2CHeaderAddress = ((((pDevInitStruct->pCPAL_TransferTx->wAddr1) & 0xFF00) >>7) | 0xF0); 
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	09db      	lsrs	r3, r3, #7
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 030e 	and.w	r3, r3, #14
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f063 030f 	orn	r3, r3, #15
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e00c      	b.n	8001736 <I2C_MASTER_START_Handle+0xda>
    }      
    /* If Master run as Receiver */
    else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d107      	bne.n	8001736 <I2C_MASTER_START_Handle+0xda>
    {
      /* Calculate RX Header Address */ 
      I2CHeaderAddress = ((((pDevInitStruct->pCPAL_TransferRx->wAddr1) & 0xFF00) >>7) | 0xF1);       
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	09db      	lsrs	r3, r3, #7
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f063 030e 	orn	r3, r3, #14
 8001734:	73fb      	strb	r3, [r7, #15]
    }       
    
     /* Send Header */ 
    __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), I2CHeaderAddress); 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <I2C_MASTER_START_Handle+0x100>)
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	b292      	uxth	r2, r2
 8001746:	821a      	strh	r2, [r3, #16]
    
    CPAL_LOG("\n\rLOG : I2C Device Target Header Sent "); 
    
    /* Initialize Timeout value */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_ADD10;                 
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2204      	movs	r2, #4
 800174c:	619a      	str	r2, [r3, #24]
    /* Activate POS bit */
    __CPAL_I2C_HAL_ENABLE_POS(pDevInitStruct->CPAL_Dev);
  }
 #endif /* CPAL_I2C_CLOSECOM_METHOD2 */
#endif  
  return CPAL_PASS;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	2000006c 	.word	0x2000006c

08001760 <I2C_MASTER_ADDR_Handle>:
  * @brief  Handles Master address matched (ADDR) interrupt event. 
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_ADDR_Handle(CPAL_InitTypeDef* pDevInitStruct)
{     
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Initialize Timeout value (1 ms for each data to be sent/received) */
  if (pDevInitStruct->CPAL_ProgModel != CPAL_PROGMODEL_DMA)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	78db      	ldrb	r3, [r3, #3]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d004      	beq.n	800177a <I2C_MASTER_ADDR_Handle+0x1a>
  {
    /* Reinitialize Timeout Value to default (no timeout initiated) */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;                
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f04f 32ff 	mov.w	r2, #4294967295
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	e01b      	b.n	80017b2 <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7b1b      	ldrb	r3, [r3, #12]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b06      	cmp	r3, #6
 8001782:	d106      	bne.n	8001792 <I2C_MASTER_ADDR_Handle+0x32>
  {
    /* Set 1ms timeout for each data transfer in case of DMA Tx mode */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + pDevInitStruct->pCPAL_TransferTx->wNumData;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
 8001790:	e00f      	b.n	80017b2 <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7b1b      	ldrb	r3, [r3, #12]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b0a      	cmp	r3, #10
 800179a:	d106      	bne.n	80017aa <I2C_MASTER_ADDR_Handle+0x4a>
  {
    /* Set 1ms timeout for each data transfer in case of DMA Rx mode */ 
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + pDevInitStruct->pCPAL_TransferRx->wNumData;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	e003      	b.n	80017b2 <I2C_MASTER_ADDR_Handle+0x52>
  }  
  else
  {
    /* Reinitialize Timeout Value to default (no timeout initiated) */
    pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;        
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	619a      	str	r2, [r3, #24]
  }
  
  if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 0))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b1b      	ldrb	r3, [r3, #12]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b0a      	cmp	r3, #10
 80017ba:	d12c      	bne.n	8001816 <I2C_MASTER_ADDR_Handle+0xb6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	78db      	ldrb	r3, [r3, #3]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d128      	bne.n	8001816 <I2C_MASTER_ADDR_Handle+0xb6>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d123      	bne.n	8001816 <I2C_MASTER_ADDR_Handle+0xb6>
  {    
    /* Program STOP bit then clear ADDR flag */
    __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev); 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b9b      	ldr	r3, [pc, #620]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80017e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ee:	b292      	uxth	r2, r2
 80017f0:	801a      	strh	r2, [r3, #0]
    __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80017fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fe:	8a9b      	ldrh	r3, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b8f      	ldr	r3, [pc, #572]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Update CPAL_State to CPAL_STATE_READY */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	731a      	strb	r2, [r3, #12]
 8001814:	e189      	b.n	8001b2a <I2C_MASTER_ADDR_Handle+0x3ca>
  }
  else
  {
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7b1b      	ldrb	r3, [r3, #12]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b0a      	cmp	r3, #10
 800181e:	d107      	bne.n	8001830 <I2C_MASTER_ADDR_Handle+0xd0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	78db      	ldrb	r3, [r3, #3]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d103      	bne.n	8001830 <I2C_MASTER_ADDR_Handle+0xd0>
    {       
      /* Switch Programing Mode Enable DMA or IT Buffer */
      CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_RX);
 8001828:	2102      	movs	r1, #2
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fe4e 	bl	80024cc <CPAL_I2C_Enable_DMA_IT>
    }
  
#if defined (STM32L1XX_MD) || defined (STM32L1XX_HD) || defined (STM32F2XX) || defined (STM32F4XX) 
    /* If CPAL_State is CPAL_STATE_BUSY_RX and receiving one byte */  
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 1))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7b1b      	ldrb	r3, [r3, #12]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d137      	bne.n	80018aa <I2C_MASTER_ADDR_Handle+0x14a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d132      	bne.n	80018aa <I2C_MASTER_ADDR_Handle+0x14a>
    { 
      /* Disable Acknowledge */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b7e      	ldr	r3, [pc, #504]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800185c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001864:	b292      	uxth	r2, r2
 8001866:	801a      	strh	r2, [r3, #0]
      
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);   
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	8a9b      	ldrh	r3, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b71      	ldr	r3, [pc, #452]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800187e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001882:	8b1b      	ldrh	r3, [r3, #24]
      
      /* Program Generation of Stop Condition */
      __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b6e      	ldr	r3, [pc, #440]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800189c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a4:	b292      	uxth	r2, r2
 80018a6:	801a      	strh	r2, [r3, #0]
 80018a8:	e04e      	b.n	8001948 <I2C_MASTER_ADDR_Handle+0x1e8>
    }  
    else if ((pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT) &&(pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) && (pDevInitStruct->pCPAL_TransferRx->wNumData == 2))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	78db      	ldrb	r3, [r3, #3]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d13c      	bne.n	800192c <I2C_MASTER_ADDR_Handle+0x1cc>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b1b      	ldrb	r3, [r3, #12]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b0a      	cmp	r3, #10
 80018ba:	d137      	bne.n	800192c <I2C_MASTER_ADDR_Handle+0x1cc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d132      	bne.n	800192c <I2C_MASTER_ADDR_Handle+0x1cc>
    {
      /* Disable Acknowledge */
      __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80018ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4619      	mov	r1, r3
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80018de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e6:	b292      	uxth	r2, r2
 80018e8:	801a      	strh	r2, [r3, #0]
      
      /* Enable Pos */
      __CPAL_I2C_HAL_ENABLE_POS(pDevInitStruct->CPAL_Dev);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80018f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800190a:	b292      	uxth	r2, r2
 800190c:	801a      	strh	r2, [r3, #0]
      
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);      
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191a:	8a9b      	ldrh	r3, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001928:	8b1b      	ldrh	r3, [r3, #24]
 800192a:	e00d      	b.n	8001948 <I2C_MASTER_ADDR_Handle+0x1e8>
    }
    else
    {
      /* Clear ADDR Flag by reading SR1 then SR2 */
      __CPAL_I2C_HAL_CLEAR_ADDR(pDevInitStruct->CPAL_Dev);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	8a9b      	ldrh	r3, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	8b1b      	ldrh	r3, [r3, #24]
 #endif /* CPAL_I2C_CLOSECOM_METHOD2 */ 
#endif /* STM32L1XX_MD || STM32L1XX_HD || STM32F2XX || STM32F4XX */
  
#ifdef CPAL_I2C_10BIT_ADDR_MODE
    /* If CPAL_State is not CPAL_STATE_BUSY */
    if (((pDevInitStruct->CPAL_State & (CPAL_STATE_READY_TX | CPAL_STATE_READY_RX)) != 0) 
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7b1b      	ldrb	r3, [r3, #12]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02c      	beq.n	80019b0 <I2C_MASTER_ADDR_Handle+0x250>
        && (pDevInitStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress == I2C_AcknowledgedAddress_10bit))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	899b      	ldrh	r3, [r3, #12]
 800195c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001960:	d126      	bne.n	80019b0 <I2C_MASTER_ADDR_Handle+0x250>
    {        
      /* If Master run as receiver */
      if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7b1b      	ldrb	r3, [r3, #12]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b05      	cmp	r3, #5
 800196a:	d117      	bne.n	800199c <I2C_MASTER_ADDR_Handle+0x23c>
      {
        /* Update CPAL_State to CPAL_STATE_BUSY_RX */
        pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_RX; 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	220a      	movs	r2, #10
 8001970:	731a      	strb	r2, [r3, #12]
        
        CPAL_LOG("\n\rLOG : I2C Device Busy RX");
        
        /* Generate Repeated start bit  */
        __CPAL_I2C_HAL_START(pDevInitStruct->CPAL_Dev);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800197a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 800198a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800198e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001992:	b292      	uxth	r2, r2
 8001994:	801a      	strh	r2, [r3, #0]
        
        /* Initialize Timeout value */
        pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_SB;          
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	221f      	movs	r2, #31
 800199a:	619a      	str	r2, [r3, #24]
      }
      
      /* If Master run as Transmitter */
      if  (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	f040 80c1 	bne.w	8001b2a <I2C_MASTER_ADDR_Handle+0x3ca>
      {
        /* Update CPAL_State to CPAL_STATE_BUSY_TX */
        pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_TX; 
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2206      	movs	r2, #6
 80019ac:	731a      	strb	r2, [r3, #12]
      if  (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 80019ae:	e0bc      	b.n	8001b2a <I2C_MASTER_ADDR_Handle+0x3ca>
        
        CPAL_LOG("\n\rLOG : I2C Device Busy TX");
      }
    }
    else if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0)      
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 80b6 	bne.w	8001b2a <I2C_MASTER_ADDR_Handle+0x3ca>
      /* If CPAL_OPT_NO_MEM_ADDR is not enabled */
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_NO_MEM_ADDR) == 0)
#endif  /* CPAL_I2C_10BIT_ADDR_MODE */
      {
        /* If CPAL_State is CPAL_STATE_BUSY_TX */  
        if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b06      	cmp	r3, #6
 80019c6:	f040 80ac 	bne.w	8001b22 <I2C_MASTER_ADDR_Handle+0x3c2>
        {         
          /* If 8 Bit register mode */
          if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_16BIT_REG) == 0)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d138      	bne.n	8001a48 <I2C_MASTER_ADDR_Handle+0x2e8>
          {
            /* Send Register Address */
            __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr2)& 0x00FF)); 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80019e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019ea:	b292      	uxth	r2, r2
 80019ec:	821a      	strh	r2, [r3, #16]
            
            /* Wait until TXE flag is set */ 
            __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE);              
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <I2C_MASTER_ADDR_Handle+0x2e4>)
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	8a9b      	ldrh	r3, [r3, #20]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d108      	bne.n	8001a1e <I2C_MASTER_ADDR_Handle+0x2be>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d004      	beq.n	8001a1e <I2C_MASTER_ADDR_Handle+0x2be>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d1ea      	bne.n	80019f4 <I2C_MASTER_ADDR_Handle+0x294>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d004      	beq.n	8001a30 <I2C_MASTER_ADDR_Handle+0x2d0>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2e:	d104      	bne.n	8001a3a <I2C_MASTER_ADDR_Handle+0x2da>
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fdfd 	bl	8001630 <CPAL_I2C_Timeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	e078      	b.n	8001b2c <I2C_MASTER_ADDR_Handle+0x3cc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	619a      	str	r2, [r3, #24]
 8001a42:	e06e      	b.n	8001b22 <I2C_MASTER_ADDR_Handle+0x3c2>
 8001a44:	2000006c 	.word	0x2000006c
#ifdef CPAL_16BIT_REG_OPTION
          /* If 16 Bit register mode */
          else
          {
            /* Send MSB Register Address */
            __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(((pDevInitStruct->pCPAL_TransferTx->wAddr2)& 0xFF00) >>8));  
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <I2C_MASTER_ADDR_Handle+0x3d4>)
 8001a5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	821a      	strh	r2, [r3, #16]
            
            /* Wait until TXE flag is set */ 
            __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <I2C_MASTER_ADDR_Handle+0x3d4>)
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	8a9b      	ldrh	r3, [r3, #20]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <I2C_MASTER_ADDR_Handle+0x332>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d004      	beq.n	8001a92 <I2C_MASTER_ADDR_Handle+0x332>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d1ea      	bne.n	8001a68 <I2C_MASTER_ADDR_Handle+0x308>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d004      	beq.n	8001aa4 <I2C_MASTER_ADDR_Handle+0x344>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa2:	d104      	bne.n	8001aae <I2C_MASTER_ADDR_Handle+0x34e>
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fdc3 	bl	8001630 <CPAL_I2C_Timeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	e03e      	b.n	8001b2c <I2C_MASTER_ADDR_Handle+0x3cc>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	619a      	str	r2, [r3, #24]
            
            /* Send LSB Register Address */
            __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)((pDevInitStruct->pCPAL_TransferTx->wAddr2)& 0x00FF));  
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <I2C_MASTER_ADDR_Handle+0x3d4>)
 8001ac6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aca:	b292      	uxth	r2, r2
 8001acc:	821a      	strh	r2, [r3, #16]
            
            /* Wait until TXE flag is set */ 
            __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_TXE(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_TXE); 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	619a      	str	r2, [r3, #24]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <I2C_MASTER_ADDR_Handle+0x3d4>)
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	8a9b      	ldrh	r3, [r3, #20]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d108      	bne.n	8001afe <I2C_MASTER_ADDR_Handle+0x39e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d004      	beq.n	8001afe <I2C_MASTER_ADDR_Handle+0x39e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d1ea      	bne.n	8001ad4 <I2C_MASTER_ADDR_Handle+0x374>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d004      	beq.n	8001b10 <I2C_MASTER_ADDR_Handle+0x3b0>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d104      	bne.n	8001b1a <I2C_MASTER_ADDR_Handle+0x3ba>
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fd8d 	bl	8001630 <CPAL_I2C_Timeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	e008      	b.n	8001b2c <I2C_MASTER_ADDR_Handle+0x3cc>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	619a      	str	r2, [r3, #24]
          }     
#endif /* CPAL_16BIT_REG_OPTION */
        }  
        
        /* Switch Programing Mode Enable DMA or IT Buffer */
        CPAL_I2C_Enable_DMA_IT(pDevInitStruct, CPAL_DIRECTION_TXRX);   
 8001b22:	2103      	movs	r1, #3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fcd1 	bl	80024cc <CPAL_I2C_Enable_DMA_IT>
      }      
  }
  return CPAL_PASS;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000006c 	.word	0x2000006c

08001b38 <I2C_MASTER_ADD10_Handle>:
  * @brief  Handles Master 10bit address matched (ADD10) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_ADD10_Handle(CPAL_InitTypeDef* pDevInitStruct)
{ 
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Reinitialize Timeout Value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_DEFAULT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295
 8001b46:	619a      	str	r2, [r3, #24]
  
  CPAL_LOG("\n\rLOG : I2C Device Header Address Acknowledged");
  
  /* Send Address */
  /* If Master run as receiver */
  if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7b1b      	ldrb	r3, [r3, #12]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <I2C_MASTER_ADD10_Handle+0x34>
  {
    /* Send Slave Address */
    __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(pDevInitStruct->pCPAL_TransferRx->wAddr1));  
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <I2C_MASTER_ADD10_Handle+0x6c>)
 8001b62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b66:	b292      	uxth	r2, r2
 8001b68:	821a      	strh	r2, [r3, #16]
 8001b6a:	e010      	b.n	8001b8e <I2C_MASTER_ADD10_Handle+0x56>
  }  
  /* If Master run as Transmitter */
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7b1b      	ldrb	r3, [r3, #12]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d10b      	bne.n	8001b8e <I2C_MASTER_ADD10_Handle+0x56>
  {
    /* Send Slave Address */
    __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (uint8_t)(pDevInitStruct->pCPAL_TransferTx->wAddr1));        
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <I2C_MASTER_ADD10_Handle+0x6c>)
 8001b86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	821a      	strh	r2, [r3, #16]
  }
  
  CPAL_LOG("\n\rLOG : I2C Device Target Address Sent");  
  
  /* Initialize Timeout value */
  pDevInitStruct->wCPAL_Timeout = CPAL_I2C_TIMEOUT_MIN + CPAL_I2C_TIMEOUT_ADDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	619a      	str	r2, [r3, #24]
  
  return CPAL_PASS;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000006c 	.word	0x2000006c

08001ba8 <I2C_MASTER_TXE_Handle>:
  * @brief  Handles Master transmission (TXE) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_TXE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{ 
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	78db      	ldrb	r3, [r3, #3]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f040 80bc 	bne.w	8001d32 <I2C_MASTER_TXE_Handle+0x18a>
  {                   
    /* If Buffer end */
    if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01c      	beq.n	8001bfe <I2C_MASTER_TXE_Handle+0x56>
    {   
      /* Call TX UserCallback */
      CPAL_I2C_TX_UserCallback(pDevInitStruct);
      
      /* Write Byte */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (*(pDevInitStruct->pCPAL_TransferTx->pbBuffer))); 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001bd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	821a      	strh	r2, [r3, #16]
      
      /* Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferTx->wNumData--;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	3a01      	subs	r2, #1
 8001be4:	605a      	str	r2, [r3, #4]
      
      /* If Buffer end */
      if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a0 	beq.w	8001d32 <I2C_MASTER_TXE_Handle+0x18a>
      {  
        /* Point to next data */
        pDevInitStruct->pCPAL_TransferTx->pbBuffer++;      
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	3201      	adds	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e099      	b.n	8001d32 <I2C_MASTER_TXE_Handle+0x18a>
      }
    }    
    else 
    {
      /* No Stop Condition Generation option bit not selected */ 
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d111      	bne.n	8001c2e <I2C_MASTER_TXE_Handle+0x86>
      {      
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	801a      	strh	r2, [r3, #0]
      }
      
      CPAL_LOG("\n\rLOG : I2C Device TX Complete");
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	889b      	ldrh	r3, [r3, #4]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001c46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device TX EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	889b      	ldrh	r3, [r3, #4]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c72:	b292      	uxth	r2, r2
 8001c74:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device TX BUFF IT Disabled");
      
      /* No Stop Condition Generation option bit not selected */ 
      if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) == 0)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d12a      	bne.n	8001cd8 <I2C_MASTER_TXE_Handle+0x130>
      { 
        /* Wait until BTF and TXE flags are reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev) & (I2C_SR1_BTF | I2C_SR1_TXE )), CPAL_I2C_TIMEOUT_BUSY);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2206      	movs	r2, #6
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	8a9b      	ldrh	r3, [r3, #20]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f003 0384 	and.w	r3, r3, #132	; 0x84
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <I2C_MASTER_TXE_Handle+0x10a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d004      	beq.n	8001cb2 <I2C_MASTER_TXE_Handle+0x10a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d1ea      	bne.n	8001c88 <I2C_MASTER_TXE_Handle+0xe0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d004      	beq.n	8001cc4 <I2C_MASTER_TXE_Handle+0x11c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc2:	d104      	bne.n	8001cce <I2C_MASTER_TXE_Handle+0x126>
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fcb3 	bl	8001630 <CPAL_I2C_Timeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	e032      	b.n	8001d34 <I2C_MASTER_TXE_Handle+0x18c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	619a      	str	r2, [r3, #24]
 8001cd6:	e029      	b.n	8001d2c <I2C_MASTER_TXE_Handle+0x184>
      }
      else
      {
        /* Wait until BTF flags is reset */ 
        __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_EVENT(pDevInitStruct->CPAL_Dev) & I2C_SR1_TXE ), CPAL_I2C_TIMEOUT_BUSY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2206      	movs	r2, #6
 8001cdc:	619a      	str	r2, [r3, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <I2C_MASTER_TXE_Handle+0x194>)
 8001ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cea:	8a9b      	ldrh	r3, [r3, #20]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <I2C_MASTER_TXE_Handle+0x160>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d004      	beq.n	8001d08 <I2C_MASTER_TXE_Handle+0x160>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d1ea      	bne.n	8001cde <I2C_MASTER_TXE_Handle+0x136>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d004      	beq.n	8001d1a <I2C_MASTER_TXE_Handle+0x172>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d104      	bne.n	8001d24 <I2C_MASTER_TXE_Handle+0x17c>
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fc88 	bl	8001630 <CPAL_I2C_Timeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	e007      	b.n	8001d34 <I2C_MASTER_TXE_Handle+0x18c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2a:	619a      	str	r2, [r3, #24]
        
      }
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	731a      	strb	r2, [r3, #12]
      /* Call TX Transfer complete Callback */
      CPAL_I2C_TXTC_UserCallback(pDevInitStruct);       
    }        
  }
  
  return CPAL_PASS;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000006c 	.word	0x2000006c

08001d40 <I2C_MASTER_RXNE_Handle>:
  * @brief  Handles Master reception (RXNE flag) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_MASTER_RXNE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{  
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	f040 821c 	bne.w	800218a <I2C_MASTER_RXNE_Handle+0x44a>
  {  
#if defined (STM32L1XX_MD) || defined (STM32L1XX_HD) || defined (STM32F2XX) || defined (STM32F4XX)
    /* if less than 3 bytes remaining for reception */ 
    if (pDevInitStruct->pCPAL_TransferRx->wNumData <= 3)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	f200 8167 	bhi.w	800202c <I2C_MASTER_RXNE_Handle+0x2ec>
    {  
      /* One byte */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d111      	bne.n	8001d8c <I2C_MASTER_RXNE_Handle+0x4c>
      {              
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	8a1b      	ldrh	r3, [r3, #16]
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;   
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	605a      	str	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Stop Programmed");
      }
      
      /* Two bytes */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d176      	bne.n	8001e84 <I2C_MASTER_RXNE_Handle+0x144>
      {           
        /* Disable Buffer interrupt */
        __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b82      	ldr	r3, [pc, #520]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	889b      	ldrh	r3, [r3, #4]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4b7e      	ldr	r3, [pc, #504]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001dae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	b292      	uxth	r2, r2
 8001db8:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	619a      	str	r2, [r3, #24]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	8a9b      	ldrh	r3, [r3, #20]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <I2C_MASTER_RXNE_Handle+0xaa>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d004      	beq.n	8001dea <I2C_MASTER_RXNE_Handle+0xaa>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d1ea      	bne.n	8001dc0 <I2C_MASTER_RXNE_Handle+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d004      	beq.n	8001dfc <I2C_MASTER_RXNE_Handle+0xbc>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfa:	d104      	bne.n	8001e06 <I2C_MASTER_RXNE_Handle+0xc6>
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fc17 	bl	8001630 <CPAL_I2C_Timeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	e1c2      	b.n	800218c <I2C_MASTER_RXNE_Handle+0x44c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	619a      	str	r2, [r3, #24]
        
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001e26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b5b      	ldr	r3, [pc, #364]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3e:	8a1b      	ldrh	r3, [r3, #16]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	3201      	adds	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	605a      	str	r2, [r3, #4]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	8a1b      	ldrh	r3, [r3, #16]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
        
        /*Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;           
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	3a01      	subs	r2, #1
 8001e82:	605a      	str	r2, [r3, #4]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Stop Programmed");
      }
      
      /* 3 Last bytes */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData == 3)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	f040 80e5 	bne.w	800205a <I2C_MASTER_RXNE_Handle+0x31a>
      {
        /* Disable Buffer interrupt */
        __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	889b      	ldrh	r3, [r3, #4]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001ea8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	809a      	strh	r2, [r3, #4]
        
        /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2205      	movs	r2, #5
 8001eb8:	619a      	str	r2, [r3, #24]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	8a9b      	ldrh	r3, [r3, #20]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <I2C_MASTER_RXNE_Handle+0x1a4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d004      	beq.n	8001ee4 <I2C_MASTER_RXNE_Handle+0x1a4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee2:	d1ea      	bne.n	8001eba <I2C_MASTER_RXNE_Handle+0x17a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d004      	beq.n	8001ef6 <I2C_MASTER_RXNE_Handle+0x1b6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d104      	bne.n	8001f00 <I2C_MASTER_RXNE_Handle+0x1c0>
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fb9a 	bl	8001630 <CPAL_I2C_Timeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	e145      	b.n	800218c <I2C_MASTER_RXNE_Handle+0x44c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f04f 32ff 	mov.w	r2, #4294967295
 8001f06:	619a      	str	r2, [r3, #24]
        
        /* Program NACK Generation */
        __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001f20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f38:	8a1b      	ldrh	r3, [r3, #16]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	3a01      	subs	r2, #1
 8001f58:	605a      	str	r2, [r3, #4]
        
         /* Wait until BTF flag is set */ 
        __CPAL_I2C_TIMEOUT(__CPAL_I2C_HAL_GET_BTF(pDevInitStruct->CPAL_Dev), CPAL_I2C_TIMEOUT_BTF); 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	619a      	str	r2, [r3, #24]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <I2C_MASTER_RXNE_Handle+0x268>)
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	8a9b      	ldrh	r3, [r3, #20]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d108      	bne.n	8001f8a <I2C_MASTER_RXNE_Handle+0x24a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d004      	beq.n	8001f8a <I2C_MASTER_RXNE_Handle+0x24a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d1ea      	bne.n	8001f60 <I2C_MASTER_RXNE_Handle+0x220>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d004      	beq.n	8001f9c <I2C_MASTER_RXNE_Handle+0x25c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d107      	bne.n	8001fac <I2C_MASTER_RXNE_Handle+0x26c>
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fb47 	bl	8001630 <CPAL_I2C_Timeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	e0f2      	b.n	800218c <I2C_MASTER_RXNE_Handle+0x44c>
 8001fa6:	bf00      	nop
 8001fa8:	2000006c 	.word	0x2000006c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb2:	619a      	str	r2, [r3, #24]
        
        /* Generate Stop Condition */
        __CPAL_I2C_HAL_STOP(pDevInitStruct->CPAL_Dev);        
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4b72      	ldr	r3, [pc, #456]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8001fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	801a      	strh	r2, [r3, #0]
        
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8001fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe4:	8a1b      	ldrh	r3, [r3, #16]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
        
        /* Point to next data and Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	3201      	adds	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
        
        pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	3a01      	subs	r2, #1
 8002004:	605a      	str	r2, [r3, #4]
          
        /* Read Byte */
        *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b61      	ldr	r3, [pc, #388]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	8a1b      	ldrh	r3, [r3, #16]
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
        
        /* Decrement remaining number of data */
        pDevInitStruct->pCPAL_TransferRx->wNumData--;   
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	3a01      	subs	r2, #1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e016      	b.n	800205a <I2C_MASTER_RXNE_Handle+0x31a>
    
    /* if bytes remaining for reception */ 
    else
    {
      /* Read Byte */
      *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b58      	ldr	r3, [pc, #352]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8002034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002038:	8a1b      	ldrh	r3, [r3, #16]
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
      
      /* Point to next data and Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	3201      	adds	r2, #1
 800204e:	601a      	str	r2, [r3, #0]
      
      pDevInitStruct->pCPAL_TransferRx->wNumData--; 
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	3a01      	subs	r2, #1
 8002058:	605a      	str	r2, [r3, #4]
      /* Call RX UserCallback */
      CPAL_I2C_RX_UserCallback(pDevInitStruct);
    }
    
    /* If All data are received */
    if (pDevInitStruct->pCPAL_TransferRx->wNumData == 0)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f040 8092 	bne.w	800218a <I2C_MASTER_RXNE_Handle+0x44a>
      CPAL_LOG("\n\rLOG : I2C Device Nack and Stop Generated ");
      
      CPAL_LOG("\n\rLOG : I2C Device RX Complete"); 
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	4b49      	ldr	r3, [pc, #292]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 800206e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002072:	889b      	ldrh	r3, [r3, #4]
 8002074:	b29a      	uxth	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4b45      	ldr	r3, [pc, #276]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 800207e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002082:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002086:	b292      	uxth	r2, r2
 8002088:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device RX EVT IT Disabled");
      
      /* Disable Buffer interrupt */
      __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	4b40      	ldr	r3, [pc, #256]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8002092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002096:	889b      	ldrh	r3, [r3, #4]
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 80020a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	b292      	uxth	r2, r2
 80020ac:	809a      	strh	r2, [r3, #4]
      
      CPAL_LOG("\n\rLOG : I2C Device RX BUFF IT Disabled");
      
      /* Clear BTF Flag */
      __CPAL_I2C_HAL_CLEAR_BTF(pDevInitStruct->CPAL_Dev);   
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b37      	ldr	r3, [pc, #220]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 80020b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ba:	8a9b      	ldrh	r3, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	8a1b      	ldrh	r3, [r3, #16]
      
      /* If 1Byte DMA option is selected */
      if ((pDevInitStruct->wCPAL_Options & CPAL_DMA_1BYTE_CASE) != 0)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <I2C_MASTER_RXNE_Handle+0x3a8>
      {
        /* Clear 1Byte DMA option from wCPAL_Options */
        pDevInitStruct->wCPAL_Options &= ~CPAL_DMA_1BYTE_CASE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	615a      	str	r2, [r3, #20]
        
        /* Change ProgModel to DMA */
        pDevInitStruct->CPAL_ProgModel = CPAL_PROGMODEL_DMA;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	70da      	strb	r2, [r3, #3]
      }
      
      /* Wait until Busy flag is reset */ 
      __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2206      	movs	r2, #6
 80020ec:	619a      	str	r2, [r3, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	8b1b      	ldrh	r3, [r3, #24]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <I2C_MASTER_RXNE_Handle+0x3d8>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d004      	beq.n	8002118 <I2C_MASTER_RXNE_Handle+0x3d8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d1ea      	bne.n	80020ee <I2C_MASTER_RXNE_Handle+0x3ae>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d004      	beq.n	800212a <I2C_MASTER_RXNE_Handle+0x3ea>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d104      	bne.n	8002134 <I2C_MASTER_RXNE_Handle+0x3f4>
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fa80 	bl	8001630 <CPAL_I2C_Timeout>
 8002130:	4603      	mov	r3, r0
 8002132:	e02b      	b.n	800218c <I2C_MASTER_RXNE_Handle+0x44c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f04f 32ff 	mov.w	r2, #4294967295
 800213a:	619a      	str	r2, [r3, #24]
      
      /* Enable ACK generation and disable POS */
      __CPAL_I2C_HAL_ENABLE_ACK(pDevInitStruct->CPAL_Dev);      
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8002154:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800215c:	b292      	uxth	r2, r2
 800215e:	801a      	strh	r2, [r3, #0]
      __CPAL_I2C_HAL_DISABLE_POS(pDevInitStruct->CPAL_Dev);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <I2C_MASTER_RXNE_Handle+0x454>)
 8002178:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800217c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002180:	b292      	uxth	r2, r2
 8002182:	801a      	strh	r2, [r3, #0]
      
      /* Update CPAL_State to CPAL_STATE_READY */
      pDevInitStruct->CPAL_State = CPAL_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	731a      	strb	r2, [r3, #12]
      
      /* Call RX Transfer complete Callback */
      CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
    }
  }  
  return CPAL_PASS;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000006c 	.word	0x2000006c

08002198 <I2C_SLAVE_ADDR_Handle>:
  * @brief  Handles Slave address matched (ADDR) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_ADDR_Handle(CPAL_InitTypeDef* pDevInitStruct)
{       
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    /* Call Slave receive UserCallback */
    CPAL_I2C_SLAVE_READ_UserCallback(pDevInitStruct);
  }    
#else   
  /* If General Call Addressing Mode selected */
  if (__CPAL_I2C_HAL_GET_GENCALL(pDevInitStruct->CPAL_Dev) != 0)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <I2C_SLAVE_ADDR_Handle+0x54>)
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	8b1b      	ldrh	r3, [r3, #24]
    /* Call GENCALL UserCallback */
    CPAL_I2C_GENCALL_UserCallback(pDevInitStruct);
  }
  
  /* If DUAL Addressing Mode is not selected */
  if (__CPAL_I2C_HAL_GET_DUALF(pDevInitStruct->CPAL_Dev) != 0)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <I2C_SLAVE_ADDR_Handle+0x54>)
 80021b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ba:	8b1b      	ldrh	r3, [r3, #24]
    /* Call DUALF UserCallback */
    CPAL_I2C_DUALF_UserCallback(pDevInitStruct);
  }    
  
  /* If device is ready for transmission */
  if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_TX)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7b1b      	ldrb	r3, [r3, #12]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d103      	bne.n	80021ce <I2C_SLAVE_ADDR_Handle+0x36>
  {              
    /* Update CPAL_State to CPAL_STATE_BUSY */
    pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_TX;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2206      	movs	r2, #6
 80021ca:	731a      	strb	r2, [r3, #12]
 80021cc:	e007      	b.n	80021de <I2C_SLAVE_ADDR_Handle+0x46>
    
    CPAL_LOG("\n\rLOG : I2C Device Busy TX");
  }
  /* If device is ready for reception */
  else if (pDevInitStruct->CPAL_State == CPAL_STATE_READY_RX)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d102      	bne.n	80021de <I2C_SLAVE_ADDR_Handle+0x46>
  {              
    /* Update CPAL_State to CPAL_STATE_BUSY_RX */
    pDevInitStruct->CPAL_State = CPAL_STATE_BUSY_RX;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	220a      	movs	r2, #10
 80021dc:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rLOG : I2C Device Busy RX");
  }
#endif /* CPAL_I2C_LISTEN_MODE */
 
  return CPAL_PASS;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	2000006c 	.word	0x2000006c

080021f0 <I2C_SLAVE_STOP_Handle>:
  * @brief  Handles Slave Stop condiction (STOPF) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_STOP_Handle(CPAL_InitTypeDef* pDevInitStruct)
{   
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Clear STOPF */
  __CPAL_I2C_HAL_CLEAR_STOPF(pDevInitStruct->CPAL_Dev);     
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	8a9b      	ldrh	r3, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29a      	uxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800221e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	b292      	uxth	r2, r2
 8002228:	801a      	strh	r2, [r3, #0]
  CPAL_LOG("\n\r\n\rLOG <I2C_EV_IRQHandler> : I2C Device Slave IT");
  
  CPAL_LOG("\n\rLOG : I2C Device Stop Detected");  
  
  /* If NACK Slave Own Address option bit selected */
  if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NACK_ADD) != 0)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d011      	beq.n	800225a <I2C_SLAVE_STOP_Handle+0x6a>
  {
    /* Disable Acknowledgement of own Address */
    __CPAL_I2C_HAL_DISABLE_ACK(pDevInitStruct->CPAL_Dev);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	4b58      	ldr	r3, [pc, #352]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800224e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	b292      	uxth	r2, r2
 8002258:	801a      	strh	r2, [r3, #0]
  }
  
  /* If Interrupt Programming Model */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	78db      	ldrb	r3, [r3, #3]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d124      	bne.n	80022ac <I2C_SLAVE_STOP_Handle+0xbc>
  {  
 #ifdef CPAL_I2C_IT_PROGMODEL    
    /* Disable EVENT Interrupt */
    __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	b29a      	uxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800227a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800227e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002282:	b292      	uxth	r2, r2
 8002284:	809a      	strh	r2, [r3, #4]
    
    CPAL_LOG("\n\rLOG : I2C Device EVT IT Disabled");
    
    /* Disable Buffer interrupt */
    __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800228e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002292:	889b      	ldrh	r3, [r3, #4]
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 800229e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a6:	b292      	uxth	r2, r2
 80022a8:	809a      	strh	r2, [r3, #4]
 80022aa:	e042      	b.n	8002332 <I2C_SLAVE_STOP_Handle+0x142>
  /* If DMA Programming model */
  else 
  {  
 #ifdef CPAL_I2C_DMA_PROGMODEL
    /* If Slave run as receiver */
    if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7b1b      	ldrb	r3, [r3, #12]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b0a      	cmp	r3, #10
 80022b4:	d13d      	bne.n	8002332 <I2C_SLAVE_STOP_Handle+0x142>
    {
      /* Disable DMA Request and Channel */
      __CPAL_I2C_HAL_DISABLE_DMAREQ(pDevInitStruct->CPAL_Dev);      
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 80022ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d6:	b292      	uxth	r2, r2
 80022d8:	809a      	strh	r2, [r3, #4]
      __CPAL_I2C_HAL_DISABLE_DMARX(pDevInitStruct->CPAL_Dev);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <I2C_SLAVE_STOP_Handle+0x1b4>)
 80022e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <I2C_SLAVE_STOP_Handle+0x1b4>)
 80022f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
      
      /* Disable EVENT Interrupt */
      __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8002312:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002316:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800231a:	b292      	uxth	r2, r2
 800231c:	809a      	strh	r2, [r3, #4]
      
      /* Update remaining number of data */
      pDevInitStruct->pCPAL_TransferRx->wNumData = __CPAL_I2C_HAL_DMARX_GET_CNDT(pDevInitStruct->CPAL_Dev);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <I2C_SLAVE_STOP_Handle+0x1b4>)
 8002326:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	605a      	str	r2, [r3, #4]
    }        
 #endif /* CPAL_I2C_DMA_PROGMODEL */
  }  
           
  /* Wait until Busy flag is reset */ 
  __CPAL_I2C_TIMEOUT(!(__CPAL_I2C_HAL_GET_BUSY(pDevInitStruct->CPAL_Dev)), CPAL_I2C_TIMEOUT_BUSY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2206      	movs	r2, #6
 8002336:	619a      	str	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <I2C_SLAVE_STOP_Handle+0x1b0>)
 8002340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002344:	8b1b      	ldrh	r3, [r3, #24]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <I2C_SLAVE_STOP_Handle+0x172>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d004      	beq.n	8002362 <I2C_SLAVE_STOP_Handle+0x172>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d1ea      	bne.n	8002338 <I2C_SLAVE_STOP_Handle+0x148>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d004      	beq.n	8002374 <I2C_SLAVE_STOP_Handle+0x184>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d104      	bne.n	800237e <I2C_SLAVE_STOP_Handle+0x18e>
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff f95b 	bl	8001630 <CPAL_I2C_Timeout>
 800237a:	4603      	mov	r3, r0
 800237c:	e00c      	b.n	8002398 <I2C_SLAVE_STOP_Handle+0x1a8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	619a      	str	r2, [r3, #24]
  
  /* If Slave run as receiver */
  if (pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7b1b      	ldrb	r3, [r3, #12]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b0a      	cmp	r3, #10
 800238e:	d102      	bne.n	8002396 <I2C_SLAVE_STOP_Handle+0x1a6>
  { 
    /* Update CPAL_State to CPAL_STATE_READY */
    pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	731a      	strb	r2, [r3, #12]
    
    /* Call RX Transfer complete Callback */
    CPAL_I2C_RXTC_UserCallback(pDevInitStruct);
  }    
  
  return CPAL_PASS;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000006c 	.word	0x2000006c
 80023a4:	2000009c 	.word	0x2000009c

080023a8 <I2C_SLAVE_TXE_Handle>:
  * @brief  Handles Slave transmission (TXE) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_TXE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{  
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	78db      	ldrb	r3, [r3, #3]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11f      	bne.n	80023f8 <I2C_SLAVE_TXE_Handle+0x50>
  {  
    if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01a      	beq.n	80023f8 <I2C_SLAVE_TXE_Handle+0x50>
    {   
      /* Call TX UserCallback */
      CPAL_I2C_TX_UserCallback(pDevInitStruct);
      
      /* Write Byte */
      __CPAL_I2C_HAL_SEND((pDevInitStruct->CPAL_Dev), (*(pDevInitStruct->pCPAL_TransferTx->pbBuffer)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <I2C_SLAVE_TXE_Handle+0x60>)
 80023d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023d6:	b292      	uxth	r2, r2
 80023d8:	821a      	strh	r2, [r3, #16]
      
      /* Decrement remaining number of data */      
      pDevInitStruct->pCPAL_TransferTx->wNumData--;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	3a01      	subs	r2, #1
 80023e2:	605a      	str	r2, [r3, #4]
      
      if (pDevInitStruct->pCPAL_TransferTx->wNumData != 0)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <I2C_SLAVE_TXE_Handle+0x50>
      {  
        /* Point to next data */
        pDevInitStruct->pCPAL_TransferTx->pbBuffer++;  
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	3201      	adds	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
        CPAL_LOG("\n\rLOG : I2C Device TX Complete");
      }
    }
  }
  
  return CPAL_PASS;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	2000006c 	.word	0x2000006c

0800240c <I2C_SLAVE_RXNE_Handle>:
  * @brief  Handles Slave reception (RXNE) interrupt event.
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
static uint32_t I2C_SLAVE_RXNE_Handle(CPAL_InitTypeDef* pDevInitStruct)
{  
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* If Interrupt Programming Model selected */
  if (pDevInitStruct->CPAL_ProgModel == CPAL_PROGMODEL_INTERRUPT)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d14e      	bne.n	80024ba <I2C_SLAVE_RXNE_Handle+0xae>
  {   
    /* If data remaining for reception */
    if (pDevInitStruct->pCPAL_TransferRx->wNumData != 0)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d049      	beq.n	80024ba <I2C_SLAVE_RXNE_Handle+0xae>
    {          
      /* Read Byte */
      *(pDevInitStruct->pCPAL_TransferRx->pbBuffer) = __CPAL_I2C_HAL_RECEIVE(pDevInitStruct->CPAL_Dev);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <I2C_SLAVE_RXNE_Handle+0xbc>)
 800242e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002432:	8a1b      	ldrh	r3, [r3, #16]
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
      
      /* Call RX UserCallback */
      CPAL_I2C_RX_UserCallback(pDevInitStruct); 
      
      /* Decrement remaining number of data */
      pDevInitStruct->pCPAL_TransferRx->wNumData--;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	3a01      	subs	r2, #1
 8002448:	605a      	str	r2, [r3, #4]
      
      /* If data remaining for reception */
      if (pDevInitStruct->pCPAL_TransferRx->wNumData != 0)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <I2C_SLAVE_RXNE_Handle+0x54>
      {  
        /* Point to next data */
        pDevInitStruct->pCPAL_TransferRx->pbBuffer++;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	3201      	adds	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e02c      	b.n	80024ba <I2C_SLAVE_RXNE_Handle+0xae>
      }
      else
      {
        /* No Stop Condition Generation option bit selected */ 
        if ((pDevInitStruct->wCPAL_Options & CPAL_OPT_I2C_NOSTOP) != 0)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d026      	beq.n	80024ba <I2C_SLAVE_RXNE_Handle+0xae>
        {   
          /* Disable EVENT Interrupt */
          __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <I2C_SLAVE_RXNE_Handle+0xbc>)
 8002474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002478:	889b      	ldrh	r3, [r3, #4]
 800247a:	b29a      	uxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <I2C_SLAVE_RXNE_Handle+0xbc>)
 8002484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800248c:	b292      	uxth	r2, r2
 800248e:	809a      	strh	r2, [r3, #4]
          
          CPAL_LOG("\n\rLOG : I2C Device EVT IT Disabled");
          
          /* Disable Buffer interrupt */
          __CPAL_I2C_HAL_DISABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <I2C_SLAVE_RXNE_Handle+0xbc>)
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <I2C_SLAVE_RXNE_Handle+0xbc>)
 80024a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b0:	b292      	uxth	r2, r2
 80024b2:	809a      	strh	r2, [r3, #4]
          
          CPAL_LOG("\n\rLOG : I2C Device BUFF IT Disabled");
          
          /* Update CPAL_State to CPAL_STATE_READY */
          pDevInitStruct->CPAL_State = CPAL_STATE_READY; 
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	731a      	strb	r2, [r3, #12]
        
        CPAL_LOG("\n\rLOG : I2C Device RX Complete");  
      }
    }
  }  
  return CPAL_PASS;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	2000006c 	.word	0x2000006c

080024cc <CPAL_I2C_Enable_DMA_IT>:
  * @param  pDevInitStruct: Pointer to the peripheral configuration structure.
  * @param  Direction : Transfer direction.
  * @retval CPAL_PASS or CPAL_FAIL. 
  */
uint32_t CPAL_I2C_Enable_DMA_IT (CPAL_InitTypeDef* pDevInitStruct, CPAL_DirectionTypeDef Direction)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  /* Switch the value of CPAL_ProgModel */
  switch (pDevInitStruct->CPAL_ProgModel)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	78db      	ldrb	r3, [r3, #3]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d002      	beq.n	80024e6 <CPAL_I2C_Enable_DMA_IT+0x1a>
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d014      	beq.n	800250e <CPAL_I2C_Enable_DMA_IT+0x42>
 80024e4:	e0a4      	b.n	8002630 <CPAL_I2C_Enable_DMA_IT+0x164>
    Interrupt mode : if CPAL_ProgModel = CPAL_PROGMODEL_INTERRUPT
    ---------------------------------------------------------------------------*/            
  case CPAL_PROGMODEL_INTERRUPT:
   
    /* Enable BUFFER Interrupt*/
    __CPAL_I2C_HAL_ENABLE_BUFIT(pDevInitStruct->CPAL_Dev);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b54      	ldr	r3, [pc, #336]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 80024ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 80024fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002506:	b292      	uxth	r2, r2
 8002508:	809a      	strh	r2, [r3, #4]
    
    CPAL_LOG("\n\rLOG : I2C Device BUFF IT Enabled"); 
    
    return CPAL_PASS;
 800250a:	2300      	movs	r3, #0
 800250c:	e094      	b.n	8002638 <CPAL_I2C_Enable_DMA_IT+0x16c>
    DMA mode : if CPAL_ProgModel = CPAL_PROGMODEL_DMA
    ---------------------------------------------------------------------------*/      
    case CPAL_PROGMODEL_DMA:
    
     /* Disable EVENT Interrupt */
     __CPAL_I2C_HAL_DISABLE_EVTIT(pDevInitStruct->CPAL_Dev);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8002516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251a:	889b      	ldrh	r3, [r3, #4]
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8002526:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800252a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800252e:	b292      	uxth	r2, r2
 8002530:	809a      	strh	r2, [r3, #4]
    
     /* Enable DMA request */
     __CPAL_I2C_HAL_ENABLE_DMAREQ(pDevInitStruct->CPAL_Dev);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 800253a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 800254a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800254e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002552:	b292      	uxth	r2, r2
 8002554:	809a      	strh	r2, [r3, #4]
    
    /* If a data transmission will be performed */
    if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_TX) || (Direction == CPAL_DIRECTION_TX))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7b1b      	ldrb	r3, [r3, #12]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b06      	cmp	r3, #6
 800255e:	d002      	beq.n	8002566 <CPAL_I2C_Enable_DMA_IT+0x9a>
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d12b      	bne.n	80025be <CPAL_I2C_Enable_DMA_IT+0xf2>
    {
      /* Configure TX DMA Channels */
      CPAL_I2C_HAL_DMATXConfig(pDevInitStruct->CPAL_Dev, pDevInitStruct->pCPAL_TransferTx, pDevInitStruct->wCPAL_Options);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7818      	ldrb	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	461a      	mov	r2, r3
 8002574:	f000 f9c6 	bl	8002904 <CPAL_I2C_HAL_DMATXConfig>
      
      /* Disable DMA automatic NACK generation */
      __CPAL_I2C_HAL_DISABLE_LAST(pDevInitStruct->CPAL_Dev); 
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	889b      	ldrh	r3, [r3, #4]
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8002590:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002598:	b292      	uxth	r2, r2
 800259a:	809a      	strh	r2, [r3, #4]
    
      /* Enable TX DMA Channels */
      __CPAL_I2C_HAL_ENABLE_DMATX(pDevInitStruct->CPAL_Dev);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <CPAL_I2C_Enable_DMA_IT+0x178>)
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <CPAL_I2C_Enable_DMA_IT+0x178>)
 80025b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
      
      CPAL_LOG("\n\rLOG : I2C Device DMA TX Enabled");       
 80025bc:	e036      	b.n	800262c <CPAL_I2C_Enable_DMA_IT+0x160>
    }    
     /* If a data reception will be performed */
    else if ((pDevInitStruct->CPAL_State == CPAL_STATE_BUSY_RX) || (Direction == CPAL_DIRECTION_RX))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b0a      	cmp	r3, #10
 80025c6:	d002      	beq.n	80025ce <CPAL_I2C_Enable_DMA_IT+0x102>
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d12e      	bne.n	800262c <CPAL_I2C_Enable_DMA_IT+0x160>
    {
      /* Configure RX DMA Channels */
      CPAL_I2C_HAL_DMARXConfig(pDevInitStruct->CPAL_Dev, pDevInitStruct->pCPAL_TransferRx, pDevInitStruct->wCPAL_Options);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7818      	ldrb	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	461a      	mov	r2, r3
 80025dc:	f000 f9d2 	bl	8002984 <CPAL_I2C_HAL_DMARXConfig>
      
      /* If Master Mode Selected */
      if(pDevInitStruct->CPAL_Mode == CPAL_MODE_MASTER )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	789b      	ldrb	r3, [r3, #2]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <CPAL_I2C_Enable_DMA_IT+0x140>
      {
        /* Enable DMA automatic NACK generation */
        __CPAL_I2C_HAL_ENABLE_LAST(pDevInitStruct->CPAL_Dev);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	889b      	ldrh	r3, [r3, #4]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4619      	mov	r1, r3
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <CPAL_I2C_Enable_DMA_IT+0x174>)
 8002600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002604:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002608:	b292      	uxth	r2, r2
 800260a:	809a      	strh	r2, [r3, #4]
      }
    
      /* Enable RX DMA Channels */
      __CPAL_I2C_HAL_ENABLE_DMARX(pDevInitStruct->CPAL_Dev);                  
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <CPAL_I2C_Enable_DMA_IT+0x17c>)
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <CPAL_I2C_Enable_DMA_IT+0x17c>)
 8002622:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
    }
    
    return CPAL_PASS; 
 800262c:	2300      	movs	r3, #0
 800262e:	e003      	b.n	8002638 <CPAL_I2C_Enable_DMA_IT+0x16c>
    Default: return error and exit Write Operation
    ---------------------------------------------------------------------------*/      
  default:
    
    /* Update CPAL_State to CPAL_STATE_ERROR */
    pDevInitStruct->CPAL_State = CPAL_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2210      	movs	r2, #16
 8002634:	731a      	strb	r2, [r3, #12]
    
    CPAL_LOG("\n\rERROR : I2C Device Error"); 
    
    /* exit function */
    return CPAL_FAIL;
 8002636:	2301      	movs	r3, #1
  }  
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2000006c 	.word	0x2000006c
 8002644:	20000090 	.word	0x20000090
 8002648:	2000009c 	.word	0x2000009c

0800264c <CPAL_I2C_HAL_CLKInit>:
  * @brief  Reset then enable the I2C device clock.
  * @param  Device : I2C Device instance. 
  * @retval None
  */
void CPAL_I2C_HAL_CLKInit(CPAL_DevTypeDef Device)
{    
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Reset I2Cx device clock in order to avoid non-cleared error flags */
  __I2C_RCC_RESET(CPAL_I2C_CLK [Device]);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <CPAL_I2C_HAL_CLKInit+0x44>)
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	2101      	movs	r1, #1
 8002660:	4618      	mov	r0, r3
 8002662:	f000 ffd7 	bl	8003614 <RCC_APB1PeriphResetCmd>
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	4a09      	ldr	r2, [pc, #36]	; (8002690 <CPAL_I2C_HAL_CLKInit+0x44>)
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f000 ffcf 	bl	8003614 <RCC_APB1PeriphResetCmd>
  
  /* Enable I2Cx device clock */
  __I2C_CLK_CMD(CPAL_I2C_CLK [Device], ENABLE);  
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	4a05      	ldr	r2, [pc, #20]	; (8002690 <CPAL_I2C_HAL_CLKInit+0x44>)
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f000 ffa7 	bl	80035d4 <RCC_APB1PeriphClockCmd>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	08003864 	.word	0x08003864

08002694 <CPAL_I2C_HAL_CLKDeInit>:
  * @brief  Reset then disable the I2C device clock.
  * @param  Device : I2C Device instance 
  * @retval None. 
  */
void CPAL_I2C_HAL_CLKDeInit(CPAL_DevTypeDef Device)
{   
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  /* Reset I2Cx device clock in order to avoid non-cleared error flags */
  __I2C_RCC_RESET(CPAL_I2C_CLK[Device]);
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <CPAL_I2C_HAL_CLKDeInit+0x44>)
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 ffb3 	bl	8003614 <RCC_APB1PeriphResetCmd>
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <CPAL_I2C_HAL_CLKDeInit+0x44>)
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 ffab 	bl	8003614 <RCC_APB1PeriphResetCmd>
  
  /* Disable I2Cx device clock */
  __I2C_CLK_CMD(CPAL_I2C_CLK[Device], DISABLE);   
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <CPAL_I2C_HAL_CLKDeInit+0x44>)
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 ff83 	bl	80035d4 <RCC_APB1PeriphClockCmd>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08003864 	.word	0x08003864

080026dc <CPAL_I2C_HAL_GPIOInit>:
  * @brief  Configure the IO pins used by the I2C device.
  * @param  Device : I2C Device instance. 
  * @retval None. 
  */
void CPAL_I2C_HAL_GPIOInit(CPAL_DevTypeDef Device)
{  
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable I2Cx SCL and SDA Pin Clock */
  __I2C_GPIO_CLK_CMD((CPAL_I2C_SCL_GPIO_CLK[Device] | CPAL_I2C_SDA_GPIO_CLK[Device]), ENABLE); 
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <CPAL_I2C_HAL_GPIOInit+0xb8>)
 80026ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4929      	ldr	r1, [pc, #164]	; (8002798 <CPAL_I2C_HAL_GPIOInit+0xbc>)
 80026f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 ff4a 	bl	8003594 <RCC_AHB1PeriphClockCmd>
  
  /* Connect PXx to I2C_SCL */
  GPIO_PinAFConfig((GPIO_TypeDef*)CPAL_I2C_SCL_GPIO_PORT[Device],CPAL_I2C_SCL_GPIO_PINSOURCE[Device],CPAL_I2C_AF[Device]);
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <CPAL_I2C_HAL_GPIOInit+0xc0>)
 8002704:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <CPAL_I2C_HAL_GPIOInit+0xc4>)
 800270c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <CPAL_I2C_HAL_GPIOInit+0xc8>)
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	f000 fd81 	bl	8003222 <GPIO_PinAFConfig>
  
  /* Connect PXx to I2C_SDA */
  GPIO_PinAFConfig((GPIO_TypeDef*)CPAL_I2C_SDA_GPIO_PORT[Device],CPAL_I2C_SDA_GPIO_PINSOURCE[Device],CPAL_I2C_AF[Device]); 
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <CPAL_I2C_HAL_GPIOInit+0xcc>)
 8002724:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <CPAL_I2C_HAL_GPIOInit+0xd0>)
 800272c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <CPAL_I2C_HAL_GPIOInit+0xc8>)
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	f000 fd71 	bl	8003222 <GPIO_PinAFConfig>
  
  /* Set GPIO frequency to 50MHz */
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002740:	2302      	movs	r3, #2
 8002742:	737b      	strb	r3, [r7, #13]
  
  /* Select Alternate function mode */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002744:	2302      	movs	r3, #2
 8002746:	733b      	strb	r3, [r7, #12]
  
  /* Select output Open Drain type */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002748:	2301      	movs	r3, #1
 800274a:	73bb      	strb	r3, [r7, #14]
  
  /* Disable internal Pull-up */
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;              //GPIO_PuPd_NOPULL was the default value /// i made the changee
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
  
  /* Initialize I2Cx SCL Pin */ 
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SCL_GPIO_PIN[Device];
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <CPAL_I2C_HAL_GPIOInit+0xd4>)
 8002754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002758:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SCL_GPIO_PORT[Device], &GPIO_InitStructure);
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <CPAL_I2C_HAL_GPIOInit+0xc0>)
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	f107 0208 	add.w	r2, r7, #8
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fccb 	bl	8003104 <GPIO_Init>
  
  /* Initialize I2Cx SDA Pin */
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SDA_GPIO_PIN[Device];
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <CPAL_I2C_HAL_GPIOInit+0xd8>)
 8002772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002776:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SDA_GPIO_PORT[Device], &GPIO_InitStructure);     
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <CPAL_I2C_HAL_GPIOInit+0xcc>)
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	f107 0208 	add.w	r2, r7, #8
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fcbc 	bl	8003104 <GPIO_Init>
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08003890 	.word	0x08003890
 8002798:	080038ac 	.word	0x080038ac
 800279c:	20000078 	.word	0x20000078
 80027a0:	0800389c 	.word	0x0800389c
 80027a4:	0800387c 	.word	0x0800387c
 80027a8:	20000084 	.word	0x20000084
 80027ac:	080038b8 	.word	0x080038b8
 80027b0:	08003888 	.word	0x08003888
 80027b4:	080038a4 	.word	0x080038a4

080027b8 <CPAL_I2C_HAL_GPIODeInit>:
  *         (configured to their default state).
  * @param  Device : I2C Device instance. 
  * @retval None. 
  */
void CPAL_I2C_HAL_GPIODeInit(CPAL_DevTypeDef Device)
{      
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Set GPIO frequency to 50MHz */
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80027c2:	2302      	movs	r3, #2
 80027c4:	737b      	strb	r3, [r7, #13]
  
  /* Select Input floating mode */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80027c6:	2300      	movs	r3, #0
 80027c8:	733b      	strb	r3, [r7, #12]
  
  /* Deinitialize I2Cx SCL Pin */ 
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SCL_GPIO_PIN[Device];
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	4a10      	ldr	r2, [pc, #64]	; (8002810 <CPAL_I2C_HAL_GPIODeInit+0x58>)
 80027ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027d2:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SCL_GPIO_PORT[Device], &GPIO_InitStructure);
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <CPAL_I2C_HAL_GPIODeInit+0x5c>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	f107 0208 	add.w	r2, r7, #8
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fc8e 	bl	8003104 <GPIO_Init>
  
  /* Deinitialize I2Cx SDA Pin */
  GPIO_InitStructure.GPIO_Pin = CPAL_I2C_SDA_GPIO_PIN[Device];
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <CPAL_I2C_HAL_GPIODeInit+0x60>)
 80027ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f0:	60bb      	str	r3, [r7, #8]
  
  GPIO_Init((GPIO_TypeDef*)CPAL_I2C_SDA_GPIO_PORT[Device], &GPIO_InitStructure); 
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <CPAL_I2C_HAL_GPIODeInit+0x64>)
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	f107 0208 	add.w	r2, r7, #8
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fc7f 	bl	8003104 <GPIO_Init>
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	08003888 	.word	0x08003888
 8002814:	20000078 	.word	0x20000078
 8002818:	080038a4 	.word	0x080038a4
 800281c:	20000084 	.word	0x20000084

08002820 <CPAL_I2C_HAL_DMAInit>:
  * @param  Direction : Transfer direction.
  * @param  Options :  Transfer Options.
  * @retval None. 
  */             
void CPAL_I2C_HAL_DMAInit(CPAL_DevTypeDef Device, CPAL_DirectionTypeDef Direction, uint32_t Options)
{  
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	603a      	str	r2, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	460b      	mov	r3, r1
 800282e:	71bb      	strb	r3, [r7, #6]
  /* Enable I2Cx DMA */
  __DMA_CLK_CMD(CPAL_I2C_DMA_CLK[Device], ENABLE);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <CPAL_I2C_HAL_DMAInit+0xcc>)
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f000 feaa 	bl	8003594 <RCC_AHB1PeriphClockCmd>
  
  /* I2Cx Common Stream Configuration */
  CPAL_DMA_InitStructure.DMA_Channel = CPAL_I2C_DMA_CHANNEL[Device];
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <CPAL_I2C_HAL_DMAInit+0xd0>)
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 800284a:	6013      	str	r3, [r2, #0]
  CPAL_DMA_InitStructure.DMA_Memory0BaseAddr = 0;
 800284c:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  CPAL_DMA_InitStructure.DMA_BufferSize = 0;
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  CPAL_DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  CPAL_DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 8002860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002864:	619a      	str	r2, [r3, #24]
  CPAL_DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 8002868:	2200      	movs	r2, #0
 800286a:	61da      	str	r2, [r3, #28]
  CPAL_DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
  CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
  CPAL_DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 800287a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  CPAL_DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 8002882:	2200      	movs	r2, #0
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
  CPAL_DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  CPAL_DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 800288e:	2200      	movs	r2, #0
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
  CPAL_DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 8002894:	2200      	movs	r2, #0
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Select I2Cx DR Address register as DMA PeripheralBaseAddress */
  CPAL_DMA_InitStructure.DMA_PeripheralBaseAddr = CPAL_I2C_DR [Device];
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <CPAL_I2C_HAL_DMAInit+0xd8>)
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 80028a2:	6053      	str	r3, [r2, #4]
  
  /* If TX Direction (Transmission) selected */
  if ((Direction & CPAL_DIRECTION_TX) != 0)
 80028a4:	79bb      	ldrb	r3, [r7, #6]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <CPAL_I2C_HAL_DMAInit+0xa4>
  {         
    /* Select Memory to Peripheral transfer direction */
    CPAL_DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 80028b0:	2240      	movs	r2, #64	; 0x40
 80028b2:	60da      	str	r2, [r3, #12]
    
    /* Initialize I2Cx DMA Tx Stream */
    DMA_Init((DMA_Stream_TypeDef*)CPAL_I2C_DMA_TX_Stream[Device], &CPAL_DMA_InitStructure);   
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	4a11      	ldr	r2, [pc, #68]	; (80028fc <CPAL_I2C_HAL_DMAInit+0xdc>)
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	490d      	ldr	r1, [pc, #52]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fbc8 	bl	8003054 <DMA_Init>
  }
  
  /* If RX Direction (Reception) selected */
  if ((Direction & CPAL_DIRECTION_RX ) != 0)
 80028c4:	79bb      	ldrb	r3, [r7, #6]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <CPAL_I2C_HAL_DMAInit+0xc4>
  {  
    /* Select Peripheral to Memory transfer direction */
    CPAL_DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
    
    /* Initialize I2Cx DMA Rx Stream */
    DMA_Init((DMA_Stream_TypeDef*)CPAL_I2C_DMA_RX_Stream[Device], &CPAL_DMA_InitStructure);   
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <CPAL_I2C_HAL_DMAInit+0xe0>)
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	4905      	ldr	r1, [pc, #20]	; (80028f4 <CPAL_I2C_HAL_DMAInit+0xd4>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fbb8 	bl	8003054 <DMA_Init>
  }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	080038c0 	.word	0x080038c0
 80028f0:	080038cc 	.word	0x080038cc
 80028f4:	200000f4 	.word	0x200000f4
 80028f8:	08003870 	.word	0x08003870
 80028fc:	20000090 	.word	0x20000090
 8002900:	2000009c 	.word	0x2000009c

08002904 <CPAL_I2C_HAL_DMATXConfig>:
  * @param  TXferStruct : DMA TX Transfer Parameters.
  * @param  Options :  Transfer Options.
  * @retval None. 
  */
void CPAL_I2C_HAL_DMATXConfig(CPAL_DevTypeDef Device, CPAL_TransferTypeDef* TxXferStruct, uint32_t Options )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	73fb      	strb	r3, [r7, #15]
  /* Set Channel */
  CPAL_DMA_InitStructure.DMA_Channel = CPAL_I2C_DMA_CHANNEL[Device];
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	4a17      	ldr	r2, [pc, #92]	; (8002974 <CPAL_I2C_HAL_DMATXConfig+0x70>)
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	4a17      	ldr	r2, [pc, #92]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 800291c:	6013      	str	r3, [r2, #0]
  
  /* Set Memory Base Address */
  CPAL_DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(TxXferStruct->pbBuffer);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8002926:	609a      	str	r2, [r3, #8]
  
  /* Set number of data */
  CPAL_DMA_InitStructure.DMA_BufferSize = TxXferStruct->wNumData;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a12      	ldr	r2, [pc, #72]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 800292e:	6113      	str	r3, [r2, #16]
  
  /* Select I2Cx DR Address register as DMA PeripheralBaseAddress */
  CPAL_DMA_InitStructure.DMA_PeripheralBaseAddr = CPAL_I2C_DR [Device];
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <CPAL_I2C_HAL_DMATXConfig+0x78>)
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 800293a:	6053      	str	r3, [r2, #4]
  
  /* If TX DMA Circular Mode Option Bit Selected */
  if ((Options & CPAL_OPT_DMATX_CIRCULAR) != 0)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <CPAL_I2C_HAL_DMATXConfig+0x4c>
  {
    /* Select DMA Circular Mode */  
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8002948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
 800294e:	e002      	b.n	8002956 <CPAL_I2C_HAL_DMATXConfig+0x52>
  
  /* If TX DMA Circular Mode Option Bit not selected */
  else 
  {
    /* Select DMA Normal Mode */
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
  } 
  
  /* Select Peripheral to Memory transfer direction */
  CPAL_DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8002958:	2240      	movs	r2, #64	; 0x40
 800295a:	60da      	str	r2, [r3, #12]
  
  /* Initialize I2Cx DMA Tx Stream */
  DMA_Init((DMA_Stream_TypeDef*)CPAL_I2C_DMA_TX_Stream[Device], &CPAL_DMA_InitStructure);   
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <CPAL_I2C_HAL_DMATXConfig+0x7c>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	4904      	ldr	r1, [pc, #16]	; (8002978 <CPAL_I2C_HAL_DMATXConfig+0x74>)
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fb74 	bl	8003054 <DMA_Init>
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	080038cc 	.word	0x080038cc
 8002978:	200000f4 	.word	0x200000f4
 800297c:	08003870 	.word	0x08003870
 8002980:	20000090 	.word	0x20000090

08002984 <CPAL_I2C_HAL_DMARXConfig>:
  * @param  RXferStruct : DMA RX Transfer Parameters.
  * @param  Options :  Transfer Options.
  * @retval None. 
  */
void CPAL_I2C_HAL_DMARXConfig(CPAL_DevTypeDef Device, CPAL_TransferTypeDef* RxXferStruct, uint32_t Options )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	73fb      	strb	r3, [r7, #15]
  /* Set Channel */
  CPAL_DMA_InitStructure.DMA_Channel = CPAL_I2C_DMA_CHANNEL[Device];
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <CPAL_I2C_HAL_DMARXConfig+0x70>)
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 800299c:	6013      	str	r3, [r2, #0]
  
  /* Set Memory Base Address */
  CPAL_DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(RxXferStruct->pbBuffer);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 80029a6:	609a      	str	r2, [r3, #8]
  
  /* Set number of data */
  CPAL_DMA_InitStructure.DMA_BufferSize = RxXferStruct->wNumData;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 80029ae:	6113      	str	r3, [r2, #16]
  
  /* Select I2Cx DR Address register as DMA PeripheralBaseAddress */
  CPAL_DMA_InitStructure.DMA_PeripheralBaseAddr = CPAL_I2C_DR [Device];
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <CPAL_I2C_HAL_DMARXConfig+0x78>)
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 80029ba:	6053      	str	r3, [r2, #4]
  
  /* If RX DMA Circular Mode Option Bit Selected */
  if ((Options & CPAL_OPT_DMARX_CIRCULAR) != 0)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <CPAL_I2C_HAL_DMARXConfig+0x4c>
  {
    /* Select DMA Circular Mode */  
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 80029c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
 80029ce:	e002      	b.n	80029d6 <CPAL_I2C_HAL_DMARXConfig+0x52>
  }  
  /* If RX DMA Circular Mode Option Bit not selected */
  else 
  {
    /* Select DMA Normal Mode */
    CPAL_DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
  } 
  
  /* Select Peripheral to Memory transfer direction */
  CPAL_DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
  
  /* Initialize I2Cx DMA Rx Stream */
  DMA_Init((DMA_Stream_TypeDef*)CPAL_I2C_DMA_RX_Stream[Device], &CPAL_DMA_InitStructure);   
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <CPAL_I2C_HAL_DMARXConfig+0x7c>)
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	4904      	ldr	r1, [pc, #16]	; (80029f8 <CPAL_I2C_HAL_DMARXConfig+0x74>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fb34 	bl	8003054 <DMA_Init>
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	080038cc 	.word	0x080038cc
 80029f8:	200000f4 	.word	0x200000f4
 80029fc:	08003870 	.word	0x08003870
 8002a00:	2000009c 	.word	0x2000009c

08002a04 <CPAL_I2C_HAL_DMADeInit>:
  * @param  Device : I2C Device instance.
  * @param  Direction : Transfer direction.
  * @retval None. 
  */
void CPAL_I2C_HAL_DMADeInit(CPAL_DevTypeDef Device, CPAL_DirectionTypeDef Direction)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	71fb      	strb	r3, [r7, #7]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71bb      	strb	r3, [r7, #6]
  /* If TX Direction (Transmission) selected */
  if ((Direction & CPAL_DIRECTION_TX) != 0)
 8002a14:	79bb      	ldrb	r3, [r7, #6]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <CPAL_I2C_HAL_DMADeInit+0x28>
  {
    /* Deinitialize I2Cx DMA Tx Stream */
    DMA_DeInit((DMA_Stream_TypeDef*)CPAL_I2C_DMA_TX_Stream[Device]);  
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <CPAL_I2C_HAL_DMADeInit+0x48>)
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fa40 	bl	8002eac <DMA_DeInit>
  }
  
  /* If RX Direction (Reception) selected */
  if ((Direction & CPAL_DIRECTION_RX) != 0)
 8002a2c:	79bb      	ldrb	r3, [r7, #6]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <CPAL_I2C_HAL_DMADeInit+0x40>
  {
    /* Deinitialize I2Cx DMA Rx Stream */
    DMA_DeInit((DMA_Stream_TypeDef*)CPAL_I2C_DMA_RX_Stream[Device]);  
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <CPAL_I2C_HAL_DMADeInit+0x4c>)
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa34 	bl	8002eac <DMA_DeInit>
  }  
}  
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000090 	.word	0x20000090
 8002a50:	2000009c 	.word	0x2000009c

08002a54 <CPAL_I2C_HAL_ITInit>:
  * @param  Device : I2C Device instance.
  * @param  Options : I2C Transfer Options.
  * @retval None. 
  */
void CPAL_I2C_HAL_ITInit(CPAL_DevTypeDef Device, uint32_t Options, CPAL_DirectionTypeDef Direction, CPAL_ProgModelTypeDef ProgModel)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6039      	str	r1, [r7, #0]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
 8002a64:	460b      	mov	r3, r1
 8002a66:	71bb      	strb	r3, [r7, #6]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	717b      	strb	r3, [r7, #5]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  /* Configure NVIC priority Group */ 
  CPAL_HAL_NVICInit();
 8002a6c:	f7fd fbac 	bl	80001c8 <CPAL_HAL_NVICInit>
  
  /* Enable the IRQ channel */
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* Configure NVIC for I2Cx EVT Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = CPAL_I2C_IT_EVT_IRQn [Device] ;
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4a5e      	ldr	r2, [pc, #376]	; (8002bf0 <CPAL_I2C_HAL_ITInit+0x19c>)
 8002a78:	56d3      	ldrsb	r3, [r2, r3]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_IT_EVT_PREPRIO[Device];
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	4a5c      	ldr	r2, [pc, #368]	; (8002bf4 <CPAL_I2C_HAL_ITInit+0x1a0>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_IT_EVT_SUBPRIO[Device];
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	4a5b      	ldr	r2, [pc, #364]	; (8002bf8 <CPAL_I2C_HAL_ITInit+0x1a4>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	73bb      	strb	r3, [r7, #14]
  NVIC_Init(&NVIC_InitStructure);
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f9a8 	bl	8002de8 <NVIC_Init>
  
  /* If I2C ERR Interrupt Option Bit not selected */ 
  if ((Options & CPAL_OPT_I2C_ERRIT_DISABLE) == 0)    
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11f      	bne.n	8002ae2 <CPAL_I2C_HAL_ITInit+0x8e>
  {
    /* Configure NVIC for I2Cx ERR Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = CPAL_I2C_IT_ERR_IRQn [Device] ;
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	4a55      	ldr	r2, [pc, #340]	; (8002bfc <CPAL_I2C_HAL_ITInit+0x1a8>)
 8002aa6:	56d3      	ldrsb	r3, [r2, r3]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_IT_ERR_PREPRIO[Device];
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4a54      	ldr	r2, [pc, #336]	; (8002c00 <CPAL_I2C_HAL_ITInit+0x1ac>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_IT_ERR_SUBPRIO[Device];
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	4a53      	ldr	r2, [pc, #332]	; (8002c04 <CPAL_I2C_HAL_ITInit+0x1b0>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&NVIC_InitStructure);
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f991 	bl	8002de8 <NVIC_Init>
    
    /* Enable I2C Error Interrupts */
    __CPAL_I2C_HAL_ENABLE_ERRIT(Device);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4a4f      	ldr	r2, [pc, #316]	; (8002c08 <CPAL_I2C_HAL_ITInit+0x1b4>)
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	889b      	ldrh	r3, [r3, #4]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	494c      	ldr	r1, [pc, #304]	; (8002c08 <CPAL_I2C_HAL_ITInit+0x1b4>)
 8002ad6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ade:	b292      	uxth	r2, r2
 8002ae0:	809a      	strh	r2, [r3, #4]
  }
  
#ifdef CPAL_I2C_DMA_PROGMODEL
  if (ProgModel == CPAL_PROGMODEL_DMA)
 8002ae2:	797b      	ldrb	r3, [r7, #5]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d17f      	bne.n	8002be8 <CPAL_I2C_HAL_ITInit+0x194>
  {
    if ( (Direction & CPAL_DIRECTION_TX) != 0)
 8002ae8:	79bb      	ldrb	r3, [r7, #6]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03a      	beq.n	8002b68 <CPAL_I2C_HAL_ITInit+0x114>
    {   
      /* Configure NVIC for DMA TX channel interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = CPAL_I2C_DMA_TX_IRQn [Device] ;
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	4a45      	ldr	r2, [pc, #276]	; (8002c0c <CPAL_I2C_HAL_ITInit+0x1b8>)
 8002af6:	56d3      	ldrsb	r3, [r2, r3]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	733b      	strb	r3, [r7, #12]
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_IT_DMATX_PREPRIO[Device];
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <CPAL_I2C_HAL_ITInit+0x1bc>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	737b      	strb	r3, [r7, #13]
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_IT_DMATX_SUBPRIO[Device];
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <CPAL_I2C_HAL_ITInit+0x1c0>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	73bb      	strb	r3, [r7, #14]
      NVIC_Init(&NVIC_InitStructure);
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f969 	bl	8002de8 <NVIC_Init>
      


      /* Enable DMA TX Channel TCIT  */
      __I2C_HAL_ENABLE_DMATX_TCIT(Device);
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	4a3f      	ldr	r2, [pc, #252]	; (8002c18 <CPAL_I2C_HAL_ITInit+0x1c4>)
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	493d      	ldr	r1, [pc, #244]	; (8002c18 <CPAL_I2C_HAL_ITInit+0x1c4>)
 8002b24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b28:	f042 0210 	orr.w	r2, r2, #16
 8002b2c:	601a      	str	r2, [r3, #0]




      /* Enable DMA TX Channel TEIT  */    
      __I2C_HAL_ENABLE_DMATX_TEIT(Device); 
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	4a39      	ldr	r2, [pc, #228]	; (8002c18 <CPAL_I2C_HAL_ITInit+0x1c4>)
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4937      	ldr	r1, [pc, #220]	; (8002c18 <CPAL_I2C_HAL_ITInit+0x1c4>)
 8002b3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b40:	f042 0204 	orr.w	r2, r2, #4
 8002b44:	601a      	str	r2, [r3, #0]
      
      /* If DMA TX HT interrupt Option Bits Selected */
      if ((Options & CPAL_OPT_DMATX_HTIT) != 0)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <CPAL_I2C_HAL_ITInit+0x114>
      {
        /* Enable DMA TX Channel HTIT  */    
        __I2C_HAL_ENABLE_DMATX_HTIT(Device);
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <CPAL_I2C_HAL_ITInit+0x1c4>)
 8002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	492e      	ldr	r1, [pc, #184]	; (8002c18 <CPAL_I2C_HAL_ITInit+0x1c4>)
 8002b5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b62:	f042 0208 	orr.w	r2, r2, #8
 8002b66:	601a      	str	r2, [r3, #0]




    
    if ((Direction & CPAL_DIRECTION_RX) != 0)
 8002b68:	79bb      	ldrb	r3, [r7, #6]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03a      	beq.n	8002be8 <CPAL_I2C_HAL_ITInit+0x194>

    {
      /* Configure NVIC for DMA RX channel interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = CPAL_I2C_DMA_RX_IRQn [Device] ;
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	4a29      	ldr	r2, [pc, #164]	; (8002c1c <CPAL_I2C_HAL_ITInit+0x1c8>)
 8002b76:	56d3      	ldrsb	r3, [r2, r3]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	733b      	strb	r3, [r7, #12]
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_IT_DMARX_PREPRIO[Device];
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	4a28      	ldr	r2, [pc, #160]	; (8002c20 <CPAL_I2C_HAL_ITInit+0x1cc>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	737b      	strb	r3, [r7, #13]
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_IT_DMARX_SUBPRIO[Device];
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4a27      	ldr	r2, [pc, #156]	; (8002c24 <CPAL_I2C_HAL_ITInit+0x1d0>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	73bb      	strb	r3, [r7, #14]
      NVIC_Init(&NVIC_InitStructure);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f929 	bl	8002de8 <NVIC_Init>
      
      /* Enable DMA RX Channel TCIT  */
      __I2C_HAL_ENABLE_DMARX_TCIT(Device);  
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <CPAL_I2C_HAL_ITInit+0x1d4>)
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	4921      	ldr	r1, [pc, #132]	; (8002c28 <CPAL_I2C_HAL_ITInit+0x1d4>)
 8002ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ba8:	f042 0210 	orr.w	r2, r2, #16
 8002bac:	601a      	str	r2, [r3, #0]




      /* Enable DMA RX Channel TEIT  */
      __I2C_HAL_ENABLE_DMARX_TEIT(Device); 
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <CPAL_I2C_HAL_ITInit+0x1d4>)
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	491b      	ldr	r1, [pc, #108]	; (8002c28 <CPAL_I2C_HAL_ITInit+0x1d4>)
 8002bbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bc0:	f042 0204 	orr.w	r2, r2, #4
 8002bc4:	601a      	str	r2, [r3, #0]
      
      /* If DMA RX HT interrupt Option Bits Selected */
      if ((Options & CPAL_OPT_DMARX_HTIT) != 0)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00b      	beq.n	8002be8 <CPAL_I2C_HAL_ITInit+0x194>
      {
        /* Enable DMA RX Channel HTIT  */    
        __I2C_HAL_ENABLE_DMARX_HTIT(Device);  
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <CPAL_I2C_HAL_ITInit+0x1d4>)
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4912      	ldr	r1, [pc, #72]	; (8002c28 <CPAL_I2C_HAL_ITInit+0x1d4>)
 8002bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002be2:	f042 0208 	orr.w	r2, r2, #8
 8002be6:	601a      	str	r2, [r3, #0]
      }
    }
  }
#endif /* CPAL_I2C_DMA_PROGMODEL */ 
  
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	080038e0 	.word	0x080038e0
 8002bf4:	080038e8 	.word	0x080038e8
 8002bf8:	080038ec 	.word	0x080038ec
 8002bfc:	080038e4 	.word	0x080038e4
 8002c00:	080038f0 	.word	0x080038f0
 8002c04:	080038f4 	.word	0x080038f4
 8002c08:	2000006c 	.word	0x2000006c
 8002c0c:	080038d8 	.word	0x080038d8
 8002c10:	080038f8 	.word	0x080038f8
 8002c14:	080038fc 	.word	0x080038fc
 8002c18:	20000090 	.word	0x20000090
 8002c1c:	080038dc 	.word	0x080038dc
 8002c20:	08003900 	.word	0x08003900
 8002c24:	08003904 	.word	0x08003904
 8002c28:	2000009c 	.word	0x2000009c

08002c2c <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C1_EV_IRQHandler(void)
{  
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Call the Common Event handler function */
  return CPAL_I2C_EV_IRQHandler(&I2C1_DevStructure);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <I2C1_EV_IRQHandler+0x10>)
 8002c32:	f7fd ff1f 	bl	8000a74 <CPAL_I2C_EV_IRQHandler>
 8002c36:	4603      	mov	r3, r0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2000000c 	.word	0x2000000c

08002c40 <I2C1_ER_IRQHandler>:
  * @brief  This function handles I2C1 Errors interrupt.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C1_ER_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  CPAL_LOG("\n\r\n\rLOG <I2C1_ER_IRQHandler> : I2C1 Device Error IT ");
  
  /* Call the Common Error handler function */
  CPAL_I2C_ER_IRQHandler(&I2C1_DevStructure);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <I2C1_ER_IRQHandler+0x10>)
 8002c46:	f7fd ffa3 	bl	8000b90 <CPAL_I2C_ER_IRQHandler>
  
  return CPAL_PASS;  
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2000000c 	.word	0x2000000c

08002c54 <DMA1_Stream6_IRQHandler>:
  * @brief  This function handles I2C1 TX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C1_DMA_TX_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Call the Common DMA TX handler function */
  return CPAL_I2C_DMA_TX_IRQHandler(&I2C1_DevStructure);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <DMA1_Stream6_IRQHandler+0x10>)
 8002c5a:	f7fe f88d 	bl	8000d78 <CPAL_I2C_DMA_TX_IRQHandler>
 8002c5e:	4603      	mov	r3, r0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles I2C1 RX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C1_DMA_RX_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Call the Common DMA RX handler function */
  return CPAL_I2C_DMA_RX_IRQHandler(&I2C1_DevStructure);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <DMA1_Stream0_IRQHandler+0x10>)
 8002c6e:	f7fe faa5 	bl	80011bc <CPAL_I2C_DMA_RX_IRQHandler>
 8002c72:	4603      	mov	r3, r0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C2 interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C2_EV_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Call the Common Event handler function */
  return CPAL_I2C_EV_IRQHandler(&I2C2_DevStructure); 
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <I2C2_EV_IRQHandler+0x10>)
 8002c82:	f7fd fef7 	bl	8000a74 <CPAL_I2C_EV_IRQHandler>
 8002c86:	4603      	mov	r3, r0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000002c 	.word	0x2000002c

08002c90 <I2C2_ER_IRQHandler>:
  * @brief  This function handles I2C2 Errors interrupt.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C2_ER_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  CPAL_LOG("\n\r\n\rLOG <I2C2_ER_IRQHandler> : I2C2 Device Error IT ");
  
  /* Call the Common Error handler function */
  CPAL_I2C_ER_IRQHandler(&I2C2_DevStructure);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <I2C2_ER_IRQHandler+0x10>)
 8002c96:	f7fd ff7b 	bl	8000b90 <CPAL_I2C_ER_IRQHandler>
  
  return CPAL_PASS;  
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2000002c 	.word	0x2000002c

08002ca4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles I2C2 TX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C2_DMA_TX_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Call the Common DMA TX handler function */
  return CPAL_I2C_DMA_TX_IRQHandler(&I2C2_DevStructure);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <DMA1_Stream7_IRQHandler+0x10>)
 8002caa:	f7fe f865 	bl	8000d78 <CPAL_I2C_DMA_TX_IRQHandler>
 8002cae:	4603      	mov	r3, r0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000002c 	.word	0x2000002c

08002cb8 <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2C2 RX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C2_DMA_RX_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Call the Common DMA RX handler function */
  return CPAL_I2C_DMA_RX_IRQHandler(&I2C2_DevStructure);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <DMA1_Stream3_IRQHandler+0x10>)
 8002cbe:	f7fe fa7d 	bl	80011bc <CPAL_I2C_DMA_RX_IRQHandler>
 8002cc2:	4603      	mov	r3, r0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	2000002c 	.word	0x2000002c

08002ccc <I2C3_EV_IRQHandler>:
  * @brief  This function handles I2C3 interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C3_EV_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Call the Common Event handler function */
  return CPAL_I2C_EV_IRQHandler(&I2C3_DevStructure); 
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <I2C3_EV_IRQHandler+0x10>)
 8002cd2:	f7fd fecf 	bl	8000a74 <CPAL_I2C_EV_IRQHandler>
 8002cd6:	4603      	mov	r3, r0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000004c 	.word	0x2000004c

08002ce0 <I2C3_ER_IRQHandler>:
  * @brief  This function handles I2C3 Errors interrupt.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t I2C3_ER_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  CPAL_LOG("\n\r\n\rLOG <I2C3_ER_IRQHandler> : I2C3 Device Error IT ");
  
  /* Call the Common Error handler function */
  CPAL_I2C_ER_IRQHandler(&I2C3_DevStructure);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <I2C3_ER_IRQHandler+0x10>)
 8002ce6:	f7fd ff53 	bl	8000b90 <CPAL_I2C_ER_IRQHandler>
  
  return CPAL_PASS;  
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000004c 	.word	0x2000004c

08002cf4 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles I2C3 TX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C3_DMA_TX_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Call the Common DMA TX handler function */
  return CPAL_I2C_DMA_TX_IRQHandler(&I2C3_DevStructure);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <DMA1_Stream4_IRQHandler+0x10>)
 8002cfa:	f7fe f83d 	bl	8000d78 <CPAL_I2C_DMA_TX_IRQHandler>
 8002cfe:	4603      	mov	r3, r0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	2000004c 	.word	0x2000004c

08002d08 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles I2C3 RX DMA interrupt request.
  * @param  None. 
  * @retval CPAL_PASS. 
  */
uint32_t CPAL_I2C3_DMA_RX_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Call the Common DMA RX handler function */
  return CPAL_I2C_DMA_RX_IRQHandler(&I2C3_DevStructure);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <DMA1_Stream2_IRQHandler+0x10>)
 8002d0e:	f7fe fa55 	bl	80011bc <CPAL_I2C_DMA_RX_IRQHandler>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	2000004c 	.word	0x2000004c

08002d1c <CPAL_TIMEOUT_UserCallback>:
  * @brief  User callback that manages the Timeout error.
  * @param  pDevInitStruct .
  * @retval None.
  */
uint32_t CPAL_TIMEOUT_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 
  return CPAL_PASS;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <main>:
uint8_t address=0;
uint8_t data=0;
CPAL_TransferTypeDef Rx;

int main()
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0

I2C_InitTypeDef I2C_InitStruct;
I2C_InitStruct.I2C_ClockSpeed = 100000;
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <main+0x7c>)
 8002d3c:	603b      	str	r3, [r7, #0]
I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	80bb      	strh	r3, [r7, #4]
I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8002d42:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002d46:	80fb      	strh	r3, [r7, #6]
I2C_InitStruct.I2C_OwnAddress1 = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	813b      	strh	r3, [r7, #8]
I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8002d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d50:	817b      	strh	r3, [r7, #10]
I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002d52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d56:	81bb      	strh	r3, [r7, #12]



Rx.pbBuffer=&address;
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <main+0x80>)
 8002d5a:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <main+0x84>)
 8002d5c:	601a      	str	r2, [r3, #0]
Rx.wAddr1=0xD0;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <main+0x80>)
 8002d60:	22d0      	movs	r2, #208	; 0xd0
 8002d62:	609a      	str	r2, [r3, #8]
Rx.wAddr2=0x75;
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <main+0x80>)
 8002d66:	2275      	movs	r2, #117	; 0x75
 8002d68:	60da      	str	r2, [r3, #12]
Rx.wNumData=1u;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <main+0x80>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	605a      	str	r2, [r3, #4]

CPAL_I2C_StructInit(&I2C1_DevStructure);
 8002d70:	4812      	ldr	r0, [pc, #72]	; (8002dbc <main+0x88>)
 8002d72:	f7fd fb8b 	bl	800048c <CPAL_I2C_StructInit>

I2C1_DevStructure.CPAL_Direction=CPAL_DIRECTION_TXRX;
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <main+0x88>)
 8002d78:	2203      	movs	r2, #3
 8002d7a:	705a      	strb	r2, [r3, #1]
I2C1_DevStructure.CPAL_Mode=CPAL_MODE_MASTER;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <main+0x88>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	709a      	strb	r2, [r3, #2]
I2C1_DevStructure.pCPAL_TransferRx=&Rx;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <main+0x88>)
 8002d84:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <main+0x80>)
 8002d86:	609a      	str	r2, [r3, #8]
I2C1_DevStructure.CPAL_ProgModel=CPAL_PROGMODEL_INTERRUPT;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <main+0x88>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	70da      	strb	r2, [r3, #3]
CPAL_I2C_Init(&I2C1_DevStructure);
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <main+0x88>)
 8002d90:	f7fd fa6e 	bl	8000270 <CPAL_I2C_Init>


if(CPAL_I2C_Read(&I2C1_DevStructure)==CPAL_PASS)
 8002d94:	4809      	ldr	r0, [pc, #36]	; (8002dbc <main+0x88>)
 8002d96:	f7fd fbbd 	bl	8000514 <CPAL_I2C_Read>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <main+0x78>
while(I2C1_DevStructure.CPAL_State!=CPAL_STATE_READY_RX);
 8002da0:	bf00      	nop
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <main+0x88>)
 8002da4:	7b1b      	ldrb	r3, [r3, #12]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d1fa      	bne.n	8002da2 <main+0x6e>

/*data=Rx.pbBuffer[0];
for(int i=1;i>=7;i++)
data=(data<<1)+Rx.pbBuffer[i];*/

while(1);
 8002dac:	e7fe      	b.n	8002dac <main+0x78>
 8002dae:	bf00      	nop
 8002db0:	000186a0 	.word	0x000186a0
 8002db4:	20000134 	.word	0x20000134
 8002db8:	20000130 	.word	0x20000130
 8002dbc:	2000000c 	.word	0x2000000c

08002dc0 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002dc8:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <NVIC_PriorityGroupConfig+0x24>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	60d3      	str	r3, [r2, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	2300      	movs	r3, #0
 8002df6:	73bb      	strb	r3, [r7, #14]
 8002df8:	230f      	movs	r3, #15
 8002dfa:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	78db      	ldrb	r3, [r3, #3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d039      	beq.n	8002e78 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <NVIC_Init+0xbc>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	f1c3 0304 	rsb	r3, r3, #4
 8002e1a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002e1c:	7b7a      	ldrb	r2, [r7, #13]
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	fa42 f303 	asr.w	r3, r2, r3
 8002e24:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	7bbb      	ldrb	r3, [r7, #14]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	789a      	ldrb	r2, [r3, #2]
 8002e38:	7b7b      	ldrb	r3, [r7, #13]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <NVIC_Init+0xc0>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4413      	add	r3, r2
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002e60:	4911      	ldr	r1, [pc, #68]	; (8002ea8 <NVIC_Init+0xc0>)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	0952      	lsrs	r2, r2, #5
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002e72:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002e76:	e00f      	b.n	8002e98 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002e80:	4909      	ldr	r1, [pc, #36]	; (8002ea8 <NVIC_Init+0xc0>)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	0952      	lsrs	r2, r2, #5
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002e90:	f100 0320 	add.w	r3, r0, #32
 8002e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 0201 	bic.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2221      	movs	r2, #33	; 0x21
 8002ee2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a46      	ldr	r2, [pc, #280]	; (8003000 <DMA_DeInit+0x154>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d103      	bne.n	8002ef4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8002eec:	4b45      	ldr	r3, [pc, #276]	; (8003004 <DMA_DeInit+0x158>)
 8002eee:	223d      	movs	r2, #61	; 0x3d
 8002ef0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002ef2:	e07e      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a44      	ldr	r2, [pc, #272]	; (8003008 <DMA_DeInit+0x15c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d104      	bne.n	8002f06 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8002efc:	4b41      	ldr	r3, [pc, #260]	; (8003004 <DMA_DeInit+0x158>)
 8002efe:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002f02:	609a      	str	r2, [r3, #8]
}
 8002f04:	e075      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a40      	ldr	r2, [pc, #256]	; (800300c <DMA_DeInit+0x160>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d104      	bne.n	8002f18 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	; (8003004 <DMA_DeInit+0x158>)
 8002f10:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002f14:	609a      	str	r2, [r3, #8]
}
 8002f16:	e06c      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3d      	ldr	r2, [pc, #244]	; (8003010 <DMA_DeInit+0x164>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d104      	bne.n	8002f2a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8002f20:	4b38      	ldr	r3, [pc, #224]	; (8003004 <DMA_DeInit+0x158>)
 8002f22:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	e063      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a39      	ldr	r2, [pc, #228]	; (8003014 <DMA_DeInit+0x168>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d103      	bne.n	8002f3a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <DMA_DeInit+0x158>)
 8002f34:	4a38      	ldr	r2, [pc, #224]	; (8003018 <DMA_DeInit+0x16c>)
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	e05b      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a37      	ldr	r2, [pc, #220]	; (800301c <DMA_DeInit+0x170>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d103      	bne.n	8002f4a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <DMA_DeInit+0x158>)
 8002f44:	4a36      	ldr	r2, [pc, #216]	; (8003020 <DMA_DeInit+0x174>)
 8002f46:	60da      	str	r2, [r3, #12]
}
 8002f48:	e053      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a35      	ldr	r2, [pc, #212]	; (8003024 <DMA_DeInit+0x178>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d103      	bne.n	8002f5a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <DMA_DeInit+0x158>)
 8002f54:	4a34      	ldr	r2, [pc, #208]	; (8003028 <DMA_DeInit+0x17c>)
 8002f56:	60da      	str	r2, [r3, #12]
}
 8002f58:	e04b      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a33      	ldr	r2, [pc, #204]	; (800302c <DMA_DeInit+0x180>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d104      	bne.n	8002f6c <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <DMA_DeInit+0x158>)
 8002f64:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002f68:	60da      	str	r2, [r3, #12]
}
 8002f6a:	e042      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a30      	ldr	r2, [pc, #192]	; (8003030 <DMA_DeInit+0x184>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d103      	bne.n	8002f7c <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <DMA_DeInit+0x188>)
 8002f76:	223d      	movs	r2, #61	; 0x3d
 8002f78:	609a      	str	r2, [r3, #8]
}
 8002f7a:	e03a      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a2e      	ldr	r2, [pc, #184]	; (8003038 <DMA_DeInit+0x18c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d104      	bne.n	8002f8e <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <DMA_DeInit+0x188>)
 8002f86:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	e031      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <DMA_DeInit+0x190>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d104      	bne.n	8002fa0 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <DMA_DeInit+0x188>)
 8002f98:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	e028      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a27      	ldr	r2, [pc, #156]	; (8003040 <DMA_DeInit+0x194>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d104      	bne.n	8002fb2 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <DMA_DeInit+0x188>)
 8002faa:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	e01f      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <DMA_DeInit+0x198>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d103      	bne.n	8002fc2 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <DMA_DeInit+0x188>)
 8002fbc:	4a16      	ldr	r2, [pc, #88]	; (8003018 <DMA_DeInit+0x16c>)
 8002fbe:	60da      	str	r2, [r3, #12]
}
 8002fc0:	e017      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a20      	ldr	r2, [pc, #128]	; (8003048 <DMA_DeInit+0x19c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d103      	bne.n	8002fd2 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <DMA_DeInit+0x188>)
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <DMA_DeInit+0x174>)
 8002fce:	60da      	str	r2, [r3, #12]
}
 8002fd0:	e00f      	b.n	8002ff2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <DMA_DeInit+0x1a0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d103      	bne.n	8002fe2 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <DMA_DeInit+0x188>)
 8002fdc:	4a12      	ldr	r2, [pc, #72]	; (8003028 <DMA_DeInit+0x17c>)
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	e007      	b.n	8002ff2 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <DMA_DeInit+0x1a4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d103      	bne.n	8002ff2 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <DMA_DeInit+0x188>)
 8002fec:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002ff0:	60da      	str	r2, [r3, #12]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40026010 	.word	0x40026010
 8003004:	40026000 	.word	0x40026000
 8003008:	40026028 	.word	0x40026028
 800300c:	40026040 	.word	0x40026040
 8003010:	40026058 	.word	0x40026058
 8003014:	40026070 	.word	0x40026070
 8003018:	2000003d 	.word	0x2000003d
 800301c:	40026088 	.word	0x40026088
 8003020:	20000f40 	.word	0x20000f40
 8003024:	400260a0 	.word	0x400260a0
 8003028:	203d0000 	.word	0x203d0000
 800302c:	400260b8 	.word	0x400260b8
 8003030:	40026410 	.word	0x40026410
 8003034:	40026400 	.word	0x40026400
 8003038:	40026428 	.word	0x40026428
 800303c:	40026440 	.word	0x40026440
 8003040:	40026458 	.word	0x40026458
 8003044:	40026470 	.word	0x40026470
 8003048:	40026488 	.word	0x40026488
 800304c:	400264a0 	.word	0x400264a0
 8003050:	400264b8 	.word	0x400264b8

08003054 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <DMA_Init+0xac>)
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800307e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800308a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003096:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80030a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	4313      	orrs	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60da      	str	r2, [r3, #12]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	f01c803f 	.word	0xf01c803f

08003104 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e076      	b.n	800320e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003120:	2201      	movs	r2, #1
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d165      	bne.n	8003208 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2103      	movs	r1, #3
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	401a      	ands	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	791b      	ldrb	r3, [r3, #4]
 800315a:	4619      	mov	r1, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	791b      	ldrb	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d003      	beq.n	800317a <GPIO_Init+0x76>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	791b      	ldrb	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d12e      	bne.n	80031d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2103      	movs	r1, #3
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	795b      	ldrb	r3, [r3, #5]
 8003198:	4619      	mov	r1, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	408b      	lsls	r3, r1
 80031b6:	43db      	mvns	r3, r3
 80031b8:	401a      	ands	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	7992      	ldrb	r2, [r2, #6]
 80031c6:	4611      	mov	r1, r2
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	b292      	uxth	r2, r2
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	b292      	uxth	r2, r2
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2103      	movs	r1, #3
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	79db      	ldrb	r3, [r3, #7]
 80031f8:	4619      	mov	r1, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3301      	adds	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b0f      	cmp	r3, #15
 8003212:	d985      	bls.n	8003120 <GPIO_Init+0x1c>
    }
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]
 800322e:	4613      	mov	r3, r2
 8003230:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800323a:	787a      	ldrb	r2, [r7, #1]
 800323c:	887b      	ldrh	r3, [r7, #2]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	b29b      	uxth	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	210f      	movs	r1, #15
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	8879      	ldrh	r1, [r7, #2]
 800326c:	08c9      	lsrs	r1, r1, #3
 800326e:	b289      	uxth	r1, r1
 8003270:	4608      	mov	r0, r1
 8003272:	ea02 0103 	and.w	r1, r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f100 0208 	add.w	r2, r0, #8
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003280:	887b      	ldrh	r3, [r7, #2]
 8003282:	08db      	lsrs	r3, r3, #3
 8003284:	b29b      	uxth	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80032c2:	2300      	movs	r3, #0
 80032c4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80032c6:	2304      	movs	r3, #4
 80032c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80032ca:	4b57      	ldr	r3, [pc, #348]	; (8003428 <I2C_Init+0x174>)
 80032cc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	889b      	ldrh	r3, [r3, #4]
 80032d2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80032d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032da:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f8a9 	bl	8003438 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4a4f      	ldr	r2, [pc, #316]	; (800342c <I2C_Init+0x178>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	0c9b      	lsrs	r3, r3, #18
 80032f4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80032f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032fa:	4313      	orrs	r3, r2
 80032fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003302:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a44      	ldr	r2, [pc, #272]	; (8003430 <I2C_Init+0x17c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d815      	bhi.n	800334e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8003330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003332:	2b03      	cmp	r3, #3
 8003334:	d801      	bhi.n	800333a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003336:	2304      	movs	r3, #4
 8003338:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800333a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800333c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800333e:	4313      	orrs	r3, r2
 8003340:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003344:	3301      	adds	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	841a      	strh	r2, [r3, #32]
 800334c:	e040      	b.n	80033d0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	88db      	ldrh	r3, [r3, #6]
 8003352:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003356:	4293      	cmp	r3, r2
 8003358:	d109      	bne.n	800336e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800336c:	e00e      	b.n	800338c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009a      	lsls	r2, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800338c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8003396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800339e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033a2:	4313      	orrs	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80033b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <I2C_Init+0x180>)
 80033bc:	fb82 1203 	smull	r1, r2, r2, r3
 80033c0:	1192      	asrs	r2, r2, #6
 80033c2:	17db      	asrs	r3, r3, #31
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80033d4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80033ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033ee:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80033f2:	f023 0302 	bic.w	r3, r3, #2
 80033f6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	889a      	ldrh	r2, [r3, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	895b      	ldrh	r3, [r3, #10]
 8003400:	4313      	orrs	r3, r2
 8003402:	b29a      	uxth	r2, r3
 8003404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003406:	4313      	orrs	r3, r2
 8003408:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800340e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	899a      	ldrh	r2, [r3, #12]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	891b      	ldrh	r3, [r3, #8]
 8003418:	4313      	orrs	r3, r2
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	811a      	strh	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	007a1200 	.word	0x007a1200
 800342c:	431bde83 	.word	0x431bde83
 8003430:	000186a0 	.word	0x000186a0
 8003434:	10624dd3 	.word	0x10624dd3

08003438 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	2302      	movs	r3, #2
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	2302      	movs	r3, #2
 8003456:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003458:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d011      	beq.n	800348c <RCC_GetClocksFreq+0x54>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b08      	cmp	r3, #8
 800346c:	d844      	bhi.n	80034f8 <RCC_GetClocksFreq+0xc0>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <RCC_GetClocksFreq+0x44>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d004      	beq.n	8003484 <RCC_GetClocksFreq+0x4c>
 800347a:	e03d      	b.n	80034f8 <RCC_GetClocksFreq+0xc0>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a42      	ldr	r2, [pc, #264]	; (8003588 <RCC_GetClocksFreq+0x150>)
 8003480:	601a      	str	r2, [r3, #0]
      break;
 8003482:	e03d      	b.n	8003500 <RCC_GetClocksFreq+0xc8>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a41      	ldr	r2, [pc, #260]	; (800358c <RCC_GetClocksFreq+0x154>)
 8003488:	601a      	str	r2, [r3, #0]
      break;
 800348a:	e039      	b.n	8003500 <RCC_GetClocksFreq+0xc8>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800348c:	4b3d      	ldr	r3, [pc, #244]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0d9b      	lsrs	r3, r3, #22
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <RCC_GetClocksFreq+0x8a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034a8:	4a38      	ldr	r2, [pc, #224]	; (800358c <RCC_GetClocksFreq+0x154>)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	4a34      	ldr	r2, [pc, #208]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 80034b2:	6852      	ldr	r2, [r2, #4]
 80034b4:	0992      	lsrs	r2, r2, #6
 80034b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	e00b      	b.n	80034da <RCC_GetClocksFreq+0xa2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <RCC_GetClocksFreq+0x150>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 80034cc:	6852      	ldr	r2, [r2, #4]
 80034ce:	0992      	lsrs	r2, r2, #6
 80034d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	3301      	adds	r3, #1
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
      break;
 80034f6:	e003      	b.n	8003500 <RCC_GetClocksFreq+0xc8>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a23      	ldr	r2, [pc, #140]	; (8003588 <RCC_GetClocksFreq+0x150>)
 80034fc:	601a      	str	r2, [r3, #0]
      break;
 80034fe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003500:	4b20      	ldr	r3, [pc, #128]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003508:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <RCC_GetClocksFreq+0x158>)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4413      	add	r3, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	40da      	lsrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003528:	4b16      	ldr	r3, [pc, #88]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003530:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	0a9b      	lsrs	r3, r3, #10
 8003536:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003538:	4a15      	ldr	r2, [pc, #84]	; (8003590 <RCC_GetClocksFreq+0x158>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	4413      	add	r3, r2
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	40da      	lsrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <RCC_GetClocksFreq+0x14c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003558:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	0b5b      	lsrs	r3, r3, #13
 800355e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003560:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <RCC_GetClocksFreq+0x158>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	40da      	lsrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
}
 8003578:	bf00      	nop
 800357a:	3724      	adds	r7, #36	; 0x24
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40023800 	.word	0x40023800
 8003588:	00f42400 	.word	0x00f42400
 800358c:	017d7840 	.word	0x017d7840
 8003590:	200000b4 	.word	0x200000b4

08003594 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035aa:	4909      	ldr	r1, [pc, #36]	; (80035d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80035b2:	e006      	b.n	80035c2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	4904      	ldr	r1, [pc, #16]	; (80035d0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035be:	4013      	ands	r3, r2
 80035c0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800

080035d4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <RCC_APB1PeriphClockCmd+0x3c>)
 80035e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ea:	4909      	ldr	r1, [pc, #36]	; (8003610 <RCC_APB1PeriphClockCmd+0x3c>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80035f2:	e006      	b.n	8003602 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <RCC_APB1PeriphClockCmd+0x3c>)
 80035f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	4904      	ldr	r1, [pc, #16]	; (8003610 <RCC_APB1PeriphClockCmd+0x3c>)
 80035fe:	4013      	ands	r3, r2
 8003600:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <RCC_APB1PeriphResetCmd+0x3c>)
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	4909      	ldr	r1, [pc, #36]	; (8003650 <RCC_APB1PeriphResetCmd+0x3c>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8003632:	e006      	b.n	8003642 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <RCC_APB1PeriphResetCmd+0x3c>)
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	43db      	mvns	r3, r3
 800363c:	4904      	ldr	r1, [pc, #16]	; (8003650 <RCC_APB1PeriphResetCmd+0x3c>)
 800363e:	4013      	ands	r3, r2
 8003640:	620b      	str	r3, [r1, #32]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800

08003654 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <SystemInit+0x60>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <SystemInit+0x60>)
 8003660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <SystemInit+0x64>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <SystemInit+0x64>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <SystemInit+0x64>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <SystemInit+0x64>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <SystemInit+0x64>)
 8003680:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <SystemInit+0x64>)
 800368c:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <SystemInit+0x68>)
 800368e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <SystemInit+0x64>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <SystemInit+0x64>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <SystemInit+0x64>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80036a2:	f000 f80d 	bl	80036c0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036a6:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <SystemInit+0x60>)
 80036a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ac:	609a      	str	r2, [r3, #8]
#endif
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	24003010 	.word	0x24003010

080036c0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	2300      	movs	r3, #0
 80036cc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <SetSysClock+0xe8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <SetSysClock+0xe8>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80036da:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <SetSysClock+0xe8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3301      	adds	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <SetSysClock+0x38>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80036f6:	d1f0      	bne.n	80036da <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <SetSysClock+0xe8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003704:	2301      	movs	r3, #1
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	e001      	b.n	800370e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800370a:	2300      	movs	r3, #0
 800370c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d142      	bne.n	800379a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <SetSysClock+0xe8>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <SetSysClock+0xe8>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <SetSysClock+0xec>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <SetSysClock+0xec>)
 8003726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <SetSysClock+0xe8>)
 800372e:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <SetSysClock+0xe8>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003734:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <SetSysClock+0xe8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <SetSysClock+0xe8>)
 800373a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <SetSysClock+0xe8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <SetSysClock+0xe8>)
 8003746:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800374a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800374c:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <SetSysClock+0xe8>)
 800374e:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <SetSysClock+0xf0>)
 8003750:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <SetSysClock+0xe8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <SetSysClock+0xe8>)
 8003758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800375e:	bf00      	nop
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <SetSysClock+0xe8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f9      	beq.n	8003760 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <SetSysClock+0xf4>)
 800376e:	f240 6205 	movw	r2, #1541	; 0x605
 8003772:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <SetSysClock+0xe8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <SetSysClock+0xe8>)
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <SetSysClock+0xe8>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <SetSysClock+0xe8>)
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800378c:	bf00      	nop
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <SetSysClock+0xe8>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b08      	cmp	r3, #8
 8003798:	d1f9      	bne.n	800378e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000
 80037b0:	07405419 	.word	0x07405419
 80037b4:	40023c00 	.word	0x40023c00

080037b8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037ba:	e003      	b.n	80037c4 <LoopCopyDataInit>

080037bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80037be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037c2:	3104      	adds	r1, #4

080037c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037c4:	480a      	ldr	r0, [pc, #40]	; (80037f0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80037c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037cc:	d3f6      	bcc.n	80037bc <CopyDataInit>
  ldr  r2, =_sbss
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80037d0:	e002      	b.n	80037d8 <LoopFillZerobss>

080037d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037d4:	f842 3b04 	str.w	r3, [r2], #4

080037d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80037da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037dc:	d3f9      	bcc.n	80037d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037de:	f7ff ff39 	bl	8003654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037e2:	f000 f80f 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037e6:	f7ff faa5 	bl	8002d34 <main>
  bx  lr    
 80037ea:	4770      	bx	lr
  ldr  r3, =_sidata
 80037ec:	08003958 	.word	0x08003958
  ldr  r0, =_sdata
 80037f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037f4:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 80037f8:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 80037fc:	20000144 	.word	0x20000144

08003800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003800:	e7fe      	b.n	8003800 <ADC_IRQHandler>
	...

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4d0d      	ldr	r5, [pc, #52]	; (800383c <__libc_init_array+0x38>)
 8003808:	4c0d      	ldr	r4, [pc, #52]	; (8003840 <__libc_init_array+0x3c>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	2600      	movs	r6, #0
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	4d0b      	ldr	r5, [pc, #44]	; (8003844 <__libc_init_array+0x40>)
 8003816:	4c0c      	ldr	r4, [pc, #48]	; (8003848 <__libc_init_array+0x44>)
 8003818:	f000 f818 	bl	800384c <_init>
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	2600      	movs	r6, #0
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	08003950 	.word	0x08003950
 8003840:	08003950 	.word	0x08003950
 8003844:	08003950 	.word	0x08003950
 8003848:	08003954 	.word	0x08003954

0800384c <_init>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

08003858 <_fini>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr
