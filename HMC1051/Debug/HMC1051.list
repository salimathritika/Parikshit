
HMC1051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  24000010  08003ca4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000088  08003ca4  00020088  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cb62  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001add  00000000  00000000  0002cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a30  00000000  00000000  0002e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000958  00000000  00000000  0002f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003099f  00000000  00000000  0002fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d673  00000000  00000000  000603a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001381bf  00000000  00000000  0006da1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a5bd9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002900  00000000  00000000  001a5c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003c64 	.word	0x08003c64

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08003c64 	.word	0x08003c64

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fa3a 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f81c 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f8b8 	bl	800048c <MX_GPIO_Init>
  MX_I2C1_Init();
 800031c:	f000 f876 	bl	800040c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  hi2c1.Devaddress = devadd;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <main+0x3c>)
 8000322:	22d0      	movs	r2, #208	; 0xd0
 8000324:	64da      	str	r2, [r3, #76]	; 0x4c
  hi2c1.Memaddress = memadd;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <main+0x3c>)
 8000328:	2200      	movs	r2, #0
 800032a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c1.XferSize = 1u;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <main+0x3c>)
 800032e:	2201      	movs	r2, #1
 8000330:	851a      	strh	r2, [r3, #40]	; 0x28
  hi2c1.pBuffPtr = &mag;
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <main+0x3c>)
 8000334:	4a05      	ldr	r2, [pc, #20]	; (800034c <main+0x40>)
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_I2C_Init(&hi2c1);
 8000338:	4803      	ldr	r0, [pc, #12]	; (8000348 <main+0x3c>)
 800033a:	f000 fd43 	bl	8000dc4 <HAL_I2C_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  read(&hi2c1,&mag);
 800033e:	4903      	ldr	r1, [pc, #12]	; (800034c <main+0x40>)
 8000340:	4801      	ldr	r0, [pc, #4]	; (8000348 <main+0x3c>)
 8000342:	f003 fc4d 	bl	8003be0 <read>
 8000346:	e7fa      	b.n	800033e <main+0x32>
 8000348:	24000030 	.word	0x24000030
 800034c:	2400002c 	.word	0x2400002c

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b09c      	sub	sp, #112	; 0x70
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035a:	224c      	movs	r2, #76	; 0x4c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 fc78 	bl	8003c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2220      	movs	r2, #32
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f003 fc72 	bl	8003c54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000370:	2004      	movs	r0, #4
 8000372:	f001 f9cd 	bl	8001710 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	4b23      	ldr	r3, [pc, #140]	; (8000408 <SystemClock_Config+0xb8>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000382:	4a21      	ldr	r2, [pc, #132]	; (8000408 <SystemClock_Config+0xb8>)
 8000384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <SystemClock_Config+0xb8>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000396:	bf00      	nop
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <SystemClock_Config+0xb8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a4:	d1f8      	bne.n	8000398 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a6:	2302      	movs	r3, #2
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003ae:	2340      	movs	r3, #64	; 0x40
 80003b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fa02 	bl	80017c4 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003c6:	f000 f88b 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	233f      	movs	r3, #63	; 0x3f
 80003cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003da:	2340      	movs	r3, #64	; 0x40
 80003dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003de:	2340      	movs	r3, #64	; 0x40
 80003e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003e8:	2340      	movs	r3, #64	; 0x40
 80003ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2101      	movs	r1, #1
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 fdc1 	bl	8001f78 <HAL_RCC_ClockConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003fc:	f000 f870 	bl	80004e0 <Error_Handler>
  }
}
 8000400:	bf00      	nop
 8000402:	3770      	adds	r7, #112	; 0x70
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	58024800 	.word	0x58024800

0800040c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_I2C1_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_I2C1_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_I2C1_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <MX_I2C1_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_I2C1_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_I2C1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_I2C1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000446:	480e      	ldr	r0, [pc, #56]	; (8000480 <MX_I2C1_Init+0x74>)
 8000448:	f000 fcbc 	bl	8000dc4 <HAL_I2C_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 f845 	bl	80004e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	2100      	movs	r1, #0
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <MX_I2C1_Init+0x74>)
 800045a:	f001 f8c1 	bl	80015e0 <HAL_I2CEx_ConfigAnalogFilter>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 f83c 	bl	80004e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000468:	2100      	movs	r1, #0
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_I2C1_Init+0x74>)
 800046c:	f001 f903 	bl	8001676 <HAL_I2CEx_ConfigDigitalFilter>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f833 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	24000030 	.word	0x24000030
 8000484:	40005400 	.word	0x40005400
 8000488:	00707cbb 	.word	0x00707cbb

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_GPIO_Init+0x50>)
 8000494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000498:	4a10      	ldr	r2, [pc, #64]	; (80004dc <MX_GPIO_Init+0x50>)
 800049a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_GPIO_Init+0x50>)
 80004a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MX_GPIO_Init+0x50>)
 80004b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b6:	4a09      	ldr	r2, [pc, #36]	; (80004dc <MX_GPIO_Init+0x50>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_GPIO_Init+0x50>)
 80004c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c6:	f003 0302 	and.w	r3, r3, #2
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	58024400 	.word	0x58024400

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_MspInit+0x30>)
 80004f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <HAL_MspInit+0x30>)
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_MspInit+0x30>)
 8000504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000508:	f003 0302 	and.w	r3, r3, #2
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	58024400 	.word	0x58024400

08000520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b0b8      	sub	sp, #224	; 0xe0
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	22b8      	movs	r2, #184	; 0xb8
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f003 fb87 	bl	8003c54 <memset>
  if(hi2c->Instance==I2C1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <HAL_I2C_MspInit+0xc4>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d145      	bne.n	80005dc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000550:	f04f 0208 	mov.w	r2, #8
 8000554:	f04f 0300 	mov.w	r3, #0
 8000558:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	4618      	mov	r0, r3
 8000568:	f002 f836 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000572:	f7ff ffb5 	bl	80004e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <HAL_I2C_MspInit+0xc8>)
 8000578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <HAL_I2C_MspInit+0xc8>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <HAL_I2C_MspInit+0xc8>)
 8000588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800058c:	f003 0302 	and.w	r3, r3, #2
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000594:	23c0      	movs	r3, #192	; 0xc0
 8000596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059a:	2312      	movs	r3, #18
 800059c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ac:	2304      	movs	r3, #4
 80005ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <HAL_I2C_MspInit+0xcc>)
 80005ba:	f000 fa5b 	bl	8000a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_I2C_MspInit+0xc8>)
 80005c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <HAL_I2C_MspInit+0xc8>)
 80005c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_I2C_MspInit+0xc8>)
 80005d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005dc:	bf00      	nop
 80005de:	37e0      	adds	r7, #224	; 0xe0
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40005400 	.word	0x40005400
 80005e8:	58024400 	.word	0x58024400
 80005ec:	58020400 	.word	0x58020400

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f916 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000648:	4b32      	ldr	r3, [pc, #200]	; (8000714 <SystemInit+0xd0>)
 800064a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800064e:	4a31      	ldr	r2, [pc, #196]	; (8000714 <SystemInit+0xd0>)
 8000650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000658:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <SystemInit+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f003 030f 	and.w	r3, r3, #15
 8000660:	2b06      	cmp	r3, #6
 8000662:	d807      	bhi.n	8000674 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <SystemInit+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f023 030f 	bic.w	r3, r3, #15
 800066c:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <SystemInit+0xd4>)
 800066e:	f043 0307 	orr.w	r3, r3, #7
 8000672:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <SystemInit+0xd8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a28      	ldr	r2, [pc, #160]	; (800071c <SystemInit+0xd8>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <SystemInit+0xd8>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemInit+0xd8>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4924      	ldr	r1, [pc, #144]	; (800071c <SystemInit+0xd8>)
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemInit+0xdc>)
 800068e:	4013      	ands	r3, r2
 8000690:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemInit+0xd4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	2b00      	cmp	r3, #0
 800069c:	d007      	beq.n	80006ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SystemInit+0xd4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f023 030f 	bic.w	r3, r3, #15
 80006a6:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <SystemInit+0xd4>)
 80006a8:	f043 0307 	orr.w	r3, r3, #7
 80006ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <SystemInit+0xd8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <SystemInit+0xd8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <SystemInit+0xd8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <SystemInit+0xd8>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <SystemInit+0xe0>)
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <SystemInit+0xd8>)
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <SystemInit+0xe4>)
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <SystemInit+0xd8>)
 80006ce:	4a17      	ldr	r2, [pc, #92]	; (800072c <SystemInit+0xe8>)
 80006d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <SystemInit+0xd8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <SystemInit+0xd8>)
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <SystemInit+0xe8>)
 80006dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <SystemInit+0xd8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <SystemInit+0xd8>)
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <SystemInit+0xe8>)
 80006e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <SystemInit+0xd8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <SystemInit+0xd8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a09      	ldr	r2, [pc, #36]	; (800071c <SystemInit+0xd8>)
 80006f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <SystemInit+0xd8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <SystemInit+0xec>)
 8000704:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000708:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00
 8000718:	52002000 	.word	0x52002000
 800071c:	58024400 	.word	0x58024400
 8000720:	eaf6ed7f 	.word	0xeaf6ed7f
 8000724:	02020200 	.word	0x02020200
 8000728:	01ff0000 	.word	0x01ff0000
 800072c:	01010280 	.word	0x01010280
 8000730:	52004000 	.word	0x52004000

08000734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800076c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000738:	f7ff ff84 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f003 fa53 	bl	8003c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000766:	f7ff fdd1 	bl	800030c <main>
  bx  lr
 800076a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800076c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000774:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000778:	08003c94 	.word	0x08003c94
  ldr r2, =_sbss
 800077c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000780:	24000088 	.word	0x24000088

08000784 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC3_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078e:	2003      	movs	r0, #3
 8000790:	f000 f93e 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000794:	f001 fda6 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8000798:	4602      	mov	r2, r0
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_Init+0x68>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	f003 030f 	and.w	r3, r3, #15
 80007a4:	4913      	ldr	r1, [pc, #76]	; (80007f4 <HAL_Init+0x6c>)
 80007a6:	5ccb      	ldrb	r3, [r1, r3]
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	fa22 f303 	lsr.w	r3, r2, r3
 80007b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_Init+0x68>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_Init+0x6c>)
 80007bc:	5cd3      	ldrb	r3, [r2, r3]
 80007be:	f003 031f 	and.w	r3, r3, #31
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	fa22 f303 	lsr.w	r3, r2, r3
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <HAL_Init+0x70>)
 80007ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007cc:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_Init+0x74>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f814 	bl	8000800 <HAL_InitTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e002      	b.n	80007e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007e2:	f7ff fe83 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	58024400 	.word	0x58024400
 80007f4:	08003c7c 	.word	0x08003c7c
 80007f8:	24000004 	.word	0x24000004
 80007fc:	24000000 	.word	0x24000000

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_InitTick+0x60>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	e021      	b.n	8000858 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <HAL_InitTick+0x64>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_InitTick+0x60>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f915 	bl	8000a5a <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f8ed 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_InitTick+0x68>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2400000c 	.word	0x2400000c
 8000864:	24000000 	.word	0x24000000
 8000868:	24000008 	.word	0x24000008

0800086c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x24>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_IncTick+0x24>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2400000c 	.word	0x2400000c
 8000890:	24000084 	.word	0x24000084

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_GetTick+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	24000084 	.word	0x24000084

080008ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <__NVIC_SetPriorityGrouping+0x40>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x40>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00
 80008f0:	05fa0000 	.word	0x05fa0000

080008f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_GetPriorityGrouping+0x18>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	f003 0307 	and.w	r3, r3, #7
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff8e 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff47 	bl	80008ac <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a34:	f7ff ff5e 	bl	80008f4 <__NVIC_GetPriorityGrouping>
 8000a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff ff90 	bl	8000964 <NVIC_EncodePriority>
 8000a44:	4602      	mov	r2, r0
 8000a46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff5f 	bl	8000910 <__NVIC_SetPriority>
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffb2 	bl	80009cc <SysTick_Config>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a82:	4b86      	ldr	r3, [pc, #536]	; (8000c9c <HAL_GPIO_Init+0x228>)
 8000a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a86:	e18c      	b.n	8000da2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 817e 	beq.w	8000d9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d005      	beq.n	8000ab8 <HAL_GPIO_Init+0x44>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d130      	bne.n	8000b1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aee:	2201      	movs	r2, #1
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	f003 0201 	and.w	r2, r3, #1
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d017      	beq.n	8000b56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d123      	bne.n	8000baa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	08da      	lsrs	r2, r3, #3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3208      	adds	r2, #8
 8000b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	691a      	ldr	r2, [r3, #16]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	08da      	lsrs	r2, r3, #3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	69b9      	ldr	r1, [r7, #24]
 8000ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0203 	and.w	r2, r3, #3
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 80d8 	beq.w	8000d9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <HAL_GPIO_Init+0x22c>)
 8000bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf2:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <HAL_GPIO_Init+0x22c>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_GPIO_Init+0x22c>)
 8000bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <HAL_GPIO_Init+0x230>)
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	220f      	movs	r2, #15
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_GPIO_Init+0x234>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d04a      	beq.n	8000ccc <HAL_GPIO_Init+0x258>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <HAL_GPIO_Init+0x238>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d02b      	beq.n	8000c96 <HAL_GPIO_Init+0x222>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_GPIO_Init+0x23c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d025      	beq.n	8000c92 <HAL_GPIO_Init+0x21e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <HAL_GPIO_Init+0x240>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d01f      	beq.n	8000c8e <HAL_GPIO_Init+0x21a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_GPIO_Init+0x244>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d019      	beq.n	8000c8a <HAL_GPIO_Init+0x216>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <HAL_GPIO_Init+0x248>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0x212>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_GPIO_Init+0x24c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00d      	beq.n	8000c82 <HAL_GPIO_Init+0x20e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <HAL_GPIO_Init+0x250>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <HAL_GPIO_Init+0x20a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_GPIO_Init+0x254>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c76:	2309      	movs	r3, #9
 8000c78:	e029      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	e027      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c7e:	2307      	movs	r3, #7
 8000c80:	e025      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c82:	2306      	movs	r3, #6
 8000c84:	e023      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c86:	2305      	movs	r3, #5
 8000c88:	e021      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	e01f      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e01d      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e01b      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e019      	b.n	8000cce <HAL_GPIO_Init+0x25a>
 8000c9a:	bf00      	nop
 8000c9c:	58000080 	.word	0x58000080
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	58000400 	.word	0x58000400
 8000ca8:	58020000 	.word	0x58020000
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	58020800 	.word	0x58020800
 8000cb4:	58020c00 	.word	0x58020c00
 8000cb8:	58021000 	.word	0x58021000
 8000cbc:	58021400 	.word	0x58021400
 8000cc0:	58021800 	.word	0x58021800
 8000cc4:	58021c00 	.word	0x58021c00
 8000cc8:	58022400 	.word	0x58022400
 8000ccc:	2300      	movs	r3, #0
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cde:	4938      	ldr	r1, [pc, #224]	; (8000dc0 <HAL_GPIO_Init+0x34c>)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f47f ae6b 	bne.w	8000a88 <HAL_GPIO_Init+0x14>
  }
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3724      	adds	r7, #36	; 0x24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	58000400 	.word	0x58000400

08000dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e07f      	b.n	8000ed6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fb98 	bl	8000520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2224      	movs	r2, #36	; 0x24
 8000df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d107      	bne.n	8000e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	e006      	b.n	8000e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d104      	bne.n	8000e5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6859      	ldr	r1, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_I2C_Init+0x11c>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69d9      	ldr	r1, [r3, #28]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a1a      	ldr	r2, [r3, #32]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	02008000 	.word	0x02008000

08000ee4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	4608      	mov	r0, r1
 8000eee:	4611      	mov	r1, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	817b      	strh	r3, [r7, #10]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	813b      	strh	r3, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	f040 80fd 	bne.w	8001106 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <HAL_I2C_Mem_Read+0x34>
 8000f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d105      	bne.n	8000f24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e0f1      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_I2C_Mem_Read+0x4e>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e0ea      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f3a:	f7ff fcab 	bl	8000894 <HAL_GetTick>
 8000f3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2319      	movs	r3, #25
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f95b 	bl	8001208 <I2C_WaitOnFlagUntilTimeout>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e0d5      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2222      	movs	r2, #34	; 0x22
 8000f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6a3a      	ldr	r2, [r7, #32]
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f84:	88f8      	ldrh	r0, [r7, #6]
 8000f86:	893a      	ldrh	r2, [r7, #8]
 8000f88:	8979      	ldrh	r1, [r7, #10]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4603      	mov	r3, r0
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 f8bf 	bl	8001118 <I2C_RequestMemoryRead>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0ad      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d90e      	bls.n	8000fd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	8979      	ldrh	r1, [r7, #10]
 8000fc4:	4b52      	ldr	r3, [pc, #328]	; (8001110 <HAL_I2C_Mem_Read+0x22c>)
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 fad5 	bl	800157c <I2C_TransferConfig>
 8000fd2:	e00f      	b.n	8000ff4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	8979      	ldrh	r1, [r7, #10]
 8000fe6:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <HAL_I2C_Mem_Read+0x22c>)
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 fac4 	bl	800157c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f902 	bl	8001208 <I2C_WaitOnFlagUntilTimeout>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e07c      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800102a:	3b01      	subs	r3, #1
 800102c:	b29a      	uxth	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001036:	b29b      	uxth	r3, r3
 8001038:	3b01      	subs	r3, #1
 800103a:	b29a      	uxth	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001044:	b29b      	uxth	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d034      	beq.n	80010b4 <HAL_I2C_Mem_Read+0x1d0>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104e:	2b00      	cmp	r3, #0
 8001050:	d130      	bne.n	80010b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001058:	2200      	movs	r2, #0
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f000 f8d3 	bl	8001208 <I2C_WaitOnFlagUntilTimeout>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e04d      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001070:	b29b      	uxth	r3, r3
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	d90e      	bls.n	8001094 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001080:	b2da      	uxtb	r2, r3
 8001082:	8979      	ldrh	r1, [r7, #10]
 8001084:	2300      	movs	r3, #0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 fa75 	bl	800157c <I2C_TransferConfig>
 8001092:	e00f      	b.n	80010b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001098:	b29a      	uxth	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	8979      	ldrh	r1, [r7, #10]
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 fa64 	bl	800157c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d19a      	bne.n	8000ff4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 f936 	bl	8001334 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e01a      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2220      	movs	r2, #32
 80010d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6859      	ldr	r1, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_I2C_Mem_Read+0x230>)
 80010e6:	400b      	ands	r3, r1
 80010e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2220      	movs	r2, #32
 80010ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001106:	2302      	movs	r3, #2
  }
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	80002400 	.word	0x80002400
 8001114:	fe00e800 	.word	0xfe00e800

08001118 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	4608      	mov	r0, r1
 8001122:	4611      	mov	r1, r2
 8001124:	461a      	mov	r2, r3
 8001126:	4603      	mov	r3, r0
 8001128:	817b      	strh	r3, [r7, #10]
 800112a:	460b      	mov	r3, r1
 800112c:	813b      	strh	r3, [r7, #8]
 800112e:	4613      	mov	r3, r2
 8001130:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	8979      	ldrh	r1, [r7, #10]
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <I2C_RequestMemoryRead+0xa4>)
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 fa1c 	bl	800157c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f8ac 	bl	80012a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e02c      	b.n	80011b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d105      	bne.n	800116a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800115e:	893b      	ldrh	r3, [r7, #8]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
 8001168:	e015      	b.n	8001196 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800116a:	893b      	ldrh	r3, [r7, #8]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 f892 	bl	80012a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e012      	b.n	80011b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800118c:	893b      	ldrh	r3, [r7, #8]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2200      	movs	r2, #0
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f831 	bl	8001208 <I2C_WaitOnFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	80002000 	.word	0x80002000

080011c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d103      	bne.n	80011de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d007      	beq.n	80011fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699a      	ldr	r2, [r3, #24]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	619a      	str	r2, [r3, #24]
  }
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001218:	e031      	b.n	800127e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d02d      	beq.n	800127e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001222:	f7ff fb37 	bl	8000894 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d302      	bcc.n	8001238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d122      	bne.n	800127e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4013      	ands	r3, r2
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	429a      	cmp	r2, r3
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	429a      	cmp	r2, r3
 8001254:	d113      	bne.n	800127e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f043 0220 	orr.w	r2, r3, #32
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2220      	movs	r2, #32
 8001266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4013      	ands	r3, r2
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	429a      	cmp	r2, r3
 800128c:	bf0c      	ite	eq
 800128e:	2301      	moveq	r3, #1
 8001290:	2300      	movne	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	429a      	cmp	r2, r3
 800129a:	d0be      	beq.n	800121a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012b2:	e033      	b.n	800131c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 f87f 	bl	80013bc <I2C_IsErrorOccurred>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e031      	b.n	800132c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ce:	d025      	beq.n	800131c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d0:	f7ff fae0 	bl	8000894 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d302      	bcc.n	80012e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d11a      	bne.n	800131c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d013      	beq.n	800131c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f043 0220 	orr.w	r2, r3, #32
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2220      	movs	r2, #32
 8001304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e007      	b.n	800132c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	d1c4      	bne.n	80012b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001340:	e02f      	b.n	80013a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 f838 	bl	80013bc <I2C_IsErrorOccurred>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e02d      	b.n	80013b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001356:	f7ff fa9d 	bl	8000894 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	d302      	bcc.n	800136c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d11a      	bne.n	80013a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b20      	cmp	r3, #32
 8001378:	d013      	beq.n	80013a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f043 0220 	orr.w	r2, r3, #32
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e007      	b.n	80013b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d1c8      	bne.n	8001342 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d068      	beq.n	80014ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2210      	movs	r2, #16
 80013ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80013f0:	e049      	b.n	8001486 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f8:	d045      	beq.n	8001486 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013fa:	f7ff fa4b 	bl	8000894 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	d302      	bcc.n	8001410 <I2C_IsErrorOccurred+0x54>
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d13a      	bne.n	8001486 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001422:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001432:	d121      	bne.n	8001478 <I2C_IsErrorOccurred+0xbc>
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800143a:	d01d      	beq.n	8001478 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	2b20      	cmp	r3, #32
 8001440:	d01a      	beq.n	8001478 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001450:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001452:	f7ff fa1f 	bl	8000894 <HAL_GetTick>
 8001456:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001458:	e00e      	b.n	8001478 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800145a:	f7ff fa1b 	bl	8000894 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b19      	cmp	r3, #25
 8001466:	d907      	bls.n	8001478 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	f043 0320 	orr.w	r3, r3, #32
 800146e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001476:	e006      	b.n	8001486 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	2b20      	cmp	r3, #32
 8001484:	d1e9      	bne.n	800145a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	2b20      	cmp	r3, #32
 8001492:	d003      	beq.n	800149c <I2C_IsErrorOccurred+0xe0>
 8001494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0aa      	beq.n	80013f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800149c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d103      	bne.n	80014ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2220      	movs	r2, #32
 80014aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00b      	beq.n	8001528 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01c      	beq.n	800156a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fe45 	bl	80011c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <I2C_IsErrorOccurred+0x1bc>)
 8001542:	400b      	ands	r3, r1
 8001544:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	431a      	orrs	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800156a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800156e:	4618      	mov	r0, r3
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	fe00e800 	.word	0xfe00e800

0800157c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	817b      	strh	r3, [r7, #10]
 800158a:	4613      	mov	r3, r2
 800158c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800158e:	897b      	ldrh	r3, [r7, #10]
 8001590:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001594:	7a7b      	ldrb	r3, [r7, #9]
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800159c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	0d5b      	lsrs	r3, r3, #21
 80015b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <I2C_TransferConfig+0x60>)
 80015bc:	430b      	orrs	r3, r1
 80015be:	43db      	mvns	r3, r3
 80015c0:	ea02 0103 	and.w	r1, r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80015ce:	bf00      	nop
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	03ff63ff 	.word	0x03ff63ff

080015e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d138      	bne.n	8001668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001600:	2302      	movs	r3, #2
 8001602:	e032      	b.n	800166a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	; 0x24
 8001610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2220      	movs	r2, #32
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	e000      	b.n	800166a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001668:	2302      	movs	r3, #2
  }
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b20      	cmp	r3, #32
 800168a:	d139      	bne.n	8001700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001696:	2302      	movs	r3, #2
 8001698:	e033      	b.n	8001702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2224      	movs	r2, #36	; 0x24
 80016a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001700:	2302      	movs	r3, #2
  }
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	2b06      	cmp	r3, #6
 8001722:	d00a      	beq.n	800173a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e03f      	b.n	80017b6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e03d      	b.n	80017b6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001742:	491f      	ldr	r1, [pc, #124]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800174a:	f7ff f8a3 	bl	8000894 <HAL_GetTick>
 800174e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001750:	e009      	b.n	8001766 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001752:	f7ff f89f 	bl	8000894 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001760:	d901      	bls.n	8001766 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e027      	b.n	80017b6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001772:	d1ee      	bne.n	8001752 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b1e      	cmp	r3, #30
 8001778:	d008      	beq.n	800178c <HAL_PWREx_ConfigSupply+0x7c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b2e      	cmp	r3, #46	; 0x2e
 800177e:	d005      	beq.n	800178c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b1d      	cmp	r3, #29
 8001784:	d002      	beq.n	800178c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b2d      	cmp	r3, #45	; 0x2d
 800178a:	d113      	bne.n	80017b4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800178c:	f7ff f882 	bl	8000894 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001792:	e009      	b.n	80017a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001794:	f7ff f87e 	bl	8000894 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017a2:	d901      	bls.n	80017a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e006      	b.n	80017b6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0311 	and.w	r3, r3, #17
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d1ef      	bne.n	8001794 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	58024800 	.word	0x58024800

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e3c8      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8087 	beq.w	80018f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017ee:	4b86      	ldr	r3, [pc, #536]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d007      	beq.n	800180a <HAL_RCC_OscConfig+0x46>
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	2b18      	cmp	r3, #24
 80017fe:	d110      	bne.n	8001822 <HAL_RCC_OscConfig+0x5e>
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d10b      	bne.n	8001822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180a:	4b7f      	ldr	r3, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d06c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x12c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d168      	bne.n	80018f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e3a2      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x76>
 800182c:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e02e      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x98>
 8001842:	4b71      	ldr	r3, [pc, #452]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a70      	ldr	r2, [pc, #448]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6d      	ldr	r2, [pc, #436]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e01d      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0xbc>
 8001866:	4b68      	ldr	r3, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a67      	ldr	r2, [pc, #412]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b65      	ldr	r3, [pc, #404]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a64      	ldr	r2, [pc, #400]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 8001880:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a60      	ldr	r2, [pc, #384]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7fe fff8 	bl	8000894 <HAL_GetTick>
 80018a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7fe fff4 	bl	8000894 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e356      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ba:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe4>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7fe ffe4 	bl	8000894 <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7fe ffe0 	bl	8000894 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e342      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018e2:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x10c>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 808c 	beq.w	8001a18 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001900:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001908:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_RCC_OscConfig+0x162>
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	2b18      	cmp	r3, #24
 800191a:	d137      	bne.n	800198c <HAL_RCC_OscConfig+0x1c8>
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d132      	bne.n	800198c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x17a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e314      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 0219 	bic.w	r2, r3, #25
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	492f      	ldr	r1, [pc, #188]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7fe ffa0 	bl	8000894 <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7fe ff9c 	bl	8000894 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e2fe      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	061b      	lsls	r3, r3, #24
 8001984:	4920      	ldr	r1, [pc, #128]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198a:	e045      	b.n	8001a18 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d026      	beq.n	80019e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0219 	bic.w	r2, r3, #25
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4919      	ldr	r1, [pc, #100]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7fe ff75 	bl	8000894 <HAL_GetTick>
 80019aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7fe ff71 	bl	8000894 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e2d3      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	490b      	ldr	r1, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e01a      	b.n	8001a18 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7fe ff51 	bl	8000894 <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7fe ff4d 	bl	8000894 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d903      	bls.n	8001a0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e2af      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
 8001a08:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a0c:	4b96      	ldr	r3, [pc, #600]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d06a      	beq.n	8001afa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a24:	4b90      	ldr	r3, [pc, #576]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a2e:	4b8e      	ldr	r3, [pc, #568]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d007      	beq.n	8001a4a <HAL_RCC_OscConfig+0x286>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b18      	cmp	r3, #24
 8001a3e:	d11b      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2b4>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a4a:	4b87      	ldr	r3, [pc, #540]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x29e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	2b80      	cmp	r3, #128	; 0x80
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e282      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a62:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	061b      	lsls	r3, r3, #24
 8001a70:	497d      	ldr	r1, [pc, #500]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a76:	e040      	b.n	8001afa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a80:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a78      	ldr	r2, [pc, #480]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7fe ff02 	bl	8000894 <HAL_GetTick>
 8001a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a94:	f7fe fefe 	bl	8000894 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e260      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa6:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	061b      	lsls	r3, r3, #24
 8001ac0:	4969      	ldr	r1, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60cb      	str	r3, [r1, #12]
 8001ac6:	e018      	b.n	8001afa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a66      	ldr	r2, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fede 	bl	8000894 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001adc:	f7fe feda 	bl	8000894 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e23c      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d036      	beq.n	8001b74 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d019      	beq.n	8001b42 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b12:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7fe febb 	bl	8000894 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b22:	f7fe feb7 	bl	8000894 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e219      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x35e>
 8001b40:	e018      	b.n	8001b74 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b46:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7fe fea1 	bl	8000894 <HAL_GetTick>
 8001b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b56:	f7fe fe9d 	bl	8000894 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1ff      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d036      	beq.n	8001bee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d019      	beq.n	8001bbc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b88:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b94:	f7fe fe7e 	bl	8000894 <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b9c:	f7fe fe7a 	bl	8000894 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1dc      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x3d8>
 8001bba:	e018      	b.n	8001bee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bc8:	f7fe fe64 	bl	8000894 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd0:	f7fe fe60 	bl	8000894 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1c2      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8086 	beq.w	8001d08 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_OscConfig+0x4a8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <HAL_RCC_OscConfig+0x4a8>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c08:	f7fe fe44 	bl	8000894 <HAL_GetTick>
 8001c0c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c10:	f7fe fe40 	bl	8000894 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1a2      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_OscConfig+0x4a8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x480>
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	e032      	b.n	8001caa <HAL_RCC_OscConfig+0x4e6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4ac>
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	4a02      	ldr	r2, [pc, #8]	; (8001c68 <HAL_RCC_OscConfig+0x4a4>)
 8001c5e:	f023 0304 	bic.w	r3, r3, #4
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
 8001c64:	e021      	b.n	8001caa <HAL_RCC_OscConfig+0x4e6>
 8001c66:	bf00      	nop
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	58024800 	.word	0x58024800
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4ce>
 8001c78:	4b83      	ldr	r3, [pc, #524]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a82      	ldr	r2, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0x4e6>
 8001c92:	4b7d      	ldr	r3, [pc, #500]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a7c      	ldr	r2, [pc, #496]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7fe fdef 	bl	8000894 <HAL_GetTick>
 8001cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe fdeb 	bl	8000894 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e14b      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd0:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCC_OscConfig+0x4f6>
 8001cdc:	e014      	b.n	8001d08 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7fe fdd9 	bl	8000894 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe fdd5 	bl	8000894 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e135      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ee      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 812a 	beq.w	8001f66 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	f000 80ba 	beq.w	8001e94 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	f040 8095 	bne.w	8001e54 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7fe fdad 	bl	8000894 <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7fe fda9 	bl	8000894 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e10b      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d50:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_RCC_OscConfig+0x6c8>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	4945      	ldr	r1, [pc, #276]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	628b      	str	r3, [r1, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	3b01      	subs	r3, #1
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001da6:	4938      	ldr	r1, [pc, #224]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001db8:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <HAL_RCC_OscConfig+0x6cc>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	4930      	ldr	r1, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f023 020c 	bic.w	r2, r3, #12
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	492b      	ldr	r1, [pc, #172]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f023 0202 	bic.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4927      	ldr	r1, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fd32 	bl	8000894 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe fd2e 	bl	8000894 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e090      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x670>
 8001e52:	e088      	b.n	8001f66 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fd18 	bl	8000894 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe fd14 	bl	8000894 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e076      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7a:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0x6c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x6a4>
 8001e86:	e06e      	b.n	8001f66 <HAL_RCC_OscConfig+0x7a2>
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	fffffc0c 	.word	0xfffffc0c
 8001e90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d031      	beq.n	8001f0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d12a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d122      	bne.n	8001f0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	0a5b      	lsrs	r3, r3, #9
 8001eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0e1b      	lsrs	r3, r3, #24
 8001efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e02b      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d01f      	beq.n	8001f66 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f32:	f7fe fcaf 	bl	8000894 <HAL_GetTick>
 8001f36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f38:	bf00      	nop
 8001f3a:	f7fe fcab 	bl	8000894 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d0f9      	beq.n	8001f3a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_OscConfig+0x7b0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f52:	00d2      	lsls	r2, r2, #3
 8001f54:	4906      	ldr	r1, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_RCC_OscConfig+0x7ac>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3730      	adds	r7, #48	; 0x30
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	58024400 	.word	0x58024400
 8001f74:	ffff0007 	.word	0xffff0007

08001f78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e19c      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b8a      	ldr	r3, [pc, #552]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b87      	ldr	r3, [pc, #540]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 020f 	bic.w	r2, r3, #15
 8001fa2:	4985      	ldr	r1, [pc, #532]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b83      	ldr	r3, [pc, #524]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e184      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd8:	4b78      	ldr	r3, [pc, #480]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	4975      	ldr	r1, [pc, #468]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	4b70      	ldr	r3, [pc, #448]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002002:	429a      	cmp	r2, r3
 8002004:	d908      	bls.n	8002018 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002006:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	496a      	ldr	r1, [pc, #424]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002014:	4313      	orrs	r3, r2
 8002016:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002030:	429a      	cmp	r2, r3
 8002032:	d908      	bls.n	8002046 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	495e      	ldr	r1, [pc, #376]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002042:	4313      	orrs	r3, r2
 8002044:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205e:	429a      	cmp	r2, r3
 8002060:	d908      	bls.n	8002074 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002062:	4b56      	ldr	r3, [pc, #344]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4953      	ldr	r1, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002070:	4313      	orrs	r3, r2
 8002072:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	429a      	cmp	r2, r3
 800208e:	d908      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f023 020f 	bic.w	r2, r3, #15
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4947      	ldr	r1, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d055      	beq.n	800215a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4940      	ldr	r1, [pc, #256]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c8:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d121      	bne.n	8002118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0f6      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020e0:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d115      	bne.n	8002118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0ea      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f8:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0de      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0d6      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002126:	4313      	orrs	r3, r2
 8002128:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212a:	f7fe fbb3 	bl	8000894 <HAL_GetTick>
 800212e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002130:	e00a      	b.n	8002148 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002132:	f7fe fbaf 	bl	8000894 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0be      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	429a      	cmp	r2, r3
 8002158:	d1eb      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	429a      	cmp	r2, r3
 8002174:	d208      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f023 020f 	bic.w	r2, r3, #15
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	490e      	ldr	r1, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x244>)
 8002184:	4313      	orrs	r3, r2
 8002186:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d214      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 020f 	bic.w	r2, r3, #15
 800219e:	4906      	ldr	r1, [pc, #24]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_RCC_ClockConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e086      	b.n	80022c6 <HAL_RCC_ClockConfig+0x34e>
 80021b8:	52002000 	.word	0x52002000
 80021bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d010      	beq.n	80021ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d8:	429a      	cmp	r2, r3
 80021da:	d208      	bcs.n	80021ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021dc:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4939      	ldr	r1, [pc, #228]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002206:	429a      	cmp	r2, r3
 8002208:	d208      	bcs.n	800221c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	492e      	ldr	r1, [pc, #184]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 8002218:	4313      	orrs	r3, r2
 800221a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699a      	ldr	r2, [r3, #24]
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002234:	429a      	cmp	r2, r3
 8002236:	d208      	bcs.n	800224a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4922      	ldr	r1, [pc, #136]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 8002246:	4313      	orrs	r3, r2
 8002248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002262:	429a      	cmp	r2, r3
 8002264:	d208      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4917      	ldr	r1, [pc, #92]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 8002274:	4313      	orrs	r3, r2
 8002276:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002278:	f000 f834 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	4912      	ldr	r1, [pc, #72]	; (80022d4 <HAL_RCC_ClockConfig+0x35c>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_RCC_ClockConfig+0x358>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_RCC_ClockConfig+0x35c>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x360>)
 80022ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x364>)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x368>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe faa0 	bl	8000800 <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	58024400 	.word	0x58024400
 80022d4:	08003c7c 	.word	0x08003c7c
 80022d8:	24000004 	.word	0x24000004
 80022dc:	24000000 	.word	0x24000000
 80022e0:	24000008 	.word	0x24000008

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ea:	4bb3      	ldr	r3, [pc, #716]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f2:	2b18      	cmp	r3, #24
 80022f4:	f200 8155 	bhi.w	80025a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002365 	.word	0x08002365
 8002304:	080025a3 	.word	0x080025a3
 8002308:	080025a3 	.word	0x080025a3
 800230c:	080025a3 	.word	0x080025a3
 8002310:	080025a3 	.word	0x080025a3
 8002314:	080025a3 	.word	0x080025a3
 8002318:	080025a3 	.word	0x080025a3
 800231c:	080025a3 	.word	0x080025a3
 8002320:	0800238b 	.word	0x0800238b
 8002324:	080025a3 	.word	0x080025a3
 8002328:	080025a3 	.word	0x080025a3
 800232c:	080025a3 	.word	0x080025a3
 8002330:	080025a3 	.word	0x080025a3
 8002334:	080025a3 	.word	0x080025a3
 8002338:	080025a3 	.word	0x080025a3
 800233c:	080025a3 	.word	0x080025a3
 8002340:	08002391 	.word	0x08002391
 8002344:	080025a3 	.word	0x080025a3
 8002348:	080025a3 	.word	0x080025a3
 800234c:	080025a3 	.word	0x080025a3
 8002350:	080025a3 	.word	0x080025a3
 8002354:	080025a3 	.word	0x080025a3
 8002358:	080025a3 	.word	0x080025a3
 800235c:	080025a3 	.word	0x080025a3
 8002360:	08002397 	.word	0x08002397
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002364:	4b94      	ldr	r3, [pc, #592]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b00      	cmp	r3, #0
 800236e:	d009      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002370:	4b91      	ldr	r3, [pc, #580]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	08db      	lsrs	r3, r3, #3
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	4a90      	ldr	r2, [pc, #576]	; (80025bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002382:	e111      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002384:	4b8d      	ldr	r3, [pc, #564]	; (80025bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002386:	61bb      	str	r3, [r7, #24]
      break;
 8002388:	e10e      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800238a:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800238c:	61bb      	str	r3, [r7, #24]
      break;
 800238e:	e10b      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002390:	4b8c      	ldr	r3, [pc, #560]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002392:	61bb      	str	r3, [r7, #24]
      break;
 8002394:	e108      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023a0:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023ac:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023b6:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	08db      	lsrs	r3, r3, #3
 80023bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80e1 	beq.w	800259c <HAL_RCC_GetSysClockFreq+0x2b8>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	f000 8083 	beq.w	80024e8 <HAL_RCC_GetSysClockFreq+0x204>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	f200 80a1 	bhi.w	800252c <HAL_RCC_GetSysClockFreq+0x248>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x114>
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d056      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80023f6:	e099      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023f8:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02d      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002404:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	4a6b      	ldr	r2, [pc, #428]	; (80025bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242e:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002442:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800244a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800245e:	e087      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800246e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002482:	ed97 6a02 	vldr	s12, [r7, #8]
 8002486:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800248a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800248e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024a2:	e065      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b6:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024e6:	e043      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80024f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800250a:	ed97 6a02 	vldr	s12, [r7, #8]
 800250e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800251a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800251e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800252a:	e021      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002536:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800253a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800254e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002552:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800255a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800255e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800256e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	0a5b      	lsrs	r3, r3, #9
 8002576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800257a:	3301      	adds	r3, #1
 800257c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002588:	edd7 6a07 	vldr	s13, [r7, #28]
 800258c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800259a:	e005      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
      break;
 80025a0:	e002      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025a4:	61bb      	str	r3, [r7, #24]
      break;
 80025a6:	bf00      	nop
  }

  return sysclockfreq;
 80025a8:	69bb      	ldr	r3, [r7, #24]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	58024400 	.word	0x58024400
 80025bc:	03d09000 	.word	0x03d09000
 80025c0:	003d0900 	.word	0x003d0900
 80025c4:	017d7840 	.word	0x017d7840
 80025c8:	46000000 	.word	0x46000000
 80025cc:	4c742400 	.word	0x4c742400
 80025d0:	4a742400 	.word	0x4a742400
 80025d4:	4bbebc20 	.word	0x4bbebc20

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0c6      	sub	sp, #280	; 0x118
 80025de:	af00      	add	r7, sp, #0
 80025e0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80025fc:	2500      	movs	r5, #0
 80025fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002602:	d049      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800260e:	d02f      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002610:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002614:	d828      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800261a:	d01a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800261c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002620:	d822      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800262a:	d007      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800262c:	e01c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262e:	4bab      	ldr	r3, [pc, #684]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	4aaa      	ldr	r2, [pc, #680]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800263a:	e01a      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800263c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002640:	3308      	adds	r3, #8
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f967 	bl	8003918 <RCCEx_PLL2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002650:	e00f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002656:	3328      	adds	r3, #40	; 0x28
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fa0e 	bl	8003a7c <RCCEx_PLL3_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002666:	e004      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002672:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800267a:	4b98      	ldr	r3, [pc, #608]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800267c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002688:	4a94      	ldr	r2, [pc, #592]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800268a:	430b      	orrs	r3, r1
 800268c:	6513      	str	r3, [r2, #80]	; 0x50
 800268e:	e003      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002694:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80026a4:	f04f 0900 	mov.w	r9, #0
 80026a8:	ea58 0309 	orrs.w	r3, r8, r9
 80026ac:	d047      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d82a      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d5 	.word	0x080026d5
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	08002717 	.word	0x08002717
 80026d0:	08002717 	.word	0x08002717
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d4:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	4a80      	ldr	r2, [pc, #512]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e0:	e01a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026e6:	3308      	adds	r3, #8
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 f914 	bl	8003918 <RCCEx_PLL2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026f6:	e00f      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026fc:	3328      	adds	r3, #40	; 0x28
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f001 f9bb 	bl	8003a7c <RCCEx_PLL3_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800270c:	e004      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002720:	4b6e      	ldr	r3, [pc, #440]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002724:	f023 0107 	bic.w	r1, r3, #7
 8002728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	4a6b      	ldr	r2, [pc, #428]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002730:	430b      	orrs	r3, r1
 8002732:	6513      	str	r3, [r2, #80]	; 0x50
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002736:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800273a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800273e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800274a:	f04f 0b00 	mov.w	fp, #0
 800274e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002752:	d05b      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800275c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002760:	d03b      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002762:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002766:	d834      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800276c:	d037      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x206>
 800276e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002772:	d82e      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002774:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002778:	d033      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800277a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800277e:	d828      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002784:	d01a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278a:	d822      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002794:	d007      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002796:	e01c      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800279e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027a4:	e01e      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027aa:	3308      	adds	r3, #8
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f001 f8b2 	bl	8003918 <RCCEx_PLL2_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027ba:	e013      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027c0:	3328      	adds	r3, #40	; 0x28
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 f959 	bl	8003a7c <RCCEx_PLL3_Config>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027d0:	e008      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80027d8:	e004      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80027f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027fc:	4a37      	ldr	r2, [pc, #220]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027fe:	430b      	orrs	r3, r1
 8002800:	6593      	str	r3, [r2, #88]	; 0x58
 8002802:	e003      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002804:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002808:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800280c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002822:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002826:	460b      	mov	r3, r1
 8002828:	4313      	orrs	r3, r2
 800282a:	d05d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800282c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002834:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002838:	d03b      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800283a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800283e:	d834      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002844:	d037      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800284a:	d82e      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800284c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002850:	d033      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002856:	d828      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800285c:	d01a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800285e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002862:	d822      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286c:	d007      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800286e:	e01c      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800287c:	e01e      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800287e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002882:	3308      	adds	r3, #8
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f846 	bl	8003918 <RCCEx_PLL2_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002892:	e013      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002898:	3328      	adds	r3, #40	; 0x28
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f001 f8ed 	bl	8003a7c <RCCEx_PLL3_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a8:	e008      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80028b0:	e004      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80028cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028d4:	4a01      	ldr	r2, [pc, #4]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
 80028da:	e005      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80028dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80028e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80028f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80028fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002902:	460b      	mov	r3, r1
 8002904:	4313      	orrs	r3, r2
 8002906:	d03a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	2b30      	cmp	r3, #48	; 0x30
 8002910:	d01f      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002912:	2b30      	cmp	r3, #48	; 0x30
 8002914:	d819      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002916:	2b20      	cmp	r3, #32
 8002918:	d00c      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800291a:	2b20      	cmp	r3, #32
 800291c:	d815      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002922:	2b10      	cmp	r3, #16
 8002924:	d111      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002926:	4baa      	ldr	r3, [pc, #680]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	4aa9      	ldr	r2, [pc, #676]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002932:	e011      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002938:	3308      	adds	r3, #8
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 ffeb 	bl	8003918 <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002948:	e006      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002950:	e002      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002960:	4b9b      	ldr	r3, [pc, #620]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	4a98      	ldr	r2, [pc, #608]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002970:	430b      	orrs	r3, r1
 8002972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800297a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800297e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800298a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002994:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002998:	460b      	mov	r3, r1
 800299a:	4313      	orrs	r3, r2
 800299c:	d051      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800299e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a8:	d035      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80029aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ae:	d82e      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029b4:	d031      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80029b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ba:	d828      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c0:	d01a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c6:	d822      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d0:	d007      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80029d2:	e01c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d4:	4b7e      	ldr	r3, [pc, #504]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	4a7d      	ldr	r2, [pc, #500]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029e0:	e01c      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029e6:	3308      	adds	r3, #8
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 ff94 	bl	8003918 <RCCEx_PLL2_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029f6:	e011      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029fc:	3328      	adds	r3, #40	; 0x28
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 f83b 	bl	8003a7c <RCCEx_PLL3_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002a14:	e002      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	4a67      	ldr	r2, [pc, #412]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6513      	str	r3, [r2, #80]	; 0x50
 8002a38:	e003      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a58:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	d053      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d033      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a72:	d82c      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a78:	d02f      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a7e:	d826      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a84:	d02b      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a8a:	d820      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a90:	d012      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a96:	d81a      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d022      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d115      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 ff34 	bl	8003918 <RCCEx_PLL2_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ab6:	e015      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002abc:	3328      	adds	r3, #40	; 0x28
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 ffdb 	bl	8003a7c <RCCEx_PLL3_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002aec:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	4a35      	ldr	r2, [pc, #212]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6513      	str	r3, [r2, #80]	; 0x50
 8002b00:	e003      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b20:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b24:	460b      	mov	r3, r1
 8002b26:	4313      	orrs	r3, r2
 8002b28:	d058      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b36:	d033      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3c:	d82c      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b42:	d02f      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d826      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b4e:	d02b      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b54:	d820      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b5a:	d012      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b60:	d81a      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d022      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b6a:	d115      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b70:	3308      	adds	r3, #8
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fecf 	bl	8003918 <RCCEx_PLL2_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b80:	e015      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b86:	3328      	adds	r3, #40	; 0x28
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 ff76 	bl	8003a7c <RCCEx_PLL3_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b96:	e00a      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b9e:	e006      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba0:	bf00      	nop
 8002ba2:	e004      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba4:	bf00      	nop
 8002ba6:	e002      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bc6:	4a02      	ldr	r2, [pc, #8]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6593      	str	r3, [r2, #88]	; 0x58
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bf2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	d037      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c06:	d00e      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0c:	d816      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c16:	d111      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c18:	4bc4      	ldr	r3, [pc, #784]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4ac3      	ldr	r2, [pc, #780]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c24:	e00f      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fe72 	bl	8003918 <RCCEx_PLL2_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c3a:	e004      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c42:	e000      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c4e:	4bb7      	ldr	r3, [pc, #732]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5c:	4ab3      	ldr	r2, [pc, #716]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	6513      	str	r3, [r2, #80]	; 0x50
 8002c62:	e003      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c86:	460b      	mov	r3, r1
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	d039      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d81c      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c96:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002cd9 	.word	0x08002cd9
 8002ca0:	08002cad 	.word	0x08002cad
 8002ca4:	08002cbb 	.word	0x08002cbb
 8002ca8:	08002cd9 	.word	0x08002cd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cac:	4b9f      	ldr	r3, [pc, #636]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	4a9e      	ldr	r2, [pc, #632]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cb8:	e00f      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fe28 	bl	8003918 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cce:	e004      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ce2:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	f023 0103 	bic.w	r1, r3, #3
 8002cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf0:	4a8e      	ldr	r2, [pc, #568]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f000 8099 	beq.w	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d22:	4b83      	ldr	r3, [pc, #524]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a82      	ldr	r2, [pc, #520]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2e:	f7fd fdb1 	bl	8000894 <HAL_GetTick>
 8002d32:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	e00b      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f7fd fdac 	bl	8000894 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d903      	bls.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d4e:	e005      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d50:	4b77      	ldr	r3, [pc, #476]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ed      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d173      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d64:	4b71      	ldr	r3, [pc, #452]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d70:	4053      	eors	r3, r2
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d015      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d86:	4b69      	ldr	r3, [pc, #420]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a68      	ldr	r2, [pc, #416]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d9e:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db2:	d118      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fd fd6e 	bl	8000894 <HAL_GetTick>
 8002db8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbc:	e00d      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fd fd69 	bl	8000894 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dc8:	1ad2      	subs	r2, r2, r3
 8002dca:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d903      	bls.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8002dd8:	e005      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0eb      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002de6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d129      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dfe:	d10e      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e10:	091a      	lsrs	r2, r3, #4
 8002e12:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6113      	str	r3, [r2, #16]
 8002e1c:	e005      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	4a42      	ldr	r2, [pc, #264]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e28:	6113      	str	r3, [r2, #16]
 8002e2a:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3a:	4a3c      	ldr	r2, [pc, #240]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e008      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002e4a:	e003      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f002 0301 	and.w	r3, r2, #1
 8002e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f000 808f 	beq.w	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7c:	2b28      	cmp	r3, #40	; 0x28
 8002e7e:	d871      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002e80:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002f6d 	.word	0x08002f6d
 8002e8c:	08002f65 	.word	0x08002f65
 8002e90:	08002f65 	.word	0x08002f65
 8002e94:	08002f65 	.word	0x08002f65
 8002e98:	08002f65 	.word	0x08002f65
 8002e9c:	08002f65 	.word	0x08002f65
 8002ea0:	08002f65 	.word	0x08002f65
 8002ea4:	08002f65 	.word	0x08002f65
 8002ea8:	08002f39 	.word	0x08002f39
 8002eac:	08002f65 	.word	0x08002f65
 8002eb0:	08002f65 	.word	0x08002f65
 8002eb4:	08002f65 	.word	0x08002f65
 8002eb8:	08002f65 	.word	0x08002f65
 8002ebc:	08002f65 	.word	0x08002f65
 8002ec0:	08002f65 	.word	0x08002f65
 8002ec4:	08002f65 	.word	0x08002f65
 8002ec8:	08002f4f 	.word	0x08002f4f
 8002ecc:	08002f65 	.word	0x08002f65
 8002ed0:	08002f65 	.word	0x08002f65
 8002ed4:	08002f65 	.word	0x08002f65
 8002ed8:	08002f65 	.word	0x08002f65
 8002edc:	08002f65 	.word	0x08002f65
 8002ee0:	08002f65 	.word	0x08002f65
 8002ee4:	08002f65 	.word	0x08002f65
 8002ee8:	08002f6d 	.word	0x08002f6d
 8002eec:	08002f65 	.word	0x08002f65
 8002ef0:	08002f65 	.word	0x08002f65
 8002ef4:	08002f65 	.word	0x08002f65
 8002ef8:	08002f65 	.word	0x08002f65
 8002efc:	08002f65 	.word	0x08002f65
 8002f00:	08002f65 	.word	0x08002f65
 8002f04:	08002f65 	.word	0x08002f65
 8002f08:	08002f6d 	.word	0x08002f6d
 8002f0c:	08002f65 	.word	0x08002f65
 8002f10:	08002f65 	.word	0x08002f65
 8002f14:	08002f65 	.word	0x08002f65
 8002f18:	08002f65 	.word	0x08002f65
 8002f1c:	08002f65 	.word	0x08002f65
 8002f20:	08002f65 	.word	0x08002f65
 8002f24:	08002f65 	.word	0x08002f65
 8002f28:	08002f6d 	.word	0x08002f6d
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58024800 	.word	0x58024800
 8002f34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fce9 	bl	8003918 <RCCEx_PLL2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e00f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f52:	3328      	adds	r3, #40	; 0x28
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fd90 	bl	8003a7c <RCCEx_PLL3_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f62:	e004      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f76:	4bbf      	ldr	r3, [pc, #764]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f84:	4abb      	ldr	r2, [pc, #748]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6553      	str	r3, [r2, #84]	; 0x54
 8002f8a:	e003      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f002 0302 	and.w	r3, r2, #2
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002faa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	d041      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d824      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08003011 	.word	0x08003011
 8002fc8:	08002fdd 	.word	0x08002fdd
 8002fcc:	08002ff3 	.word	0x08002ff3
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003011 	.word	0x08003011
 8002fd8:	08003011 	.word	0x08003011
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fc97 	bl	8003918 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ff0:	e00f      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ff6:	3328      	adds	r3, #40	; 0x28
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fd3e 	bl	8003a7c <RCCEx_PLL3_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003006:	e004      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003012:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800301a:	4b96      	ldr	r3, [pc, #600]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f023 0107 	bic.w	r1, r3, #7
 8003022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003028:	4a92      	ldr	r2, [pc, #584]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800302a:	430b      	orrs	r3, r1
 800302c:	6553      	str	r3, [r2, #84]	; 0x54
 800302e:	e003      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003034:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f002 0304 	and.w	r3, r2, #4
 8003044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800304e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003052:	460b      	mov	r3, r1
 8003054:	4313      	orrs	r3, r2
 8003056:	d044      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	2b05      	cmp	r3, #5
 8003062:	d825      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	080030b9 	.word	0x080030b9
 8003070:	08003085 	.word	0x08003085
 8003074:	0800309b 	.word	0x0800309b
 8003078:	080030b9 	.word	0x080030b9
 800307c:	080030b9 	.word	0x080030b9
 8003080:	080030b9 	.word	0x080030b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003088:	3308      	adds	r3, #8
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fc43 	bl	8003918 <RCCEx_PLL2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003098:	e00f      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800309a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800309e:	3328      	adds	r3, #40	; 0x28
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fcea 	bl	8003a7c <RCCEx_PLL3_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80030b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c2:	4b6c      	ldr	r3, [pc, #432]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f023 0107 	bic.w	r1, r3, #7
 80030ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	4a68      	ldr	r2, [pc, #416]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6593      	str	r3, [r2, #88]	; 0x58
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f002 0320 	and.w	r3, r2, #32
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4313      	orrs	r3, r2
 8003100:	d055      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310e:	d033      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003114:	d82c      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d02f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d826      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003126:	d02b      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003128:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800312c:	d820      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800312e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003132:	d012      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003138:	d81a      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d022      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800313e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003142:	d115      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003148:	3308      	adds	r3, #8
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fbe3 	bl	8003918 <RCCEx_PLL2_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003158:	e015      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800315a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800315e:	3328      	adds	r3, #40	; 0x28
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fc8a 	bl	8003a7c <RCCEx_PLL3_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800316e:	e00a      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003176:	e006      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003178:	bf00      	nop
 800317a:	e004      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800317c:	bf00      	nop
 800317e:	e002      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003186:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800319a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319e:	4a35      	ldr	r2, [pc, #212]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6553      	str	r3, [r2, #84]	; 0x54
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80031ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d058      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031da:	d033      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80031dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031e0:	d82c      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e6:	d02f      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ec:	d826      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f2:	d02b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80031f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f8:	d820      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d012      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003204:	d81a      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d022      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d115      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003214:	3308      	adds	r3, #8
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fb7d 	bl	8003918 <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800322a:	3328      	adds	r3, #40	; 0x28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fc24 	bl	8003a7c <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800323a:	e00a      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003242:	e006      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003244:	bf00      	nop
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10e      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326a:	4a02      	ldr	r2, [pc, #8]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800326c:	430b      	orrs	r3, r1
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
 8003270:	e006      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003272:	bf00      	nop
 8003274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800327c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800328c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003296:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800329a:	460b      	mov	r3, r1
 800329c:	4313      	orrs	r3, r2
 800329e:	d055      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032ac:	d033      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80032ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032b2:	d82c      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b8:	d02f      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80032ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032be:	d826      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032c4:	d02b      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80032c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032ca:	d820      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d0:	d012      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80032d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d6:	d81a      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d022      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80032dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e0:	d115      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032e6:	3308      	adds	r3, #8
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fb14 	bl	8003918 <RCCEx_PLL2_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032f6:	e015      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032fc:	3328      	adds	r3, #40	; 0x28
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fbbb 	bl	8003a7c <RCCEx_PLL3_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800330c:	e00a      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003316:	bf00      	nop
 8003318:	e004      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003324:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800332c:	4ba0      	ldr	r3, [pc, #640]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333c:	4a9c      	ldr	r2, [pc, #624]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800333e:	430b      	orrs	r3, r1
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
 8003342:	e003      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003348:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f002 0308 	and.w	r3, r2, #8
 8003358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003362:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003366:	460b      	mov	r3, r1
 8003368:	4313      	orrs	r3, r2
 800336a:	d01e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800336c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800337a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800337e:	3328      	adds	r3, #40	; 0x28
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fb7a 	bl	8003a7c <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003394:	4b86      	ldr	r3, [pc, #536]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a4:	4a82      	ldr	r2, [pc, #520]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f002 0310 	and.w	r3, r2, #16
 80033b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80033c4:	460b      	mov	r3, r1
 80033c6:	4313      	orrs	r3, r2
 80033c8:	d01e      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033dc:	3328      	adds	r3, #40	; 0x28
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fb4b 	bl	8003a7c <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033f2:	4b6f      	ldr	r3, [pc, #444]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003402:	4a6b      	ldr	r2, [pc, #428]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003404:	430b      	orrs	r3, r1
 8003406:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003414:	67bb      	str	r3, [r7, #120]	; 0x78
 8003416:	2300      	movs	r3, #0
 8003418:	67fb      	str	r3, [r7, #124]	; 0x7c
 800341a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800341e:	460b      	mov	r3, r1
 8003420:	4313      	orrs	r3, r2
 8003422:	d03e      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003428:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800342c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003430:	d022      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003436:	d81b      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d00b      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003442:	e015      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003448:	3308      	adds	r3, #8
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fa63 	bl	8003918 <RCCEx_PLL2_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003458:	e00f      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800345a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800345e:	3328      	adds	r3, #40	; 0x28
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fb0a 	bl	8003a7c <RCCEx_PLL3_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003482:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800348a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800348e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003492:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003494:	430b      	orrs	r3, r1
 8003496:	6593      	str	r3, [r2, #88]	; 0x58
 8003498:	e003      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800349e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80034ae:	673b      	str	r3, [r7, #112]	; 0x70
 80034b0:	2300      	movs	r3, #0
 80034b2:	677b      	str	r3, [r7, #116]	; 0x74
 80034b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d03b      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ca:	d01f      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80034cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d0:	d818      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80034d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d6:	d003      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80034d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034dc:	d007      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80034ec:	e00f      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034f2:	3328      	adds	r3, #40	; 0x28
 80034f4:	2101      	movs	r1, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fac0 	bl	8003a7c <RCCEx_PLL3_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003502:	e004      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800350c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800351e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003526:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003528:	430b      	orrs	r3, r1
 800352a:	6553      	str	r3, [r2, #84]	; 0x54
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003532:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003542:	66bb      	str	r3, [r7, #104]	; 0x68
 8003544:	2300      	movs	r3, #0
 8003546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003548:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800354c:	460b      	mov	r3, r1
 800354e:	4313      	orrs	r3, r2
 8003550:	d034      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d007      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800356a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003570:	e00e      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003576:	3308      	adds	r3, #8
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f9cc 	bl	8003918 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003586:	e003      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	4a02      	ldr	r2, [pc, #8]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80035ae:	bf00      	nop
 80035b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80035c8:	663b      	str	r3, [r7, #96]	; 0x60
 80035ca:	2300      	movs	r3, #0
 80035cc:	667b      	str	r3, [r7, #100]	; 0x64
 80035ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d00c      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035dc:	3328      	adds	r3, #40	; 0x28
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa4b 	bl	8003a7c <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80035fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003600:	2300      	movs	r3, #0
 8003602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003604:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003608:	460b      	mov	r3, r1
 800360a:	4313      	orrs	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800360e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003618:	d018      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800361a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800361e:	d811      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003624:	d014      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362a:	d80b      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003634:	d106      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003636:	4bb7      	ldr	r3, [pc, #732]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	4ab6      	ldr	r2, [pc, #728]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800363c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003642:	e008      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800364c:	bf00      	nop
 800364e:	e002      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800365e:	4bad      	ldr	r3, [pc, #692]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800366a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366c:	4aa9      	ldr	r2, [pc, #676]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800366e:	430b      	orrs	r3, r1
 8003670:	6553      	str	r3, [r2, #84]	; 0x54
 8003672:	e003      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003678:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800367c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
 800368a:	2300      	movs	r3, #0
 800368c:	657b      	str	r3, [r7, #84]	; 0x54
 800368e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003698:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a9b      	ldr	r2, [pc, #620]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80036b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ba:	2300      	movs	r3, #0
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036c8:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d6:	4a8f      	ldr	r2, [pc, #572]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80036e8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ea:	2300      	movs	r3, #0
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
 80036ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036f8:	4b86      	ldr	r3, [pc, #536]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4a85      	ldr	r2, [pc, #532]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003702:	6113      	str	r3, [r2, #16]
 8003704:	4b83      	ldr	r3, [pc, #524]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003706:	6919      	ldr	r1, [r3, #16]
 8003708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800370c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003710:	4a80      	ldr	r2, [pc, #512]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
 8003724:	2300      	movs	r3, #0
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003728:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800372c:	460b      	mov	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003732:	4b78      	ldr	r3, [pc, #480]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800373a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	4a74      	ldr	r2, [pc, #464]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003742:	430b      	orrs	r3, r1
 8003744:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
 8003754:	2300      	movs	r3, #0
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
 8003758:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800376a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	4a68      	ldr	r2, [pc, #416]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003774:	430b      	orrs	r3, r1
 8003776:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	2100      	movs	r1, #0
 8003782:	62b9      	str	r1, [r7, #40]	; 0x28
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d011      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003798:	3308      	adds	r3, #8
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f8bb 	bl	8003918 <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80037a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80037b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	2100      	movs	r1, #0
 80037c2:	6239      	str	r1, [r7, #32]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d011      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d8:	3308      	adds	r3, #8
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f89b 	bl	8003918 <RCCEx_PLL2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80037e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80037f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	2100      	movs	r1, #0
 8003802:	61b9      	str	r1, [r7, #24]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d011      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003818:	3308      	adds	r3, #8
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f87b 	bl	8003918 <RCCEx_PLL2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003834:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	2100      	movs	r1, #0
 8003842:	6139      	str	r1, [r7, #16]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d011      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003858:	3328      	adds	r3, #40	; 0x28
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f90d 	bl	8003a7c <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003868:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003874:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	2100      	movs	r1, #0
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800388e:	460b      	mov	r3, r1
 8003890:	4313      	orrs	r3, r2
 8003892:	d011      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003898:	3328      	adds	r3, #40	; 0x28
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f8ed 	bl	8003a7c <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80038a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80038b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	2100      	movs	r1, #0
 80038c2:	6039      	str	r1, [r7, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d011      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d8:	3328      	adds	r3, #40	; 0x28
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f8cd 	bl	8003a7c <RCCEx_PLL3_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80038e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80038f8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003912:	bf00      	nop
 8003914:	58024400 	.word	0x58024400

08003918 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003926:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b03      	cmp	r3, #3
 8003930:	d101      	bne.n	8003936 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e099      	b.n	8003a6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003936:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a4e      	ldr	r2, [pc, #312]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 800393c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003942:	f7fc ffa7 	bl	8000894 <HAL_GetTick>
 8003946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003948:	e008      	b.n	800395c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800394a:	f7fc ffa3 	bl	8000894 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e086      	b.n	8003a6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	031b      	lsls	r3, r3, #12
 8003976:	493f      	ldr	r1, [pc, #252]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	628b      	str	r3, [r1, #40]	; 0x28
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	3b01      	subs	r3, #1
 8003982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	3b01      	subs	r3, #1
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	b29b      	uxth	r3, r3
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039ac:	4931      	ldr	r1, [pc, #196]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	492d      	ldr	r1, [pc, #180]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039c4:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f023 0220 	bic.w	r2, r3, #32
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	4928      	ldr	r1, [pc, #160]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039d6:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039dc:	f023 0310 	bic.w	r3, r3, #16
 80039e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <RCCEx_PLL2_Config+0x160>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	69d2      	ldr	r2, [r2, #28]
 80039ee:	00d2      	lsls	r2, r2, #3
 80039f0:	4920      	ldr	r1, [pc, #128]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 80039fc:	f043 0310 	orr.w	r3, r3, #16
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a14:	e00f      	b.n	8003a36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a28:	e005      	b.n	8003a36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a42:	f7fc ff27 	bl	8000894 <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a4a:	f7fc ff23 	bl	8000894 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <RCCEx_PLL2_Config+0x15c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
 8003a78:	ffff0007 	.word	0xffff0007

08003a7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a8a:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d101      	bne.n	8003a9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e099      	b.n	8003bce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a9a:	4b4f      	ldr	r3, [pc, #316]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a4e      	ldr	r2, [pc, #312]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa6:	f7fc fef5 	bl	8000894 <HAL_GetTick>
 8003aaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003aac:	e008      	b.n	8003ac0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003aae:	f7fc fef1 	bl	8000894 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e086      	b.n	8003bce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ac0:	4b45      	ldr	r3, [pc, #276]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f0      	bne.n	8003aae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003acc:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	051b      	lsls	r3, r3, #20
 8003ada:	493f      	ldr	r1, [pc, #252]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	628b      	str	r3, [r1, #40]	; 0x28
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	025b      	lsls	r3, r3, #9
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	061b      	lsls	r3, r3, #24
 8003b0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b10:	4931      	ldr	r1, [pc, #196]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b16:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	492d      	ldr	r1, [pc, #180]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	4928      	ldr	r1, [pc, #160]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b3a:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <RCCEx_PLL3_Config+0x160>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	69d2      	ldr	r2, [r2, #28]
 8003b52:	00d2      	lsls	r2, r2, #3
 8003b54:	4920      	ldr	r1, [pc, #128]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b78:	e00f      	b.n	8003b9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b8c:	e005      	b.n	8003b9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba6:	f7fc fe75 	bl	8000894 <HAL_GetTick>
 8003baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003bae:	f7fc fe71 	bl	8000894 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e006      	b.n	8003bce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <RCCEx_PLL3_Config+0x15c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	ffff0007 	.word	0xffff0007

08003be0 <read>:
 *  @parameter     Pointer to i2c structure, pointer to the variable storing the value from magnetometer
 *  @return value  Void
 *
 */
void read(I2C_HandleTypeDef *hi2c1,uint8_t *mag)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af04      	add	r7, sp, #16
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	/*function to read value sent by magnetometer*/
    HAL_I2C_Mem_Read(hi2c1, 0xD0, 0x00, 1u, mag, 1u, 1000);//not using & because it is an address
 8003bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bee:	9302      	str	r3, [sp, #8]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	21d0      	movs	r1, #208	; 0xd0
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd f970 	bl	8000ee4 <HAL_I2C_Mem_Read>
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <__libc_init_array>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	4d0d      	ldr	r5, [pc, #52]	; (8003c44 <__libc_init_array+0x38>)
 8003c10:	4c0d      	ldr	r4, [pc, #52]	; (8003c48 <__libc_init_array+0x3c>)
 8003c12:	1b64      	subs	r4, r4, r5
 8003c14:	10a4      	asrs	r4, r4, #2
 8003c16:	2600      	movs	r6, #0
 8003c18:	42a6      	cmp	r6, r4
 8003c1a:	d109      	bne.n	8003c30 <__libc_init_array+0x24>
 8003c1c:	4d0b      	ldr	r5, [pc, #44]	; (8003c4c <__libc_init_array+0x40>)
 8003c1e:	4c0c      	ldr	r4, [pc, #48]	; (8003c50 <__libc_init_array+0x44>)
 8003c20:	f000 f820 	bl	8003c64 <_init>
 8003c24:	1b64      	subs	r4, r4, r5
 8003c26:	10a4      	asrs	r4, r4, #2
 8003c28:	2600      	movs	r6, #0
 8003c2a:	42a6      	cmp	r6, r4
 8003c2c:	d105      	bne.n	8003c3a <__libc_init_array+0x2e>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c34:	4798      	blx	r3
 8003c36:	3601      	adds	r6, #1
 8003c38:	e7ee      	b.n	8003c18 <__libc_init_array+0xc>
 8003c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3e:	4798      	blx	r3
 8003c40:	3601      	adds	r6, #1
 8003c42:	e7f2      	b.n	8003c2a <__libc_init_array+0x1e>
 8003c44:	08003c8c 	.word	0x08003c8c
 8003c48:	08003c8c 	.word	0x08003c8c
 8003c4c:	08003c8c 	.word	0x08003c8c
 8003c50:	08003c90 	.word	0x08003c90

08003c54 <memset>:
 8003c54:	4402      	add	r2, r0
 8003c56:	4603      	mov	r3, r0
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d100      	bne.n	8003c5e <memset+0xa>
 8003c5c:	4770      	bx	lr
 8003c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c62:	e7f9      	b.n	8003c58 <memset+0x4>

08003c64 <_init>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr

08003c70 <_fini>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	bf00      	nop
 8003c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	469e      	mov	lr, r3
 8003c7a:	4770      	bx	lr
