
H_Bridge_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000319c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000108  24000010  08003490  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000118  08003490  00020118  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cb77  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000019d5  00000000  00000000  0002cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bc8  00000000  00000000  0002e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000091a  00000000  00000000  0002f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031408  00000000  00000000  0002fab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d5d3  00000000  00000000  00060eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001432b5  00000000  00000000  0006e48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003140  00000000  00000000  001b1744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  001b4884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003450 	.word	0x08003450

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08003450 	.word	0x08003450

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fc92 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f80a 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f9e0 	bl	80006dc <MX_GPIO_Init>
  MX_TIM4_Init();
 800031c:	f000 f876 	bl	800040c <MX_TIM4_Init>
  MX_TIM12_Init();
 8000320:	f000 f95a 	bl	80005d8 <MX_TIM12_Init>
  MX_TIM5_Init();
 8000324:	f000 f90a 	bl	800053c <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000328:	e7fe      	b.n	8000328 <main+0x1c>
	...

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09c      	sub	sp, #112	; 0x70
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000336:	224c      	movs	r2, #76	; 0x4c
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f003 f85c 	bl	80033f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2220      	movs	r2, #32
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 f856 	bl	80033f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800034c:	2004      	movs	r0, #4
 800034e:	f000 ffd7 	bl	8001300 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <SystemClock_Config+0xdc>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800035e:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <SystemClock_Config+0xdc>)
 8000360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b28      	ldr	r3, [pc, #160]	; (8000408 <SystemClock_Config+0xdc>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000372:	bf00      	nop
 8000374:	4b24      	ldr	r3, [pc, #144]	; (8000408 <SystemClock_Config+0xdc>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800037c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000380:	d1f8      	bne.n	8000374 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000382:	2301      	movs	r3, #1
 8000384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000390:	2302      	movs	r3, #2
 8000392:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000394:	2302      	movs	r3, #2
 8000396:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000398:	2310      	movs	r3, #16
 800039a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800039c:	2301      	movs	r3, #1
 800039e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003a8:	230c      	movs	r3, #12
 80003aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fffb 	bl	80013b4 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003c4:	f000 fa7e 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	233f      	movs	r3, #63	; 0x3f
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2303      	movs	r3, #3
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003d8:	2340      	movs	r3, #64	; 0x40
 80003da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003dc:	2340      	movs	r3, #64	; 0x40
 80003de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003e6:	2340      	movs	r3, #64	; 0x40
 80003e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fbba 	bl	8001b68 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80003fa:	f000 fa63 	bl	80008c4 <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3770      	adds	r7, #112	; 0x70
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	58024800 	.word	0x58024800

0800040c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08e      	sub	sp, #56	; 0x38
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000420:	f107 031c 	add.w	r3, r7, #28
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800043e:	4b3d      	ldr	r3, [pc, #244]	; (8000534 <MX_TIM4_Init+0x128>)
 8000440:	4a3d      	ldr	r2, [pc, #244]	; (8000538 <MX_TIM4_Init+0x12c>)
 8000442:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000444:	4b3b      	ldr	r3, [pc, #236]	; (8000534 <MX_TIM4_Init+0x128>)
 8000446:	22c7      	movs	r2, #199	; 0xc7
 8000448:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044a:	4b3a      	ldr	r3, [pc, #232]	; (8000534 <MX_TIM4_Init+0x128>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000450:	4b38      	ldr	r3, [pc, #224]	; (8000534 <MX_TIM4_Init+0x128>)
 8000452:	2263      	movs	r2, #99	; 0x63
 8000454:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000456:	4b37      	ldr	r3, [pc, #220]	; (8000534 <MX_TIM4_Init+0x128>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045c:	4b35      	ldr	r3, [pc, #212]	; (8000534 <MX_TIM4_Init+0x128>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000462:	4834      	ldr	r0, [pc, #208]	; (8000534 <MX_TIM4_Init+0x128>)
 8000464:	f001 feb0 	bl	80021c8 <HAL_TIM_Base_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800046e:	f000 fa29 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047c:	4619      	mov	r1, r3
 800047e:	482d      	ldr	r0, [pc, #180]	; (8000534 <MX_TIM4_Init+0x128>)
 8000480:	f002 f9bc 	bl	80027fc <HAL_TIM_ConfigClockSource>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800048a:	f000 fa1b 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800048e:	4829      	ldr	r0, [pc, #164]	; (8000534 <MX_TIM4_Init+0x128>)
 8000490:	f001 ff20 	bl	80022d4 <HAL_TIM_PWM_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800049a:	f000 fa13 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	4619      	mov	r1, r3
 80004ac:	4821      	ldr	r0, [pc, #132]	; (8000534 <MX_TIM4_Init+0x128>)
 80004ae:	f002 fee9 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80004b8:	f000 fa04 	bl	80008c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004bc:	2360      	movs	r3, #96	; 0x60
 80004be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	4619      	mov	r1, r3
 80004d2:	4818      	ldr	r0, [pc, #96]	; (8000534 <MX_TIM4_Init+0x128>)
 80004d4:	f002 f87e 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80004de:	f000 f9f1 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004e2:	463b      	mov	r3, r7
 80004e4:	2204      	movs	r2, #4
 80004e6:	4619      	mov	r1, r3
 80004e8:	4812      	ldr	r0, [pc, #72]	; (8000534 <MX_TIM4_Init+0x128>)
 80004ea:	f002 f873 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80004f4:	f000 f9e6 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004f8:	463b      	mov	r3, r7
 80004fa:	2208      	movs	r2, #8
 80004fc:	4619      	mov	r1, r3
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <MX_TIM4_Init+0x128>)
 8000500:	f002 f868 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800050a:	f000 f9db 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	220c      	movs	r2, #12
 8000512:	4619      	mov	r1, r3
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <MX_TIM4_Init+0x128>)
 8000516:	f002 f85d 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000520:	f000 f9d0 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <MX_TIM4_Init+0x128>)
 8000526:	f000 fa43 	bl	80009b0 <HAL_TIM_MspPostInit>

}
 800052a:	bf00      	nop
 800052c:	3738      	adds	r7, #56	; 0x38
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2400002c 	.word	0x2400002c
 8000538:	40000800 	.word	0x40000800

0800053c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <MX_TIM5_Init+0x94>)
 800055c:	4a1d      	ldr	r2, [pc, #116]	; (80005d4 <MX_TIM5_Init+0x98>)
 800055e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4000-1;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_TIM5_Init+0x94>)
 8000562:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000566:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_TIM5_Init+0x94>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1-1;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_TIM5_Init+0x94>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_TIM5_Init+0x94>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_TIM5_Init+0x94>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_TIM5_Init+0x94>)
 8000582:	f001 fe21 	bl	80021c8 <HAL_TIM_Base_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800058c:	f000 f99a 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_TIM5_Init+0x94>)
 800059e:	f002 f92d 	bl	80027fc <HAL_TIM_ConfigClockSource>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80005a8:	f000 f98c 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_TIM5_Init+0x94>)
 80005ba:	f002 fe63 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80005c4:	f000 f97e 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	24000078 	.word	0x24000078
 80005d4:	40000c00 	.word	0x40000c00

080005d8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_TIM12_Init+0xfc>)
 800060c:	4a32      	ldr	r2, [pc, #200]	; (80006d8 <MX_TIM12_Init+0x100>)
 800060e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8000610:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_TIM12_Init+0xfc>)
 8000612:	22c7      	movs	r2, #199	; 0xc7
 8000614:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_TIM12_Init+0xfc>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 800061c:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_TIM12_Init+0xfc>)
 800061e:	2263      	movs	r2, #99	; 0x63
 8000620:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_TIM12_Init+0xfc>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000628:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <MX_TIM12_Init+0xfc>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <MX_TIM12_Init+0xfc>)
 8000630:	f001 fdca 	bl	80021c8 <HAL_TIM_Base_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 800063a:	f000 f943 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000648:	4619      	mov	r1, r3
 800064a:	4822      	ldr	r0, [pc, #136]	; (80006d4 <MX_TIM12_Init+0xfc>)
 800064c:	f002 f8d6 	bl	80027fc <HAL_TIM_ConfigClockSource>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8000656:	f000 f935 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800065a:	481e      	ldr	r0, [pc, #120]	; (80006d4 <MX_TIM12_Init+0xfc>)
 800065c:	f001 fe3a 	bl	80022d4 <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8000666:	f000 f92d 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <MX_TIM12_Init+0xfc>)
 800067a:	f002 fe03 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8000684:	f000 f91e 	bl	80008c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_TIM12_Init+0xfc>)
 80006a0:	f001 ff98 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM12_Init+0xd6>
  {
    Error_Handler();
 80006aa:	f000 f90b 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	2204      	movs	r2, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <MX_TIM12_Init+0xfc>)
 80006b6:	f001 ff8d 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM12_Init+0xec>
  {
    Error_Handler();
 80006c0:	f000 f900 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <MX_TIM12_Init+0xfc>)
 80006c6:	f000 f973 	bl	80009b0 <HAL_TIM_MspPostInit>

}
 80006ca:	bf00      	nop
 80006cc:	3738      	adds	r7, #56	; 0x38
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	240000c4 	.word	0x240000c4
 80006d8:	40001800 	.word	0x40001800

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	4b6e      	ldr	r3, [pc, #440]	; (80008ac <MX_GPIO_Init+0x1d0>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	4a6c      	ldr	r2, [pc, #432]	; (80008ac <MX_GPIO_Init+0x1d0>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000702:	4b6a      	ldr	r3, [pc, #424]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000708:	f003 0320 	and.w	r3, r3, #32
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000710:	4b66      	ldr	r3, [pc, #408]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	4a65      	ldr	r2, [pc, #404]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000720:	4b62      	ldr	r3, [pc, #392]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b5f      	ldr	r3, [pc, #380]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	4a5d      	ldr	r2, [pc, #372]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073e:	4b5b      	ldr	r3, [pc, #364]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	4b57      	ldr	r3, [pc, #348]	; (80008ac <MX_GPIO_Init+0x1d0>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	4a56      	ldr	r2, [pc, #344]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075c:	4b53      	ldr	r3, [pc, #332]	; (80008ac <MX_GPIO_Init+0x1d0>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <MX_GPIO_Init+0x1d0>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a4e      	ldr	r2, [pc, #312]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <MX_GPIO_Init+0x1d0>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <MX_GPIO_Init+0x1d0>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a47      	ldr	r2, [pc, #284]	; (80008ac <MX_GPIO_Init+0x1d0>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b44      	ldr	r3, [pc, #272]	; (80008ac <MX_GPIO_Init+0x1d0>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_GPIO_Init+0x1d0>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <MX_GPIO_Init+0x1d0>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <MX_GPIO_Init+0x1d0>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN2_3_GPIO_Port, BIN2_3_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ca:	4839      	ldr	r0, [pc, #228]	; (80008b0 <MX_GPIO_Init+0x1d4>)
 80007cc:	f000 fd7e 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN1_2_Pin|BIN2_2_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	210c      	movs	r1, #12
 80007d4:	4837      	ldr	r0, [pc, #220]	; (80008b4 <MX_GPIO_Init+0x1d8>)
 80007d6:	f000 fd79 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN2_3_Pin|BIN1_3_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2103      	movs	r1, #3
 80007de:	4836      	ldr	r0, [pc, #216]	; (80008b8 <MX_GPIO_Init+0x1dc>)
 80007e0:	f000 fd74 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nSleep_1_Pin|nSleep_2_Pin|nSleep_3_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80007ea:	4834      	ldr	r0, [pc, #208]	; (80008bc <MX_GPIO_Init+0x1e0>)
 80007ec:	f000 fd6e 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIN1_3_GPIO_Port, AIN1_3_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	4832      	ldr	r0, [pc, #200]	; (80008c0 <MX_GPIO_Init+0x1e4>)
 80007f6:	f000 fd69 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BIN2_3_Pin */
  GPIO_InitStruct.Pin = BIN2_3_Pin;
 80007fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BIN2_3_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4827      	ldr	r0, [pc, #156]	; (80008b0 <MX_GPIO_Init+0x1d4>)
 8000814:	f000 fbb2 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_2_Pin BIN2_2_Pin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin;
 8000818:	230c      	movs	r3, #12
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4821      	ldr	r0, [pc, #132]	; (80008b4 <MX_GPIO_Init+0x1d8>)
 8000830:	f000 fba4 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_3_Pin BIN1_3_Pin */
  GPIO_InitStruct.Pin = AIN2_3_Pin|BIN1_3_Pin;
 8000834:	2303      	movs	r3, #3
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <MX_GPIO_Init+0x1dc>)
 800084c:	f000 fb96 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : nSleep_1_Pin nSleep_2_Pin nSleep_3_Pin */
  GPIO_InitStruct.Pin = nSleep_1_Pin|nSleep_2_Pin|nSleep_3_Pin;
 8000850:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <MX_GPIO_Init+0x1e0>)
 800086a:	f000 fb87 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : nFault_1_Pin nFault_2_Pin nFault_3_Pin */
  GPIO_InitStruct.Pin = nFault_1_Pin|nFault_2_Pin|nFault_3_Pin;
 800086e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <MX_GPIO_Init+0x1e0>)
 8000884:	f000 fb7a 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : AIN1_3_Pin */
  GPIO_InitStruct.Pin = AIN1_3_Pin;
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AIN1_3_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <MX_GPIO_Init+0x1e4>)
 80008a0:	f000 fb6c 	bl	8000f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a4:	bf00      	nop
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58021400 	.word	0x58021400
 80008b4:	58020000 	.word	0x58020000
 80008b8:	58020400 	.word	0x58020400
 80008bc:	58021000 	.word	0x58021000
 80008c0:	58020800 	.word	0x58020800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_MspInit+0x30>)
 80008d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008dc:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_MspInit+0x30>)
 80008de:	f043 0302 	orr.w	r3, r3, #2
 80008e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_MspInit+0x30>)
 80008e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	58024400 	.word	0x58024400

08000904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <HAL_TIM_Base_MspInit+0x9c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10f      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000934:	e030      	b.n	8000998 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM5)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <HAL_TIM_Base_MspInit+0xa4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d117      	bne.n	8000970 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2032      	movs	r0, #50	; 0x32
 8000964:	f000 fad5 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000968:	2032      	movs	r0, #50	; 0x32
 800096a:	f000 faec 	bl	8000f46 <HAL_NVIC_EnableIRQ>
}
 800096e:	e013      	b.n	8000998 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM12)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_TIM_Base_MspInit+0xa8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10e      	bne.n	8000998 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 800097c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000980:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000986:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_TIM_Base_MspInit+0xa0>)
 800098c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	bf00      	nop
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40000800 	.word	0x40000800
 80009a4:	58024400 	.word	0x58024400
 80009a8:	40000c00 	.word	0x40000c00
 80009ac:	40001800 	.word	0x40001800

080009b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <HAL_TIM_MspPostInit+0xb8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d120      	bne.n	8000a14 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <HAL_TIM_MspPostInit+0xbc>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <HAL_TIM_MspPostInit+0xbc>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <HAL_TIM_MspPostInit+0xbc>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = BIN1_1_Pin|BIN2_1_Pin|AIN1_2_Pin|AIN2_2_Pin;
 80009f0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a02:	2302      	movs	r3, #2
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4818      	ldr	r0, [pc, #96]	; (8000a70 <HAL_TIM_MspPostInit+0xc0>)
 8000a0e:	f000 fab5 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000a12:	e024      	b.n	8000a5e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM12)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_TIM_MspPostInit+0xc4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d11f      	bne.n	8000a5e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <HAL_TIM_MspPostInit+0xbc>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_TIM_MspPostInit+0xbc>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_TIM_MspPostInit+0xbc>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AIN1_1_Pin|AIN2_1_Pin;
 8000a3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <HAL_TIM_MspPostInit+0xc8>)
 8000a5a:	f000 fa8f 	bl	8000f7c <HAL_GPIO_Init>
}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40000800 	.word	0x40000800
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020c00 	.word	0x58020c00
 8000a74:	40001800 	.word	0x40001800
 8000a78:	58020400 	.word	0x58020400

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f928 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <TIM5_IRQHandler+0x1c>)
 8000ad6:	f001 fc5e 	bl	8002396 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  flag=1;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <TIM5_IRQHandler+0x20>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Stop_IT(&htim5);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM5_IRQHandler+0x1c>)
 8000ae2:	f001 fbc8 	bl	8002276 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM5_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24000078 	.word	0x24000078
 8000af0:	24000110 	.word	0x24000110

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af8:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <SystemInit+0xd0>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <SystemInit+0xd0>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b08:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <SystemInit+0xd4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	2b06      	cmp	r3, #6
 8000b12:	d807      	bhi.n	8000b24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b14:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <SystemInit+0xd4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 030f 	bic.w	r3, r3, #15
 8000b1c:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <SystemInit+0xd4>)
 8000b1e:	f043 0307 	orr.w	r3, r3, #7
 8000b22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <SystemInit+0xd8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <SystemInit+0xd8>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <SystemInit+0xd8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <SystemInit+0xd8>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4924      	ldr	r1, [pc, #144]	; (8000bcc <SystemInit+0xd8>)
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <SystemInit+0xdc>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <SystemInit+0xd4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <SystemInit+0xd4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 030f 	bic.w	r3, r3, #15
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <SystemInit+0xd4>)
 8000b58:	f043 0307 	orr.w	r3, r3, #7
 8000b5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <SystemInit+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <SystemInit+0xd8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <SystemInit+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <SystemInit+0xd8>)
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <SystemInit+0xe0>)
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <SystemInit+0xd8>)
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <SystemInit+0xe4>)
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <SystemInit+0xd8>)
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <SystemInit+0xe8>)
 8000b80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <SystemInit+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <SystemInit+0xd8>)
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <SystemInit+0xe8>)
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <SystemInit+0xd8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <SystemInit+0xd8>)
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <SystemInit+0xe8>)
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <SystemInit+0xd8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <SystemInit+0xd8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <SystemInit+0xd8>)
 8000ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000baa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <SystemInit+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <SystemInit+0xec>)
 8000bb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	52002000 	.word	0x52002000
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bd4:	02020200 	.word	0x02020200
 8000bd8:	01ff0000 	.word	0x01ff0000
 8000bdc:	01010280 	.word	0x01010280
 8000be0:	52004000 	.word	0x52004000

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be8:	f7ff ff84 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 fbf9 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fb79 	bl	800030c <main>
  bx  lr
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c24:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c28:	08003480 	.word	0x08003480
  ldr r2, =_sbss
 8000c2c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c30:	24000118 	.word	0x24000118

08000c34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC3_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f000 f95c 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c44:	f001 f946 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_Init+0x68>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	4913      	ldr	r1, [pc, #76]	; (8000ca4 <HAL_Init+0x6c>)
 8000c56:	5ccb      	ldrb	r3, [r1, r3]
 8000c58:	f003 031f 	and.w	r3, r3, #31
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_Init+0x68>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_Init+0x6c>)
 8000c6c:	5cd3      	ldrb	r3, [r2, r3]
 8000c6e:	f003 031f 	and.w	r3, r3, #31
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <HAL_Init+0x70>)
 8000c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_Init+0x74>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f814 	bl	8000cb0 <HAL_InitTick>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e002      	b.n	8000c98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c92:	f7ff fe1d 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	08003468 	.word	0x08003468
 8000ca8:	24000004 	.word	0x24000004
 8000cac:	24000000 	.word	0x24000000

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_InitTick+0x60>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e021      	b.n	8000d08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <HAL_InitTick+0x64>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_InitTick+0x60>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f941 	bl	8000f62 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f90b 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x68>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2400000c 	.word	0x2400000c
 8000d14:	24000000 	.word	0x24000000
 8000d18:	24000008 	.word	0x24000008

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2400000c 	.word	0x2400000c
 8000d40:	24000114 	.word	0x24000114

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	24000114 	.word	0x24000114

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	05fa0000 	.word	0x05fa0000

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff40 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff33 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa4 	bl	8000eb8 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f8a:	4b86      	ldr	r3, [pc, #536]	; (80011a4 <HAL_GPIO_Init+0x228>)
 8000f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f8e:	e18c      	b.n	80012aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 817e 	beq.w	80012a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <HAL_GPIO_Init+0x44>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d017      	beq.n	800105e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d123      	bne.n	80010b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	69b9      	ldr	r1, [r7, #24]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80d8 	beq.w	80012a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_GPIO_Init+0x22c>)
 80010f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fa:	4a2b      	ldr	r2, [pc, #172]	; (80011a8 <HAL_GPIO_Init+0x22c>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_GPIO_Init+0x22c>)
 8001106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a26      	ldr	r2, [pc, #152]	; (80011ac <HAL_GPIO_Init+0x230>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x234>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d04a      	beq.n	80011d4 <HAL_GPIO_Init+0x258>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_GPIO_Init+0x238>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d02b      	beq.n	800119e <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x23c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x240>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x244>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x248>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_GPIO_Init+0x24c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x20e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_GPIO_Init+0x250>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x20a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_GPIO_Init+0x254>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x206>
 800117e:	2309      	movs	r3, #9
 8001180:	e029      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 8001182:	230a      	movs	r3, #10
 8001184:	e027      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 8001186:	2307      	movs	r3, #7
 8001188:	e025      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 800118a:	2306      	movs	r3, #6
 800118c:	e023      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 800118e:	2305      	movs	r3, #5
 8001190:	e021      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 8001192:	2304      	movs	r3, #4
 8001194:	e01f      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 8001196:	2303      	movs	r3, #3
 8001198:	e01d      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 800119a:	2302      	movs	r3, #2
 800119c:	e01b      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 800119e:	2301      	movs	r3, #1
 80011a0:	e019      	b.n	80011d6 <HAL_GPIO_Init+0x25a>
 80011a2:	bf00      	nop
 80011a4:	58000080 	.word	0x58000080
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58000400 	.word	0x58000400
 80011b0:	58020000 	.word	0x58020000
 80011b4:	58020400 	.word	0x58020400
 80011b8:	58020800 	.word	0x58020800
 80011bc:	58020c00 	.word	0x58020c00
 80011c0:	58021000 	.word	0x58021000
 80011c4:	58021400 	.word	0x58021400
 80011c8:	58021800 	.word	0x58021800
 80011cc:	58021c00 	.word	0x58021c00
 80011d0:	58022400 	.word	0x58022400
 80011d4:	2300      	movs	r3, #0
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e6:	4938      	ldr	r1, [pc, #224]	; (80012c8 <HAL_GPIO_Init+0x34c>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800121a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f ae6b 	bne.w	8000f90 <HAL_GPIO_Init+0x14>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3724      	adds	r7, #36	; 0x24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	58000400 	.word	0x58000400

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	2b06      	cmp	r3, #6
 8001312:	d00a      	beq.n	800132a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d001      	beq.n	8001326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e03f      	b.n	80013a6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e03d      	b.n	80013a6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001332:	491f      	ldr	r1, [pc, #124]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4313      	orrs	r3, r2
 8001338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800133a:	f7ff fd03 	bl	8000d44 <HAL_GetTick>
 800133e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001340:	e009      	b.n	8001356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001342:	f7ff fcff 	bl	8000d44 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001350:	d901      	bls.n	8001356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e027      	b.n	80013a6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001362:	d1ee      	bne.n	8001342 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b1e      	cmp	r3, #30
 8001368:	d008      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b2e      	cmp	r3, #46	; 0x2e
 800136e:	d005      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b1d      	cmp	r3, #29
 8001374:	d002      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b2d      	cmp	r3, #45	; 0x2d
 800137a:	d113      	bne.n	80013a4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800137c:	f7ff fce2 	bl	8000d44 <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001382:	e009      	b.n	8001398 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001384:	f7ff fcde 	bl	8000d44 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001392:	d901      	bls.n	8001398 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e006      	b.n	80013a6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0311 	and.w	r3, r3, #17
 80013a0:	2b11      	cmp	r3, #17
 80013a2:	d1ef      	bne.n	8001384 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	58024800 	.word	0x58024800

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e3c8      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8087 	beq.w	80014e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d4:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013de:	4b86      	ldr	r3, [pc, #536]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d007      	beq.n	80013fa <HAL_RCC_OscConfig+0x46>
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	2b18      	cmp	r3, #24
 80013ee:	d110      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d10b      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d06c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x12c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d168      	bne.n	80014e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e3a2      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x76>
 800141c:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a75      	ldr	r2, [pc, #468]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e02e      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a70      	ldr	r2, [pc, #448]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6e      	ldr	r3, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6d      	ldr	r2, [pc, #436]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0xbc>
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a67      	ldr	r2, [pc, #412]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a64      	ldr	r2, [pc, #400]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a60      	ldr	r2, [pc, #384]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5d      	ldr	r2, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc58 	bl	8000d44 <HAL_GetTick>
 8001494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fc54 	bl	8000d44 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e356      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xe4>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fc44 	bl	8000d44 <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fc40 	bl	8000d44 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e342      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x10c>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 808c 	beq.w	8001608 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_RCC_OscConfig+0x162>
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	2b18      	cmp	r3, #24
 800150a:	d137      	bne.n	800157c <HAL_RCC_OscConfig+0x1c8>
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d132      	bne.n	800157c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x17a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e314      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0219 	bic.w	r2, r3, #25
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	492f      	ldr	r1, [pc, #188]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fc00 	bl	8000d44 <HAL_GetTick>
 8001544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fbfc 	bl	8000d44 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e2fe      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	061b      	lsls	r3, r3, #24
 8001574:	4920      	ldr	r1, [pc, #128]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157a:	e045      	b.n	8001608 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d026      	beq.n	80015d2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 0219 	bic.w	r2, r3, #25
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4919      	ldr	r1, [pc, #100]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fbd5 	bl	8000d44 <HAL_GetTick>
 800159a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fbd1 	bl	8000d44 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e2d3      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	490b      	ldr	r1, [pc, #44]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e01a      	b.n	8001608 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_RCC_OscConfig+0x244>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fbb1 	bl	8000d44 <HAL_GetTick>
 80015e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fbad 	bl	8000d44 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d903      	bls.n	80015fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e2af      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
 80015f8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015fc:	4b96      	ldr	r3, [pc, #600]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ee      	bne.n	80015e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d06a      	beq.n	80016ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001614:	4b90      	ldr	r3, [pc, #576]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800161c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800161e:	4b8e      	ldr	r3, [pc, #568]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b08      	cmp	r3, #8
 8001628:	d007      	beq.n	800163a <HAL_RCC_OscConfig+0x286>
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b18      	cmp	r3, #24
 800162e:	d11b      	bne.n	8001668 <HAL_RCC_OscConfig+0x2b4>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d116      	bne.n	8001668 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800163a:	4b87      	ldr	r3, [pc, #540]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x29e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b80      	cmp	r3, #128	; 0x80
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e282      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001652:	4b81      	ldr	r3, [pc, #516]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	061b      	lsls	r3, r3, #24
 8001660:	497d      	ldr	r1, [pc, #500]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001662:	4313      	orrs	r3, r2
 8001664:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001666:	e040      	b.n	80016ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d023      	beq.n	80016b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001670:	4b79      	ldr	r3, [pc, #484]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a78      	ldr	r2, [pc, #480]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb62 	bl	8000d44 <HAL_GetTick>
 8001680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001684:	f7ff fb5e 	bl	8000d44 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e260      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001696:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016a2:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	061b      	lsls	r3, r3, #24
 80016b0:	4969      	ldr	r1, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60cb      	str	r3, [r1, #12]
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a66      	ldr	r2, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80016be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb3e 	bl	8000d44 <HAL_GetTick>
 80016c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016cc:	f7ff fb3a 	bl	8000d44 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e23c      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016de:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d036      	beq.n	8001764 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d019      	beq.n	8001732 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fe:	4b56      	ldr	r3, [pc, #344]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001702:	4a55      	ldr	r2, [pc, #340]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fb1b 	bl	8000d44 <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fb17 	bl	8000d44 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e219      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x35e>
 8001730:	e018      	b.n	8001764 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001732:	4b49      	ldr	r3, [pc, #292]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001736:	4a48      	ldr	r2, [pc, #288]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff fb01 	bl	8000d44 <HAL_GetTick>
 8001742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fafd 	bl	8000d44 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1ff      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	2b00      	cmp	r3, #0
 800176e:	d036      	beq.n	80017de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d019      	beq.n	80017ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001778:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a36      	ldr	r2, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800177e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001782:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001784:	f7ff fade 	bl	8000d44 <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800178c:	f7ff fada 	bl	8000d44 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1dc      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x3d8>
 80017aa:	e018      	b.n	80017de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a29      	ldr	r2, [pc, #164]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80017b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fac4 	bl	8000d44 <HAL_GetTick>
 80017bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c0:	f7ff fac0 	bl	8000d44 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1c2      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8086 	beq.w	80018f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x4a8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_RCC_OscConfig+0x4a8>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017f8:	f7ff faa4 	bl	8000d44 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001800:	f7ff faa0 	bl	8000d44 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1a2      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_OscConfig+0x4a8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x480>
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	e032      	b.n	800189a <HAL_RCC_OscConfig+0x4e6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <HAL_RCC_OscConfig+0x4ac>
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6713      	str	r3, [r2, #112]	; 0x70
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	4a02      	ldr	r2, [pc, #8]	; (8001858 <HAL_RCC_OscConfig+0x4a4>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	6713      	str	r3, [r2, #112]	; 0x70
 8001854:	e021      	b.n	800189a <HAL_RCC_OscConfig+0x4e6>
 8001856:	bf00      	nop
 8001858:	58024400 	.word	0x58024400
 800185c:	58024800 	.word	0x58024800
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d10c      	bne.n	8001882 <HAL_RCC_OscConfig+0x4ce>
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	4a7f      	ldr	r2, [pc, #508]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6713      	str	r3, [r2, #112]	; 0x70
 8001880:	e00b      	b.n	800189a <HAL_RCC_OscConfig+0x4e6>
 8001882:	4b7d      	ldr	r3, [pc, #500]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a7c      	ldr	r2, [pc, #496]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	4b7a      	ldr	r3, [pc, #488]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a79      	ldr	r2, [pc, #484]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d015      	beq.n	80018ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa4f 	bl	8000d44 <HAL_GetTick>
 80018a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff fa4b 	bl	8000d44 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e14b      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018c0:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ee      	beq.n	80018aa <HAL_RCC_OscConfig+0x4f6>
 80018cc:	e014      	b.n	80018f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff fa39 	bl	8000d44 <HAL_GetTick>
 80018d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff fa35 	bl	8000d44 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e135      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018ec:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ee      	bne.n	80018d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 812a 	beq.w	8001b56 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800190a:	2b18      	cmp	r3, #24
 800190c:	f000 80ba 	beq.w	8001a84 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	2b02      	cmp	r3, #2
 8001916:	f040 8095 	bne.w	8001a44 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a56      	ldr	r2, [pc, #344]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff fa0d 	bl	8000d44 <HAL_GetTick>
 800192a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fa09 	bl	8000d44 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e10b      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001940:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 800194e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001950:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_OscConfig+0x6c8>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	430a      	orrs	r2, r1
 8001960:	4945      	ldr	r1, [pc, #276]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	628b      	str	r3, [r1, #40]	; 0x28
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	3b01      	subs	r3, #1
 800196c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001974:	3b01      	subs	r3, #1
 8001976:	025b      	lsls	r3, r3, #9
 8001978:	b29b      	uxth	r3, r3
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	3b01      	subs	r3, #1
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	3b01      	subs	r3, #1
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001996:	4938      	ldr	r1, [pc, #224]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	4a35      	ldr	r2, [pc, #212]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_RCC_OscConfig+0x6cc>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019b4:	00d2      	lsls	r2, r2, #3
 80019b6:	4930      	ldr	r1, [pc, #192]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	f023 020c 	bic.w	r2, r3, #12
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	492b      	ldr	r1, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f023 0202 	bic.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 80019fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f992 	bl	8000d44 <HAL_GetTick>
 8001a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f98e 	bl	8000d44 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e090      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x670>
 8001a42:	e088      	b.n	8001b56 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f978 	bl	8000d44 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f974 	bl	8000d44 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e076      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a6a:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_RCC_OscConfig+0x6c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x6a4>
 8001a76:	e06e      	b.n	8001b56 <HAL_RCC_OscConfig+0x7a2>
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	fffffc0c 	.word	0xfffffc0c
 8001a80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a8a:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d031      	beq.n	8001afc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0203 	and.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d12a      	bne.n	8001afc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d122      	bne.n	8001afc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11a      	bne.n	8001afc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	0a5b      	lsrs	r3, r3, #9
 8001aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	0e1b      	lsrs	r3, r3, #24
 8001aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e02b      	b.n	8001b58 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d01f      	beq.n	8001b56 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b22:	f7ff f90f 	bl	8000d44 <HAL_GetTick>
 8001b26:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001b28:	bf00      	nop
 8001b2a:	f7ff f90b 	bl	8000d44 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d0f9      	beq.n	8001b2a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_RCC_OscConfig+0x7b0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b42:	00d2      	lsls	r2, r2, #3
 8001b44:	4906      	ldr	r1, [pc, #24]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_RCC_OscConfig+0x7ac>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	58024400 	.word	0x58024400
 8001b64:	ffff0007 	.word	0xffff0007

08001b68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e19c      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b8a      	ldr	r3, [pc, #552]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b87      	ldr	r3, [pc, #540]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 020f 	bic.w	r2, r3, #15
 8001b92:	4985      	ldr	r1, [pc, #532]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b83      	ldr	r3, [pc, #524]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e184      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d908      	bls.n	8001bda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bc8:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4975      	ldr	r1, [pc, #468]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	4b70      	ldr	r3, [pc, #448]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d908      	bls.n	8001c08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	496a      	ldr	r1, [pc, #424]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d010      	beq.n	8001c36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	4b64      	ldr	r3, [pc, #400]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d908      	bls.n	8001c36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	495e      	ldr	r1, [pc, #376]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d010      	beq.n	8001c64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d908      	bls.n	8001c64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4953      	ldr	r1, [pc, #332]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d908      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f023 020f 	bic.w	r2, r3, #15
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4947      	ldr	r1, [pc, #284]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d055      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	4940      	ldr	r1, [pc, #256]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb8:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d121      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0f6      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d115      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0ea      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0de      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf8:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d6      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f023 0207 	bic.w	r2, r3, #7
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4925      	ldr	r1, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d1a:	f7ff f813 	bl	8000d44 <HAL_GetTick>
 8001d1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f7ff f80f 	bl	8000d44 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0be      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d1eb      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d010      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d208      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f023 020f 	bic.w	r2, r3, #15
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <HAL_RCC_ClockConfig+0x244>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d214      	bcs.n	8001db0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 020f 	bic.w	r2, r3, #15
 8001d8e:	4906      	ldr	r1, [pc, #24]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <HAL_RCC_ClockConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e086      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x34e>
 8001da8:	52002000 	.word	0x52002000
 8001dac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d208      	bcs.n	8001dde <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dcc:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4939      	ldr	r1, [pc, #228]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d010      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d208      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	492e      	ldr	r1, [pc, #184]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d208      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d208      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4917      	ldr	r1, [pc, #92]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e68:	f000 f834 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x35c>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_RCC_ClockConfig+0x358>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <HAL_RCC_ClockConfig+0x35c>)
 8001e90:	5cd3      	ldrb	r3, [r2, r3]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x360>)
 8001e9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x364>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x368>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff00 	bl	8000cb0 <HAL_InitTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	58024400 	.word	0x58024400
 8001ec4:	08003468 	.word	0x08003468
 8001ec8:	24000004 	.word	0x24000004
 8001ecc:	24000000 	.word	0x24000000
 8001ed0:	24000008 	.word	0x24000008

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eda:	4bb3      	ldr	r3, [pc, #716]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ee2:	2b18      	cmp	r3, #24
 8001ee4:	f200 8155 	bhi.w	8002192 <HAL_RCC_GetSysClockFreq+0x2be>
 8001ee8:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eee:	bf00      	nop
 8001ef0:	08001f55 	.word	0x08001f55
 8001ef4:	08002193 	.word	0x08002193
 8001ef8:	08002193 	.word	0x08002193
 8001efc:	08002193 	.word	0x08002193
 8001f00:	08002193 	.word	0x08002193
 8001f04:	08002193 	.word	0x08002193
 8001f08:	08002193 	.word	0x08002193
 8001f0c:	08002193 	.word	0x08002193
 8001f10:	08001f7b 	.word	0x08001f7b
 8001f14:	08002193 	.word	0x08002193
 8001f18:	08002193 	.word	0x08002193
 8001f1c:	08002193 	.word	0x08002193
 8001f20:	08002193 	.word	0x08002193
 8001f24:	08002193 	.word	0x08002193
 8001f28:	08002193 	.word	0x08002193
 8001f2c:	08002193 	.word	0x08002193
 8001f30:	08001f81 	.word	0x08001f81
 8001f34:	08002193 	.word	0x08002193
 8001f38:	08002193 	.word	0x08002193
 8001f3c:	08002193 	.word	0x08002193
 8001f40:	08002193 	.word	0x08002193
 8001f44:	08002193 	.word	0x08002193
 8001f48:	08002193 	.word	0x08002193
 8001f4c:	08002193 	.word	0x08002193
 8001f50:	08001f87 	.word	0x08001f87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f54:	4b94      	ldr	r3, [pc, #592]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f60:	4b91      	ldr	r3, [pc, #580]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	4a90      	ldr	r2, [pc, #576]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001f72:	e111      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f74:	4b8d      	ldr	r3, [pc, #564]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f76:	61bb      	str	r3, [r7, #24]
      break;
 8001f78:	e10e      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f7c:	61bb      	str	r3, [r7, #24]
      break;
 8001f7e:	e10b      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f80:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f82:	61bb      	str	r3, [r7, #24]
      break;
 8001f84:	e108      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f90:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f9c:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001fa6:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80e1 	beq.w	800218c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	f000 8083 	beq.w	80020d8 <HAL_RCC_GetSysClockFreq+0x204>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	f200 80a1 	bhi.w	800211c <HAL_RCC_GetSysClockFreq+0x248>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x114>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d056      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fe6:	e099      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fe8:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d02d      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ff4:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	4a6b      	ldr	r2, [pc, #428]	; (80021ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
 8002004:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800201e:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800202e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002032:	eddf 5a61 	vldr	s11, [pc, #388]	; 80021b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800203a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800203e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800204e:	e087      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80021bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800205e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002062:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002072:	ed97 6a02 	vldr	s12, [r7, #8]
 8002076:	eddf 5a50 	vldr	s11, [pc, #320]	; 80021b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800207a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800207e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002092:	e065      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80021c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a6:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80021b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020d6:	e043      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80021c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80020e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ea:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80020fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80021b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800210a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800210e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800211a:	e021      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002126:	eddf 6a26 	vldr	s13, [pc, #152]	; 80021c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800212a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002142:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80021b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800214a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800215e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	0a5b      	lsrs	r3, r3, #9
 8002166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800216a:	3301      	adds	r3, #1
 800216c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002178:	edd7 6a07 	vldr	s13, [r7, #28]
 800217c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002184:	ee17 3a90 	vmov	r3, s15
 8002188:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800218a:	e005      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
      break;
 8002190:	e002      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002194:	61bb      	str	r3, [r7, #24]
      break;
 8002196:	bf00      	nop
  }

  return sysclockfreq;
 8002198:	69bb      	ldr	r3, [r7, #24]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	58024400 	.word	0x58024400
 80021ac:	03d09000 	.word	0x03d09000
 80021b0:	003d0900 	.word	0x003d0900
 80021b4:	017d7840 	.word	0x017d7840
 80021b8:	46000000 	.word	0x46000000
 80021bc:	4c742400 	.word	0x4c742400
 80021c0:	4a742400 	.word	0x4a742400
 80021c4:	4bbebc20 	.word	0x4bbebc20

080021c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e049      	b.n	800226e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fb88 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 fc22 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	f241 1311 	movw	r3, #4369	; 0x1111
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_TIM_Base_Stop_IT+0x48>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	f240 4344 	movw	r3, #1092	; 0x444
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_TIM_Base_Stop_IT+0x48>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e049      	b.n	800237a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f841 	bl	8002382 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f000 fb9c 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d122      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d11b      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f06f 0202 	mvn.w	r2, #2
 80023c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fb1b 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 80023de:	e005      	b.n	80023ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fb0d 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fb1e 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d122      	bne.n	8002446 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b04      	cmp	r3, #4
 800240c:	d11b      	bne.n	8002446 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0204 	mvn.w	r2, #4
 8002416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 faf1 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 8002432:	e005      	b.n	8002440 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fae3 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 faf4 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b08      	cmp	r3, #8
 8002452:	d122      	bne.n	800249a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11b      	bne.n	800249a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0208 	mvn.w	r2, #8
 800246a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2204      	movs	r2, #4
 8002470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fac7 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 8002486:	e005      	b.n	8002494 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fab9 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 faca 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d122      	bne.n	80024ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d11b      	bne.n	80024ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0210 	mvn.w	r2, #16
 80024be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2208      	movs	r2, #8
 80024c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa9d 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 80024da:	e005      	b.n	80024e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fa8f 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 faa0 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10e      	bne.n	800251a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0201 	mvn.w	r2, #1
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fa69 	bl	80029ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002524:	2b80      	cmp	r3, #128	; 0x80
 8002526:	d10e      	bne.n	8002546 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d107      	bne.n	8002546 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 ff45 	bl	80033d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 ff38 	bl	80033e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d10e      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258c:	2b40      	cmp	r3, #64	; 0x40
 800258e:	d107      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa4e 	bl	8002a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d10e      	bne.n	80025cc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d107      	bne.n	80025cc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0220 	mvn.w	r2, #32
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fef8 	bl	80033bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0ff      	b.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b14      	cmp	r3, #20
 80025fe:	f200 80f0 	bhi.w	80027e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	0800265d 	.word	0x0800265d
 800260c:	080027e3 	.word	0x080027e3
 8002610:	080027e3 	.word	0x080027e3
 8002614:	080027e3 	.word	0x080027e3
 8002618:	0800269d 	.word	0x0800269d
 800261c:	080027e3 	.word	0x080027e3
 8002620:	080027e3 	.word	0x080027e3
 8002624:	080027e3 	.word	0x080027e3
 8002628:	080026df 	.word	0x080026df
 800262c:	080027e3 	.word	0x080027e3
 8002630:	080027e3 	.word	0x080027e3
 8002634:	080027e3 	.word	0x080027e3
 8002638:	0800271f 	.word	0x0800271f
 800263c:	080027e3 	.word	0x080027e3
 8002640:	080027e3 	.word	0x080027e3
 8002644:	080027e3 	.word	0x080027e3
 8002648:	08002761 	.word	0x08002761
 800264c:	080027e3 	.word	0x080027e3
 8002650:	080027e3 	.word	0x080027e3
 8002654:	080027e3 	.word	0x080027e3
 8002658:	080027a1 	.word	0x080027a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fa9a 	bl	8002b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0208 	orr.w	r2, r2, #8
 8002676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0204 	bic.w	r2, r2, #4
 8002686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6999      	ldr	r1, [r3, #24]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	619a      	str	r2, [r3, #24]
      break;
 800269a:	e0a5      	b.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fb0a 	bl	8002cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6999      	ldr	r1, [r3, #24]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	021a      	lsls	r2, r3, #8
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	619a      	str	r2, [r3, #24]
      break;
 80026dc:	e084      	b.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fb73 	bl	8002dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0208 	orr.w	r2, r2, #8
 80026f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0204 	bic.w	r2, r2, #4
 8002708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69d9      	ldr	r1, [r3, #28]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	61da      	str	r2, [r3, #28]
      break;
 800271c:	e064      	b.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fbdb 	bl	8002ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69d9      	ldr	r1, [r3, #28]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	021a      	lsls	r2, r3, #8
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	61da      	str	r2, [r3, #28]
      break;
 800275e:	e043      	b.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fc24 	bl	8002fb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800279e:	e023      	b.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fc68 	bl	800307c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027e0:	e002      	b.n	80027e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
      break;
 80027e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop

080027fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_TIM_ConfigClockSource+0x1c>
 8002814:	2302      	movs	r3, #2
 8002816:	e0dc      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x1d6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_TIM_ConfigClockSource+0x1e0>)
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f000 80a9 	beq.w	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002854:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f200 80ae 	bhi.w	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800285c:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	f000 80a1 	beq.w	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002864:	4a5f      	ldr	r2, [pc, #380]	; (80029e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	f200 80a6 	bhi.w	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800286c:	4a5e      	ldr	r2, [pc, #376]	; (80029e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800286e:	4293      	cmp	r3, r2
 8002870:	f000 8099 	beq.w	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002874:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002876:	4293      	cmp	r3, r2
 8002878:	f200 809e 	bhi.w	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800287c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002880:	f000 8091 	beq.w	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002884:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002888:	f200 8096 	bhi.w	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800288c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002890:	f000 8089 	beq.w	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002898:	f200 808e 	bhi.w	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800289c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a0:	d03e      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x124>
 80028a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a6:	f200 8087 	bhi.w	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	f000 8086 	beq.w	80029be <HAL_TIM_ConfigClockSource+0x1c2>
 80028b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b6:	d87f      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028b8:	2b70      	cmp	r3, #112	; 0x70
 80028ba:	d01a      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0xf6>
 80028bc:	2b70      	cmp	r3, #112	; 0x70
 80028be:	d87b      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028c0:	2b60      	cmp	r3, #96	; 0x60
 80028c2:	d050      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x16a>
 80028c4:	2b60      	cmp	r3, #96	; 0x60
 80028c6:	d877      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028c8:	2b50      	cmp	r3, #80	; 0x50
 80028ca:	d03c      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x14a>
 80028cc:	2b50      	cmp	r3, #80	; 0x50
 80028ce:	d873      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d058      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x18a>
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d86f      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028d8:	2b30      	cmp	r3, #48	; 0x30
 80028da:	d064      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80028dc:	2b30      	cmp	r3, #48	; 0x30
 80028de:	d86b      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d060      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d867      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d05c      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d05a      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80028f0:	e062      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002902:	f000 fc9f 	bl	8003244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	609a      	str	r2, [r3, #8]
      break;
 800291e:	e04f      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002930:	f000 fc88 	bl	8003244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002942:	609a      	str	r2, [r3, #8]
      break;
 8002944:	e03c      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	461a      	mov	r2, r3
 8002954:	f000 fbf8 	bl	8003148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2150      	movs	r1, #80	; 0x50
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fc52 	bl	8003208 <TIM_ITRx_SetConfig>
      break;
 8002964:	e02c      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002972:	461a      	mov	r2, r3
 8002974:	f000 fc17 	bl	80031a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2160      	movs	r1, #96	; 0x60
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fc42 	bl	8003208 <TIM_ITRx_SetConfig>
      break;
 8002984:	e01c      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	461a      	mov	r2, r3
 8002994:	f000 fbd8 	bl	8003148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2140      	movs	r1, #64	; 0x40
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fc32 	bl	8003208 <TIM_ITRx_SetConfig>
      break;
 80029a4:	e00c      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f000 fc29 	bl	8003208 <TIM_ITRx_SetConfig>
      break;
 80029b6:	e003      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e000      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80029be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	ffceff88 	.word	0xffceff88
 80029e0:	00100040 	.word	0x00100040
 80029e4:	00100030 	.word	0x00100030
 80029e8:	00100020 	.word	0x00100020

080029ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a44      	ldr	r2, [pc, #272]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d00f      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a41      	ldr	r2, [pc, #260]	; (8002b78 <TIM_Base_SetConfig+0x128>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a40      	ldr	r2, [pc, #256]	; (8002b7c <TIM_Base_SetConfig+0x12c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3f      	ldr	r2, [pc, #252]	; (8002b80 <TIM_Base_SetConfig+0x130>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3e      	ldr	r2, [pc, #248]	; (8002b84 <TIM_Base_SetConfig+0x134>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d108      	bne.n	8002aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d027      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d023      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <TIM_Base_SetConfig+0x128>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01f      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2f      	ldr	r2, [pc, #188]	; (8002b7c <TIM_Base_SetConfig+0x12c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01b      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2e      	ldr	r2, [pc, #184]	; (8002b80 <TIM_Base_SetConfig+0x130>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d017      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <TIM_Base_SetConfig+0x134>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a2c      	ldr	r2, [pc, #176]	; (8002b88 <TIM_Base_SetConfig+0x138>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00f      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <TIM_Base_SetConfig+0x13c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <TIM_Base_SetConfig+0x140>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <TIM_Base_SetConfig+0x144>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_Base_SetConfig+0xaa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a28      	ldr	r2, [pc, #160]	; (8002b98 <TIM_Base_SetConfig+0x148>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00f      	beq.n	8002b58 <TIM_Base_SetConfig+0x108>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <TIM_Base_SetConfig+0x134>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <TIM_Base_SetConfig+0x108>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <TIM_Base_SetConfig+0x138>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_Base_SetConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <TIM_Base_SetConfig+0x13c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0x108>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <TIM_Base_SetConfig+0x140>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d103      	bne.n	8002b60 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	615a      	str	r2, [r3, #20]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	40000c00 	.word	0x40000c00
 8002b84:	40010400 	.word	0x40010400
 8002b88:	40014000 	.word	0x40014000
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40014800 	.word	0x40014800
 8002b94:	4000e000 	.word	0x4000e000
 8002b98:	4000e400 	.word	0x4000e400

08002b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0201 	bic.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <TIM_OC1_SetConfig+0x108>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f023 0302 	bic.w	r3, r3, #2
 8002be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <TIM_OC1_SetConfig+0x10c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00f      	beq.n	8002c18 <TIM_OC1_SetConfig+0x7c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a2c      	ldr	r2, [pc, #176]	; (8002cac <TIM_OC1_SetConfig+0x110>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00b      	beq.n	8002c18 <TIM_OC1_SetConfig+0x7c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a2b      	ldr	r2, [pc, #172]	; (8002cb0 <TIM_OC1_SetConfig+0x114>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <TIM_OC1_SetConfig+0x7c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <TIM_OC1_SetConfig+0x118>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <TIM_OC1_SetConfig+0x7c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a29      	ldr	r2, [pc, #164]	; (8002cb8 <TIM_OC1_SetConfig+0x11c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10c      	bne.n	8002c32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0308 	bic.w	r3, r3, #8
 8002c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <TIM_OC1_SetConfig+0x10c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00f      	beq.n	8002c5a <TIM_OC1_SetConfig+0xbe>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <TIM_OC1_SetConfig+0x110>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <TIM_OC1_SetConfig+0xbe>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <TIM_OC1_SetConfig+0x114>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <TIM_OC1_SetConfig+0xbe>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <TIM_OC1_SetConfig+0x118>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_OC1_SetConfig+0xbe>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <TIM_OC1_SetConfig+0x11c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	fffeff8f 	.word	0xfffeff8f
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	40014400 	.word	0x40014400
 8002cb8:	40014800 	.word	0x40014800

08002cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f023 0210 	bic.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <TIM_OC2_SetConfig+0xfc>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0320 	bic.w	r3, r3, #32
 8002d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a29      	ldr	r2, [pc, #164]	; (8002dbc <TIM_OC2_SetConfig+0x100>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_OC2_SetConfig+0x68>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <TIM_OC2_SetConfig+0x104>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10d      	bne.n	8002d40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <TIM_OC2_SetConfig+0x100>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00f      	beq.n	8002d68 <TIM_OC2_SetConfig+0xac>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <TIM_OC2_SetConfig+0x104>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <TIM_OC2_SetConfig+0xac>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <TIM_OC2_SetConfig+0x108>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <TIM_OC2_SetConfig+0xac>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <TIM_OC2_SetConfig+0x10c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_OC2_SetConfig+0xac>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <TIM_OC2_SetConfig+0x110>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d113      	bne.n	8002d90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	feff8fff 	.word	0xfeff8fff
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40010400 	.word	0x40010400
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800

08002dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <TIM_OC3_SetConfig+0xf8>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a28      	ldr	r2, [pc, #160]	; (8002ecc <TIM_OC3_SetConfig+0xfc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_OC3_SetConfig+0x66>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <TIM_OC3_SetConfig+0x100>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10d      	bne.n	8002e52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <TIM_OC3_SetConfig+0xfc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <TIM_OC3_SetConfig+0xaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <TIM_OC3_SetConfig+0x100>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_OC3_SetConfig+0xaa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <TIM_OC3_SetConfig+0x104>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_OC3_SetConfig+0xaa>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <TIM_OC3_SetConfig+0x108>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_OC3_SetConfig+0xaa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <TIM_OC3_SetConfig+0x10c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d113      	bne.n	8002ea2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	fffeff8f 	.word	0xfffeff8f
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40010400 	.word	0x40010400
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800

08002ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <TIM_OC4_SetConfig+0xbc>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	031b      	lsls	r3, r3, #12
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <TIM_OC4_SetConfig+0xc0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00f      	beq.n	8002f60 <TIM_OC4_SetConfig+0x80>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <TIM_OC4_SetConfig+0xc4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <TIM_OC4_SetConfig+0x80>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <TIM_OC4_SetConfig+0xc8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_OC4_SetConfig+0x80>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a16      	ldr	r2, [pc, #88]	; (8002fac <TIM_OC4_SetConfig+0xcc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_OC4_SetConfig+0x80>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <TIM_OC4_SetConfig+0xd0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d109      	bne.n	8002f74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	621a      	str	r2, [r3, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	feff8fff 	.word	0xfeff8fff
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40010400 	.word	0x40010400
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800

08002fb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4b21      	ldr	r3, [pc, #132]	; (8003064 <TIM_OC5_SetConfig+0xb0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ff4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	041b      	lsls	r3, r3, #16
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <TIM_OC5_SetConfig+0xb4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00f      	beq.n	800302a <TIM_OC5_SetConfig+0x76>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a17      	ldr	r2, [pc, #92]	; (800306c <TIM_OC5_SetConfig+0xb8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00b      	beq.n	800302a <TIM_OC5_SetConfig+0x76>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a16      	ldr	r2, [pc, #88]	; (8003070 <TIM_OC5_SetConfig+0xbc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <TIM_OC5_SetConfig+0x76>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a15      	ldr	r2, [pc, #84]	; (8003074 <TIM_OC5_SetConfig+0xc0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_OC5_SetConfig+0x76>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <TIM_OC5_SetConfig+0xc4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d109      	bne.n	800303e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003030:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	fffeff8f 	.word	0xfffeff8f
 8003068:	40010000 	.word	0x40010000
 800306c:	40010400 	.word	0x40010400
 8003070:	40014000 	.word	0x40014000
 8003074:	40014400 	.word	0x40014400
 8003078:	40014800 	.word	0x40014800

0800307c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4b22      	ldr	r3, [pc, #136]	; (8003130 <TIM_OC6_SetConfig+0xb4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	051b      	lsls	r3, r3, #20
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a19      	ldr	r2, [pc, #100]	; (8003134 <TIM_OC6_SetConfig+0xb8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00f      	beq.n	80030f4 <TIM_OC6_SetConfig+0x78>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a18      	ldr	r2, [pc, #96]	; (8003138 <TIM_OC6_SetConfig+0xbc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_OC6_SetConfig+0x78>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <TIM_OC6_SetConfig+0xc0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_OC6_SetConfig+0x78>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a16      	ldr	r2, [pc, #88]	; (8003140 <TIM_OC6_SetConfig+0xc4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_OC6_SetConfig+0x78>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <TIM_OC6_SetConfig+0xc8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d109      	bne.n	8003108 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	029b      	lsls	r3, r3, #10
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	feff8fff 	.word	0xfeff8fff
 8003134:	40010000 	.word	0x40010000
 8003138:	40010400 	.word	0x40010400
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800

08003148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f023 0201 	bic.w	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 030a 	bic.w	r3, r3, #10
 8003184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0210 	bic.w	r2, r3, #16
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	031b      	lsls	r3, r3, #12
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <TIM_ITRx_SetConfig+0x38>)
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	f043 0307 	orr.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	609a      	str	r2, [r3, #8]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	ffcfff8f 	.word	0xffcfff8f

08003244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800325e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	431a      	orrs	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	609a      	str	r2, [r3, #8]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e077      	b.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a35      	ldr	r2, [pc, #212]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a25      	ldr	r2, [pc, #148]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02c      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d027      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d022      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d01d      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1a      	ldr	r2, [pc, #104]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1a      	ldr	r2, [pc, #104]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10c      	bne.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	4313      	orrs	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40010000 	.word	0x40010000
 800339c:	40010400 	.word	0x40010400
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40001800 	.word	0x40001800
 80033b0:	40014000 	.word	0x40014000
 80033b4:	4000e000 	.word	0x4000e000
 80033b8:	4000e400 	.word	0x4000e400

080033bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <memset>:
 80033f8:	4402      	add	r2, r0
 80033fa:	4603      	mov	r3, r0
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d100      	bne.n	8003402 <memset+0xa>
 8003400:	4770      	bx	lr
 8003402:	f803 1b01 	strb.w	r1, [r3], #1
 8003406:	e7f9      	b.n	80033fc <memset+0x4>

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f000 f818 	bl	8003450 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08003478 	.word	0x08003478
 8003444:	08003478 	.word	0x08003478
 8003448:	08003478 	.word	0x08003478
 800344c:	0800347c 	.word	0x0800347c

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
