
gyroscope_adcs_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005138  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c8  08005408  08005408  00015408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f8  24000078  08006d4c  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000170  08006d4c  00020170  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cfdc  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b48  00000000  00000000  0002d07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a48  00000000  00000000  0002ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000970  00000000  00000000  0002f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030b1d  00000000  00000000  0002ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000de3d  00000000  00000000  00060a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013847d  00000000  00000000  0006e8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a6d57  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002bdc  00000000  00000000  001a6da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080053f0 	.word	0x080053f0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	080053f0 	.word	0x080053f0

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fa4c 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f82e 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f8ca 	bl	80004b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000320:	f000 f888 	bl	8000434 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (BSP_Gyroscope_Init(&hi2c1) == ERROR)
 8000324:	4811      	ldr	r0, [pc, #68]	; (800036c <main+0x5c>)
 8000326:	f003 fdd7 	bl	8003ed8 <BSP_Gyroscope_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b01      	cmp	r3, #1
 800032e:	d101      	bne.n	8000334 <main+0x24>
  {
	  Error_Handler();
 8000330:	f000 f8ea 	bl	8000508 <Error_Handler>
  }
  if (BSP_Gyroscope_SelfTest(&hi2c1)==ERROR)
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <main+0x5c>)
 8000336:	f003 fdf3 	bl	8003f20 <BSP_Gyroscope_SelfTest>
 800033a:	4603      	mov	r3, r0
 800033c:	2b01      	cmp	r3, #1
 800033e:	d101      	bne.n	8000344 <main+0x34>
  {
	  Error_Handler();
 8000340:	f000 f8e2 	bl	8000508 <Error_Handler>
  }
  if (BSP_Gyroscope_ReadRegister(&hi2c1,0x41, &val) == ERROR)
 8000344:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <main+0x60>)
 8000346:	2141      	movs	r1, #65	; 0x41
 8000348:	4808      	ldr	r0, [pc, #32]	; (800036c <main+0x5c>)
 800034a:	f004 f8a1 	bl	8004490 <BSP_Gyroscope_ReadRegister>
 800034e:	4603      	mov	r3, r0
 8000350:	2b01      	cmp	r3, #1
 8000352:	d101      	bne.n	8000358 <main+0x48>
  {
	  Error_Handler();
 8000354:	f000 f8d8 	bl	8000508 <Error_Handler>
  }
  if (BSP_Gyroscope_GetValues(&hi2c1, &gyro_data) == ERROR)
 8000358:	4906      	ldr	r1, [pc, #24]	; (8000374 <main+0x64>)
 800035a:	4804      	ldr	r0, [pc, #16]	; (800036c <main+0x5c>)
 800035c:	f004 f8dc 	bl	8004518 <BSP_Gyroscope_GetValues>
 8000360:	4603      	mov	r3, r0
 8000362:	2b01      	cmp	r3, #1
 8000364:	d101      	bne.n	800036a <main+0x5a>
  {
	  Error_Handler();
 8000366:	f000 f8cf 	bl	8000508 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036a:	e7fe      	b.n	800036a <main+0x5a>
 800036c:	24000094 	.word	0x24000094
 8000370:	240000e8 	.word	0x240000e8
 8000374:	240000f0 	.word	0x240000f0

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	; 0x70
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000382:	224c      	movs	r2, #76	; 0x4c
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f004 fd30 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2220      	movs	r2, #32
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f004 fd2a 	bl	8004dec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000398:	2004      	movs	r0, #4
 800039a:	f001 fb35 	bl	8001a08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	4b23      	ldr	r3, [pc, #140]	; (8000430 <SystemClock_Config+0xb8>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <SystemClock_Config+0xb8>)
 80003ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <SystemClock_Config+0xb8>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003be:	bf00      	nop
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <SystemClock_Config+0xb8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003cc:	d1f8      	bne.n	80003c0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003d6:	2340      	movs	r3, #64	; 0x40
 80003d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003da:	2300      	movs	r3, #0
 80003dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fb6a 	bl	8001abc <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ee:	f000 f88b 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	233f      	movs	r3, #63	; 0x3f
 80003f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000402:	2340      	movs	r3, #64	; 0x40
 8000404:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000406:	2340      	movs	r3, #64	; 0x40
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800040a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000410:	2340      	movs	r3, #64	; 0x40
 8000412:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2101      	movs	r1, #1
 8000418:	4618      	mov	r0, r3
 800041a:	f001 ff29 	bl	8002270 <HAL_RCC_ClockConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000424:	f000 f870 	bl	8000508 <Error_Handler>
  }
}
 8000428:	bf00      	nop
 800042a:	3770      	adds	r7, #112	; 0x70
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	58024800 	.word	0x58024800

08000434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_I2C1_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <MX_I2C1_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <MX_I2C1_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_I2C1_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_I2C1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000470:	f000 fcbc 	bl	8000dec <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 f845 	bl	8000508 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000482:	f001 fa29 	bl	80018d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 f83c 	bl	8000508 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000494:	f001 fa6b 	bl	800196e <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f833 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	24000094 	.word	0x24000094
 80004ac:	40005400 	.word	0x40005400
 80004b0:	00707cbb 	.word	0x00707cbb

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_GPIO_Init+0x50>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	4a10      	ldr	r2, [pc, #64]	; (8000504 <MX_GPIO_Init+0x50>)
 80004c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_GPIO_Init+0x50>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <MX_GPIO_Init+0x50>)
 80004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004de:	4a09      	ldr	r2, [pc, #36]	; (8000504 <MX_GPIO_Init+0x50>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_GPIO_Init+0x50>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	58024400 	.word	0x58024400

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_MspInit+0x30>)
 800051c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <HAL_MspInit+0x30>)
 8000522:	f043 0302 	orr.w	r3, r3, #2
 8000526:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_MspInit+0x30>)
 800052c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000530:	f003 0302 	and.w	r3, r3, #2
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	58024400 	.word	0x58024400

08000548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0b8      	sub	sp, #224	; 0xe0
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	22b8      	movs	r2, #184	; 0xb8
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f004 fc3f 	bl	8004dec <memset>
  if(hi2c->Instance==I2C1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a26      	ldr	r2, [pc, #152]	; (800060c <HAL_I2C_MspInit+0xc4>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d145      	bne.n	8000604 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000578:	f04f 0208 	mov.w	r2, #8
 800057c:	f04f 0300 	mov.w	r3, #0
 8000580:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000584:	2300      	movs	r3, #0
 8000586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f99e 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800059a:	f7ff ffb5 	bl	8000508 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <HAL_I2C_MspInit+0xc8>)
 80005a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a4:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <HAL_I2C_MspInit+0xc8>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_I2C_MspInit+0xc8>)
 80005b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b4:	f003 0302 	and.w	r3, r3, #2
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005bc:	23c0      	movs	r3, #192	; 0xc0
 80005be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c2:	2312      	movs	r3, #18
 80005c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005d4:	2304      	movs	r3, #4
 80005d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80005de:	4619      	mov	r1, r3
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <HAL_I2C_MspInit+0xcc>)
 80005e2:	f000 fa5b 	bl	8000a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_I2C_MspInit+0xc8>)
 80005e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_I2C_MspInit+0xc8>)
 80005ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_I2C_MspInit+0xc8>)
 80005f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	37e0      	adds	r7, #224	; 0xe0
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40005400 	.word	0x40005400
 8000610:	58024400 	.word	0x58024400
 8000614:	58020400 	.word	0x58020400

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f916 	bl	8000894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <SystemInit+0xd0>)
 8000672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000676:	4a31      	ldr	r2, [pc, #196]	; (800073c <SystemInit+0xd0>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800067c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000680:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <SystemInit+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f003 030f 	and.w	r3, r3, #15
 8000688:	2b06      	cmp	r3, #6
 800068a:	d807      	bhi.n	800069c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <SystemInit+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f023 030f 	bic.w	r3, r3, #15
 8000694:	4a2a      	ldr	r2, [pc, #168]	; (8000740 <SystemInit+0xd4>)
 8000696:	f043 0307 	orr.w	r3, r3, #7
 800069a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <SystemInit+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <SystemInit+0xd8>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <SystemInit+0xd8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemInit+0xd8>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4924      	ldr	r1, [pc, #144]	; (8000744 <SystemInit+0xd8>)
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <SystemInit+0xdc>)
 80006b6:	4013      	ands	r3, r2
 80006b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <SystemInit+0xd4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d007      	beq.n	80006d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemInit+0xd4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f023 030f 	bic.w	r3, r3, #15
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <SystemInit+0xd4>)
 80006d0:	f043 0307 	orr.w	r3, r3, #7
 80006d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <SystemInit+0xd8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <SystemInit+0xd8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <SystemInit+0xd8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <SystemInit+0xd8>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <SystemInit+0xe0>)
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <SystemInit+0xd8>)
 80006f0:	4a17      	ldr	r2, [pc, #92]	; (8000750 <SystemInit+0xe4>)
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <SystemInit+0xd8>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <SystemInit+0xe8>)
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <SystemInit+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <SystemInit+0xd8>)
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <SystemInit+0xe8>)
 8000704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <SystemInit+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <SystemInit+0xd8>)
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <SystemInit+0xe8>)
 8000710:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <SystemInit+0xd8>)
 8000714:	2200      	movs	r2, #0
 8000716:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <SystemInit+0xd8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <SystemInit+0xd8>)
 800071e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000722:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <SystemInit+0xd8>)
 8000726:	2200      	movs	r2, #0
 8000728:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <SystemInit+0xec>)
 800072c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000730:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	52002000 	.word	0x52002000
 8000744:	58024400 	.word	0x58024400
 8000748:	eaf6ed7f 	.word	0xeaf6ed7f
 800074c:	02020200 	.word	0x02020200
 8000750:	01ff0000 	.word	0x01ff0000
 8000754:	01010280 	.word	0x01010280
 8000758:	52004000 	.word	0x52004000

0800075c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000794 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f7ff ff84 	bl	800066c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f004 fb0b 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800078e:	f7ff fdbf 	bl	8000310 <main>
  bx  lr
 8000792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000794:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000798:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800079c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80007a0:	08006cd8 	.word	0x08006cd8
  ldr r2, =_sbss
 80007a4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80007a8:	24000170 	.word	0x24000170

080007ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC3_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b6:	2003      	movs	r0, #3
 80007b8:	f000 f93e 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007bc:	f001 ff0e 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 80007c0:	4602      	mov	r2, r0
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_Init+0x68>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	4913      	ldr	r1, [pc, #76]	; (800081c <HAL_Init+0x6c>)
 80007ce:	5ccb      	ldrb	r3, [r1, r3]
 80007d0:	f003 031f 	and.w	r3, r3, #31
 80007d4:	fa22 f303 	lsr.w	r3, r2, r3
 80007d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_Init+0x68>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_Init+0x6c>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	f003 031f 	and.w	r3, r3, #31
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	fa22 f303 	lsr.w	r3, r2, r3
 80007f0:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <HAL_Init+0x70>)
 80007f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <HAL_Init+0x74>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fa:	200f      	movs	r0, #15
 80007fc:	f000 f814 	bl	8000828 <HAL_InitTick>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e002      	b.n	8000810 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800080a:	f7ff fe83 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400
 800081c:	08005408 	.word	0x08005408
 8000820:	24000004 	.word	0x24000004
 8000824:	24000000 	.word	0x24000000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_InitTick+0x60>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e021      	b.n	8000880 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <HAL_InitTick+0x64>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_InitTick+0x60>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	fbb3 f3f1 	udiv	r3, r3, r1
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f915 	bl	8000a82 <HAL_SYSTICK_Config>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e00e      	b.n	8000880 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d80a      	bhi.n	800087e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f000 f8ed 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <HAL_InitTick+0x68>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	e000      	b.n	8000880 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2400000c 	.word	0x2400000c
 800088c:	24000000 	.word	0x24000000
 8000890:	24000008 	.word	0x24000008

08000894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x20>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x24>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_IncTick+0x24>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2400000c 	.word	0x2400000c
 80008b8:	24000128 	.word	0x24000128

080008bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_GetTick+0x14>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	24000128 	.word	0x24000128

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <__NVIC_SetPriorityGrouping+0x40>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	4313      	orrs	r3, r2
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x40>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00
 8000918:	05fa0000 	.word	0x05fa0000

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff47 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff5e 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ff90 	bl	800098c <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5f 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffb2 	bl	80009f4 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000aaa:	4b86      	ldr	r3, [pc, #536]	; (8000cc4 <HAL_GPIO_Init+0x228>)
 8000aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000aae:	e18c      	b.n	8000dca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 817e 	beq.w	8000dc4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d005      	beq.n	8000ae0 <HAL_GPIO_Init+0x44>
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 0303 	and.w	r3, r3, #3
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d130      	bne.n	8000b42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2203      	movs	r2, #3
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b16:	2201      	movs	r2, #1
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	f003 0201 	and.w	r2, r3, #1
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d017      	beq.n	8000b7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d123      	bne.n	8000bd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	08da      	lsrs	r2, r3, #3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3208      	adds	r2, #8
 8000b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4013      	ands	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	691a      	ldr	r2, [r3, #16]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	08da      	lsrs	r2, r3, #3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	69b9      	ldr	r1, [r7, #24]
 8000bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0203 	and.w	r2, r3, #3
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 80d8 	beq.w	8000dc4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <HAL_GPIO_Init+0x22c>)
 8000c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1a:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <HAL_GPIO_Init+0x22c>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <HAL_GPIO_Init+0x22c>)
 8000c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c32:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_GPIO_Init+0x230>)
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3302      	adds	r3, #2
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4013      	ands	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <HAL_GPIO_Init+0x234>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d04a      	beq.n	8000cf4 <HAL_GPIO_Init+0x258>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <HAL_GPIO_Init+0x238>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d02b      	beq.n	8000cbe <HAL_GPIO_Init+0x222>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_GPIO_Init+0x23c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d025      	beq.n	8000cba <HAL_GPIO_Init+0x21e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <HAL_GPIO_Init+0x240>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d01f      	beq.n	8000cb6 <HAL_GPIO_Init+0x21a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_GPIO_Init+0x244>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d019      	beq.n	8000cb2 <HAL_GPIO_Init+0x216>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_GPIO_Init+0x248>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <HAL_GPIO_Init+0x212>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_GPIO_Init+0x24c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00d      	beq.n	8000caa <HAL_GPIO_Init+0x20e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a16      	ldr	r2, [pc, #88]	; (8000cec <HAL_GPIO_Init+0x250>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d007      	beq.n	8000ca6 <HAL_GPIO_Init+0x20a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <HAL_GPIO_Init+0x254>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	e029      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	e027      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	e025      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000caa:	2306      	movs	r3, #6
 8000cac:	e023      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000cae:	2305      	movs	r3, #5
 8000cb0:	e021      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	e01f      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e01d      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e01b      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e019      	b.n	8000cf6 <HAL_GPIO_Init+0x25a>
 8000cc2:	bf00      	nop
 8000cc4:	58000080 	.word	0x58000080
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58000400 	.word	0x58000400
 8000cd0:	58020000 	.word	0x58020000
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	58020800 	.word	0x58020800
 8000cdc:	58020c00 	.word	0x58020c00
 8000ce0:	58021000 	.word	0x58021000
 8000ce4:	58021400 	.word	0x58021400
 8000ce8:	58021800 	.word	0x58021800
 8000cec:	58021c00 	.word	0x58021c00
 8000cf0:	58022400 	.word	0x58022400
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d06:	4938      	ldr	r1, [pc, #224]	; (8000de8 <HAL_GPIO_Init+0x34c>)
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f ae6b 	bne.w	8000ab0 <HAL_GPIO_Init+0x14>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3724      	adds	r7, #36	; 0x24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	58000400 	.word	0x58000400

08000dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e07f      	b.n	8000efe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fb98 	bl	8000548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2224      	movs	r2, #36	; 0x24
 8000e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d107      	bne.n	8000e66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	e006      	b.n	8000e74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d104      	bne.n	8000e86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_I2C_Init+0x11c>)
 8000e92:	430b      	orrs	r3, r1
 8000e94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69d9      	ldr	r1, [r3, #28]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1a      	ldr	r2, [r3, #32]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	02008000 	.word	0x02008000

08000f0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	817b      	strh	r3, [r7, #10]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	813b      	strh	r3, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	f040 80f9 	bne.w	8001126 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_I2C_Mem_Write+0x34>
 8000f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e0ed      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_I2C_Mem_Write+0x4e>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e0e6      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f62:	f7ff fcab 	bl	80008bc <HAL_GetTick>
 8000f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2319      	movs	r3, #25
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f000 fac3 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e0d1      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2221      	movs	r2, #33	; 0x21
 8000f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2200      	movs	r2, #0
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6a3a      	ldr	r2, [r7, #32]
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fac:	88f8      	ldrh	r0, [r7, #6]
 8000fae:	893a      	ldrh	r2, [r7, #8]
 8000fb0:	8979      	ldrh	r1, [r7, #10]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f9d3 	bl	8001368 <I2C_RequestMemoryWrite>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0a9      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d90e      	bls.n	8000ffc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	8979      	ldrh	r1, [r7, #10]
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 fc3d 	bl	8001874 <I2C_TransferConfig>
 8000ffa:	e00f      	b.n	800101c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001000:	b29a      	uxth	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100a:	b2da      	uxtb	r2, r3
 800100c:	8979      	ldrh	r1, [r7, #10]
 800100e:	2300      	movs	r3, #0
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 fc2c 	bl	8001874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 fabc 	bl	800159e <I2C_WaitOnTXISFlagUntilTimeout>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e07b      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800104a:	b29b      	uxth	r3, r3
 800104c:	3b01      	subs	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001058:	3b01      	subs	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001064:	b29b      	uxth	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d034      	beq.n	80010d4 <HAL_I2C_Mem_Write+0x1c8>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800106e:	2b00      	cmp	r3, #0
 8001070:	d130      	bne.n	80010d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	2200      	movs	r2, #0
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 fa3f 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e04d      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001090:	b29b      	uxth	r3, r3
 8001092:	2bff      	cmp	r3, #255	; 0xff
 8001094:	d90e      	bls.n	80010b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	22ff      	movs	r2, #255	; 0xff
 800109a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	8979      	ldrh	r1, [r7, #10]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f000 fbe1 	bl	8001874 <I2C_TransferConfig>
 80010b2:	e00f      	b.n	80010d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	8979      	ldrh	r1, [r7, #10]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 fbd0 	bl	8001874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d19e      	bne.n	800101c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 faa2 	bl	800162c <I2C_WaitOnSTOPFlagUntilTimeout>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e01a      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2220      	movs	r2, #32
 80010f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6859      	ldr	r1, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_I2C_Mem_Write+0x224>)
 8001106:	400b      	ands	r3, r1
 8001108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2220      	movs	r2, #32
 800110e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001126:	2302      	movs	r3, #2
  }
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	fe00e800 	.word	0xfe00e800

08001134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4603      	mov	r3, r0
 8001144:	817b      	strh	r3, [r7, #10]
 8001146:	460b      	mov	r3, r1
 8001148:	813b      	strh	r3, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b20      	cmp	r3, #32
 8001158:	f040 80fd 	bne.w	8001356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <HAL_I2C_Mem_Read+0x34>
 8001162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0f1      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_I2C_Mem_Read+0x4e>
 800117e:	2302      	movs	r3, #2
 8001180:	e0ea      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800118a:	f7ff fb97 	bl	80008bc <HAL_GetTick>
 800118e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2319      	movs	r3, #25
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 f9af 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0d5      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2222      	movs	r2, #34	; 0x22
 80011b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2240      	movs	r2, #64	; 0x40
 80011b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a3a      	ldr	r2, [r7, #32]
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011d4:	88f8      	ldrh	r0, [r7, #6]
 80011d6:	893a      	ldrh	r2, [r7, #8]
 80011d8:	8979      	ldrh	r1, [r7, #10]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4603      	mov	r3, r0
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f913 	bl	8001410 <I2C_RequestMemoryRead>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0ad      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001200:	b29b      	uxth	r3, r3
 8001202:	2bff      	cmp	r3, #255	; 0xff
 8001204:	d90e      	bls.n	8001224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	22ff      	movs	r2, #255	; 0xff
 800120a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001210:	b2da      	uxtb	r2, r3
 8001212:	8979      	ldrh	r1, [r7, #10]
 8001214:	4b52      	ldr	r3, [pc, #328]	; (8001360 <HAL_I2C_Mem_Read+0x22c>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 fb29 	bl	8001874 <I2C_TransferConfig>
 8001222:	e00f      	b.n	8001244 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001228:	b29a      	uxth	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001232:	b2da      	uxtb	r2, r3
 8001234:	8979      	ldrh	r1, [r7, #10]
 8001236:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <HAL_I2C_Mem_Read+0x22c>)
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 fb18 	bl	8001874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	2104      	movs	r1, #4
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f956 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e07c      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127a:	3b01      	subs	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001286:	b29b      	uxth	r3, r3
 8001288:	3b01      	subs	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d034      	beq.n	8001304 <HAL_I2C_Mem_Read+0x1d0>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d130      	bne.n	8001304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	2200      	movs	r2, #0
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f927 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e04d      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d90e      	bls.n	80012e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	8979      	ldrh	r1, [r7, #10]
 80012d4:	2300      	movs	r3, #0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fac9 	bl	8001874 <I2C_TransferConfig>
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	8979      	ldrh	r1, [r7, #10]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 fab8 	bl	8001874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d19a      	bne.n	8001244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f98a 	bl	800162c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e01a      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2220      	movs	r2, #32
 8001328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_I2C_Mem_Read+0x230>)
 8001336:	400b      	ands	r3, r1
 8001338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2220      	movs	r2, #32
 800133e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001356:	2302      	movs	r3, #2
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	80002400 	.word	0x80002400
 8001364:	fe00e800 	.word	0xfe00e800

08001368 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	4608      	mov	r0, r1
 8001372:	4611      	mov	r1, r2
 8001374:	461a      	mov	r2, r3
 8001376:	4603      	mov	r3, r0
 8001378:	817b      	strh	r3, [r7, #10]
 800137a:	460b      	mov	r3, r1
 800137c:	813b      	strh	r3, [r7, #8]
 800137e:	4613      	mov	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	8979      	ldrh	r1, [r7, #10]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <I2C_RequestMemoryWrite+0xa4>)
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 fa6f 	bl	8001874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	69b9      	ldr	r1, [r7, #24]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f8ff 	bl	800159e <I2C_WaitOnTXISFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e02c      	b.n	8001404 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013b0:	893b      	ldrh	r3, [r7, #8]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
 80013ba:	e015      	b.n	80013e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013bc:	893b      	ldrh	r3, [r7, #8]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f8e5 	bl	800159e <I2C_WaitOnTXISFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e012      	b.n	8001404 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013de:	893b      	ldrh	r3, [r7, #8]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2200      	movs	r2, #0
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 f884 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	80002000 	.word	0x80002000

08001410 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	4603      	mov	r3, r0
 8001420:	817b      	strh	r3, [r7, #10]
 8001422:	460b      	mov	r3, r1
 8001424:	813b      	strh	r3, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	8979      	ldrh	r1, [r7, #10]
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <I2C_RequestMemoryRead+0xa4>)
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 fa1c 	bl	8001874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	69b9      	ldr	r1, [r7, #24]
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 f8ac 	bl	800159e <I2C_WaitOnTXISFlagUntilTimeout>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e02c      	b.n	80014aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
 8001460:	e015      	b.n	800148e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001462:	893b      	ldrh	r3, [r7, #8]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	b29b      	uxth	r3, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	69b9      	ldr	r1, [r7, #24]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f892 	bl	800159e <I2C_WaitOnTXISFlagUntilTimeout>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e012      	b.n	80014aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001484:	893b      	ldrh	r3, [r7, #8]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2200      	movs	r2, #0
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f831 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	80002000 	.word	0x80002000

080014b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d103      	bne.n	80014d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2200      	movs	r2, #0
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d007      	beq.n	80014f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	619a      	str	r2, [r3, #24]
  }
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001510:	e031      	b.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d02d      	beq.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151a:	f7ff f9cf 	bl	80008bc <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d302      	bcc.n	8001530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d122      	bne.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	4013      	ands	r3, r2
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	429a      	cmp	r2, r3
 800154c:	d113      	bne.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f043 0220 	orr.w	r2, r3, #32
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2220      	movs	r2, #32
 800155e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4013      	ands	r3, r2
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	429a      	cmp	r2, r3
 8001584:	bf0c      	ite	eq
 8001586:	2301      	moveq	r3, #1
 8001588:	2300      	movne	r3, #0
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	429a      	cmp	r2, r3
 8001592:	d0be      	beq.n	8001512 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015aa:	e033      	b.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f87f 	bl	80016b4 <I2C_IsErrorOccurred>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e031      	b.n	8001624 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c6:	d025      	beq.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015c8:	f7ff f978 	bl	80008bc <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d302      	bcc.n	80015de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11a      	bne.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d013      	beq.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f043 0220 	orr.w	r2, r3, #32
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e007      	b.n	8001624 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d1c4      	bne.n	80015ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001638:	e02f      	b.n	800169a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f838 	bl	80016b4 <I2C_IsErrorOccurred>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e02d      	b.n	80016aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164e:	f7ff f935 	bl	80008bc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	429a      	cmp	r2, r3
 800165c:	d302      	bcc.n	8001664 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d11a      	bne.n	800169a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b20      	cmp	r3, #32
 8001670:	d013      	beq.n	800169a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e007      	b.n	80016aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d1c8      	bne.n	800163a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d068      	beq.n	80017b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2210      	movs	r2, #16
 80016e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016e8:	e049      	b.n	800177e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d045      	beq.n	800177e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016f2:	f7ff f8e3 	bl	80008bc <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d302      	bcc.n	8001708 <I2C_IsErrorOccurred+0x54>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d13a      	bne.n	800177e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800171a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800172a:	d121      	bne.n	8001770 <I2C_IsErrorOccurred+0xbc>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001732:	d01d      	beq.n	8001770 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001734:	7cfb      	ldrb	r3, [r7, #19]
 8001736:	2b20      	cmp	r3, #32
 8001738:	d01a      	beq.n	8001770 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001748:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800174a:	f7ff f8b7 	bl	80008bc <HAL_GetTick>
 800174e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001750:	e00e      	b.n	8001770 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001752:	f7ff f8b3 	bl	80008bc <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b19      	cmp	r3, #25
 800175e:	d907      	bls.n	8001770 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	f043 0320 	orr.w	r3, r3, #32
 8001766:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800176e:	e006      	b.n	800177e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	2b20      	cmp	r3, #32
 800177c:	d1e9      	bne.n	8001752 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	2b20      	cmp	r3, #32
 800178a:	d003      	beq.n	8001794 <I2C_IsErrorOccurred+0xe0>
 800178c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0aa      	beq.n	80016ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2220      	movs	r2, #32
 80017a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00b      	beq.n	80017dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01c      	beq.n	8001862 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fe45 	bl	80014b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <I2C_IsErrorOccurred+0x1bc>)
 800183a:	400b      	ands	r3, r1
 800183c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	431a      	orrs	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2220      	movs	r2, #32
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001866:	4618      	mov	r0, r3
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	fe00e800 	.word	0xfe00e800

08001874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	4613      	mov	r3, r2
 8001884:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800188c:	7a7b      	ldrb	r3, [r7, #9]
 800188e:	041b      	lsls	r3, r3, #16
 8001890:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001894:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	4313      	orrs	r3, r2
 800189e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	0d5b      	lsrs	r3, r3, #21
 80018ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <I2C_TransferConfig+0x60>)
 80018b4:	430b      	orrs	r3, r1
 80018b6:	43db      	mvns	r3, r3
 80018b8:	ea02 0103 	and.w	r1, r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	03ff63ff 	.word	0x03ff63ff

080018d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d138      	bne.n	8001960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e032      	b.n	8001962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800192a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	e000      	b.n	8001962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001960:	2302      	movs	r3, #2
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b20      	cmp	r3, #32
 8001982:	d139      	bne.n	80019f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800198e:	2302      	movs	r3, #2
 8001990:	e033      	b.n	80019fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2224      	movs	r2, #36	; 0x24
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	d00a      	beq.n	8001a32 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a1c:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e03f      	b.n	8001aae <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e03d      	b.n	8001aae <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a3a:	491f      	ldr	r1, [pc, #124]	; (8001ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a42:	f7fe ff3b 	bl	80008bc <HAL_GetTick>
 8001a46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a48:	e009      	b.n	8001a5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a4a:	f7fe ff37 	bl	80008bc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a58:	d901      	bls.n	8001a5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e027      	b.n	8001aae <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b1e      	cmp	r3, #30
 8001a70:	d008      	beq.n	8001a84 <HAL_PWREx_ConfigSupply+0x7c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b2e      	cmp	r3, #46	; 0x2e
 8001a76:	d005      	beq.n	8001a84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b1d      	cmp	r3, #29
 8001a7c:	d002      	beq.n	8001a84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b2d      	cmp	r3, #45	; 0x2d
 8001a82:	d113      	bne.n	8001aac <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a84:	f7fe ff1a 	bl	80008bc <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a8a:	e009      	b.n	8001aa0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a8c:	f7fe ff16 	bl	80008bc <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a9a:	d901      	bls.n	8001aa0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e006      	b.n	8001aae <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0311 	and.w	r3, r3, #17
 8001aa8:	2b11      	cmp	r3, #17
 8001aaa:	d1ef      	bne.n	8001a8c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	58024800 	.word	0x58024800

08001abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	; 0x30
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e3c8      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001adc:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ae6:	4b86      	ldr	r3, [pc, #536]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d007      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46>
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	2b18      	cmp	r3, #24
 8001af6:	d110      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d06c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x12c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d168      	bne.n	8001be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e3a2      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x76>
 8001b24:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e02e      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x98>
 8001b3a:	4b71      	ldr	r3, [pc, #452]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a70      	ldr	r2, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6d      	ldr	r2, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0xbc>
 8001b5e:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a67      	ldr	r2, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a64      	ldr	r2, [pc, #400]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b78:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a60      	ldr	r2, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5d      	ldr	r2, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7fe fe90 	bl	80008bc <HAL_GetTick>
 8001b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7fe fe8c 	bl	80008bc <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e356      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bb2:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe4>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fe7c 	bl	80008bc <HAL_GetTick>
 8001bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fe78 	bl	80008bc <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e342      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bda:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x10c>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 808c 	beq.w	8001d10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <HAL_RCC_OscConfig+0x162>
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	2b18      	cmp	r3, #24
 8001c12:	d137      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1c8>
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d132      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x17a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e314      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c36:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 0219 	bic.w	r2, r3, #25
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	492f      	ldr	r1, [pc, #188]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7fe fe38 	bl	80008bc <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7fe fe34 	bl	80008bc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e2fe      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	061b      	lsls	r3, r3, #24
 8001c7c:	4920      	ldr	r1, [pc, #128]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c82:	e045      	b.n	8001d10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d026      	beq.n	8001cda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 0219 	bic.w	r2, r3, #25
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4919      	ldr	r1, [pc, #100]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7fe fe0d 	bl	80008bc <HAL_GetTick>
 8001ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7fe fe09 	bl	80008bc <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e2d3      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	490b      	ldr	r1, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e01a      	b.n	8001d10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fde9 	bl	80008bc <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cee:	f7fe fde5 	bl	80008bc <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d903      	bls.n	8001d04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e2af      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
 8001d00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ee      	bne.n	8001cee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d06a      	beq.n	8001df2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1c:	4b90      	ldr	r3, [pc, #576]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d26:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d007      	beq.n	8001d42 <HAL_RCC_OscConfig+0x286>
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b18      	cmp	r3, #24
 8001d36:	d11b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2b4>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d42:	4b87      	ldr	r3, [pc, #540]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x29e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	2b80      	cmp	r3, #128	; 0x80
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e282      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d5a:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	061b      	lsls	r3, r3, #24
 8001d68:	497d      	ldr	r1, [pc, #500]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d6e:	e040      	b.n	8001df2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a78      	ldr	r2, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe fd9a 	bl	80008bc <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d8c:	f7fe fd96 	bl	80008bc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e260      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d9e:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001daa:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	4969      	ldr	r1, [pc, #420]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60cb      	str	r3, [r1, #12]
 8001dbe:	e018      	b.n	8001df2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dc0:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a66      	ldr	r2, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fd76 	bl	80008bc <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dd4:	f7fe fd72 	bl	80008bc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e23c      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001de6:	4b5e      	ldr	r3, [pc, #376]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d036      	beq.n	8001e6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d019      	beq.n	8001e3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e06:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0a:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7fe fd53 	bl	80008bc <HAL_GetTick>
 8001e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fd4f 	bl	80008bc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e219      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x35e>
 8001e38:	e018      	b.n	8001e6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3e:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7fe fd39 	bl	80008bc <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7fe fd35 	bl	80008bc <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1ff      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d036      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001e86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fd16 	bl	80008bc <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e94:	f7fe fd12 	bl	80008bc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1dc      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x3d8>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fcfc 	bl	80008bc <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec8:	f7fe fcf8 	bl	80008bc <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1c2      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8086 	beq.w	8002000 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4a8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x4a8>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f00:	f7fe fcdc 	bl	80008bc <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f08:	f7fe fcd8 	bl	80008bc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1a2      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_OscConfig+0x4a8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCC_OscConfig+0x480>
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	e032      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4ac>
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	4a02      	ldr	r2, [pc, #8]	; (8001f60 <HAL_RCC_OscConfig+0x4a4>)
 8001f56:	f023 0304 	bic.w	r3, r3, #4
 8001f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5c:	e021      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e6>
 8001f5e:	bf00      	nop
 8001f60:	58024400 	.word	0x58024400
 8001f64:	58024800 	.word	0x58024800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4ce>
 8001f70:	4b83      	ldr	r3, [pc, #524]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4a82      	ldr	r2, [pc, #520]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7c:	4b80      	ldr	r3, [pc, #512]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a7f      	ldr	r2, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e6>
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
 8001f96:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a79      	ldr	r2, [pc, #484]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7fe fc87 	bl	80008bc <HAL_GetTick>
 8001fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe fc83 	bl	80008bc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e14b      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc8:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ee      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4f6>
 8001fd4:	e014      	b.n	8002000 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fc71 	bl	80008bc <HAL_GetTick>
 8001fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7fe fc6d 	bl	80008bc <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e135      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ee      	bne.n	8001fde <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 812a 	beq.w	800225e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800200a:	4b5d      	ldr	r3, [pc, #372]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002012:	2b18      	cmp	r3, #24
 8002014:	f000 80ba 	beq.w	800218c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b02      	cmp	r3, #2
 800201e:	f040 8095 	bne.w	800214c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7fe fc45 	bl	80008bc <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe fc41 	bl	80008bc <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e10b      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002048:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002058:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <HAL_RCC_OscConfig+0x6c8>)
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	430a      	orrs	r2, r1
 8002068:	4945      	ldr	r1, [pc, #276]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	628b      	str	r3, [r1, #40]	; 0x28
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	3b01      	subs	r3, #1
 8002074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	3b01      	subs	r3, #1
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	b29b      	uxth	r3, r3
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	3b01      	subs	r3, #1
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	3b01      	subs	r3, #1
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800209e:	4938      	ldr	r1, [pc, #224]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4a35      	ldr	r2, [pc, #212]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020b0:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <HAL_RCC_OscConfig+0x6cc>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020bc:	00d2      	lsls	r2, r2, #3
 80020be:	4930      	ldr	r1, [pc, #192]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	f023 020c 	bic.w	r2, r3, #12
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	492b      	ldr	r1, [pc, #172]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	f023 0202 	bic.w	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4927      	ldr	r1, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	4a21      	ldr	r2, [pc, #132]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 80020fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe fbca 	bl	80008bc <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe fbc6 	bl	80008bc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e090      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x670>
 800214a:	e088      	b.n	800225e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe fbb0 	bl	80008bc <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe fbac 	bl	80008bc <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e076      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002172:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_OscConfig+0x6c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x6a4>
 800217e:	e06e      	b.n	800225e <HAL_RCC_OscConfig+0x7a2>
 8002180:	58024400 	.word	0x58024400
 8002184:	fffffc0c 	.word	0xfffffc0c
 8002188:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002192:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2b01      	cmp	r3, #1
 800219e:	d031      	beq.n	8002204 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0203 	and.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d12a      	bne.n	8002204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d122      	bne.n	8002204 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d11a      	bne.n	8002204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d111      	bne.n	8002204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	0c1b      	lsrs	r3, r3, #16
 80021e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d108      	bne.n	8002204 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0e1b      	lsrs	r3, r3, #24
 80021f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e02b      	b.n	8002260 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002212:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d01f      	beq.n	800225e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800222a:	f7fe fb47 	bl	80008bc <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002230:	bf00      	nop
 8002232:	f7fe fb43 	bl	80008bc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	4293      	cmp	r3, r2
 800223c:	d0f9      	beq.n	8002232 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 8002240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_RCC_OscConfig+0x7b0>)
 8002244:	4013      	ands	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800224a:	00d2      	lsls	r2, r2, #3
 800224c:	4906      	ldr	r1, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 800224e:	4313      	orrs	r3, r2
 8002250:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_RCC_OscConfig+0x7ac>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3730      	adds	r7, #48	; 0x30
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	58024400 	.word	0x58024400
 800226c:	ffff0007 	.word	0xffff0007

08002270 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e19c      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b8a      	ldr	r3, [pc, #552]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d910      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 020f 	bic.w	r2, r3, #15
 800229a:	4985      	ldr	r1, [pc, #532]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e184      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d908      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	4975      	ldr	r1, [pc, #468]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d908      	bls.n	8002310 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022fe:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	496a      	ldr	r1, [pc, #424]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800230c:	4313      	orrs	r3, r2
 800230e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d010      	beq.n	800233e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002328:	429a      	cmp	r2, r3
 800232a:	d908      	bls.n	800233e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	495e      	ldr	r1, [pc, #376]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800233a:	4313      	orrs	r3, r2
 800233c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002356:	429a      	cmp	r2, r3
 8002358:	d908      	bls.n	800236c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4953      	ldr	r1, [pc, #332]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002368:	4313      	orrs	r3, r2
 800236a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	429a      	cmp	r2, r3
 8002386:	d908      	bls.n	800239a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f023 020f 	bic.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4947      	ldr	r1, [pc, #284]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002396:	4313      	orrs	r3, r2
 8002398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d055      	beq.n	8002452 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023a6:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4940      	ldr	r1, [pc, #256]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c0:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d121      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0f6      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d115      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0ea      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0de      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0d6      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f023 0207 	bic.w	r2, r3, #7
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4925      	ldr	r1, [pc, #148]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800241e:	4313      	orrs	r3, r2
 8002420:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002422:	f7fe fa4b 	bl	80008bc <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	e00a      	b.n	8002440 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242a:	f7fe fa47 	bl	80008bc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0be      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	429a      	cmp	r2, r3
 8002450:	d1eb      	bne.n	800242a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d010      	beq.n	8002480 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	429a      	cmp	r2, r3
 800246c:	d208      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	490e      	ldr	r1, [pc, #56]	; (80024b4 <HAL_RCC_ClockConfig+0x244>)
 800247c:	4313      	orrs	r3, r2
 800247e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d214      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020f 	bic.w	r2, r3, #15
 8002496:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_RCC_ClockConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e086      	b.n	80025be <HAL_RCC_ClockConfig+0x34e>
 80024b0:	52002000 	.word	0x52002000
 80024b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d208      	bcs.n	80024e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024d4:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	4939      	ldr	r1, [pc, #228]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fe:	429a      	cmp	r2, r3
 8002500:	d208      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	492e      	ldr	r1, [pc, #184]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002510:	4313      	orrs	r3, r2
 8002512:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800252c:	429a      	cmp	r2, r3
 800252e:	d208      	bcs.n	8002542 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4922      	ldr	r1, [pc, #136]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 800253e:	4313      	orrs	r3, r2
 8002540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800255a:	429a      	cmp	r2, r3
 800255c:	d208      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4917      	ldr	r1, [pc, #92]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 800256c:	4313      	orrs	r3, r2
 800256e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002570:	f000 f834 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	4912      	ldr	r1, [pc, #72]	; (80025cc <HAL_RCC_ClockConfig+0x35c>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_RCC_ClockConfig+0x358>)
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_RCC_ClockConfig+0x35c>)
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x360>)
 80025a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_RCC_ClockConfig+0x364>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x368>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe f938 	bl	8000828 <HAL_InitTick>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	58024400 	.word	0x58024400
 80025cc:	08005408 	.word	0x08005408
 80025d0:	24000004 	.word	0x24000004
 80025d4:	24000000 	.word	0x24000000
 80025d8:	24000008 	.word	0x24000008

080025dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e2:	4bb3      	ldr	r3, [pc, #716]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ea:	2b18      	cmp	r3, #24
 80025ec:	f200 8155 	bhi.w	800289a <HAL_RCC_GetSysClockFreq+0x2be>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	0800265d 	.word	0x0800265d
 80025fc:	0800289b 	.word	0x0800289b
 8002600:	0800289b 	.word	0x0800289b
 8002604:	0800289b 	.word	0x0800289b
 8002608:	0800289b 	.word	0x0800289b
 800260c:	0800289b 	.word	0x0800289b
 8002610:	0800289b 	.word	0x0800289b
 8002614:	0800289b 	.word	0x0800289b
 8002618:	08002683 	.word	0x08002683
 800261c:	0800289b 	.word	0x0800289b
 8002620:	0800289b 	.word	0x0800289b
 8002624:	0800289b 	.word	0x0800289b
 8002628:	0800289b 	.word	0x0800289b
 800262c:	0800289b 	.word	0x0800289b
 8002630:	0800289b 	.word	0x0800289b
 8002634:	0800289b 	.word	0x0800289b
 8002638:	08002689 	.word	0x08002689
 800263c:	0800289b 	.word	0x0800289b
 8002640:	0800289b 	.word	0x0800289b
 8002644:	0800289b 	.word	0x0800289b
 8002648:	0800289b 	.word	0x0800289b
 800264c:	0800289b 	.word	0x0800289b
 8002650:	0800289b 	.word	0x0800289b
 8002654:	0800289b 	.word	0x0800289b
 8002658:	0800268f 	.word	0x0800268f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800265c:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002668:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	4a90      	ldr	r2, [pc, #576]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800267a:	e111      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800267c:	4b8d      	ldr	r3, [pc, #564]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800267e:	61bb      	str	r3, [r7, #24]
      break;
 8002680:	e10e      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002682:	4b8d      	ldr	r3, [pc, #564]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002684:	61bb      	str	r3, [r7, #24]
      break;
 8002686:	e10b      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002688:	4b8c      	ldr	r3, [pc, #560]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800268a:	61bb      	str	r3, [r7, #24]
      break;
 800268c:	e108      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800268e:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002698:	4b85      	ldr	r3, [pc, #532]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026a4:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026ae:	4b80      	ldr	r3, [pc, #512]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80e1 	beq.w	8002894 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f000 8083 	beq.w	80027e0 <HAL_RCC_GetSysClockFreq+0x204>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f200 80a1 	bhi.w	8002824 <HAL_RCC_GetSysClockFreq+0x248>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x114>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d056      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x1c0>
 80026ee:	e099      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026f0:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02d      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026fc:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	4a6b      	ldr	r2, [pc, #428]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002726:	4b62      	ldr	r3, [pc, #392]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002736:	ed97 6a02 	vldr	s12, [r7, #8]
 800273a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800273e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800274a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002752:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002756:	e087      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002762:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276a:	4b51      	ldr	r3, [pc, #324]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800277a:	ed97 6a02 	vldr	s12, [r7, #8]
 800277e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800278a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800278e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800279a:	e065      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ae:	4b40      	ldr	r3, [pc, #256]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027be:	ed97 6a02 	vldr	s12, [r7, #8]
 80027c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027de:	e043      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80027ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002802:	ed97 6a02 	vldr	s12, [r7, #8]
 8002806:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800280a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800280e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002822:	e021      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002846:	ed97 6a02 	vldr	s12, [r7, #8]
 800284a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800284e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800285a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002866:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	0a5b      	lsrs	r3, r3, #9
 800286e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002872:	3301      	adds	r3, #1
 8002874:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002880:	edd7 6a07 	vldr	s13, [r7, #28]
 8002884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800288c:	ee17 3a90 	vmov	r3, s15
 8002890:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002892:	e005      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
      break;
 8002898:	e002      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800289c:	61bb      	str	r3, [r7, #24]
      break;
 800289e:	bf00      	nop
  }

  return sysclockfreq;
 80028a0:	69bb      	ldr	r3, [r7, #24]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	58024400 	.word	0x58024400
 80028b4:	03d09000 	.word	0x03d09000
 80028b8:	003d0900 	.word	0x003d0900
 80028bc:	017d7840 	.word	0x017d7840
 80028c0:	46000000 	.word	0x46000000
 80028c4:	4c742400 	.word	0x4c742400
 80028c8:	4a742400 	.word	0x4a742400
 80028cc:	4bbebc20 	.word	0x4bbebc20

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d4:	b0c6      	sub	sp, #280	; 0x118
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80028f4:	2500      	movs	r5, #0
 80028f6:	ea54 0305 	orrs.w	r3, r4, r5
 80028fa:	d049      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80028fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002902:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002906:	d02f      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800290c:	d828      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800290e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002912:	d01a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002918:	d822      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800291e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002922:	d007      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002924:	e01c      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002926:	4bab      	ldr	r3, [pc, #684]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	4aaa      	ldr	r2, [pc, #680]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002932:	e01a      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002938:	3308      	adds	r3, #8
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f967 	bl	8003c10 <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002948:	e00f      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800294a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800294e:	3328      	adds	r3, #40	; 0x28
 8002950:	2102      	movs	r1, #2
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fa0e 	bl	8003d74 <RCCEx_PLL3_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800295e:	e004      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002966:	e000      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800296a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002972:	4b98      	ldr	r3, [pc, #608]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002976:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800297a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800297e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002980:	4a94      	ldr	r2, [pc, #592]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002982:	430b      	orrs	r3, r1
 8002984:	6513      	str	r3, [r2, #80]	; 0x50
 8002986:	e003      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800298c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800299c:	f04f 0900 	mov.w	r9, #0
 80029a0:	ea58 0309 	orrs.w	r3, r8, r9
 80029a4:	d047      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80029a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d82a      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029cd 	.word	0x080029cd
 80029bc:	080029db 	.word	0x080029db
 80029c0:	080029f1 	.word	0x080029f1
 80029c4:	08002a0f 	.word	0x08002a0f
 80029c8:	08002a0f 	.word	0x08002a0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029cc:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029d8:	e01a      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029de:	3308      	adds	r3, #8
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 f914 	bl	8003c10 <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ee:	e00f      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029f4:	3328      	adds	r3, #40	; 0x28
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 f9bb 	bl	8003d74 <RCCEx_PLL3_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a04:	e004      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a18:	4b6e      	ldr	r3, [pc, #440]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1c:	f023 0107 	bic.w	r1, r3, #7
 8002a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	4a6b      	ldr	r2, [pc, #428]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6513      	str	r3, [r2, #80]	; 0x50
 8002a2c:	e003      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002a42:	f04f 0b00 	mov.w	fp, #0
 8002a46:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a4a:	d05b      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a54:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002a58:	d03b      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002a5a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002a5e:	d834      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a64:	d037      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a6a:	d82e      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a70:	d033      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002a72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a76:	d828      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a82:	d822      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a8c:	d007      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002a8e:	e01c      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	4a4f      	ldr	r2, [pc, #316]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a9c:	e01e      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 f8b2 	bl	8003c10 <RCCEx_PLL2_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ab2:	e013      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ab8:	3328      	adds	r3, #40	; 0x28
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 f959 	bl	8003d74 <RCCEx_PLL3_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac8:	e008      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ad0:	e004      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002adc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002af0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002af4:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af6:	430b      	orrs	r3, r1
 8002af8:	6593      	str	r3, [r2, #88]	; 0x58
 8002afa:	e003      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4313      	orrs	r3, r2
 8002b22:	d05d      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b2c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002b30:	d03b      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002b32:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002b36:	d834      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b3c:	d037      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b42:	d82e      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b48:	d033      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002b4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b4e:	d828      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b54:	d01a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b5a:	d822      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b64:	d007      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b74:	e01e      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 f846 	bl	8003c10 <RCCEx_PLL2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b8a:	e013      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b90:	3328      	adds	r3, #40	; 0x28
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f8ed 	bl	8003d74 <RCCEx_PLL3_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ba8:	e004      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bcc:	4a01      	ldr	r2, [pc, #4]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd2:	e005      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002bec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002bf6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	d03a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	2b30      	cmp	r3, #48	; 0x30
 8002c08:	d01f      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	d819      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d00c      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d815      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d111      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c1e:	4baa      	ldr	r3, [pc, #680]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	4aa9      	ldr	r2, [pc, #676]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c2a:	e011      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c30:	3308      	adds	r3, #8
 8002c32:	2102      	movs	r1, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 ffeb 	bl	8003c10 <RCCEx_PLL2_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c58:	4b9b      	ldr	r3, [pc, #620]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a98      	ldr	r2, [pc, #608]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6c:	e003      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c90:	460b      	mov	r3, r1
 8002c92:	4313      	orrs	r3, r2
 8002c94:	d051      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca0:	d035      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca6:	d82e      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cac:	d031      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002cae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cb2:	d828      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb8:	d01a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbe:	d822      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc8:	d007      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002cca:	e01c      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ccc:	4b7e      	ldr	r3, [pc, #504]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	4a7d      	ldr	r2, [pc, #500]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cde:	3308      	adds	r3, #8
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 ff94 	bl	8003c10 <RCCEx_PLL2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cee:	e011      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cf4:	3328      	adds	r3, #40	; 0x28
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 f83b 	bl	8003d74 <RCCEx_PLL3_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	4a67      	ldr	r2, [pc, #412]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4313      	orrs	r3, r2
 8002d58:	d053      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d033      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002d66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6a:	d82c      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d70:	d02f      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002d72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d76:	d826      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002d7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d82:	d820      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d88:	d012      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d8e:	d81a      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d022      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d115      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d9e:	3308      	adds	r3, #8
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 ff34 	bl	8003c10 <RCCEx_PLL2_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dae:	e015      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002db4:	3328      	adds	r3, #40	; 0x28
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 ffdb 	bl	8003d74 <RCCEx_PLL3_Config>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002dce:	bf00      	nop
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002de4:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df2:	4a35      	ldr	r2, [pc, #212]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6513      	str	r3, [r2, #80]	; 0x50
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002dfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e18:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d058      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e2e:	d033      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e34:	d82c      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d02f      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d826      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e46:	d02b      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002e48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e4c:	d820      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e52:	d012      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e58:	d81a      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d022      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e62:	d115      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e68:	3308      	adds	r3, #8
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fecf 	bl	8003c10 <RCCEx_PLL2_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e78:	e015      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e7e:	3328      	adds	r3, #40	; 0x28
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ff76 	bl	8003d74 <RCCEx_PLL3_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e96:	e006      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e98:	bf00      	nop
 8002e9a:	e004      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e9c:	bf00      	nop
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ea0:	bf00      	nop
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10e      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ebe:	4a02      	ldr	r2, [pc, #8]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	e006      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002ec6:	bf00      	nop
 8002ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ed0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002eea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	d037      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002efe:	d00e      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f04:	d816      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d018      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f0e:	d111      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f10:	4bc4      	ldr	r3, [pc, #784]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	4ac3      	ldr	r2, [pc, #780]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f1c:	e00f      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f22:	3308      	adds	r3, #8
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fe72 	bl	8003c10 <RCCEx_PLL2_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f32:	e004      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f3a:	e000      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f46:	4bb7      	ldr	r3, [pc, #732]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f54:	4ab3      	ldr	r2, [pc, #716]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f56:	430b      	orrs	r3, r1
 8002f58:	6513      	str	r3, [r2, #80]	; 0x50
 8002f5a:	e003      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002f70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4313      	orrs	r3, r2
 8002f82:	d039      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d81c      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fd1 	.word	0x08002fd1
 8002f98:	08002fa5 	.word	0x08002fa5
 8002f9c:	08002fb3 	.word	0x08002fb3
 8002fa0:	08002fd1 	.word	0x08002fd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa4:	4b9f      	ldr	r3, [pc, #636]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	4a9e      	ldr	r2, [pc, #632]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fb0:	e00f      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fe28 	bl	8003c10 <RCCEx_PLL2_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002fce:	e000      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fda:	4b92      	ldr	r3, [pc, #584]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	f023 0103 	bic.w	r1, r3, #3
 8002fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	4a8e      	ldr	r2, [pc, #568]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fea:	430b      	orrs	r3, r1
 8002fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fee:	e003      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ff4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800300e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003012:	460b      	mov	r3, r1
 8003014:	4313      	orrs	r3, r2
 8003016:	f000 8099 	beq.w	800314c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301a:	4b83      	ldr	r3, [pc, #524]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a82      	ldr	r2, [pc, #520]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003026:	f7fd fc49 	bl	80008bc <HAL_GetTick>
 800302a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302e:	e00b      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fd fc44 	bl	80008bc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	; 0x64
 800303e:	d903      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003046:	e005      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003048:	4b77      	ldr	r3, [pc, #476]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ed      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003058:	2b00      	cmp	r3, #0
 800305a:	d173      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800305c:	4b71      	ldr	r3, [pc, #452]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800305e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003068:	4053      	eors	r3, r2
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d015      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003072:	4b6c      	ldr	r3, [pc, #432]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800307e:	4b69      	ldr	r3, [pc, #420]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a68      	ldr	r2, [pc, #416]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800308a:	4b66      	ldr	r3, [pc, #408]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a65      	ldr	r2, [pc, #404]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003096:	4a63      	ldr	r2, [pc, #396]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800309e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030aa:	d118      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fd fc06 	bl	80008bc <HAL_GetTick>
 80030b0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b4:	e00d      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fd fc01 	bl	80008bc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d903      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80030d0:	e005      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030d2:	4b54      	ldr	r3, [pc, #336]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0eb      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80030de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d129      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f6:	d10e      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80030f8:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003108:	091a      	lsrs	r2, r3, #4
 800310a:	4b48      	ldr	r3, [pc, #288]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800310c:	4013      	ands	r3, r2
 800310e:	4a45      	ldr	r2, [pc, #276]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003110:	430b      	orrs	r3, r1
 8003112:	6113      	str	r3, [r2, #16]
 8003114:	e005      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	4a42      	ldr	r2, [pc, #264]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800311c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003120:	6113      	str	r3, [r2, #16]
 8003122:	4b40      	ldr	r3, [pc, #256]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003124:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800312a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800312e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003132:	4a3c      	ldr	r2, [pc, #240]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003134:	430b      	orrs	r3, r1
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
 8003138:	e008      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800313a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800313e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003142:	e003      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003148:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800314c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f002 0301 	and.w	r3, r2, #1
 8003158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003162:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003166:	460b      	mov	r3, r1
 8003168:	4313      	orrs	r3, r2
 800316a:	f000 808f 	beq.w	800328c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800316e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003174:	2b28      	cmp	r3, #40	; 0x28
 8003176:	d871      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	08003265 	.word	0x08003265
 8003184:	0800325d 	.word	0x0800325d
 8003188:	0800325d 	.word	0x0800325d
 800318c:	0800325d 	.word	0x0800325d
 8003190:	0800325d 	.word	0x0800325d
 8003194:	0800325d 	.word	0x0800325d
 8003198:	0800325d 	.word	0x0800325d
 800319c:	0800325d 	.word	0x0800325d
 80031a0:	08003231 	.word	0x08003231
 80031a4:	0800325d 	.word	0x0800325d
 80031a8:	0800325d 	.word	0x0800325d
 80031ac:	0800325d 	.word	0x0800325d
 80031b0:	0800325d 	.word	0x0800325d
 80031b4:	0800325d 	.word	0x0800325d
 80031b8:	0800325d 	.word	0x0800325d
 80031bc:	0800325d 	.word	0x0800325d
 80031c0:	08003247 	.word	0x08003247
 80031c4:	0800325d 	.word	0x0800325d
 80031c8:	0800325d 	.word	0x0800325d
 80031cc:	0800325d 	.word	0x0800325d
 80031d0:	0800325d 	.word	0x0800325d
 80031d4:	0800325d 	.word	0x0800325d
 80031d8:	0800325d 	.word	0x0800325d
 80031dc:	0800325d 	.word	0x0800325d
 80031e0:	08003265 	.word	0x08003265
 80031e4:	0800325d 	.word	0x0800325d
 80031e8:	0800325d 	.word	0x0800325d
 80031ec:	0800325d 	.word	0x0800325d
 80031f0:	0800325d 	.word	0x0800325d
 80031f4:	0800325d 	.word	0x0800325d
 80031f8:	0800325d 	.word	0x0800325d
 80031fc:	0800325d 	.word	0x0800325d
 8003200:	08003265 	.word	0x08003265
 8003204:	0800325d 	.word	0x0800325d
 8003208:	0800325d 	.word	0x0800325d
 800320c:	0800325d 	.word	0x0800325d
 8003210:	0800325d 	.word	0x0800325d
 8003214:	0800325d 	.word	0x0800325d
 8003218:	0800325d 	.word	0x0800325d
 800321c:	0800325d 	.word	0x0800325d
 8003220:	08003265 	.word	0x08003265
 8003224:	58024400 	.word	0x58024400
 8003228:	58024800 	.word	0x58024800
 800322c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003234:	3308      	adds	r3, #8
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fce9 	bl	8003c10 <RCCEx_PLL2_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003244:	e00f      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800324a:	3328      	adds	r3, #40	; 0x28
 800324c:	2101      	movs	r1, #1
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd90 	bl	8003d74 <RCCEx_PLL3_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800325a:	e004      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800326e:	4bbf      	ldr	r3, [pc, #764]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800327a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800327c:	4abb      	ldr	r2, [pc, #748]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800327e:	430b      	orrs	r3, r1
 8003280:	6553      	str	r3, [r2, #84]	; 0x54
 8003282:	e003      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003288:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800328c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f002 0302 	and.w	r3, r2, #2
 8003298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4313      	orrs	r3, r2
 80032aa:	d041      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80032ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d824      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	08003309 	.word	0x08003309
 80032c0:	080032d5 	.word	0x080032d5
 80032c4:	080032eb 	.word	0x080032eb
 80032c8:	08003309 	.word	0x08003309
 80032cc:	08003309 	.word	0x08003309
 80032d0:	08003309 	.word	0x08003309
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032d8:	3308      	adds	r3, #8
 80032da:	2101      	movs	r1, #1
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fc97 	bl	8003c10 <RCCEx_PLL2_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032e8:	e00f      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032ee:	3328      	adds	r3, #40	; 0x28
 80032f0:	2101      	movs	r1, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fd3e 	bl	8003d74 <RCCEx_PLL3_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032fe:	e004      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800330a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003312:	4b96      	ldr	r3, [pc, #600]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f023 0107 	bic.w	r1, r3, #7
 800331a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	4a92      	ldr	r2, [pc, #584]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003322:	430b      	orrs	r3, r1
 8003324:	6553      	str	r3, [r2, #84]	; 0x54
 8003326:	e003      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800332c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f002 0304 	and.w	r3, r2, #4
 800333c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003340:	2300      	movs	r3, #0
 8003342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003346:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800334a:	460b      	mov	r3, r1
 800334c:	4313      	orrs	r3, r2
 800334e:	d044      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	2b05      	cmp	r3, #5
 800335a:	d825      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	080033b1 	.word	0x080033b1
 8003368:	0800337d 	.word	0x0800337d
 800336c:	08003393 	.word	0x08003393
 8003370:	080033b1 	.word	0x080033b1
 8003374:	080033b1 	.word	0x080033b1
 8003378:	080033b1 	.word	0x080033b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800337c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003380:	3308      	adds	r3, #8
 8003382:	2101      	movs	r1, #1
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fc43 	bl	8003c10 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003390:	e00f      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003396:	3328      	adds	r3, #40	; 0x28
 8003398:	2101      	movs	r1, #1
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fcea 	bl	8003d74 <RCCEx_PLL3_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033a6:	e004      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80033b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ba:	4b6c      	ldr	r3, [pc, #432]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	f023 0107 	bic.w	r1, r3, #7
 80033c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a68      	ldr	r2, [pc, #416]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6593      	str	r3, [r2, #88]	; 0x58
 80033d0:	e003      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f002 0320 	and.w	r3, r2, #32
 80033e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4313      	orrs	r3, r2
 80033f8:	d055      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80033fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003406:	d033      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340c:	d82c      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003412:	d02f      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d826      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800341a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800341e:	d02b      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003420:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003424:	d820      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342a:	d012      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003430:	d81a      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d022      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800343a:	d115      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003440:	3308      	adds	r3, #8
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fbe3 	bl	8003c10 <RCCEx_PLL2_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003450:	e015      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003456:	3328      	adds	r3, #40	; 0x28
 8003458:	2102      	movs	r1, #2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fc8a 	bl	8003d74 <RCCEx_PLL3_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003466:	e00a      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800346e:	e006      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003470:	bf00      	nop
 8003472:	e004      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003474:	bf00      	nop
 8003476:	e002      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003478:	bf00      	nop
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800347c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800348e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003496:	4a35      	ldr	r2, [pc, #212]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003498:	430b      	orrs	r3, r1
 800349a:	6553      	str	r3, [r2, #84]	; 0x54
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80034b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034bc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d058      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034d2:	d033      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80034d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034d8:	d82c      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	d02f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e4:	d826      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80034e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ea:	d02b      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80034ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034f0:	d820      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80034f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f6:	d012      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80034f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fc:	d81a      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d022      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d115      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800350c:	3308      	adds	r3, #8
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fb7d 	bl	8003c10 <RCCEx_PLL2_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800351c:	e015      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800351e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003522:	3328      	adds	r3, #40	; 0x28
 8003524:	2102      	movs	r1, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fc24 	bl	8003d74 <RCCEx_PLL3_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003532:	e00a      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800353a:	e006      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800353c:	bf00      	nop
 800353e:	e004      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003540:	bf00      	nop
 8003542:	e002      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10e      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800355a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800355e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003562:	4a02      	ldr	r2, [pc, #8]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003564:	430b      	orrs	r3, r1
 8003566:	6593      	str	r3, [r2, #88]	; 0x58
 8003568:	e006      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800356a:	bf00      	nop
 800356c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003574:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800358e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	d055      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800359c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035a4:	d033      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80035a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035aa:	d82c      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b0:	d02f      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80035b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b6:	d826      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035bc:	d02b      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80035be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035c2:	d820      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c8:	d012      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80035ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ce:	d81a      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d022      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d8:	d115      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035de:	3308      	adds	r3, #8
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb14 	bl	8003c10 <RCCEx_PLL2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035ee:	e015      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f4:	3328      	adds	r3, #40	; 0x28
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fbbb 	bl	8003d74 <RCCEx_PLL3_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003604:	e00a      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800360c:	e006      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800360e:	bf00      	nop
 8003610:	e004      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003612:	bf00      	nop
 8003614:	e002      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800361a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003624:	4ba0      	ldr	r3, [pc, #640]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800362c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003630:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003634:	4a9c      	ldr	r2, [pc, #624]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003636:	430b      	orrs	r3, r1
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003640:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f002 0308 	and.w	r3, r2, #8
 8003650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800365a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	d01e      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003676:	3328      	adds	r3, #40	; 0x28
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fb7a 	bl	8003d74 <RCCEx_PLL3_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800368c:	4b86      	ldr	r3, [pc, #536]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369c:	4a82      	ldr	r2, [pc, #520]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f002 0310 	and.w	r3, r2, #16
 80036ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80036bc:	460b      	mov	r3, r1
 80036be:	4313      	orrs	r3, r2
 80036c0:	d01e      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ce:	d10c      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036d4:	3328      	adds	r3, #40	; 0x28
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fb4b 	bl	8003d74 <RCCEx_PLL3_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ea:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fa:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800370c:	67bb      	str	r3, [r7, #120]	; 0x78
 800370e:	2300      	movs	r3, #0
 8003710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003712:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d03e      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800371c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003728:	d022      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800372a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800372e:	d81b      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d00b      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800373a:	e015      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800373c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003740:	3308      	adds	r3, #8
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fa63 	bl	8003c10 <RCCEx_PLL2_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003750:	e00f      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003756:	3328      	adds	r3, #40	; 0x28
 8003758:	2102      	movs	r1, #2
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fb0a 	bl	8003d74 <RCCEx_PLL3_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003766:	e004      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800376e:	e000      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003772:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800377a:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003786:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800378a:	4a47      	ldr	r2, [pc, #284]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800378c:	430b      	orrs	r3, r1
 800378e:	6593      	str	r3, [r2, #88]	; 0x58
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003792:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003796:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800379a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80037a6:	673b      	str	r3, [r7, #112]	; 0x70
 80037a8:	2300      	movs	r3, #0
 80037aa:	677b      	str	r3, [r7, #116]	; 0x74
 80037ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d03b      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80037b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037c2:	d01f      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80037c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037c8:	d818      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ce:	d003      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80037d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d4:	d007      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80037d6:	e011      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4a32      	ldr	r2, [pc, #200]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037e4:	e00f      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ea:	3328      	adds	r3, #40	; 0x28
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fac0 	bl	8003d74 <RCCEx_PLL3_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80037fa:	e004      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003806:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10b      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800380e:	4b26      	ldr	r3, [pc, #152]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6553      	str	r3, [r2, #84]	; 0x54
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003826:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800382a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800382e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800383a:	66bb      	str	r3, [r7, #104]	; 0x68
 800383c:	2300      	movs	r3, #0
 800383e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003840:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d034      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800384a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d007      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800385a:	e011      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4a11      	ldr	r2, [pc, #68]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003868:	e00e      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800386a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800386e:	3308      	adds	r3, #8
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f9cc 	bl	8003c10 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	4a02      	ldr	r2, [pc, #8]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80038a0:	430b      	orrs	r3, r1
 80038a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80038a6:	bf00      	nop
 80038a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
 80038c2:	2300      	movs	r3, #0
 80038c4:	667b      	str	r3, [r7, #100]	; 0x64
 80038c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d00c      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d4:	3328      	adds	r3, #40	; 0x28
 80038d6:	2102      	movs	r1, #2
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fa4b 	bl	8003d74 <RCCEx_PLL3_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80038f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80038f8:	2300      	movs	r3, #0
 80038fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800390a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d018      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003916:	d811      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d014      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d80b      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d011      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d106      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4bb7      	ldr	r3, [pc, #732]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4ab6      	ldr	r2, [pc, #728]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800393a:	e008      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003942:	e004      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003944:	bf00      	nop
 8003946:	e002      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003948:	bf00      	nop
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800394c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003956:	4bad      	ldr	r3, [pc, #692]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800395e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003964:	4aa9      	ldr	r2, [pc, #676]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003966:	430b      	orrs	r3, r1
 8003968:	6553      	str	r3, [r2, #84]	; 0x54
 800396a:	e003      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003970:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003980:	653b      	str	r3, [r7, #80]	; 0x50
 8003982:	2300      	movs	r3, #0
 8003984:	657b      	str	r3, [r7, #84]	; 0x54
 8003986:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003990:	4b9e      	ldr	r3, [pc, #632]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a9b      	ldr	r2, [pc, #620]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80039b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80039b2:	2300      	movs	r3, #0
 80039b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039c0:	4b92      	ldr	r3, [pc, #584]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ce:	4a8f      	ldr	r2, [pc, #572]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80039e0:	643b      	str	r3, [r7, #64]	; 0x40
 80039e2:	2300      	movs	r3, #0
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
 80039e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80039ea:	460b      	mov	r3, r1
 80039ec:	4313      	orrs	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039f0:	4b86      	ldr	r3, [pc, #536]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	4a85      	ldr	r2, [pc, #532]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039fa:	6113      	str	r3, [r2, #16]
 80039fc:	4b83      	ldr	r3, [pc, #524]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80039fe:	6919      	ldr	r1, [r3, #16]
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a08:	4a80      	ldr	r2, [pc, #512]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a20:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003a24:	460b      	mov	r3, r1
 8003a26:	4313      	orrs	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a2a:	4b78      	ldr	r3, [pc, #480]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	4a74      	ldr	r2, [pc, #464]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a54:	460b      	mov	r3, r1
 8003a56:	4313      	orrs	r3, r2
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a5a:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	2100      	movs	r1, #0
 8003a7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a82:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	d011      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a90:	3308      	adds	r3, #8
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f8bb 	bl	8003c10 <RCCEx_PLL2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	2100      	movs	r1, #0
 8003aba:	6239      	str	r1, [r7, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	d011      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 f89b 	bl	8003c10 <RCCEx_PLL2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	2100      	movs	r1, #0
 8003afa:	61b9      	str	r1, [r7, #24]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d011      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b10:	3308      	adds	r3, #8
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f87b 	bl	8003c10 <RCCEx_PLL2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003b20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	2100      	movs	r1, #0
 8003b3a:	6139      	str	r1, [r7, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	d011      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b50:	3328      	adds	r3, #40	; 0x28
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f90d 	bl	8003d74 <RCCEx_PLL3_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d011      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b90:	3328      	adds	r3, #40	; 0x28
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f8ed 	bl	8003d74 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6039      	str	r1, [r7, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	d011      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd0:	3328      	adds	r3, #40	; 0x28
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 f8cd 	bl	8003d74 <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003bf0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	58024400 	.word	0x58024400

08003c10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c1e:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d101      	bne.n	8003c2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e099      	b.n	8003d62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c2e:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a4e      	ldr	r2, [pc, #312]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003c34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3a:	f7fc fe3f 	bl	80008bc <HAL_GetTick>
 8003c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c42:	f7fc fe3b 	bl	80008bc <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e086      	b.n	8003d62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c54:	4b45      	ldr	r3, [pc, #276]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c60:	4b42      	ldr	r3, [pc, #264]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	031b      	lsls	r3, r3, #12
 8003c6e:	493f      	ldr	r1, [pc, #252]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	628b      	str	r3, [r1, #40]	; 0x28
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	025b      	lsls	r3, r3, #9
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	061b      	lsls	r3, r3, #24
 8003ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ca4:	4931      	ldr	r1, [pc, #196]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003caa:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	492d      	ldr	r1, [pc, #180]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f023 0220 	bic.w	r2, r3, #32
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	4928      	ldr	r1, [pc, #160]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003cce:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cd4:	f023 0310 	bic.w	r3, r3, #16
 8003cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <RCCEx_PLL2_Config+0x160>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	69d2      	ldr	r2, [r2, #28]
 8003ce6:	00d2      	lsls	r2, r2, #3
 8003ce8:	4920      	ldr	r1, [pc, #128]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	f043 0310 	orr.w	r3, r3, #16
 8003cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d0c:	e00f      	b.n	8003d2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d106      	bne.n	8003d22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d20:	e005      	b.n	8003d2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d3a:	f7fc fdbf 	bl	80008bc <HAL_GetTick>
 8003d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d40:	e008      	b.n	8003d54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d42:	f7fc fdbb 	bl	80008bc <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e006      	b.n	8003d62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <RCCEx_PLL2_Config+0x15c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	ffff0007 	.word	0xffff0007

08003d74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d82:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d101      	bne.n	8003d92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e099      	b.n	8003ec6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d92:	4b4f      	ldr	r3, [pc, #316]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a4e      	ldr	r2, [pc, #312]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9e:	f7fc fd8d 	bl	80008bc <HAL_GetTick>
 8003da2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003da6:	f7fc fd89 	bl	80008bc <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e086      	b.n	8003ec6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003dc4:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	051b      	lsls	r3, r3, #20
 8003dd2:	493f      	ldr	r1, [pc, #252]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	628b      	str	r3, [r1, #40]	; 0x28
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	025b      	lsls	r3, r3, #9
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e08:	4931      	ldr	r1, [pc, #196]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e0e:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	492d      	ldr	r1, [pc, #180]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	4928      	ldr	r1, [pc, #160]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e32:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <RCCEx_PLL3_Config+0x160>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	69d2      	ldr	r2, [r2, #28]
 8003e4a:	00d2      	lsls	r2, r2, #3
 8003e4c:	4920      	ldr	r1, [pc, #128]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e70:	e00f      	b.n	8003e92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e84:	e005      	b.n	8003e92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9e:	f7fc fd0d 	bl	80008bc <HAL_GetTick>
 8003ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ea4:	e008      	b.n	8003eb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ea6:	f7fc fd09 	bl	80008bc <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e006      	b.n	8003ec6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <RCCEx_PLL3_Config+0x15c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	ffff0007 	.word	0xffff0007

08003ed8 <BSP_Gyroscope_Init>:
  * @retval ErrorStatus
  *         ERROR-     0
  *         SUCCESS-   1
  */
ErrorStatus BSP_Gyroscope_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]


	(hi2c->Devaddress)=dev_addr; //device address
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	22d0      	movs	r2, #208	; 0xd0
 8003ee4:	64da      	str	r2, [r3, #76]	; 0x4c
	(hi2c->State)=HAL_I2C_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	(hi2c->Mode)=HAL_I2C_MODE_MASTER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	(hi2c->XferSize)=1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
	(hi2c->pBuffPtr)=&buf;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a06      	ldr	r2, [pc, #24]	; (8003f18 <BSP_Gyroscope_Init+0x40>)
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
	(hi2c->ErrorCode)=HAL_I2C_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44

    return SUCCESS;
 8003f08:	2300      	movs	r3, #0

	/* USER CODE END I2C1_Init */

}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2400012c 	.word	0x2400012c
 8003f1c:	00000000 	.word	0x00000000

08003f20 <BSP_Gyroscope_SelfTest>:
  *         ERROR-     0
  *         SUCCESS-   1
  */

ErrorStatus BSP_Gyroscope_SelfTest(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b090      	sub	sp, #64	; 0x40
 8003f24:	af04      	add	r7, sp, #16
 8003f26:	6078      	str	r0, [r7, #4]
    uint32_t TIMER_Simulator_Var;
	uint8_t rawData[4];
    float selfTest[6];
    int i;

	(hi2c->Devaddress)=dev_addr; //device address
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	22d0      	movs	r2, #208	; 0xd0
 8003f2c:	64da      	str	r2, [r3, #76]	; 0x4c
	(hi2c->Memaddress)=0x1B;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	221b      	movs	r2, #27
 8003f32:	651a      	str	r2, [r3, #80]	; 0x50

    buf_1=0xE0;
 8003f34:	4b80      	ldr	r3, [pc, #512]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8003f36:	22e0      	movs	r2, #224	; 0xe0
 8003f38:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1B, 1, &buf_1, 1, 50) != HAL_OK)
 8003f3a:	2332      	movs	r3, #50	; 0x32
 8003f3c:	9302      	str	r3, [sp, #8]
 8003f3e:	2301      	movs	r3, #1
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	4b7d      	ldr	r3, [pc, #500]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	2301      	movs	r3, #1
 8003f48:	221b      	movs	r2, #27
 8003f4a:	21d0      	movs	r1, #208	; 0xd0
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fc ffdd 	bl	8000f0c <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */}
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003f56:	bf00      	nop
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d006      	beq.n	8003f72 <BSP_Gyroscope_SelfTest+0x52>
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	3301      	adds	r3, #1
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	4a73      	ldr	r2, [pc, #460]	; (800413c <BSP_Gyroscope_SelfTest+0x21c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d9f2      	bls.n	8003f58 <BSP_Gyroscope_SelfTest+0x38>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	4a72      	ldr	r2, [pc, #456]	; (8004140 <BSP_Gyroscope_SelfTest+0x220>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <BSP_Gyroscope_SelfTest+0x5e>
    {
        return ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e26e      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }


    (hi2c->Memaddress)=0x1C;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	221c      	movs	r2, #28
 8003f82:	651a      	str	r2, [r3, #80]	; 0x50

    buf_1=0xF0;
 8003f84:	4b6c      	ldr	r3, [pc, #432]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8003f86:	22f0      	movs	r2, #240	; 0xf0
 8003f88:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1B, 1, &buf_1, 1, 50) != HAL_OK)
 8003f8a:	2332      	movs	r3, #50	; 0x32
 8003f8c:	9302      	str	r3, [sp, #8]
 8003f8e:	2301      	movs	r3, #1
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	4b69      	ldr	r3, [pc, #420]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2301      	movs	r3, #1
 8003f98:	221b      	movs	r2, #27
 8003f9a:	21d0      	movs	r1, #208	; 0xd0
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fc ffb5 	bl	8000f0c <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */}
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003fa6:	bf00      	nop
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d006      	beq.n	8003fc2 <BSP_Gyroscope_SelfTest+0xa2>
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	4a5f      	ldr	r2, [pc, #380]	; (800413c <BSP_Gyroscope_SelfTest+0x21c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d9f2      	bls.n	8003fa8 <BSP_Gyroscope_SelfTest+0x88>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	4a5e      	ldr	r2, [pc, #376]	; (8004140 <BSP_Gyroscope_SelfTest+0x220>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <BSP_Gyroscope_SelfTest+0xae>
    {
        return ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e246      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }


    (hi2c->Memaddress)=SELF_TEST_X;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	220d      	movs	r2, #13
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_X, 1, &buf_1, 1, 50) != HAL_OK)
 8003fd4:	2332      	movs	r3, #50	; 0x32
 8003fd6:	9302      	str	r3, [sp, #8]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	4b56      	ldr	r3, [pc, #344]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	220d      	movs	r2, #13
 8003fe4:	21d0      	movs	r1, #208	; 0xd0
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd f8a4 	bl	8001134 <HAL_I2C_Mem_Read>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <BSP_Gyroscope_SelfTest+0xd6>
    {
    	return ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e232      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }
    /* Wait for end of transfer */

    TIMER_Simulator_Var = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8003ffa:	bf00      	nop
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	d006      	beq.n	8004016 <BSP_Gyroscope_SelfTest+0xf6>
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	3301      	adds	r3, #1
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	4a4a      	ldr	r2, [pc, #296]	; (800413c <BSP_Gyroscope_SelfTest+0x21c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d9f2      	bls.n	8003ffc <BSP_Gyroscope_SelfTest+0xdc>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	4a49      	ldr	r2, [pc, #292]	; (8004140 <BSP_Gyroscope_SelfTest+0x220>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <BSP_Gyroscope_SelfTest+0x102>
    {
        return ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e21c      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }
    rawData[0] = buf_1;
 8004022:	4b45      	ldr	r3, [pc, #276]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


    (hi2c->Memaddress)=SELF_TEST_Y;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	220e      	movs	r2, #14
 800402e:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_Y, 1, &buf_1, 1, 50) != HAL_OK)
 8004030:	2332      	movs	r3, #50	; 0x32
 8004032:	9302      	str	r3, [sp, #8]
 8004034:	2301      	movs	r3, #1
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2301      	movs	r3, #1
 800403e:	220e      	movs	r2, #14
 8004040:	21d0      	movs	r1, #208	; 0xd0
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd f876 	bl	8001134 <HAL_I2C_Mem_Read>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <BSP_Gyroscope_SelfTest+0x132>
    {
    	return ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e204      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }
    /* Wait for end of transfer */


    TIMER_Simulator_Var = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004056:	bf00      	nop
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b20      	cmp	r3, #32
 8004062:	d006      	beq.n	8004072 <BSP_Gyroscope_SelfTest+0x152>
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	3301      	adds	r3, #1
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	4a33      	ldr	r2, [pc, #204]	; (800413c <BSP_Gyroscope_SelfTest+0x21c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d9f2      	bls.n	8004058 <BSP_Gyroscope_SelfTest+0x138>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	4a32      	ldr	r2, [pc, #200]	; (8004140 <BSP_Gyroscope_SelfTest+0x220>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <BSP_Gyroscope_SelfTest+0x15e>
    {
        return ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1ee      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }
    rawData[1] = buf_1;
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


    (hi2c->Memaddress)=SELF_TEST_Z;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	220f      	movs	r2, #15
 800408a:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_Z, 1, &buf_1, 1, 50) != HAL_OK)
 800408c:	2332      	movs	r3, #50	; 0x32
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	2301      	movs	r3, #1
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	4b28      	ldr	r3, [pc, #160]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2301      	movs	r3, #1
 800409a:	220f      	movs	r2, #15
 800409c:	21d0      	movs	r1, #208	; 0xd0
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fd f848 	bl	8001134 <HAL_I2C_Mem_Read>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <BSP_Gyroscope_SelfTest+0x18e>
    {
    	return ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e1d6      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }
    /* Wait for end of transfer */


    TIMER_Simulator_Var = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80040b2:	bf00      	nop
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d006      	beq.n	80040ce <BSP_Gyroscope_SelfTest+0x1ae>
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	3301      	adds	r3, #1
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <BSP_Gyroscope_SelfTest+0x21c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d9f2      	bls.n	80040b4 <BSP_Gyroscope_SelfTest+0x194>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <BSP_Gyroscope_SelfTest+0x220>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <BSP_Gyroscope_SelfTest+0x1ba>
    {
        return ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e1c0      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }
    rawData[2] = buf_1;
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


    (hi2c->Memaddress)=SELF_TEST_A;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2210      	movs	r2, #16
 80040e6:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, SELF_TEST_A, 1, &buf_1, 1, 50) != HAL_OK)
 80040e8:	2332      	movs	r3, #50	; 0x32
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	2301      	movs	r3, #1
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <BSP_Gyroscope_SelfTest+0x218>)
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2301      	movs	r3, #1
 80040f6:	2210      	movs	r2, #16
 80040f8:	21d0      	movs	r1, #208	; 0xd0
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd f81a 	bl	8001134 <HAL_I2C_Mem_Read>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <BSP_Gyroscope_SelfTest+0x1ea>
    {
    	return ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e1a8      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    }
    /* Wait for end of transfer */


    TIMER_Simulator_Var = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 800410e:	bf00      	nop
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d006      	beq.n	800412a <BSP_Gyroscope_SelfTest+0x20a>
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	3301      	adds	r3, #1
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	4a05      	ldr	r2, [pc, #20]	; (800413c <BSP_Gyroscope_SelfTest+0x21c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d9f2      	bls.n	8004110 <BSP_Gyroscope_SelfTest+0x1f0>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <BSP_Gyroscope_SelfTest+0x220>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <BSP_Gyroscope_SelfTest+0x224>
    {
        return ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e192      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
 8004136:	bf00      	nop
 8004138:	2400012d 	.word	0x2400012d
 800413c:	000ffffe 	.word	0x000ffffe
 8004140:	000fffff 	.word	0x000fffff
    }
    rawData[3] = buf_1;
 8004144:	4bce      	ldr	r3, [pc, #824]	; (8004480 <BSP_Gyroscope_SelfTest+0x560>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27



    // Extract the acceleration test results first
    selfTest[0] = (rawData[0] >> 3) | (rawData[3] & 0x30) >> 4 ; // XA_TEST result is a five-bit unsigned integer
 800414c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800415a:	111b      	asrs	r3, r3, #4
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	4313      	orrs	r3, r2
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800416a:	edc7 7a03 	vstr	s15, [r7, #12]
    selfTest[1] = (rawData[1] >> 3) | (rawData[3] & 0x0C) >> 2 ; // YA_TEST result is a five-bit unsigned integer
 800416e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004172:	08db      	lsrs	r3, r3, #3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800417c:	109b      	asrs	r3, r3, #2
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	4313      	orrs	r3, r2
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800418c:	edc7 7a04 	vstr	s15, [r7, #16]
    selfTest[2] = (rawData[2] >> 3) | (rawData[3] & 0x03) >> 0 ; // ZA_TEST result is a five-bit unsigned integer
 8004190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004194:	08db      	lsrs	r3, r3, #3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	4313      	orrs	r3, r2
 80041a4:	ee07 3a90 	vmov	s15, r3
 80041a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ac:	edc7 7a05 	vstr	s15, [r7, #20]
    // Extract the gyration test results first
    selfTest[3] = rawData[0]  & 0x1F ; // XG_TEST result is a five-bit unsigned integer
 80041b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c0:	edc7 7a06 	vstr	s15, [r7, #24]
    selfTest[4] = rawData[1]  & 0x1F ; // YG_TEST result is a five-bit unsigned integer
 80041c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d4:	edc7 7a07 	vstr	s15, [r7, #28]
    selfTest[5] = rawData[2]  & 0x1F ; // ZG_TEST result is a five-bit unsigned integer
 80041d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Process results to allow final comparison with factory set values
    factoryTrim[0] = (int)(4096.0*0.34)*(int)(pow( (0.92/0.34), (((float)selfTest[0] - 1.0)/30.0)));  // FT[Xa] factory trim calculation
 80041ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80041f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80041f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041fc:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8004200:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004204:	eeb0 1b46 	vmov.f64	d1, d6
 8004208:	ed9f 0b97 	vldr	d0, [pc, #604]	; 8004468 <BSP_Gyroscope_SelfTest+0x548>
 800420c:	f000 fe2c 	bl	8004e68 <pow>
 8004210:	eeb0 7b40 	vmov.f64	d7, d0
 8004214:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004218:	ee17 2a90 	vmov	r2, s15
 800421c:	f44f 63ae 	mov.w	r3, #1392	; 0x570
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800422c:	4b95      	ldr	r3, [pc, #596]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 800422e:	edc3 7a00 	vstr	s15, [r3]
    factoryTrim[1] = (int)(4096.0*0.34)*(int)(pow( (0.92/0.34), (((float)selfTest[1] - 1.0)/30.0)));  // FT[Ya] factory trim calculation
 8004232:	edd7 7a04 	vldr	s15, [r7, #16]
 8004236:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800423a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800423e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004242:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8004246:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800424a:	eeb0 1b46 	vmov.f64	d1, d6
 800424e:	ed9f 0b86 	vldr	d0, [pc, #536]	; 8004468 <BSP_Gyroscope_SelfTest+0x548>
 8004252:	f000 fe09 	bl	8004e68 <pow>
 8004256:	eeb0 7b40 	vmov.f64	d7, d0
 800425a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800425e:	ee17 2a90 	vmov	r2, s15
 8004262:	f44f 63ae 	mov.w	r3, #1392	; 0x570
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004272:	4b84      	ldr	r3, [pc, #528]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 8004274:	edc3 7a01 	vstr	s15, [r3, #4]
    factoryTrim[2] = (int)(4096.0*0.34)*(int)(pow( (0.92/0.34), (((float)selfTest[2] - 1.0)/30.0)));  // FT[Za] factory trim calculation
 8004278:	edd7 7a05 	vldr	s15, [r7, #20]
 800427c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004280:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004284:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004288:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 800428c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004290:	eeb0 1b46 	vmov.f64	d1, d6
 8004294:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8004468 <BSP_Gyroscope_SelfTest+0x548>
 8004298:	f000 fde6 	bl	8004e68 <pow>
 800429c:	eeb0 7b40 	vmov.f64	d7, d0
 80042a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80042a4:	ee17 2a90 	vmov	r2, s15
 80042a8:	f44f 63ae 	mov.w	r3, #1392	; 0x570
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b8:	4b72      	ldr	r3, [pc, #456]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 80042ba:	edc3 7a02 	vstr	s15, [r3, #8]
    factoryTrim[3] =  (int)( 25.0*131.0)*(int)(pow( 1.046, ((float)selfTest[3] - 1.0) ));              // FT[Xg] factory trim calculation
 80042be:	edd7 7a06 	vldr	s15, [r7, #24]
 80042c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042c6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80042ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042ce:	eeb0 1b47 	vmov.f64	d1, d7
 80042d2:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8004470 <BSP_Gyroscope_SelfTest+0x550>
 80042d6:	f000 fdc7 	bl	8004e68 <pow>
 80042da:	eeb0 7b40 	vmov.f64	d7, d0
 80042de:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80042e2:	ee17 2a90 	vmov	r2, s15
 80042e6:	f640 43cb 	movw	r3, #3275	; 0xccb
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f6:	4b63      	ldr	r3, [pc, #396]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 80042f8:	edc3 7a03 	vstr	s15, [r3, #12]
    factoryTrim[4] =  (int)(-25.0*131.0)*(int)(pow( 1.046, ((float)selfTest[4] - 1.0) ));              // FT[Yg] factory trim calculation
 80042fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004300:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004304:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800430c:	eeb0 1b47 	vmov.f64	d1, d7
 8004310:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8004470 <BSP_Gyroscope_SelfTest+0x550>
 8004314:	f000 fda8 	bl	8004e68 <pow>
 8004318:	eeb0 7b40 	vmov.f64	d7, d0
 800431c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004320:	ee17 2a90 	vmov	r2, s15
 8004324:	4b58      	ldr	r3, [pc, #352]	; (8004488 <BSP_Gyroscope_SelfTest+0x568>)
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004332:	4b54      	ldr	r3, [pc, #336]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 8004334:	edc3 7a04 	vstr	s15, [r3, #16]
    factoryTrim[5] =  (int)( 25.0*131.0)*(int)(pow( 1.046, ((float)selfTest[5] - 1.0) ));              // FT[Zg] factory trim calculation
 8004338:	edd7 7a08 	vldr	s15, [r7, #32]
 800433c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004340:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004344:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004348:	eeb0 1b47 	vmov.f64	d1, d7
 800434c:	ed9f 0b48 	vldr	d0, [pc, #288]	; 8004470 <BSP_Gyroscope_SelfTest+0x550>
 8004350:	f000 fd8a 	bl	8004e68 <pow>
 8004354:	eeb0 7b40 	vmov.f64	d7, d0
 8004358:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800435c:	ee17 2a90 	vmov	r2, s15
 8004360:	f640 43cb 	movw	r3, #3275	; 0xccb
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004370:	4b44      	ldr	r3, [pc, #272]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 8004372:	edc3 7a05 	vstr	s15, [r3, #20]

    for (i = 0; i < 6; i++)
 8004376:	2300      	movs	r3, #0
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	e02d      	b.n	80043d8 <BSP_Gyroscope_SelfTest+0x4b8>
        destination[i] = 100.0 + (100.0*((float)selfTest[i] - factoryTrim[i])/factoryTrim[i]); // Report percent differences
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	3330      	adds	r3, #48	; 0x30
 8004382:	443b      	add	r3, r7
 8004384:	3b24      	subs	r3, #36	; 0x24
 8004386:	ed93 7a00 	vldr	s14, [r3]
 800438a:	4a3e      	ldr	r2, [pc, #248]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800439a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800439e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004478 <BSP_Gyroscope_SelfTest+0x558>
 80043a2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80043a6:	4a37      	ldr	r2, [pc, #220]	; (8004484 <BSP_Gyroscope_SelfTest+0x564>)
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80043b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80043ba:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8004478 <BSP_Gyroscope_SelfTest+0x558>
 80043be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80043c6:	4a31      	ldr	r2, [pc, #196]	; (800448c <BSP_Gyroscope_SelfTest+0x56c>)
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < 6; i++)
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	3301      	adds	r3, #1
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	2b05      	cmp	r3, #5
 80043dc:	ddce      	ble.n	800437c <BSP_Gyroscope_SelfTest+0x45c>

    if(destination[0]<1 && destination[1]<1 && destination[2] < 1 && destination[3] < 1 && destination[4] < 1 && destination[5] < 1)
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <BSP_Gyroscope_SelfTest+0x56c>)
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f0:	d533      	bpl.n	800445a <BSP_Gyroscope_SelfTest+0x53a>
 80043f2:	4b26      	ldr	r3, [pc, #152]	; (800448c <BSP_Gyroscope_SelfTest+0x56c>)
 80043f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80043f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	d529      	bpl.n	800445a <BSP_Gyroscope_SelfTest+0x53a>
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <BSP_Gyroscope_SelfTest+0x56c>)
 8004408:	edd3 7a02 	vldr	s15, [r3, #8]
 800440c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	d51f      	bpl.n	800445a <BSP_Gyroscope_SelfTest+0x53a>
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <BSP_Gyroscope_SelfTest+0x56c>)
 800441c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442c:	d515      	bpl.n	800445a <BSP_Gyroscope_SelfTest+0x53a>
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <BSP_Gyroscope_SelfTest+0x56c>)
 8004430:	edd3 7a04 	vldr	s15, [r3, #16]
 8004434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	d50b      	bpl.n	800445a <BSP_Gyroscope_SelfTest+0x53a>
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <BSP_Gyroscope_SelfTest+0x56c>)
 8004444:	edd3 7a05 	vldr	s15, [r3, #20]
 8004448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800444c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	d501      	bpl.n	800445a <BSP_Gyroscope_SelfTest+0x53a>
        return SUCCESS;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <BSP_Gyroscope_SelfTest+0x53c>
    return      ERROR;
 800445a:	2301      	movs	r3, #1
}
 800445c:	4618      	mov	r0, r3
 800445e:	3730      	adds	r7, #48	; 0x30
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	f3af 8000 	nop.w
 8004468:	a5a5a5a5 	.word	0xa5a5a5a5
 800446c:	4005a5a5 	.word	0x4005a5a5
 8004470:	7ef9db23 	.word	0x7ef9db23
 8004474:	3ff0bc6a 	.word	0x3ff0bc6a
 8004478:	00000000 	.word	0x00000000
 800447c:	40590000 	.word	0x40590000
 8004480:	2400012d 	.word	0x2400012d
 8004484:	24000130 	.word	0x24000130
 8004488:	fffff335 	.word	0xfffff335
 800448c:	24000148 	.word	0x24000148

08004490 <BSP_Gyroscope_ReadRegister>:
  *         ERROR-     0
  *         SUCCESS-   1
  */

ErrorStatus BSP_Gyroscope_ReadRegister(I2C_HandleTypeDef *hi2c,uint8_t addr, uint8_t *data_buffer)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af04      	add	r7, sp, #16
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	460b      	mov	r3, r1
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	72fb      	strb	r3, [r7, #11]
    uint32_t TIMER_Simulator_Var;


    (hi2c->Memaddress)=addr;
 800449e:	7afa      	ldrb	r2, [r7, #11]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, addr, 1, &buf_1, 1, 50) != HAL_OK)
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	2332      	movs	r3, #50	; 0x32
 80044aa:	9302      	str	r3, [sp, #8]
 80044ac:	2301      	movs	r3, #1
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	4b15      	ldr	r3, [pc, #84]	; (8004508 <BSP_Gyroscope_ReadRegister+0x78>)
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2301      	movs	r3, #1
 80044b6:	21d0      	movs	r1, #208	; 0xd0
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7fc fe3b 	bl	8001134 <HAL_I2C_Mem_Read>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <BSP_Gyroscope_ReadRegister+0x38>
    {
    	return ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e01a      	b.n	80044fe <BSP_Gyroscope_ReadRegister+0x6e>
    }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80044cc:	bf00      	nop
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d006      	beq.n	80044e8 <BSP_Gyroscope_ReadRegister+0x58>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	3301      	adds	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <BSP_Gyroscope_ReadRegister+0x7c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d9f2      	bls.n	80044ce <BSP_Gyroscope_ReadRegister+0x3e>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <BSP_Gyroscope_ReadRegister+0x80>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <BSP_Gyroscope_ReadRegister+0x64>
    {
        return ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e004      	b.n	80044fe <BSP_Gyroscope_ReadRegister+0x6e>
    }


    *data_buffer=buf_1;
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <BSP_Gyroscope_ReadRegister+0x78>)
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	701a      	strb	r2, [r3, #0]

    return SUCCESS;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2400012d 	.word	0x2400012d
 800450c:	000ffffe 	.word	0x000ffffe
 8004510:	000fffff 	.word	0x000fffff
 8004514:	00000000 	.word	0x00000000

08004518 <BSP_Gyroscope_GetValues>:
  *         ERROR-     0
  *         SUCCESS-   1
  */

ErrorStatus BSP_Gyroscope_GetValues(I2C_HandleTypeDef *hi2c, BSP_GyrFetchTypeDef* BSP_GyrFetchStructure)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af04      	add	r7, sp, #16
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
    uint32_t TIMER_Simulator_Var;


    /*******/

	(hi2c->Devaddress)=dev_addr; //device address
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	22d0      	movs	r2, #208	; 0xd0
 8004526:	64da      	str	r2, [r3, #76]	; 0x4c
	(hi2c->Memaddress)=0x6B;    // power management 1 register
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	226b      	movs	r2, #107	; 0x6b
 800452c:	651a      	str	r2, [r3, #80]	; 0x50


    buf_1=0x00; // for setting bit 6 of this register to 0
 800452e:	4b99      	ldr	r3, [pc, #612]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x6B, 1, &buf_1, 1, 50) != HAL_OK)
 8004534:	2332      	movs	r3, #50	; 0x32
 8004536:	9302      	str	r3, [sp, #8]
 8004538:	2301      	movs	r3, #1
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	4b95      	ldr	r3, [pc, #596]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2301      	movs	r3, #1
 8004542:	226b      	movs	r2, #107	; 0x6b
 8004544:	21d0      	movs	r1, #208	; 0xd0
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fce0 	bl	8000f0c <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */  }
    /* Wait the end of transfer */


    TIMER_Simulator_Var = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004550:	bf00      	nop
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d006      	beq.n	800456c <BSP_Gyroscope_GetValues+0x54>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a8c      	ldr	r2, [pc, #560]	; (8004798 <BSP_Gyroscope_GetValues+0x280>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d9f2      	bls.n	8004552 <BSP_Gyroscope_GetValues+0x3a>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a8b      	ldr	r2, [pc, #556]	; (800479c <BSP_Gyroscope_GetValues+0x284>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <BSP_Gyroscope_GetValues+0x60>
    {
        return ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e3e8      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }


	(hi2c->Memaddress)=0x1B;  //gyroscope configuration register
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	221b      	movs	r2, #27
 800457c:	651a      	str	r2, [r3, #80]	; 0x50

    buf_1=0x00; // for writing 00000010 into configuration register
 800457e:	4b85      	ldr	r3, [pc, #532]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1B, 1, &buf_1, 1, 50) != HAL_OK)
 8004584:	2332      	movs	r3, #50	; 0x32
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	2301      	movs	r3, #1
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	4b81      	ldr	r3, [pc, #516]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2301      	movs	r3, #1
 8004592:	221b      	movs	r2, #27
 8004594:	21d0      	movs	r1, #208	; 0xd0
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fc fcb8 	bl	8000f0c <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */  }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80045a0:	bf00      	nop
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d006      	beq.n	80045bc <BSP_Gyroscope_GetValues+0xa4>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a78      	ldr	r2, [pc, #480]	; (8004798 <BSP_Gyroscope_GetValues+0x280>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d9f2      	bls.n	80045a2 <BSP_Gyroscope_GetValues+0x8a>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a77      	ldr	r2, [pc, #476]	; (800479c <BSP_Gyroscope_GetValues+0x284>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <BSP_Gyroscope_GetValues+0xb0>
    {
        return ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e3c0      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }


	(hi2c->Memaddress)=0x1C;  //accelerometer configuration register
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	221c      	movs	r2, #28
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50

    buf_1=0x00; // for writing 00000000 into configuration register
 80045ce:	4b71      	ldr	r3, [pc, #452]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(hi2c, dev_addr, 0x1C, 1, &buf_1, 1, 50) != HAL_OK)
 80045d4:	2332      	movs	r3, #50	; 0x32
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	2301      	movs	r3, #1
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2301      	movs	r3, #1
 80045e2:	221c      	movs	r2, #28
 80045e4:	21d0      	movs	r1, #208	; 0xd0
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fc fc90 	bl	8000f0c <HAL_I2C_Mem_Write>
    { /* I2C bus or peripheral is not able to start communication: Error management */  }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80045f0:	bf00      	nop
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d006      	beq.n	800460c <BSP_Gyroscope_GetValues+0xf4>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3301      	adds	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a64      	ldr	r2, [pc, #400]	; (8004798 <BSP_Gyroscope_GetValues+0x280>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d9f2      	bls.n	80045f2 <BSP_Gyroscope_GetValues+0xda>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a63      	ldr	r2, [pc, #396]	; (800479c <BSP_Gyroscope_GetValues+0x284>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d101      	bne.n	8004618 <BSP_Gyroscope_GetValues+0x100>
    {
        return ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e398      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    /*************/




    (hi2c->Memaddress)=0x41;  //contains temperature value
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	; 0x41
 800461c:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x41, 1, &buf_1, 1, 50) != HAL_OK)
 800461e:	2332      	movs	r3, #50	; 0x32
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	2301      	movs	r3, #1
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	4b5b      	ldr	r3, [pc, #364]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2301      	movs	r3, #1
 800462c:	2241      	movs	r2, #65	; 0x41
 800462e:	21d0      	movs	r1, #208	; 0xd0
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc fd7f 	bl	8001134 <HAL_I2C_Mem_Read>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <BSP_Gyroscope_GetValues+0x128>
    {
    	return ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e384      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004644:	bf00      	nop
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	d006      	beq.n	8004660 <BSP_Gyroscope_GetValues+0x148>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a4f      	ldr	r2, [pc, #316]	; (8004798 <BSP_Gyroscope_GetValues+0x280>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d9f2      	bls.n	8004646 <BSP_Gyroscope_GetValues+0x12e>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a4e      	ldr	r2, [pc, #312]	; (800479c <BSP_Gyroscope_GetValues+0x284>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <BSP_Gyroscope_GetValues+0x154>
    {
        return ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e36e      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    temp=temp|buf_1;
 800466c:	4b49      	ldr	r3, [pc, #292]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b21a      	sxth	r2, r3
 8004672:	4b4b      	ldr	r3, [pc, #300]	; (80047a0 <BSP_Gyroscope_GetValues+0x288>)
 8004674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004678:	4313      	orrs	r3, r2
 800467a:	b21a      	sxth	r2, r3
 800467c:	4b48      	ldr	r3, [pc, #288]	; (80047a0 <BSP_Gyroscope_GetValues+0x288>)
 800467e:	801a      	strh	r2, [r3, #0]
    temp=temp<<8;
 8004680:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <BSP_Gyroscope_GetValues+0x288>)
 8004682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	b21a      	sxth	r2, r3
 800468a:	4b45      	ldr	r3, [pc, #276]	; (80047a0 <BSP_Gyroscope_GetValues+0x288>)
 800468c:	801a      	strh	r2, [r3, #0]

    (hi2c->Memaddress)=0x42;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2242      	movs	r2, #66	; 0x42
 8004692:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x42, 1, &buf_1, 1, 50) != HAL_OK)
 8004694:	2332      	movs	r3, #50	; 0x32
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	2301      	movs	r3, #1
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2301      	movs	r3, #1
 80046a2:	2242      	movs	r2, #66	; 0x42
 80046a4:	21d0      	movs	r1, #208	; 0xd0
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fd44 	bl	8001134 <HAL_I2C_Mem_Read>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <BSP_Gyroscope_GetValues+0x19e>
    {
    	return ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e349      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80046ba:	bf00      	nop
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d006      	beq.n	80046d6 <BSP_Gyroscope_GetValues+0x1be>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a31      	ldr	r2, [pc, #196]	; (8004798 <BSP_Gyroscope_GetValues+0x280>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d9f2      	bls.n	80046bc <BSP_Gyroscope_GetValues+0x1a4>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a30      	ldr	r2, [pc, #192]	; (800479c <BSP_Gyroscope_GetValues+0x284>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <BSP_Gyroscope_GetValues+0x1ca>
    {
        return ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e333      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    temp=temp | buf_1;
 80046e2:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b21a      	sxth	r2, r3
 80046e8:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <BSP_Gyroscope_GetValues+0x288>)
 80046ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	b21a      	sxth	r2, r3
 80046f2:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <BSP_Gyroscope_GetValues+0x288>)
 80046f4:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x43;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2243      	movs	r2, #67	; 0x43
 80046fa:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x43, 1, &buf_1, 1, 50) != HAL_OK)
 80046fc:	2332      	movs	r3, #50	; 0x32
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	2301      	movs	r3, #1
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	4b23      	ldr	r3, [pc, #140]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2301      	movs	r3, #1
 800470a:	2243      	movs	r2, #67	; 0x43
 800470c:	21d0      	movs	r1, #208	; 0xd0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fd10 	bl	8001134 <HAL_I2C_Mem_Read>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <BSP_Gyroscope_GetValues+0x206>
    {
    	return ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e315      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004722:	bf00      	nop
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b20      	cmp	r3, #32
 800472e:	d006      	beq.n	800473e <BSP_Gyroscope_GetValues+0x226>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a17      	ldr	r2, [pc, #92]	; (8004798 <BSP_Gyroscope_GetValues+0x280>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d9f2      	bls.n	8004724 <BSP_Gyroscope_GetValues+0x20c>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <BSP_Gyroscope_GetValues+0x284>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <BSP_Gyroscope_GetValues+0x232>
    {
        return ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e2ff      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    gyr_x=gyr_x|buf_1;
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b21a      	sxth	r2, r3
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <BSP_Gyroscope_GetValues+0x28c>)
 8004752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004756:	4313      	orrs	r3, r2
 8004758:	b21a      	sxth	r2, r3
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <BSP_Gyroscope_GetValues+0x28c>)
 800475c:	801a      	strh	r2, [r3, #0]
    gyr_x=gyr_x<<8;
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <BSP_Gyroscope_GetValues+0x28c>)
 8004760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	b21a      	sxth	r2, r3
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <BSP_Gyroscope_GetValues+0x28c>)
 800476a:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x44;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2244      	movs	r2, #68	; 0x44
 8004770:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x44, 1, &buf_1, 1, 50) != HAL_OK)
 8004772:	2332      	movs	r3, #50	; 0x32
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	2301      	movs	r3, #1
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <BSP_Gyroscope_GetValues+0x27c>)
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	2301      	movs	r3, #1
 8004780:	2244      	movs	r2, #68	; 0x44
 8004782:	21d0      	movs	r1, #208	; 0xd0
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc fcd5 	bl	8001134 <HAL_I2C_Mem_Read>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <BSP_Gyroscope_GetValues+0x290>
    {
    	return ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e2da      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
 8004794:	2400012d 	.word	0x2400012d
 8004798:	000ffffe 	.word	0x000ffffe
 800479c:	000fffff 	.word	0x000fffff
 80047a0:	2400016c 	.word	0x2400016c
 80047a4:	24000166 	.word	0x24000166
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80047ac:	bf00      	nop
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d006      	beq.n	80047c8 <BSP_Gyroscope_GetValues+0x2b0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a8d      	ldr	r2, [pc, #564]	; (80049f8 <BSP_Gyroscope_GetValues+0x4e0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d9f2      	bls.n	80047ae <BSP_Gyroscope_GetValues+0x296>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a8c      	ldr	r2, [pc, #560]	; (80049fc <BSP_Gyroscope_GetValues+0x4e4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d101      	bne.n	80047d4 <BSP_Gyroscope_GetValues+0x2bc>
    {
        return ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e2ba      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    gyr_x=gyr_x | buf_1;
 80047d4:	4b8a      	ldr	r3, [pc, #552]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b21a      	sxth	r2, r3
 80047da:	4b8a      	ldr	r3, [pc, #552]	; (8004a04 <BSP_Gyroscope_GetValues+0x4ec>)
 80047dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	b21a      	sxth	r2, r3
 80047e4:	4b87      	ldr	r3, [pc, #540]	; (8004a04 <BSP_Gyroscope_GetValues+0x4ec>)
 80047e6:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x45;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2245      	movs	r2, #69	; 0x45
 80047ec:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x45, 1, &buf_1, 1, 50) != HAL_OK)
 80047ee:	2332      	movs	r3, #50	; 0x32
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	2301      	movs	r3, #1
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	4b82      	ldr	r3, [pc, #520]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	2301      	movs	r3, #1
 80047fc:	2245      	movs	r2, #69	; 0x45
 80047fe:	21d0      	movs	r1, #208	; 0xd0
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fc fc97 	bl	8001134 <HAL_I2C_Mem_Read>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <BSP_Gyroscope_GetValues+0x2f8>
    {
    	return ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e29c      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004814:	bf00      	nop
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	d006      	beq.n	8004830 <BSP_Gyroscope_GetValues+0x318>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a73      	ldr	r2, [pc, #460]	; (80049f8 <BSP_Gyroscope_GetValues+0x4e0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d9f2      	bls.n	8004816 <BSP_Gyroscope_GetValues+0x2fe>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a72      	ldr	r2, [pc, #456]	; (80049fc <BSP_Gyroscope_GetValues+0x4e4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d101      	bne.n	800483c <BSP_Gyroscope_GetValues+0x324>
    {
        return ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e286      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    gyr_y=gyr_y|buf_1;
 800483c:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b21a      	sxth	r2, r3
 8004842:	4b71      	ldr	r3, [pc, #452]	; (8004a08 <BSP_Gyroscope_GetValues+0x4f0>)
 8004844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004848:	4313      	orrs	r3, r2
 800484a:	b21a      	sxth	r2, r3
 800484c:	4b6e      	ldr	r3, [pc, #440]	; (8004a08 <BSP_Gyroscope_GetValues+0x4f0>)
 800484e:	801a      	strh	r2, [r3, #0]
    gyr_y=gyr_y<<8;
 8004850:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <BSP_Gyroscope_GetValues+0x4f0>)
 8004852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	b21a      	sxth	r2, r3
 800485a:	4b6b      	ldr	r3, [pc, #428]	; (8004a08 <BSP_Gyroscope_GetValues+0x4f0>)
 800485c:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x46;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2246      	movs	r2, #70	; 0x46
 8004862:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x46, 1, &buf_1, 1, 50) != HAL_OK)
 8004864:	2332      	movs	r3, #50	; 0x32
 8004866:	9302      	str	r3, [sp, #8]
 8004868:	2301      	movs	r3, #1
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	4b64      	ldr	r3, [pc, #400]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2301      	movs	r3, #1
 8004872:	2246      	movs	r2, #70	; 0x46
 8004874:	21d0      	movs	r1, #208	; 0xd0
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fc5c 	bl	8001134 <HAL_I2C_Mem_Read>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <BSP_Gyroscope_GetValues+0x36e>
    {
    	return ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e261      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 800488a:	bf00      	nop
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	d006      	beq.n	80048a6 <BSP_Gyroscope_GetValues+0x38e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a55      	ldr	r2, [pc, #340]	; (80049f8 <BSP_Gyroscope_GetValues+0x4e0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d9f2      	bls.n	800488c <BSP_Gyroscope_GetValues+0x374>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a54      	ldr	r2, [pc, #336]	; (80049fc <BSP_Gyroscope_GetValues+0x4e4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <BSP_Gyroscope_GetValues+0x39a>
    {
        return ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e24b      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    gyr_y= gyr_y|buf_1;
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b21a      	sxth	r2, r3
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <BSP_Gyroscope_GetValues+0x4f0>)
 80048ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048be:	4313      	orrs	r3, r2
 80048c0:	b21a      	sxth	r2, r3
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <BSP_Gyroscope_GetValues+0x4f0>)
 80048c4:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x47;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2247      	movs	r2, #71	; 0x47
 80048ca:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x47, 1, &buf_1, 1, 50) != HAL_OK)
 80048cc:	2332      	movs	r3, #50	; 0x32
 80048ce:	9302      	str	r3, [sp, #8]
 80048d0:	2301      	movs	r3, #1
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	2301      	movs	r3, #1
 80048da:	2247      	movs	r2, #71	; 0x47
 80048dc:	21d0      	movs	r1, #208	; 0xd0
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fc fc28 	bl	8001134 <HAL_I2C_Mem_Read>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <BSP_Gyroscope_GetValues+0x3d6>
    {
    	return ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e22d      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80048f2:	bf00      	nop
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d006      	beq.n	800490e <BSP_Gyroscope_GetValues+0x3f6>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a3b      	ldr	r2, [pc, #236]	; (80049f8 <BSP_Gyroscope_GetValues+0x4e0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d9f2      	bls.n	80048f4 <BSP_Gyroscope_GetValues+0x3dc>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a3a      	ldr	r2, [pc, #232]	; (80049fc <BSP_Gyroscope_GetValues+0x4e4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <BSP_Gyroscope_GetValues+0x402>
    {
        return ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e217      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    gyr_z=gyr_z|buf_1;
 800491a:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b21a      	sxth	r2, r3
 8004920:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <BSP_Gyroscope_GetValues+0x4f4>)
 8004922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004926:	4313      	orrs	r3, r2
 8004928:	b21a      	sxth	r2, r3
 800492a:	4b38      	ldr	r3, [pc, #224]	; (8004a0c <BSP_Gyroscope_GetValues+0x4f4>)
 800492c:	801a      	strh	r2, [r3, #0]
    gyr_z=gyr_z<<8;
 800492e:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <BSP_Gyroscope_GetValues+0x4f4>)
 8004930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	b21a      	sxth	r2, r3
 8004938:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <BSP_Gyroscope_GetValues+0x4f4>)
 800493a:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x48;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2248      	movs	r2, #72	; 0x48
 8004940:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x48, 1, &buf_1, 1, 50) != HAL_OK)
 8004942:	2332      	movs	r3, #50	; 0x32
 8004944:	9302      	str	r3, [sp, #8]
 8004946:	2301      	movs	r3, #1
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	2301      	movs	r3, #1
 8004950:	2248      	movs	r2, #72	; 0x48
 8004952:	21d0      	movs	r1, #208	; 0xd0
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fc fbed 	bl	8001134 <HAL_I2C_Mem_Read>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <BSP_Gyroscope_GetValues+0x44c>
    {
    	return ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e1f2      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004968:	bf00      	nop
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b20      	cmp	r3, #32
 8004974:	d006      	beq.n	8004984 <BSP_Gyroscope_GetValues+0x46c>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <BSP_Gyroscope_GetValues+0x4e0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d9f2      	bls.n	800496a <BSP_Gyroscope_GetValues+0x452>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <BSP_Gyroscope_GetValues+0x4e4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <BSP_Gyroscope_GetValues+0x478>
    {
        return ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e1dc      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    gyr_z =gyr_z|buf_1;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b21a      	sxth	r2, r3
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <BSP_Gyroscope_GetValues+0x4f4>)
 8004998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800499c:	4313      	orrs	r3, r2
 800499e:	b21a      	sxth	r2, r3
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <BSP_Gyroscope_GetValues+0x4f4>)
 80049a2:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x3B;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	223b      	movs	r2, #59	; 0x3b
 80049a8:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3B, 1, &buf_1, 1, 50) != HAL_OK)
 80049aa:	2332      	movs	r3, #50	; 0x32
 80049ac:	9302      	str	r3, [sp, #8]
 80049ae:	2301      	movs	r3, #1
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <BSP_Gyroscope_GetValues+0x4e8>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2301      	movs	r3, #1
 80049b8:	223b      	movs	r2, #59	; 0x3b
 80049ba:	21d0      	movs	r1, #208	; 0xd0
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fc fbb9 	bl	8001134 <HAL_I2C_Mem_Read>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <BSP_Gyroscope_GetValues+0x4b4>
    {
    	return ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e1be      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 80049d0:	bf00      	nop
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d006      	beq.n	80049ec <BSP_Gyroscope_GetValues+0x4d4>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <BSP_Gyroscope_GetValues+0x4e0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d9f2      	bls.n	80049d2 <BSP_Gyroscope_GetValues+0x4ba>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a03      	ldr	r2, [pc, #12]	; (80049fc <BSP_Gyroscope_GetValues+0x4e4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <BSP_Gyroscope_GetValues+0x4f8>
    {
        return ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e1a8      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
 80049f8:	000ffffe 	.word	0x000ffffe
 80049fc:	000fffff 	.word	0x000fffff
 8004a00:	2400012d 	.word	0x2400012d
 8004a04:	24000166 	.word	0x24000166
 8004a08:	24000168 	.word	0x24000168
 8004a0c:	2400016a 	.word	0x2400016a
    }
    acc_x=acc_x|buf_1;
 8004a10:	4b8c      	ldr	r3, [pc, #560]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b21a      	sxth	r2, r3
 8004a16:	4b8c      	ldr	r3, [pc, #560]	; (8004c48 <BSP_Gyroscope_GetValues+0x730>)
 8004a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	b21a      	sxth	r2, r3
 8004a20:	4b89      	ldr	r3, [pc, #548]	; (8004c48 <BSP_Gyroscope_GetValues+0x730>)
 8004a22:	801a      	strh	r2, [r3, #0]
    acc_x=acc_x<<8;
 8004a24:	4b88      	ldr	r3, [pc, #544]	; (8004c48 <BSP_Gyroscope_GetValues+0x730>)
 8004a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	b21a      	sxth	r2, r3
 8004a2e:	4b86      	ldr	r3, [pc, #536]	; (8004c48 <BSP_Gyroscope_GetValues+0x730>)
 8004a30:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x3C;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	223c      	movs	r2, #60	; 0x3c
 8004a36:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3C, 1, &buf_1, 1, 50) != HAL_OK)
 8004a38:	2332      	movs	r3, #50	; 0x32
 8004a3a:	9302      	str	r3, [sp, #8]
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	4b80      	ldr	r3, [pc, #512]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2301      	movs	r3, #1
 8004a46:	223c      	movs	r2, #60	; 0x3c
 8004a48:	21d0      	movs	r1, #208	; 0xd0
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc fb72 	bl	8001134 <HAL_I2C_Mem_Read>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <BSP_Gyroscope_GetValues+0x542>
    {
    	return ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e177      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004a5e:	bf00      	nop
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d006      	beq.n	8004a7a <BSP_Gyroscope_GetValues+0x562>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a75      	ldr	r2, [pc, #468]	; (8004c4c <BSP_Gyroscope_GetValues+0x734>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d9f2      	bls.n	8004a60 <BSP_Gyroscope_GetValues+0x548>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a74      	ldr	r2, [pc, #464]	; (8004c50 <BSP_Gyroscope_GetValues+0x738>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <BSP_Gyroscope_GetValues+0x56e>
    {
        return ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e161      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    acc_x = acc_x|buf_1;
 8004a86:	4b6f      	ldr	r3, [pc, #444]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b21a      	sxth	r2, r3
 8004a8c:	4b6e      	ldr	r3, [pc, #440]	; (8004c48 <BSP_Gyroscope_GetValues+0x730>)
 8004a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b21a      	sxth	r2, r3
 8004a96:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <BSP_Gyroscope_GetValues+0x730>)
 8004a98:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x3D;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	223d      	movs	r2, #61	; 0x3d
 8004a9e:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3D, 1, &buf_1, 1, 50) != HAL_OK)
 8004aa0:	2332      	movs	r3, #50	; 0x32
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	4b66      	ldr	r3, [pc, #408]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2301      	movs	r3, #1
 8004aae:	223d      	movs	r2, #61	; 0x3d
 8004ab0:	21d0      	movs	r1, #208	; 0xd0
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fb3e 	bl	8001134 <HAL_I2C_Mem_Read>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <BSP_Gyroscope_GetValues+0x5aa>
    {
    	return ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e143      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /*Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004ac6:	bf00      	nop
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d006      	beq.n	8004ae2 <BSP_Gyroscope_GetValues+0x5ca>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <BSP_Gyroscope_GetValues+0x734>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d9f2      	bls.n	8004ac8 <BSP_Gyroscope_GetValues+0x5b0>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a5a      	ldr	r2, [pc, #360]	; (8004c50 <BSP_Gyroscope_GetValues+0x738>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <BSP_Gyroscope_GetValues+0x5d6>
    {
        return ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e12d      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    acc_y=acc_y|buf_1;
 8004aee:	4b55      	ldr	r3, [pc, #340]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	b21a      	sxth	r2, r3
 8004af4:	4b57      	ldr	r3, [pc, #348]	; (8004c54 <BSP_Gyroscope_GetValues+0x73c>)
 8004af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b21a      	sxth	r2, r3
 8004afe:	4b55      	ldr	r3, [pc, #340]	; (8004c54 <BSP_Gyroscope_GetValues+0x73c>)
 8004b00:	801a      	strh	r2, [r3, #0]
    acc_y=acc_y<<8;
 8004b02:	4b54      	ldr	r3, [pc, #336]	; (8004c54 <BSP_Gyroscope_GetValues+0x73c>)
 8004b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	b21a      	sxth	r2, r3
 8004b0c:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <BSP_Gyroscope_GetValues+0x73c>)
 8004b0e:	801a      	strh	r2, [r3, #0]

    (hi2c->Memaddress)=0x3E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	223e      	movs	r2, #62	; 0x3e
 8004b14:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3E, 1, &buf_1, 1, 50) != HAL_OK)
 8004b16:	2332      	movs	r3, #50	; 0x32
 8004b18:	9302      	str	r3, [sp, #8]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	4b49      	ldr	r3, [pc, #292]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2301      	movs	r3, #1
 8004b24:	223e      	movs	r2, #62	; 0x3e
 8004b26:	21d0      	movs	r1, #208	; 0xd0
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fc fb03 	bl	8001134 <HAL_I2C_Mem_Read>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <BSP_Gyroscope_GetValues+0x620>
    {
    	return ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e108      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004b3c:	bf00      	nop
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d006      	beq.n	8004b58 <BSP_Gyroscope_GetValues+0x640>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a3e      	ldr	r2, [pc, #248]	; (8004c4c <BSP_Gyroscope_GetValues+0x734>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d9f2      	bls.n	8004b3e <BSP_Gyroscope_GetValues+0x626>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a3d      	ldr	r2, [pc, #244]	; (8004c50 <BSP_Gyroscope_GetValues+0x738>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <BSP_Gyroscope_GetValues+0x64c>
    {
        return ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0f2      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    acc_y = acc_y|buf_1;
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b21a      	sxth	r2, r3
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <BSP_Gyroscope_GetValues+0x73c>)
 8004b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	b21a      	sxth	r2, r3
 8004b74:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <BSP_Gyroscope_GetValues+0x73c>)
 8004b76:	801a      	strh	r2, [r3, #0]

    (hi2c->Memaddress)=0x3F;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	223f      	movs	r2, #63	; 0x3f
 8004b7c:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x3F, 1, &buf_1, 1, 50) != HAL_OK)
 8004b7e:	2332      	movs	r3, #50	; 0x32
 8004b80:	9302      	str	r3, [sp, #8]
 8004b82:	2301      	movs	r3, #1
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	223f      	movs	r2, #63	; 0x3f
 8004b8e:	21d0      	movs	r1, #208	; 0xd0
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fc facf 	bl	8001134 <HAL_I2C_Mem_Read>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <BSP_Gyroscope_GetValues+0x688>
    {
    	return ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0d4      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */

    TIMER_Simulator_Var = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004ba4:	bf00      	nop
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d006      	beq.n	8004bc0 <BSP_Gyroscope_GetValues+0x6a8>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <BSP_Gyroscope_GetValues+0x734>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d9f2      	bls.n	8004ba6 <BSP_Gyroscope_GetValues+0x68e>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <BSP_Gyroscope_GetValues+0x738>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d101      	bne.n	8004bcc <BSP_Gyroscope_GetValues+0x6b4>
    {
        return ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0be      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }
    acc_z= acc_z|buf_1;
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b21a      	sxth	r2, r3
 8004bd2:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <BSP_Gyroscope_GetValues+0x740>)
 8004bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b21a      	sxth	r2, r3
 8004bdc:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <BSP_Gyroscope_GetValues+0x740>)
 8004bde:	801a      	strh	r2, [r3, #0]
    acc_z=acc_z<<8;
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <BSP_Gyroscope_GetValues+0x740>)
 8004be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	b21a      	sxth	r2, r3
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <BSP_Gyroscope_GetValues+0x740>)
 8004bec:	801a      	strh	r2, [r3, #0]


    (hi2c->Memaddress)=0x40;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50

    if (HAL_I2C_Mem_Read(hi2c, dev_addr, 0x40, 1, &buf_1, 1, 50) != HAL_OK)
 8004bf4:	2332      	movs	r3, #50	; 0x32
 8004bf6:	9302      	str	r3, [sp, #8]
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <BSP_Gyroscope_GetValues+0x72c>)
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2301      	movs	r3, #1
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	21d0      	movs	r1, #208	; 0xd0
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fa94 	bl	8001134 <HAL_I2C_Mem_Read>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <BSP_Gyroscope_GetValues+0x6fe>
    {
    	return ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e099      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
    }

    /* Wait the end of transfer */
    TIMER_Simulator_Var = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
    while((hi2c->State) !=  HAL_I2C_STATE_READY && (++TIMER_Simulator_Var < TIMER_TIMEOUT_I2C));
 8004c1a:	bf00      	nop
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d006      	beq.n	8004c36 <BSP_Gyroscope_GetValues+0x71e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a06      	ldr	r2, [pc, #24]	; (8004c4c <BSP_Gyroscope_GetValues+0x734>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d9f2      	bls.n	8004c1c <BSP_Gyroscope_GetValues+0x704>
    if(TIMER_Simulator_Var == TIMER_TIMEOUT_I2C)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <BSP_Gyroscope_GetValues+0x738>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d10e      	bne.n	8004c5c <BSP_Gyroscope_GetValues+0x744>
    {
        return ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e083      	b.n	8004d4a <BSP_Gyroscope_GetValues+0x832>
 8004c42:	bf00      	nop
 8004c44:	2400012d 	.word	0x2400012d
 8004c48:	24000160 	.word	0x24000160
 8004c4c:	000ffffe 	.word	0x000ffffe
 8004c50:	000fffff 	.word	0x000fffff
 8004c54:	24000162 	.word	0x24000162
 8004c58:	24000164 	.word	0x24000164
    }
    acc_z= acc_z|buf_1;
 8004c5c:	4b46      	ldr	r3, [pc, #280]	; (8004d78 <BSP_Gyroscope_GetValues+0x860>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b21a      	sxth	r2, r3
 8004c62:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <BSP_Gyroscope_GetValues+0x864>)
 8004c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b21a      	sxth	r2, r3
 8004c6c:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <BSP_Gyroscope_GetValues+0x864>)
 8004c6e:	801a      	strh	r2, [r3, #0]
    }
    addr = buf_1;
    */


    BSP_GyrFetchStructure->BSP_Acc_x=((float)acc_x)/16384.0;
 8004c70:	4b43      	ldr	r3, [pc, #268]	; (8004d80 <BSP_Gyroscope_GetValues+0x868>)
 8004c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004c82:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8004d58 <BSP_Gyroscope_GetValues+0x840>
 8004c86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	ed83 7b00 	vstr	d7, [r3]
    BSP_GyrFetchStructure->BSP_Acc_y=((float)acc_y)/16384.0;
 8004c90:	4b3c      	ldr	r3, [pc, #240]	; (8004d84 <BSP_Gyroscope_GetValues+0x86c>)
 8004c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004ca2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8004d58 <BSP_Gyroscope_GetValues+0x840>
 8004ca6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	ed83 7b02 	vstr	d7, [r3, #8]
    BSP_GyrFetchStructure->BSP_Acc_z=((float)acc_z)/16384.0;
 8004cb0:	4b32      	ldr	r3, [pc, #200]	; (8004d7c <BSP_Gyroscope_GetValues+0x864>)
 8004cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004cc2:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8004d58 <BSP_Gyroscope_GetValues+0x840>
 8004cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	ed83 7b04 	vstr	d7, [r3, #16]
    BSP_GyrFetchStructure->BSP_Temp=temp/340.0+ 36.53;
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	; (8004d88 <BSP_Gyroscope_GetValues+0x870>)
 8004cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004cde:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8004d60 <BSP_Gyroscope_GetValues+0x848>
 8004ce2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ce6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8004d68 <BSP_Gyroscope_GetValues+0x850>
 8004cea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	ed83 7b06 	vstr	d7, [r3, #24]
    BSP_GyrFetchStructure->BSP_Gyr_x=gyr_x/131.0;
 8004cf4:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <BSP_Gyroscope_GetValues+0x874>)
 8004cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d02:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8004d70 <BSP_Gyroscope_GetValues+0x858>
 8004d06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	ed83 7b08 	vstr	d7, [r3, #32]
    BSP_GyrFetchStructure->BSP_Gyr_y=gyr_y/131.0;
 8004d10:	4b1f      	ldr	r3, [pc, #124]	; (8004d90 <BSP_Gyroscope_GetValues+0x878>)
 8004d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d1e:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8004d70 <BSP_Gyroscope_GetValues+0x858>
 8004d22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
    BSP_GyrFetchStructure->BSP_Gyr_z=gyr_z/131.0;
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <BSP_Gyroscope_GetValues+0x87c>)
 8004d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d3a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8004d70 <BSP_Gyroscope_GetValues+0x858>
 8004d3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30


    return SUCCESS;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	f3af 8000 	nop.w
 8004d58:	00000000 	.word	0x00000000
 8004d5c:	40d00000 	.word	0x40d00000
 8004d60:	00000000 	.word	0x00000000
 8004d64:	40754000 	.word	0x40754000
 8004d68:	0a3d70a4 	.word	0x0a3d70a4
 8004d6c:	404243d7 	.word	0x404243d7
 8004d70:	00000000 	.word	0x00000000
 8004d74:	40606000 	.word	0x40606000
 8004d78:	2400012d 	.word	0x2400012d
 8004d7c:	24000164 	.word	0x24000164
 8004d80:	24000160 	.word	0x24000160
 8004d84:	24000162 	.word	0x24000162
 8004d88:	2400016c 	.word	0x2400016c
 8004d8c:	24000166 	.word	0x24000166
 8004d90:	24000168 	.word	0x24000168
 8004d94:	2400016a 	.word	0x2400016a

08004d98 <__errno>:
 8004d98:	4b01      	ldr	r3, [pc, #4]	; (8004da0 <__errno+0x8>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	24000010 	.word	0x24000010

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	4d0d      	ldr	r5, [pc, #52]	; (8004ddc <__libc_init_array+0x38>)
 8004da8:	4c0d      	ldr	r4, [pc, #52]	; (8004de0 <__libc_init_array+0x3c>)
 8004daa:	1b64      	subs	r4, r4, r5
 8004dac:	10a4      	asrs	r4, r4, #2
 8004dae:	2600      	movs	r6, #0
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	4d0b      	ldr	r5, [pc, #44]	; (8004de4 <__libc_init_array+0x40>)
 8004db6:	4c0c      	ldr	r4, [pc, #48]	; (8004de8 <__libc_init_array+0x44>)
 8004db8:	f000 fb1a 	bl	80053f0 <_init>
 8004dbc:	1b64      	subs	r4, r4, r5
 8004dbe:	10a4      	asrs	r4, r4, #2
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dcc:	4798      	blx	r3
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd6:	4798      	blx	r3
 8004dd8:	3601      	adds	r6, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	08006cd0 	.word	0x08006cd0
 8004de0:	08006cd0 	.word	0x08006cd0
 8004de4:	08006cd0 	.word	0x08006cd0
 8004de8:	08006cd4 	.word	0x08006cd4

08004dec <memset>:
 8004dec:	4402      	add	r2, r0
 8004dee:	4603      	mov	r3, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <checkint>:
 8004dfc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004e00:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004e04:	429a      	cmp	r2, r3
 8004e06:	b570      	push	{r4, r5, r6, lr}
 8004e08:	dd2a      	ble.n	8004e60 <checkint+0x64>
 8004e0a:	f240 4333 	movw	r3, #1075	; 0x433
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	dc24      	bgt.n	8004e5c <checkint+0x60>
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	f1a3 0620 	sub.w	r6, r3, #32
 8004e18:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1c:	fa02 f403 	lsl.w	r4, r2, r3
 8004e20:	fa02 f606 	lsl.w	r6, r2, r6
 8004e24:	f1c3 0520 	rsb	r5, r3, #32
 8004e28:	fa22 f505 	lsr.w	r5, r2, r5
 8004e2c:	4334      	orrs	r4, r6
 8004e2e:	432c      	orrs	r4, r5
 8004e30:	409a      	lsls	r2, r3
 8004e32:	ea20 0202 	bic.w	r2, r0, r2
 8004e36:	ea21 0404 	bic.w	r4, r1, r4
 8004e3a:	4322      	orrs	r2, r4
 8004e3c:	f1a3 0420 	sub.w	r4, r3, #32
 8004e40:	f1c3 0220 	rsb	r2, r3, #32
 8004e44:	d10c      	bne.n	8004e60 <checkint+0x64>
 8004e46:	40d8      	lsrs	r0, r3
 8004e48:	fa01 f302 	lsl.w	r3, r1, r2
 8004e4c:	4318      	orrs	r0, r3
 8004e4e:	40e1      	lsrs	r1, r4
 8004e50:	4308      	orrs	r0, r1
 8004e52:	f000 0001 	and.w	r0, r0, #1
 8004e56:	f1d0 0002 	rsbs	r0, r0, #2
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	2002      	movs	r0, #2
 8004e5e:	e7fc      	b.n	8004e5a <checkint+0x5e>
 8004e60:	2000      	movs	r0, #0
 8004e62:	e7fa      	b.n	8004e5a <checkint+0x5e>
 8004e64:	0000      	movs	r0, r0
	...

08004e68 <pow>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	ee10 4a90 	vmov	r4, s1
 8004e70:	ed2d 8b0a 	vpush	{d8-d12}
 8004e74:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8004e78:	ee11 7a90 	vmov	r7, s3
 8004e7c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004e80:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8004e84:	429a      	cmp	r2, r3
 8004e86:	ee10 6a10 	vmov	r6, s0
 8004e8a:	ee11 0a10 	vmov	r0, s2
 8004e8e:	b086      	sub	sp, #24
 8004e90:	46d4      	mov	ip, sl
 8004e92:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8004e96:	d806      	bhi.n	8004ea6 <pow+0x3e>
 8004e98:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8004e9c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8004ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea2:	f240 8156 	bls.w	8005152 <pow+0x2ea>
 8004ea6:	1802      	adds	r2, r0, r0
 8004ea8:	eb47 0107 	adc.w	r1, r7, r7
 8004eac:	f06f 0e01 	mvn.w	lr, #1
 8004eb0:	f112 39ff 	adds.w	r9, r2, #4294967295
 8004eb4:	f141 38ff 	adc.w	r8, r1, #4294967295
 8004eb8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004ebc:	45ce      	cmp	lr, r9
 8004ebe:	eb73 0808 	sbcs.w	r8, r3, r8
 8004ec2:	d23f      	bcs.n	8004f44 <pow+0xdc>
 8004ec4:	ea52 0301 	orrs.w	r3, r2, r1
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	d10c      	bne.n	8004ee8 <pow+0x80>
 8004ece:	19b6      	adds	r6, r6, r6
 8004ed0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8004ed4:	4164      	adcs	r4, r4
 8004ed6:	42b3      	cmp	r3, r6
 8004ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004edc:	41a3      	sbcs	r3, r4
 8004ede:	f0c0 808c 	bcc.w	8004ffa <pow+0x192>
 8004ee2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004ee6:	e028      	b.n	8004f3a <pow+0xd2>
 8004ee8:	4da3      	ldr	r5, [pc, #652]	; (8005178 <pow+0x310>)
 8004eea:	42ac      	cmp	r4, r5
 8004eec:	bf08      	it	eq
 8004eee:	429e      	cmpeq	r6, r3
 8004ef0:	d107      	bne.n	8004f02 <pow+0x9a>
 8004ef2:	1800      	adds	r0, r0, r0
 8004ef4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8004ef8:	417f      	adcs	r7, r7
 8004efa:	4283      	cmp	r3, r0
 8004efc:	4b9f      	ldr	r3, [pc, #636]	; (800517c <pow+0x314>)
 8004efe:	41bb      	sbcs	r3, r7
 8004f00:	e7ed      	b.n	8004ede <pow+0x76>
 8004f02:	19b6      	adds	r6, r6, r6
 8004f04:	489e      	ldr	r0, [pc, #632]	; (8005180 <pow+0x318>)
 8004f06:	4164      	adcs	r4, r4
 8004f08:	42b3      	cmp	r3, r6
 8004f0a:	eb70 0504 	sbcs.w	r5, r0, r4
 8004f0e:	d374      	bcc.n	8004ffa <pow+0x192>
 8004f10:	4281      	cmp	r1, r0
 8004f12:	bf08      	it	eq
 8004f14:	429a      	cmpeq	r2, r3
 8004f16:	d170      	bne.n	8004ffa <pow+0x192>
 8004f18:	4a9a      	ldr	r2, [pc, #616]	; (8005184 <pow+0x31c>)
 8004f1a:	4294      	cmp	r4, r2
 8004f1c:	bf08      	it	eq
 8004f1e:	429e      	cmpeq	r6, r3
 8004f20:	d0df      	beq.n	8004ee2 <pow+0x7a>
 8004f22:	4294      	cmp	r4, r2
 8004f24:	ea6f 0707 	mvn.w	r7, r7
 8004f28:	bf34      	ite	cc
 8004f2a:	2400      	movcc	r4, #0
 8004f2c:	2401      	movcs	r4, #1
 8004f2e:	0fff      	lsrs	r7, r7, #31
 8004f30:	42bc      	cmp	r4, r7
 8004f32:	f040 81d9 	bne.w	80052e8 <pow+0x480>
 8004f36:	ee21 0b01 	vmul.f64	d0, d1, d1
 8004f3a:	b006      	add	sp, #24
 8004f3c:	ecbd 8b0a 	vpop	{d8-d12}
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	eb16 0806 	adds.w	r8, r6, r6
 8004f48:	eb44 0904 	adc.w	r9, r4, r4
 8004f4c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8004f50:	f169 0200 	sbc.w	r2, r9, #0
 8004f54:	458e      	cmp	lr, r1
 8004f56:	4193      	sbcs	r3, r2
 8004f58:	d223      	bcs.n	8004fa2 <pow+0x13a>
 8004f5a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8004f5e:	2c00      	cmp	r4, #0
 8004f60:	da12      	bge.n	8004f88 <pow+0x120>
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7ff ff4a 	bl	8004dfc <checkint>
 8004f68:	2801      	cmp	r0, #1
 8004f6a:	d10d      	bne.n	8004f88 <pow+0x120>
 8004f6c:	eeb1 0b40 	vneg.f64	d0, d0
 8004f70:	ea58 0309 	orrs.w	r3, r8, r9
 8004f74:	d10a      	bne.n	8004f8c <pow+0x124>
 8004f76:	2f00      	cmp	r7, #0
 8004f78:	dadf      	bge.n	8004f3a <pow+0xd2>
 8004f7a:	b006      	add	sp, #24
 8004f7c:	ecbd 8b0a 	vpop	{d8-d12}
 8004f80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	f000 b9f0 	b.w	8005368 <__math_divzero>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e7f1      	b.n	8004f70 <pow+0x108>
 8004f8c:	2f00      	cmp	r7, #0
 8004f8e:	dad4      	bge.n	8004f3a <pow+0xd2>
 8004f90:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004f94:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8004f98:	ed8d 7b00 	vstr	d7, [sp]
 8004f9c:	ed9d 0b00 	vldr	d0, [sp]
 8004fa0:	e7cb      	b.n	8004f3a <pow+0xd2>
 8004fa2:	2c00      	cmp	r4, #0
 8004fa4:	da2c      	bge.n	8005000 <pow+0x198>
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	f7ff ff28 	bl	8004dfc <checkint>
 8004fac:	b930      	cbnz	r0, 8004fbc <pow+0x154>
 8004fae:	b006      	add	sp, #24
 8004fb0:	ecbd 8b0a 	vpop	{d8-d12}
 8004fb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	f000 b9ee 	b.w	8005398 <__math_invalid>
 8004fbc:	2801      	cmp	r0, #1
 8004fbe:	bf14      	ite	ne
 8004fc0:	2000      	movne	r0, #0
 8004fc2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8004fc6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004fca:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8004fce:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8004fd2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8004fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd8:	d92d      	bls.n	8005036 <pow+0x1ce>
 8004fda:	4b67      	ldr	r3, [pc, #412]	; (8005178 <pow+0x310>)
 8004fdc:	2000      	movs	r0, #0
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	bf08      	it	eq
 8004fe2:	4286      	cmpeq	r6, r0
 8004fe4:	f43f af7d 	beq.w	8004ee2 <pow+0x7a>
 8004fe8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8004fec:	428a      	cmp	r2, r1
 8004fee:	d80c      	bhi.n	800500a <pow+0x1a2>
 8004ff0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004ff4:	42b0      	cmp	r0, r6
 8004ff6:	41a3      	sbcs	r3, r4
 8004ff8:	d204      	bcs.n	8005004 <pow+0x19c>
 8004ffa:	ee31 0b00 	vadd.f64	d0, d1, d0
 8004ffe:	e79c      	b.n	8004f3a <pow+0xd2>
 8005000:	2000      	movs	r0, #0
 8005002:	e7e4      	b.n	8004fce <pow+0x166>
 8005004:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005008:	e797      	b.n	8004f3a <pow+0xd2>
 800500a:	2e01      	cmp	r6, #1
 800500c:	eb74 0303 	sbcs.w	r3, r4, r3
 8005010:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005014:	bf34      	ite	cc
 8005016:	2301      	movcc	r3, #1
 8005018:	2300      	movcs	r3, #0
 800501a:	4295      	cmp	r5, r2
 800501c:	bf8c      	ite	hi
 800501e:	2500      	movhi	r5, #0
 8005020:	2501      	movls	r5, #1
 8005022:	42ab      	cmp	r3, r5
 8005024:	f000 809d 	beq.w	8005162 <pow+0x2fa>
 8005028:	b006      	add	sp, #24
 800502a:	ecbd 8b0a 	vpop	{d8-d12}
 800502e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005032:	f000 b991 	b.w	8005358 <__math_oflow>
 8005036:	f1bc 0f00 	cmp.w	ip, #0
 800503a:	d10b      	bne.n	8005054 <pow+0x1ec>
 800503c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8005170 <pow+0x308>
 8005040:	ee20 7b07 	vmul.f64	d7, d0, d7
 8005044:	ec53 2b17 	vmov	r2, r3, d7
 8005048:	ee17 6a10 	vmov	r6, s14
 800504c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005050:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8005054:	4b4c      	ldr	r3, [pc, #304]	; (8005188 <pow+0x320>)
 8005056:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800505a:	4423      	add	r3, r4
 800505c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8005060:	1519      	asrs	r1, r3, #20
 8005062:	0d1b      	lsrs	r3, r3, #20
 8005064:	051b      	lsls	r3, r3, #20
 8005066:	eba4 0903 	sub.w	r9, r4, r3
 800506a:	4b48      	ldr	r3, [pc, #288]	; (800518c <pow+0x324>)
 800506c:	ee04 1a10 	vmov	s8, r1
 8005070:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8005074:	f1b6 0800 	subs.w	r8, r6, #0
 8005078:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800507c:	ec49 8b15 	vmov	d5, r8, r9
 8005080:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8005084:	eea5 6b07 	vfma.f64	d6, d5, d7
 8005088:	ed93 7b00 	vldr	d7, [r3]
 800508c:	ed93 5b02 	vldr	d5, [r3, #8]
 8005090:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8005094:	eea4 2b07 	vfma.f64	d2, d4, d7
 8005098:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800509c:	ee36 ab02 	vadd.f64	d10, d6, d2
 80050a0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80050a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80050a8:	ed93 5b04 	vldr	d5, [r3, #16]
 80050ac:	ee32 2b06 	vadd.f64	d2, d2, d6
 80050b0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80050b4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80050b8:	ed93 4b08 	vldr	d4, [r3, #32]
 80050bc:	ee26 0b05 	vmul.f64	d0, d6, d5
 80050c0:	eeb0 9b40 	vmov.f64	d9, d0
 80050c4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80050c8:	ed93 5b06 	vldr	d5, [r3, #24]
 80050cc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80050d0:	ee26 bb00 	vmul.f64	d11, d6, d0
 80050d4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80050d8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80050dc:	ee3a ab48 	vsub.f64	d10, d10, d8
 80050e0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80050e4:	ee37 9b09 	vadd.f64	d9, d7, d9
 80050e8:	ee3a ab00 	vadd.f64	d10, d10, d0
 80050ec:	eea6 4b03 	vfma.f64	d4, d6, d3
 80050f0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80050f4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80050f8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80050fc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8005100:	eea0 4b03 	vfma.f64	d4, d0, d3
 8005104:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005108:	eeab ab05 	vfma.f64	d10, d11, d5
 800510c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8005110:	ee21 7b06 	vmul.f64	d7, d1, d6
 8005114:	ee17 3a90 	vmov	r3, s15
 8005118:	eeb0 5b47 	vmov.f64	d5, d7
 800511c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8005120:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8005124:	18b2      	adds	r2, r6, r2
 8005126:	2a3e      	cmp	r2, #62	; 0x3e
 8005128:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800512c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8005130:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8005134:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8005138:	d92b      	bls.n	8005192 <pow+0x32a>
 800513a:	2a00      	cmp	r2, #0
 800513c:	da0b      	bge.n	8005156 <pow+0x2ee>
 800513e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005142:	ee37 0b00 	vadd.f64	d0, d7, d0
 8005146:	2800      	cmp	r0, #0
 8005148:	f43f aef7 	beq.w	8004f3a <pow+0xd2>
 800514c:	eeb1 0b40 	vneg.f64	d0, d0
 8005150:	e6f3      	b.n	8004f3a <pow+0xd2>
 8005152:	2000      	movs	r0, #0
 8005154:	e77e      	b.n	8005054 <pow+0x1ec>
 8005156:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800515a:	d919      	bls.n	8005190 <pow+0x328>
 800515c:	2b00      	cmp	r3, #0
 800515e:	f6bf af63 	bge.w	8005028 <pow+0x1c0>
 8005162:	b006      	add	sp, #24
 8005164:	ecbd 8b0a 	vpop	{d8-d12}
 8005168:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800516c:	f000 b8ec 	b.w	8005348 <__math_uflow>
 8005170:	00000000 	.word	0x00000000
 8005174:	43300000 	.word	0x43300000
 8005178:	3ff00000 	.word	0x3ff00000
 800517c:	fff00000 	.word	0xfff00000
 8005180:	ffe00000 	.word	0xffe00000
 8005184:	7fe00000 	.word	0x7fe00000
 8005188:	c0196aab 	.word	0xc0196aab
 800518c:	08005418 	.word	0x08005418
 8005190:	2600      	movs	r6, #0
 8005192:	495d      	ldr	r1, [pc, #372]	; (8005308 <pow+0x4a0>)
 8005194:	ed91 4b02 	vldr	d4, [r1, #8]
 8005198:	ed91 3b00 	vldr	d3, [r1]
 800519c:	eeb0 6b44 	vmov.f64	d6, d4
 80051a0:	eea7 6b03 	vfma.f64	d6, d7, d3
 80051a4:	ee16 5a10 	vmov	r5, s12
 80051a8:	ee36 6b44 	vsub.f64	d6, d6, d4
 80051ac:	ed91 4b04 	vldr	d4, [r1, #16]
 80051b0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80051b4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80051b8:	eeb0 0b47 	vmov.f64	d0, d7
 80051bc:	ed91 7b06 	vldr	d7, [r1, #24]
 80051c0:	18dc      	adds	r4, r3, r3
 80051c2:	f104 030f 	add.w	r3, r4, #15
 80051c6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80051ca:	eea6 0b07 	vfma.f64	d0, d6, d7
 80051ce:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80051d2:	ee35 0b00 	vadd.f64	d0, d5, d0
 80051d6:	ee20 6b00 	vmul.f64	d6, d0, d0
 80051da:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80051de:	ed91 5b08 	vldr	d5, [r1, #32]
 80051e2:	ee30 7b07 	vadd.f64	d7, d0, d7
 80051e6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80051ea:	eea0 5b04 	vfma.f64	d5, d0, d4
 80051ee:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80051f2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80051f6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80051fa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80051fe:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8005202:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005206:	eea0 5b04 	vfma.f64	d5, d0, d4
 800520a:	1940      	adds	r0, r0, r5
 800520c:	2700      	movs	r7, #0
 800520e:	eb17 020c 	adds.w	r2, r7, ip
 8005212:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8005216:	eea6 7b05 	vfma.f64	d7, d6, d5
 800521a:	2e00      	cmp	r6, #0
 800521c:	d15f      	bne.n	80052de <pow+0x476>
 800521e:	42bd      	cmp	r5, r7
 8005220:	db13      	blt.n	800524a <pow+0x3e2>
 8005222:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8005226:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800522a:	4610      	mov	r0, r2
 800522c:	ec41 0b10 	vmov	d0, r0, r1
 8005230:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005234:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80052f0 <pow+0x488>
 8005238:	ee20 0b07 	vmul.f64	d0, d0, d7
 800523c:	b006      	add	sp, #24
 800523e:	ecbd 8b0a 	vpop	{d8-d12}
 8005242:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005246:	f000 b8bf 	b.w	80053c8 <__math_check_oflow>
 800524a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800524e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8005252:	4610      	mov	r0, r2
 8005254:	ec41 0b15 	vmov	d5, r0, r1
 8005258:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800525c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8005260:	ee35 7b06 	vadd.f64	d7, d5, d6
 8005264:	eeb0 3bc7 	vabs.f64	d3, d7
 8005268:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80052f8 <pow+0x490>
 8005274:	d52a      	bpl.n	80052cc <pow+0x464>
 8005276:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800527a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8005286:	ee35 6b06 	vadd.f64	d6, d5, d6
 800528a:	bf48      	it	mi
 800528c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8005290:	ee37 3b04 	vadd.f64	d3, d7, d4
 8005294:	ee34 5b43 	vsub.f64	d5, d4, d3
 8005298:	ee35 7b07 	vadd.f64	d7, d5, d7
 800529c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052a0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80052a4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80052a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b0:	d104      	bne.n	80052bc <pow+0x454>
 80052b2:	4632      	mov	r2, r6
 80052b4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80052b8:	ec43 2b17 	vmov	d7, r2, r3
 80052bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80052c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80052c4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80052c8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80052cc:	ee27 0b00 	vmul.f64	d0, d7, d0
 80052d0:	b006      	add	sp, #24
 80052d2:	ecbd 8b0a 	vpop	{d8-d12}
 80052d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052da:	f000 b86c 	b.w	80053b6 <__math_check_uflow>
 80052de:	ec43 2b10 	vmov	d0, r2, r3
 80052e2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80052e6:	e628      	b.n	8004f3a <pow+0xd2>
 80052e8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005300 <pow+0x498>
 80052ec:	e625      	b.n	8004f3a <pow+0xd2>
 80052ee:	bf00      	nop
 80052f0:	00000000 	.word	0x00000000
 80052f4:	7f000000 	.word	0x7f000000
 80052f8:	00000000 	.word	0x00000000
 80052fc:	00100000 	.word	0x00100000
	...
 8005308:	08006460 	.word	0x08006460

0800530c <with_errno>:
 800530c:	b513      	push	{r0, r1, r4, lr}
 800530e:	4604      	mov	r4, r0
 8005310:	ed8d 0b00 	vstr	d0, [sp]
 8005314:	f7ff fd40 	bl	8004d98 <__errno>
 8005318:	ed9d 0b00 	vldr	d0, [sp]
 800531c:	6004      	str	r4, [r0, #0]
 800531e:	b002      	add	sp, #8
 8005320:	bd10      	pop	{r4, pc}

08005322 <xflow>:
 8005322:	b082      	sub	sp, #8
 8005324:	b158      	cbz	r0, 800533e <xflow+0x1c>
 8005326:	eeb1 7b40 	vneg.f64	d7, d0
 800532a:	ed8d 7b00 	vstr	d7, [sp]
 800532e:	ed9d 7b00 	vldr	d7, [sp]
 8005332:	2022      	movs	r0, #34	; 0x22
 8005334:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005338:	b002      	add	sp, #8
 800533a:	f7ff bfe7 	b.w	800530c <with_errno>
 800533e:	eeb0 7b40 	vmov.f64	d7, d0
 8005342:	e7f2      	b.n	800532a <xflow+0x8>
 8005344:	0000      	movs	r0, r0
	...

08005348 <__math_uflow>:
 8005348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005350 <__math_uflow+0x8>
 800534c:	f7ff bfe9 	b.w	8005322 <xflow>
 8005350:	00000000 	.word	0x00000000
 8005354:	10000000 	.word	0x10000000

08005358 <__math_oflow>:
 8005358:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005360 <__math_oflow+0x8>
 800535c:	f7ff bfe1 	b.w	8005322 <xflow>
 8005360:	00000000 	.word	0x00000000
 8005364:	70000000 	.word	0x70000000

08005368 <__math_divzero>:
 8005368:	b082      	sub	sp, #8
 800536a:	2800      	cmp	r0, #0
 800536c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005370:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8005374:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8005378:	ed8d 7b00 	vstr	d7, [sp]
 800537c:	ed9d 0b00 	vldr	d0, [sp]
 8005380:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8005390 <__math_divzero+0x28>
 8005384:	2022      	movs	r0, #34	; 0x22
 8005386:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800538a:	b002      	add	sp, #8
 800538c:	f7ff bfbe 	b.w	800530c <with_errno>
	...

08005398 <__math_invalid>:
 8005398:	eeb0 7b40 	vmov.f64	d7, d0
 800539c:	eeb4 7b47 	vcmp.f64	d7, d7
 80053a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80053a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80053ac:	d602      	bvs.n	80053b4 <__math_invalid+0x1c>
 80053ae:	2021      	movs	r0, #33	; 0x21
 80053b0:	f7ff bfac 	b.w	800530c <with_errno>
 80053b4:	4770      	bx	lr

080053b6 <__math_check_uflow>:
 80053b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	d102      	bne.n	80053c6 <__math_check_uflow+0x10>
 80053c0:	2022      	movs	r0, #34	; 0x22
 80053c2:	f7ff bfa3 	b.w	800530c <with_errno>
 80053c6:	4770      	bx	lr

080053c8 <__math_check_oflow>:
 80053c8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80053e8 <__math_check_oflow+0x20>
 80053cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80053d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	dd02      	ble.n	80053e0 <__math_check_oflow+0x18>
 80053da:	2022      	movs	r0, #34	; 0x22
 80053dc:	f7ff bf96 	b.w	800530c <with_errno>
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	f3af 8000 	nop.w
 80053e8:	ffffffff 	.word	0xffffffff
 80053ec:	7fefffff 	.word	0x7fefffff

080053f0 <_init>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr

080053fc <_fini>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr
