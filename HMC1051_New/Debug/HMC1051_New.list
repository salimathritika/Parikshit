
HMC1051_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002398  08002398  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023a0  080023a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a0  080023a0  000123a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000078  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006ae0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001364  00000000  00000000  00026b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006d8  00000000  00000000  00027ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000538  00000000  00000000  000285a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f4fc  00000000  00000000  00028ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009147  00000000  00000000  00047fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000be796  00000000  00000000  0005111b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001b58  00000000  00000000  0010f8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0011140c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002368 	.word	0x08002368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002368 	.word	0x08002368

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9ba 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81a 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8a4 	bl	800061c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f874 	bl	80005c0 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  read_x(&hi2c1,&mag_x);
 80004d8:	4906      	ldr	r1, [pc, #24]	; (80004f4 <main+0x30>)
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <main+0x34>)
 80004dc:	f001 fed6 	bl	800228c <read_x>
	  read_y(&hi2c1,&mag_y);
 80004e0:	4906      	ldr	r1, [pc, #24]	; (80004fc <main+0x38>)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <main+0x34>)
 80004e4:	f001 fee8 	bl	80022b8 <read_y>
	  read_z(&hi2c1,&mag_z);
 80004e8:	4905      	ldr	r1, [pc, #20]	; (8000500 <main+0x3c>)
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <main+0x34>)
 80004ec:	f001 fefa 	bl	80022e4 <read_z>
	  read_x(&hi2c1,&mag_x);
 80004f0:	e7f2      	b.n	80004d8 <main+0x14>
 80004f2:	bf00      	nop
 80004f4:	2000007c 	.word	0x2000007c
 80004f8:	20000028 	.word	0x20000028
 80004fc:	2000007d 	.word	0x2000007d
 8000500:	2000007e 	.word	0x2000007e

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fefc 	bl	8002310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xb4>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <SystemClock_Config+0xb4>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0xb4>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <SystemClock_Config+0xb8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <SystemClock_Config+0xb8>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <SystemClock_Config+0xb8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fa45 	bl	8001a04 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000580:	f000 f882 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fca8 	bl	8001ef4 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005aa:	f000 f86d 	bl	8000688 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f000 fc13 	bl	8000e28 <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f83e 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_GPIO_Init+0x68>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <MX_GPIO_Init+0x68>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_GPIO_Init+0x68>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_GPIO_Init+0x68>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <MX_GPIO_Init+0x68>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_GPIO_Init+0x68>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_GPIO_Init+0x68>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <MX_GPIO_Init+0x68>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_GPIO_Init+0x68>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_MspInit+0x4c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <HAL_MspInit+0x4c>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x4c>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x4c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12b      	bne.n	800075e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_I2C_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000722:	23c0      	movs	r3, #192	; 0xc0
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000726:	2312      	movs	r3, #18
 8000728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000732:	2304      	movs	r3, #4
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_I2C_MspInit+0x8c>)
 800073e:	f000 f9d7 	bl	8000af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40005400 	.word	0x40005400
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c0:	f000 f890 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f2:	490e      	ldr	r1, [pc, #56]	; (800082c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000808:	4c0b      	ldr	r4, [pc, #44]	; (8000838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000816:	f7ff ffd7 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081a:	f001 fd81 	bl	8002320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081e:	f7ff fe51 	bl	80004c4 <main>
  bx  lr    
 8000822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000830:	080023a8 	.word	0x080023a8
  ldr r2, =_sbss
 8000834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000838:	20000084 	.word	0x20000084

0800083c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_Init+0x40>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_Init+0x40>)
 8000856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x40>)
 8000862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f90d 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff ff0e 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023c00 	.word	0x40023c00

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f917 	bl	8000ad6 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f8ed 	bl	8000a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000008 	.word	0x20000008
 8000908:	20000080 	.word	0x20000080

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000080 	.word	0x20000080

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db0a      	blt.n	80009b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <__NVIC_SetPriority+0x4c>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b0:	e00a      	b.n	80009c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <__NVIC_SetPriority+0x50>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	3b04      	subs	r3, #4
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	761a      	strb	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f1c3 0307 	rsb	r3, r3, #7
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	bf28      	it	cs
 80009fa:	2304      	movcs	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d902      	bls.n	8000a0c <NVIC_EncodePriority+0x30>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3b03      	subs	r3, #3
 8000a0a:	e000      	b.n	8000a0e <NVIC_EncodePriority+0x32>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43d9      	mvns	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	4313      	orrs	r3, r2
         );
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	; 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a54:	d301      	bcc.n	8000a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00f      	b.n	8000a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <SysTick_Config+0x40>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a62:	210f      	movs	r1, #15
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f7ff ff8e 	bl	8000988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SysTick_Config+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SysTick_Config+0x40>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff47 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab0:	f7ff ff5c 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff ff8e 	bl	80009dc <NVIC_EncodePriority>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff5d 	bl	8000988 <__NVIC_SetPriority>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffb0 	bl	8000a44 <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	e16b      	b.n	8000de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f040 815a 	bne.w	8000dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d005      	beq.n	8000b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d130      	bne.n	8000ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4013      	ands	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b78:	2201      	movs	r2, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	f003 0201 	and.w	r2, r3, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d017      	beq.n	8000be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d123      	bne.n	8000c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	08da      	lsrs	r2, r3, #3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	691a      	ldr	r2, [r3, #16]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	08da      	lsrs	r2, r3, #3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3208      	adds	r2, #8
 8000c2e:	69b9      	ldr	r1, [r7, #24]
 8000c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0203 	and.w	r2, r3, #3
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80b4 	beq.w	8000dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <HAL_GPIO_Init+0x30c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a5f      	ldr	r2, [pc, #380]	; (8000dfc <HAL_GPIO_Init+0x30c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <HAL_GPIO_Init+0x30c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c92:	4a5b      	ldr	r2, [pc, #364]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <HAL_GPIO_Init+0x314>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d02b      	beq.n	8000d16 <HAL_GPIO_Init+0x226>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a51      	ldr	r2, [pc, #324]	; (8000e08 <HAL_GPIO_Init+0x318>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d025      	beq.n	8000d12 <HAL_GPIO_Init+0x222>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a50      	ldr	r2, [pc, #320]	; (8000e0c <HAL_GPIO_Init+0x31c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d01f      	beq.n	8000d0e <HAL_GPIO_Init+0x21e>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4f      	ldr	r2, [pc, #316]	; (8000e10 <HAL_GPIO_Init+0x320>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d019      	beq.n	8000d0a <HAL_GPIO_Init+0x21a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	; (8000e14 <HAL_GPIO_Init+0x324>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d013      	beq.n	8000d06 <HAL_GPIO_Init+0x216>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4d      	ldr	r2, [pc, #308]	; (8000e18 <HAL_GPIO_Init+0x328>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00d      	beq.n	8000d02 <HAL_GPIO_Init+0x212>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a4c      	ldr	r2, [pc, #304]	; (8000e1c <HAL_GPIO_Init+0x32c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d007      	beq.n	8000cfe <HAL_GPIO_Init+0x20e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4b      	ldr	r2, [pc, #300]	; (8000e20 <HAL_GPIO_Init+0x330>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <HAL_GPIO_Init+0x20a>
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	e00e      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	e00c      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000cfe:	2306      	movs	r3, #6
 8000d00:	e00a      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d02:	2305      	movs	r3, #5
 8000d04:	e008      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d06:	2304      	movs	r3, #4
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e004      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <HAL_GPIO_Init+0x228>
 8000d16:	2300      	movs	r3, #0
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	f002 0203 	and.w	r2, r2, #3
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	4093      	lsls	r3, r2
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d28:	4935      	ldr	r1, [pc, #212]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d36:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d5a:	4a32      	ldr	r2, [pc, #200]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <HAL_GPIO_Init+0x334>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3301      	adds	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	f67f ae90 	bls.w	8000b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40021400 	.word	0x40021400
 8000e1c:	40021800 	.word	0x40021800
 8000e20:	40021c00 	.word	0x40021c00
 8000e24:	40013c00 	.word	0x40013c00

08000e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e12b      	b.n	8001092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d106      	bne.n	8000e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fc48 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2224      	movs	r2, #36	; 0x24
 8000e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0201 	bic.w	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e8c:	f001 f9ea 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8000e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4a81      	ldr	r2, [pc, #516]	; (800109c <HAL_I2C_Init+0x274>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d807      	bhi.n	8000eac <HAL_I2C_Init+0x84>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4a80      	ldr	r2, [pc, #512]	; (80010a0 <HAL_I2C_Init+0x278>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	bf94      	ite	ls
 8000ea4:	2301      	movls	r3, #1
 8000ea6:	2300      	movhi	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	e006      	b.n	8000eba <HAL_I2C_Init+0x92>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a7d      	ldr	r2, [pc, #500]	; (80010a4 <HAL_I2C_Init+0x27c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	bf94      	ite	ls
 8000eb4:	2301      	movls	r3, #1
 8000eb6:	2300      	movhi	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0e7      	b.n	8001092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4a78      	ldr	r2, [pc, #480]	; (80010a8 <HAL_I2C_Init+0x280>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0c9b      	lsrs	r3, r3, #18
 8000ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4a6a      	ldr	r2, [pc, #424]	; (800109c <HAL_I2C_Init+0x274>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d802      	bhi.n	8000efc <HAL_I2C_Init+0xd4>
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	e009      	b.n	8000f10 <HAL_I2C_Init+0xe8>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	4a69      	ldr	r2, [pc, #420]	; (80010ac <HAL_I2C_Init+0x284>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	099b      	lsrs	r3, r3, #6
 8000f0e:	3301      	adds	r3, #1
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	430b      	orrs	r3, r1
 8000f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	495c      	ldr	r1, [pc, #368]	; (800109c <HAL_I2C_Init+0x274>)
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d819      	bhi.n	8000f64 <HAL_I2C_Init+0x13c>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1e59      	subs	r1, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f3e:	1c59      	adds	r1, r3, #1
 8000f40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f44:	400b      	ands	r3, r1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00a      	beq.n	8000f60 <HAL_I2C_Init+0x138>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	1e59      	subs	r1, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f5e:	e051      	b.n	8001004 <HAL_I2C_Init+0x1dc>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e04f      	b.n	8001004 <HAL_I2C_Init+0x1dc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d111      	bne.n	8000f90 <HAL_I2C_Init+0x168>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1e58      	subs	r0, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6859      	ldr	r1, [r3, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	440b      	add	r3, r1
 8000f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bf0c      	ite	eq
 8000f88:	2301      	moveq	r3, #1
 8000f8a:	2300      	movne	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	e012      	b.n	8000fb6 <HAL_I2C_Init+0x18e>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1e58      	subs	r0, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	0099      	lsls	r1, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf0c      	ite	eq
 8000fb0:	2301      	moveq	r3, #1
 8000fb2:	2300      	movne	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_I2C_Init+0x196>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e022      	b.n	8001004 <HAL_I2C_Init+0x1dc>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_I2C_Init+0x1bc>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1e58      	subs	r0, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	440b      	add	r3, r1
 8000fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd8:	3301      	adds	r3, #1
 8000fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe2:	e00f      	b.n	8001004 <HAL_I2C_Init+0x1dc>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1e58      	subs	r0, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	0099      	lsls	r1, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	6809      	ldr	r1, [r1, #0]
 8001008:	4313      	orrs	r3, r2
 800100a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6911      	ldr	r1, [r2, #16]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68d2      	ldr	r2, [r2, #12]
 800103e:	4311      	orrs	r1, r2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	430b      	orrs	r3, r1
 8001046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2220      	movs	r2, #32
 800107e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	000186a0 	.word	0x000186a0
 80010a0:	001e847f 	.word	0x001e847f
 80010a4:	003d08ff 	.word	0x003d08ff
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	10624dd3 	.word	0x10624dd3

080010b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4603      	mov	r3, r0
 80010c0:	817b      	strh	r3, [r7, #10]
 80010c2:	460b      	mov	r3, r1
 80010c4:	813b      	strh	r3, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010ca:	f7ff fc1f 	bl	800090c <HAL_GetTick>
 80010ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b20      	cmp	r3, #32
 80010da:	f040 8208 	bne.w	80014ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2319      	movs	r3, #25
 80010e4:	2201      	movs	r2, #1
 80010e6:	497b      	ldr	r1, [pc, #492]	; (80012d4 <HAL_I2C_Mem_Read+0x224>)
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 faef 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80010f4:	2302      	movs	r3, #2
 80010f6:	e1fb      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <HAL_I2C_Mem_Read+0x56>
 8001102:	2302      	movs	r3, #2
 8001104:	e1f4      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	d007      	beq.n	800112c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800113a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2222      	movs	r2, #34	; 0x22
 8001140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2240      	movs	r2, #64	; 0x40
 8001148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800115c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001162:	b29a      	uxth	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a5b      	ldr	r2, [pc, #364]	; (80012d8 <HAL_I2C_Mem_Read+0x228>)
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800116e:	88f8      	ldrh	r0, [r7, #6]
 8001170:	893a      	ldrh	r2, [r7, #8]
 8001172:	8979      	ldrh	r1, [r7, #10]
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4603      	mov	r3, r0
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f000 f9bc 	bl	80014fc <I2C_RequestMemoryRead>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e1b0      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001192:	2b00      	cmp	r3, #0
 8001194:	d113      	bne.n	80011be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e184      	b.n	80014c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d11b      	bne.n	80011fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e164      	b.n	80014c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001202:	2b02      	cmp	r3, #2
 8001204:	d11b      	bne.n	800123e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001214:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	e144      	b.n	80014c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001254:	e138      	b.n	80014c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125a:	2b03      	cmp	r3, #3
 800125c:	f200 80f1 	bhi.w	8001442 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001264:	2b01      	cmp	r3, #1
 8001266:	d123      	bne.n	80012b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 fb44 	bl	80018fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e139      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001298:	3b01      	subs	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80012ae:	e10b      	b.n	80014c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d14e      	bne.n	8001356 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012be:	2200      	movs	r2, #0
 80012c0:	4906      	ldr	r1, [pc, #24]	; (80012dc <HAL_I2C_Mem_Read+0x22c>)
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 fa02 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e10e      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
 80012d2:	bf00      	nop
 80012d4:	00100002 	.word	0x00100002
 80012d8:	ffff0000 	.word	0xffff0000
 80012dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130c:	3b01      	subs	r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133e:	3b01      	subs	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134a:	b29b      	uxth	r3, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001354:	e0b8      	b.n	80014c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135c:	2200      	movs	r2, #0
 800135e:	4966      	ldr	r1, [pc, #408]	; (80014f8 <HAL_I2C_Mem_Read+0x448>)
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f9b3 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0bf      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800137e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139c:	3b01      	subs	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b8:	2200      	movs	r2, #0
 80013ba:	494f      	ldr	r1, [pc, #316]	; (80014f8 <HAL_I2C_Mem_Read+0x448>)
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 f985 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e091      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001404:	b29b      	uxth	r3, r3
 8001406:	3b01      	subs	r3, #1
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	3b01      	subs	r3, #1
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b01      	subs	r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001440:	e042      	b.n	80014c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fa57 	bl	80018fa <I2C_WaitOnRXNEFlagUntilTimeout>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e04c      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001472:	3b01      	subs	r3, #1
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29b      	uxth	r3, r3
 8001480:	3b01      	subs	r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b04      	cmp	r3, #4
 8001494:	d118      	bne.n	80014c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f47f aec2 	bne.w	8001256 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
  }
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	00010004 	.word	0x00010004

080014fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4603      	mov	r3, r0
 800150c:	817b      	strh	r3, [r7, #10]
 800150e:	460b      	mov	r3, r1
 8001510:	813b      	strh	r3, [r7, #8]
 8001512:	4613      	mov	r3, r2
 8001514:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001524:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	2200      	movs	r2, #0
 800153e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f8c2 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00d      	beq.n	800156a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800155c:	d103      	bne.n	8001566 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0aa      	b.n	80016c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	6a3a      	ldr	r2, [r7, #32]
 800157e:	4952      	ldr	r1, [pc, #328]	; (80016c8 <I2C_RequestMemoryRead+0x1cc>)
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f8fa 	bl	800177a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e097      	b.n	80016c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f964 	bl	8001878 <I2C_WaitOnTXEFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00d      	beq.n	80015d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d107      	bne.n	80015ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e076      	b.n	80016c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015d8:	893b      	ldrh	r3, [r7, #8]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	e021      	b.n	8001628 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80015e4:	893b      	ldrh	r3, [r7, #8]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f4:	6a39      	ldr	r1, [r7, #32]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 f93e 	bl	8001878 <I2C_WaitOnTXEFlagUntilTimeout>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00d      	beq.n	800161e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b04      	cmp	r3, #4
 8001608:	d107      	bne.n	800161a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e050      	b.n	80016c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800161e:	893b      	ldrh	r3, [r7, #8]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162a:	6a39      	ldr	r1, [r7, #32]
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f923 	bl	8001878 <I2C_WaitOnTXEFlagUntilTimeout>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00d      	beq.n	8001654 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2b04      	cmp	r3, #4
 800163e:	d107      	bne.n	8001650 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800164e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e035      	b.n	80016c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001662:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2200      	movs	r2, #0
 800166c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 f82b 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00d      	beq.n	8001698 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168a:	d103      	bne.n	8001694 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e013      	b.n	80016c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001698:	897b      	ldrh	r3, [r7, #10]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	6a3a      	ldr	r2, [r7, #32]
 80016ac:	4906      	ldr	r1, [pc, #24]	; (80016c8 <I2C_RequestMemoryRead+0x1cc>)
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f863 	bl	800177a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	00010002 	.word	0x00010002

080016cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016dc:	e025      	b.n	800172a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d021      	beq.n	800172a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e6:	f7ff f911 	bl	800090c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d302      	bcc.n	80016fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d116      	bne.n	800172a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2220      	movs	r2, #32
 8001706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f043 0220 	orr.w	r2, r3, #32
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e023      	b.n	8001772 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10d      	bne.n	8001750 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4013      	ands	r3, r2
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	e00c      	b.n	800176a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4013      	ands	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d0b6      	beq.n	80016de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001788:	e051      	b.n	800182e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001798:	d123      	bne.n	80017e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2220      	movs	r2, #32
 80017be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f043 0204 	orr.w	r2, r3, #4
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e046      	b.n	8001870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d021      	beq.n	800182e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ea:	f7ff f88f 	bl	800090c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d302      	bcc.n	8001800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d116      	bne.n	800182e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f043 0220 	orr.w	r2, r3, #32
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e020      	b.n	8001870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d10c      	bne.n	8001852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4013      	ands	r3, r2
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	e00b      	b.n	800186a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	43da      	mvns	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	4013      	ands	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d18d      	bne.n	800178a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001884:	e02d      	b.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f88d 	bl	80019a6 <I2C_IsAcknowledgeFailed>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e02d      	b.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d021      	beq.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800189e:	f7ff f835 	bl	800090c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d302      	bcc.n	80018b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d116      	bne.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f043 0220 	orr.w	r2, r3, #32
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e007      	b.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b80      	cmp	r3, #128	; 0x80
 80018ee:	d1ca      	bne.n	8001886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001906:	e042      	b.n	800198e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b10      	cmp	r3, #16
 8001914:	d119      	bne.n	800194a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f06f 0210 	mvn.w	r2, #16
 800191e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e029      	b.n	800199e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7fe ffdf 	bl	800090c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d116      	bne.n	800198e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f043 0220 	orr.w	r2, r3, #32
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e007      	b.n	800199e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d1b5      	bne.n	8001908 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019bc:	d11b      	bne.n	80019f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f043 0204 	orr.w	r2, r3, #4
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e267      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d075      	beq.n	8001b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a22:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d00c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2e:	4b85      	ldr	r3, [pc, #532]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d112      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a46:	d10b      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d05b      	beq.n	8001b0c <HAL_RCC_OscConfig+0x108>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d157      	bne.n	8001b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e242      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_OscConfig+0x74>
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a75      	ldr	r2, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xb0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x98>
 8001a82:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6f      	ldr	r2, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6c      	ldr	r2, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xb0>
 8001a9c:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a68      	ldr	r2, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7fe ff26 	bl	800090c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7fe ff22 	bl	800090c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e207      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xc0>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe ff12 	bl	800090c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7fe ff0e 	bl	800090c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1f3      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0xe8>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d063      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b32:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x152>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1c7      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_RCC_OscConfig+0x244>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7fe fec7 	bl	800090c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b82:	f7fe fec3 	bl	800090c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1a8      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4925      	ldr	r1, [pc, #148]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_OscConfig+0x244>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fea6 	bl	800090c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7fe fea2 	bl	800090c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e187      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d036      	beq.n	8001c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d016      	beq.n	8001c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_RCC_OscConfig+0x248>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7fe fe86 	bl	800090c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7fe fe82 	bl	800090c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e167      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x200>
 8001c22:	e01b      	b.n	8001c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_OscConfig+0x248>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7fe fe6f 	bl	800090c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	e00e      	b.n	8001c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7fe fe6b 	bl	800090c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d907      	bls.n	8001c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e150      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	42470000 	.word	0x42470000
 8001c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ea      	bne.n	8001c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8097 	beq.w	8001d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10f      	bne.n	8001c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b7d      	ldr	r3, [pc, #500]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a7c      	ldr	r2, [pc, #496]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c96:	2301      	movs	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca6:	4b74      	ldr	r3, [pc, #464]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a73      	ldr	r2, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe fe2b 	bl	800090c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cba:	f7fe fe27 	bl	800090c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e10c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x2ea>
 8001ce0:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a63      	ldr	r2, [pc, #396]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x324>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x30c>
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x324>
 8001d10:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a54      	ldr	r2, [pc, #336]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7fe fdec 	bl	800090c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7fe fde8 	bl	800090c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0cb      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ee      	beq.n	8001d38 <HAL_RCC_OscConfig+0x334>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe fdd6 	bl	800090c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe fdd2 	bl	800090c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0b5      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ee      	bne.n	8001d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	4a38      	ldr	r2, [pc, #224]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a1 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d05c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d141      	bne.n	8001e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_RCC_OscConfig+0x478>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fda6 	bl	800090c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe fda2 	bl	800090c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e087      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	491b      	ldr	r1, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x478>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe fd7b 	bl	800090c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fd77 	bl	800090c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e05c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x416>
 8001e38:	e054      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x478>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7fe fd64 	bl	800090c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe fd60 	bl	800090c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e045      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x444>
 8001e66:	e03d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e038      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x4ec>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d028      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d121      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d11a      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d111      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0cc      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b68      	ldr	r3, [pc, #416]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d90c      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b65      	ldr	r3, [pc, #404]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0b8      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	494d      	ldr	r1, [pc, #308]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d044      	beq.n	8002014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d119      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e067      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4934      	ldr	r1, [pc, #208]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fc92 	bl	800090c <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7fe fc8e 	bl	800090c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e04f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d20c      	bcs.n	800203c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e032      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4916      	ldr	r1, [pc, #88]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207a:	f000 f821 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	490a      	ldr	r1, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	5ccb      	ldrb	r3, [r1, r3]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fbf2 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023c00 	.word	0x40023c00
 80020b0:	40023800 	.word	0x40023800
 80020b4:	08002380 	.word	0x08002380
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c4:	b090      	sub	sp, #64	; 0x40
 80020c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
 80020cc:	2300      	movs	r3, #0
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d0:	2300      	movs	r3, #0
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_GetSysClockFreq+0x180>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d00d      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x40>
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	f200 80a1 	bhi.w	800222c <HAL_RCC_GetSysClockFreq+0x16c>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x3a>
 80020f2:	e09b      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f4:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_GetSysClockFreq+0x184>)
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020f8:	e09b      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020fa:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_GetSysClockFreq+0x188>)
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020fe:	e098      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCC_GetSysClockFreq+0x180>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210a:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_RCC_GetSysClockFreq+0x180>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d028      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCC_GetSysClockFreq+0x180>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	099b      	lsrs	r3, r3, #6
 800211c:	2200      	movs	r2, #0
 800211e:	623b      	str	r3, [r7, #32]
 8002120:	627a      	str	r2, [r7, #36]	; 0x24
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002128:	2100      	movs	r1, #0
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_GetSysClockFreq+0x188>)
 800212c:	fb03 f201 	mul.w	r2, r3, r1
 8002130:	2300      	movs	r3, #0
 8002132:	fb00 f303 	mul.w	r3, r0, r3
 8002136:	4413      	add	r3, r2
 8002138:	4a43      	ldr	r2, [pc, #268]	; (8002248 <HAL_RCC_GetSysClockFreq+0x188>)
 800213a:	fba0 1202 	umull	r1, r2, r0, r2
 800213e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002140:	460a      	mov	r2, r1
 8002142:	62ba      	str	r2, [r7, #40]	; 0x28
 8002144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002146:	4413      	add	r3, r2
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214c:	2200      	movs	r2, #0
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	61fa      	str	r2, [r7, #28]
 8002152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800215a:	f7fe f835 	bl	80001c8 <__aeabi_uldivmod>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4613      	mov	r3, r2
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002166:	e053      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <HAL_RCC_GetSysClockFreq+0x180>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	2200      	movs	r2, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	617a      	str	r2, [r7, #20]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800217a:	f04f 0b00 	mov.w	fp, #0
 800217e:	4652      	mov	r2, sl
 8002180:	465b      	mov	r3, fp
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	0159      	lsls	r1, r3, #5
 800218c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002190:	0150      	lsls	r0, r2, #5
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	ebb2 080a 	subs.w	r8, r2, sl
 800219a:	eb63 090b 	sbc.w	r9, r3, fp
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021b2:	ebb2 0408 	subs.w	r4, r2, r8
 80021b6:	eb63 0509 	sbc.w	r5, r3, r9
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	00eb      	lsls	r3, r5, #3
 80021c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c8:	00e2      	lsls	r2, r4, #3
 80021ca:	4614      	mov	r4, r2
 80021cc:	461d      	mov	r5, r3
 80021ce:	eb14 030a 	adds.w	r3, r4, sl
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	eb45 030b 	adc.w	r3, r5, fp
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021e6:	4629      	mov	r1, r5
 80021e8:	028b      	lsls	r3, r1, #10
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f0:	4621      	mov	r1, r4
 80021f2:	028a      	lsls	r2, r1, #10
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fa:	2200      	movs	r2, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	60fa      	str	r2, [r7, #12]
 8002200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002204:	f7fd ffe0 	bl	80001c8 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_GetSysClockFreq+0x180>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetSysClockFreq+0x184>)
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002234:	4618      	mov	r0, r3
 8002236:	3740      	adds	r7, #64	; 0x40
 8002238:	46bd      	mov	sp, r7
 800223a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	00f42400 	.word	0x00f42400
 8002248:	017d7840 	.word	0x017d7840

0800224c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	08002390 	.word	0x08002390

0800228c <read_x>:
 *  @parameter     Pointer to i2c structure, pointer to the variable storing the value from magnetometer
 *  @return value  Void

 */
void read_x(I2C_HandleTypeDef *hi2c1,uint8_t *mag)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af04      	add	r7, sp, #16
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	/*function to read value sent by magnetometer*/
    HAL_I2C_Mem_Read(hi2c1, devadd,memadd_x, 1u, mag, 1u, 1000);//not using & because it is an address
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	9302      	str	r3, [sp, #8]
 800229c:	2301      	movs	r3, #1
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2301      	movs	r3, #1
 80022a6:	2290      	movs	r2, #144	; 0x90
 80022a8:	21dc      	movs	r1, #220	; 0xdc
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe ff00 	bl	80010b0 <HAL_I2C_Mem_Read>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <read_y>:

void read_y(I2C_HandleTypeDef *hi2c1,uint8_t *mag)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af04      	add	r7, sp, #16
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	/*function to read value sent by magnetometer*/
    HAL_I2C_Mem_Read(hi2c1, devadd,memadd_y, 1u, mag, 1u, 1000);//not using & because it is an address
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	22b0      	movs	r2, #176	; 0xb0
 80022d4:	21dc      	movs	r1, #220	; 0xdc
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe feea 	bl	80010b0 <HAL_I2C_Mem_Read>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <read_z>:

void read_z(I2C_HandleTypeDef *hi2c1,uint8_t *mag)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	/*function to read value sent by magnetometer*/
    HAL_I2C_Mem_Read(hi2c1, devadd,memadd_z, 1u, mag, 1u, 1000);//not using & because it is an address
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2301      	movs	r3, #1
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	22d0      	movs	r2, #208	; 0xd0
 8002300:	21dc      	movs	r1, #220	; 0xdc
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fed4 	bl	80010b0 <HAL_I2C_Mem_Read>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <memset>:
 8002310:	4402      	add	r2, r0
 8002312:	4603      	mov	r3, r0
 8002314:	4293      	cmp	r3, r2
 8002316:	d100      	bne.n	800231a <memset+0xa>
 8002318:	4770      	bx	lr
 800231a:	f803 1b01 	strb.w	r1, [r3], #1
 800231e:	e7f9      	b.n	8002314 <memset+0x4>

08002320 <__libc_init_array>:
 8002320:	b570      	push	{r4, r5, r6, lr}
 8002322:	4d0d      	ldr	r5, [pc, #52]	; (8002358 <__libc_init_array+0x38>)
 8002324:	4c0d      	ldr	r4, [pc, #52]	; (800235c <__libc_init_array+0x3c>)
 8002326:	1b64      	subs	r4, r4, r5
 8002328:	10a4      	asrs	r4, r4, #2
 800232a:	2600      	movs	r6, #0
 800232c:	42a6      	cmp	r6, r4
 800232e:	d109      	bne.n	8002344 <__libc_init_array+0x24>
 8002330:	4d0b      	ldr	r5, [pc, #44]	; (8002360 <__libc_init_array+0x40>)
 8002332:	4c0c      	ldr	r4, [pc, #48]	; (8002364 <__libc_init_array+0x44>)
 8002334:	f000 f818 	bl	8002368 <_init>
 8002338:	1b64      	subs	r4, r4, r5
 800233a:	10a4      	asrs	r4, r4, #2
 800233c:	2600      	movs	r6, #0
 800233e:	42a6      	cmp	r6, r4
 8002340:	d105      	bne.n	800234e <__libc_init_array+0x2e>
 8002342:	bd70      	pop	{r4, r5, r6, pc}
 8002344:	f855 3b04 	ldr.w	r3, [r5], #4
 8002348:	4798      	blx	r3
 800234a:	3601      	adds	r6, #1
 800234c:	e7ee      	b.n	800232c <__libc_init_array+0xc>
 800234e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002352:	4798      	blx	r3
 8002354:	3601      	adds	r6, #1
 8002356:	e7f2      	b.n	800233e <__libc_init_array+0x1e>
 8002358:	080023a0 	.word	0x080023a0
 800235c:	080023a0 	.word	0x080023a0
 8002360:	080023a0 	.word	0x080023a0
 8002364:	080023a4 	.word	0x080023a4

08002368 <_init>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr

08002374 <_fini>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr
