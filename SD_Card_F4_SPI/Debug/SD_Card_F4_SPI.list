
SD_Card_F4_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb4  08005fb4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fbc  08005fbc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000232c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002350  20002350  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009f01  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ec5  00000000  00000000  00029f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009d0  00000000  00000000  0002be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000075b  00000000  00000000  0002c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217b3  00000000  00000000  0002cf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e96b  00000000  00000000  0004e73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2d9b  00000000  00000000  0005d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002678  00000000  00000000  0011fe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001224bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005adc 	.word	0x08005adc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08005adc 	.word	0x08005adc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa32 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f876 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f908 	bl	80006e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d4:	f000 f8d0 	bl	8000678 <MX_SPI1_Init>
  MX_FATFS_Init();
 80004d8:	f001 fdb2 	bl	8002040 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80004dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e0:	f000 fa98 	bl	8000a14 <HAL_Delay>
//   f_close(&fil);

//   SD_Card_Init()

   // Mount the file system
   res = f_mount(&fs, "", 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	492e      	ldr	r1, [pc, #184]	; (80005a0 <main+0xdc>)
 80004e8:	482e      	ldr	r0, [pc, #184]	; (80005a4 <main+0xe0>)
 80004ea:	f003 fff5 	bl	80044d8 <f_mount>
 80004ee:	4603      	mov	r3, r0
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <main+0xe4>)
 80004f4:	701a      	strb	r2, [r3, #0]
   if (res != FR_OK) {
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <main+0xe4>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d004      	beq.n	8000508 <main+0x44>
       // Handle mount error
       c=1;
 80004fe:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <main+0xe8>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]
       Error_Handler();
 8000504:	f000 f920 	bl	8000748 <Error_Handler>
   }

   HAL_Delay(5000);
 8000508:	f241 3088 	movw	r0, #5000	; 0x1388
 800050c:	f000 fa82 	bl	8000a14 <HAL_Delay>
   // Open or create the file
   res = f_open(&fil, "write.txt", FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_READ| FA_WRITE);
 8000510:	2217      	movs	r2, #23
 8000512:	4927      	ldr	r1, [pc, #156]	; (80005b0 <main+0xec>)
 8000514:	4827      	ldr	r0, [pc, #156]	; (80005b4 <main+0xf0>)
 8000516:	f004 f825 	bl	8004564 <f_open>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <main+0xe4>)
 8000520:	701a      	strb	r2, [r3, #0]
   if (res != FR_OK) {
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <main+0xe4>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d009      	beq.n	800053e <main+0x7a>
       // Handle file open error
       f_mount(NULL, "", 0); // Unmount the file system
 800052a:	2200      	movs	r2, #0
 800052c:	491c      	ldr	r1, [pc, #112]	; (80005a0 <main+0xdc>)
 800052e:	2000      	movs	r0, #0
 8000530:	f003 ffd2 	bl	80044d8 <f_mount>
       c=2;
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <main+0xe8>)
 8000536:	2202      	movs	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
       Error_Handler();
 800053a:	f000 f905 	bl	8000748 <Error_Handler>
   }


   // Write data to the file
   res = f_puts("Hello from Parikshit\n", &fil);
 800053e:	491d      	ldr	r1, [pc, #116]	; (80005b4 <main+0xf0>)
 8000540:	481d      	ldr	r0, [pc, #116]	; (80005b8 <main+0xf4>)
 8000542:	f004 fc8e 	bl	8004e62 <f_puts>
 8000546:	4603      	mov	r3, r0
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <main+0xe4>)
 800054c:	701a      	strb	r2, [r3, #0]
       c=3;
       Error_Handler();
   }

   // Close the file
   res = f_close(&fil);
 800054e:	4819      	ldr	r0, [pc, #100]	; (80005b4 <main+0xf0>)
 8000550:	f004 fbe6 	bl	8004d20 <f_close>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <main+0xe4>)
 800055a:	701a      	strb	r2, [r3, #0]
   if (res != FR_OK) {
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <main+0xe4>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d009      	beq.n	8000578 <main+0xb4>
       // Handle file close error
//       printf("Failed to close file. Error code: %d\n", res);
       f_mount(NULL, "", 0); // Unmount the file system
 8000564:	2200      	movs	r2, #0
 8000566:	490e      	ldr	r1, [pc, #56]	; (80005a0 <main+0xdc>)
 8000568:	2000      	movs	r0, #0
 800056a:	f003 ffb5 	bl	80044d8 <f_mount>
       c=4;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <main+0xe8>)
 8000570:	2204      	movs	r2, #4
 8000572:	601a      	str	r2, [r3, #0]
             Error_Handler();
 8000574:	f000 f8e8 	bl	8000748 <Error_Handler>

   }

   // Unmount the file system
   res = f_mount(NULL, "", 0);
 8000578:	2200      	movs	r2, #0
 800057a:	4909      	ldr	r1, [pc, #36]	; (80005a0 <main+0xdc>)
 800057c:	2000      	movs	r0, #0
 800057e:	f003 ffab 	bl	80044d8 <f_mount>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0xe4>)
 8000588:	701a      	strb	r2, [r3, #0]
   if (res != FR_OK) {
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <main+0xe4>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d004      	beq.n	800059c <main+0xd8>
       // Handle unmount error
//       printf("Failed to unmount filesystem. Error code: %d\n", res);
//       return; // Or perform error recovery
	   c=4;
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <main+0xe8>)
 8000594:	2204      	movs	r2, #4
 8000596:	601a      	str	r2, [r3, #0]
	   Error_Handler();
 8000598:	f000 f8d6 	bl	8000748 <Error_Handler>
//    f_close(&fil);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0xd8>
 800059e:	bf00      	nop
 80005a0:	08005af4 	.word	0x08005af4
 80005a4:	20000040 	.word	0x20000040
 80005a8:	200020ac 	.word	0x200020ac
 80005ac:	200020a8 	.word	0x200020a8
 80005b0:	08005af8 	.word	0x08005af8
 80005b4:	20001078 	.word	0x20001078
 80005b8:	08005b04 	.word	0x08005b04

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fa5a 	bl	8005a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xb4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <SystemClock_Config+0xb8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fcb1 	bl	8000f94 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f886 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ff14 	bl	8001484 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000662:	f000 f871 	bl	8000748 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_SPI1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_SPI1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI1_Init+0x64>)
 8000684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI1_Init+0x64>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ca:	f001 f887 	bl	80017dc <HAL_SPI_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f838 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200020b0 	.word	0x200020b0
 80006e0:	40013000 	.word	0x40013000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_GPIO_Init+0x5c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <MX_GPIO_Init+0x5c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_GPIO_Init+0x5c>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2110      	movs	r1, #16
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <MX_GPIO_Init+0x60>)
 800071a:	f000 fc21 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800071e:	2310      	movs	r3, #16
 8000720:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0x60>)
 8000734:	f000 fa78 	bl	8000c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <HAL_SPI_MspInit+0x84>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d12b      	bne.n	800081e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_SPI_MspInit+0x88>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_SPI_MspInit+0x88>)
 80007d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_SPI_MspInit+0x88>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <HAL_SPI_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <HAL_SPI_MspInit+0x88>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_SPI_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007fe:	23e0      	movs	r3, #224	; 0xe0
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800080e:	2305      	movs	r3, #5
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_SPI_MspInit+0x8c>)
 800081a:	f000 fa05 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40013000 	.word	0x40013000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <SysTick_Handler+0x34>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <SysTick_Handler+0x18>
		Timer1--;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <SysTick_Handler+0x34>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <SysTick_Handler+0x34>)
 8000892:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <SysTick_Handler+0x38>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <SysTick_Handler+0x2c>
		Timer2--;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Handler+0x38>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <SysTick_Handler+0x38>)
 80008a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f894 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20002348 	.word	0x20002348
 80008b4:	2000234a 	.word	0x2000234a

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f005 f8c3 	bl	8005a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fdd9 	bl	80004c4 <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000920:	08005fc4 	.word	0x08005fc4
  ldr r2, =_sbss
 8000924:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000928:	20002350 	.word	0x20002350

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f931 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fef6 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f93b 	bl	8000c0e <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f911 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20002108 	.word	0x20002108

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20002108 	.word	0x20002108

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff47 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff5c 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff8e 	bl	8000b14 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5d 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffb0 	bl	8000b7c <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e16b      	b.n	8000f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 815a 	bne.w	8000f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d005      	beq.n	8000c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d017      	beq.n	8000d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80b4 	beq.w	8000f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a5f      	ldr	r2, [pc, #380]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a5b      	ldr	r2, [pc, #364]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a52      	ldr	r2, [pc, #328]	; (8000f3c <HAL_GPIO_Init+0x314>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x226>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x318>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x222>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <HAL_GPIO_Init+0x31c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x21e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_GPIO_Init+0x320>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <HAL_GPIO_Init+0x324>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x216>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <HAL_GPIO_Init+0x328>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x212>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x20e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20a>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00e      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e36:	2306      	movs	r3, #6
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e92:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae90 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021c00 	.word	0x40021c00
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e267      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d075      	beq.n	800109e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fb2:	4b88      	ldr	r3, [pc, #544]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d00c      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fbe:	4b85      	ldr	r3, [pc, #532]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d112      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fca:	4b82      	ldr	r3, [pc, #520]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fd6:	d10b      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	4b7e      	ldr	r3, [pc, #504]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05b      	beq.n	800109c <HAL_RCC_OscConfig+0x108>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d157      	bne.n	800109c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e242      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff8:	d106      	bne.n	8001008 <HAL_RCC_OscConfig+0x74>
 8000ffa:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a75      	ldr	r2, [pc, #468]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0xb0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x98>
 8001012:	4b70      	ldr	r3, [pc, #448]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6f      	ldr	r2, [pc, #444]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b6d      	ldr	r3, [pc, #436]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0xb0>
 800102c:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a68      	ldr	r2, [pc, #416]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fcd6 	bl	80009fc <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fcd2 	bl	80009fc <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e207      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0xc0>
 8001072:	e014      	b.n	800109e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fcc2 	bl	80009fc <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fcbe 	bl	80009fc <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1f3      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0xe8>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d11c      	bne.n	80010fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x152>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e1c7      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e03a      	b.n	8001172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <HAL_RCC_OscConfig+0x244>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fc77 	bl	80009fc <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fc73 	bl	80009fc <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1a8      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4925      	ldr	r1, [pc, #148]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e015      	b.n	8001172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_RCC_OscConfig+0x244>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fc56 	bl	80009fc <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fc52 	bl	80009fc <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e187      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d036      	beq.n	80011ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d016      	beq.n	80011b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_RCC_OscConfig+0x248>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118c:	f7ff fc36 	bl	80009fc <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fc32 	bl	80009fc <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e167      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80011a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x200>
 80011b2:	e01b      	b.n	80011ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_OscConfig+0x248>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fc1f 	bl	80009fc <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	e00e      	b.n	80011e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c2:	f7ff fc1b 	bl	80009fc <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d907      	bls.n	80011e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e150      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
 80011d4:	40023800 	.word	0x40023800
 80011d8:	42470000 	.word	0x42470000
 80011dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	4b88      	ldr	r3, [pc, #544]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80011e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ea      	bne.n	80011c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 8097 	beq.w	8001328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fe:	4b81      	ldr	r3, [pc, #516]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b7d      	ldr	r3, [pc, #500]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a7c      	ldr	r2, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122a:	4b77      	ldr	r3, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	4b74      	ldr	r3, [pc, #464]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a73      	ldr	r2, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fbdb 	bl	80009fc <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fbd7 	bl	80009fc <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e10c      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x2ea>
 8001270:	4b64      	ldr	r3, [pc, #400]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001274:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6713      	str	r3, [r2, #112]	; 0x70
 800127c:	e01c      	b.n	80012b8 <HAL_RCC_OscConfig+0x324>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x30c>
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	4a5e      	ldr	r2, [pc, #376]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6713      	str	r3, [r2, #112]	; 0x70
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6713      	str	r3, [r2, #112]	; 0x70
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0x324>
 80012a0:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a57      	ldr	r2, [pc, #348]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	4b55      	ldr	r3, [pc, #340]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d015      	beq.n	80012ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fb9c 	bl	80009fc <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f7ff fb98 	bl	80009fc <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0cb      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0ee      	beq.n	80012c8 <HAL_RCC_OscConfig+0x334>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fb86 	bl	80009fc <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7ff fb82 	bl	80009fc <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e0b5      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ee      	bne.n	80012f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a38      	ldr	r2, [pc, #224]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a1 	beq.w	8001474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d05c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d141      	bne.n	80013ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_RCC_OscConfig+0x478>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fb56 	bl	80009fc <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fb52 	bl	80009fc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e087      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69da      	ldr	r2, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	019b      	lsls	r3, r3, #6
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	3b01      	subs	r3, #1
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	061b      	lsls	r3, r3, #24
 8001396:	491b      	ldr	r1, [pc, #108]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_RCC_OscConfig+0x478>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fb2b 	bl	80009fc <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013aa:	f7ff fb27 	bl	80009fc <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e05c      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x416>
 80013c8:	e054      	b.n	8001474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_RCC_OscConfig+0x478>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fb14 	bl	80009fc <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fb10 	bl	80009fc <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e045      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x444>
 80013f6:	e03d      	b.n	8001474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d107      	bne.n	8001410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e038      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000
 800140c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x4ec>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d028      	beq.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d121      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d11a      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001448:	4293      	cmp	r3, r2
 800144a:	d111      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d107      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0cc      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d90c      	bls.n	80014c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b65      	ldr	r3, [pc, #404]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0b8      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	494d      	ldr	r1, [pc, #308]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d044      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d119      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e07f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	2b03      	cmp	r3, #3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e067      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f023 0203 	bic.w	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4934      	ldr	r1, [pc, #208]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001574:	f7ff fa42 	bl	80009fc <HAL_GetTick>
 8001578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	e00a      	b.n	8001592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157c:	f7ff fa3e 	bl	80009fc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e04f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 020c 	and.w	r2, r3, #12
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1eb      	bne.n	800157c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d20c      	bcs.n	80015cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e032      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4916      	ldr	r1, [pc, #88]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800160a:	f000 f821 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 800160e:	4602      	mov	r2, r0
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	490a      	ldr	r1, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	5ccb      	ldrb	r3, [r1, r3]
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1c8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f9a2 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00
 8001640:	40023800 	.word	0x40023800
 8001644:	08005b64 	.word	0x08005b64
 8001648:	20000000 	.word	0x20000000
 800164c:	20000004 	.word	0x20000004

08001650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001654:	b090      	sub	sp, #64	; 0x40
 8001656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d00d      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x40>
 8001674:	2b08      	cmp	r3, #8
 8001676:	f200 80a1 	bhi.w	80017bc <HAL_RCC_GetSysClockFreq+0x16c>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x34>
 800167e:	2b04      	cmp	r3, #4
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x3a>
 8001682:	e09b      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001686:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001688:	e09b      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168a:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800168e:	e098      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d028      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	2200      	movs	r2, #0
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	627a      	str	r2, [r7, #36]	; 0x24
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016b8:	2100      	movs	r1, #0
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016bc:	fb03 f201 	mul.w	r2, r3, r1
 80016c0:	2300      	movs	r3, #0
 80016c2:	fb00 f303 	mul.w	r3, r0, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	4a43      	ldr	r2, [pc, #268]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ca:	fba0 1202 	umull	r1, r2, r0, r2
 80016ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016d0:	460a      	mov	r2, r1
 80016d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80016d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d6:	4413      	add	r3, r2
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	2200      	movs	r2, #0
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	61fa      	str	r2, [r7, #28]
 80016e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016ea:	f7fe fd6d 	bl	80001c8 <__aeabi_uldivmod>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4613      	mov	r3, r2
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f6:	e053      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f8:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	2200      	movs	r2, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	617a      	str	r2, [r7, #20]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800170a:	f04f 0b00 	mov.w	fp, #0
 800170e:	4652      	mov	r2, sl
 8001710:	465b      	mov	r3, fp
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0159      	lsls	r1, r3, #5
 800171c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001720:	0150      	lsls	r0, r2, #5
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ebb2 080a 	subs.w	r8, r2, sl
 800172a:	eb63 090b 	sbc.w	r9, r3, fp
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800173a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800173e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001742:	ebb2 0408 	subs.w	r4, r2, r8
 8001746:	eb63 0509 	sbc.w	r5, r3, r9
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	00eb      	lsls	r3, r5, #3
 8001754:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001758:	00e2      	lsls	r2, r4, #3
 800175a:	4614      	mov	r4, r2
 800175c:	461d      	mov	r5, r3
 800175e:	eb14 030a 	adds.w	r3, r4, sl
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	eb45 030b 	adc.w	r3, r5, fp
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001776:	4629      	mov	r1, r5
 8001778:	028b      	lsls	r3, r1, #10
 800177a:	4621      	mov	r1, r4
 800177c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001780:	4621      	mov	r1, r4
 8001782:	028a      	lsls	r2, r1, #10
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178a:	2200      	movs	r2, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	60fa      	str	r2, [r7, #12]
 8001790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001794:	f7fe fd18 	bl	80001c8 <__aeabi_uldivmod>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4613      	mov	r3, r2
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	3301      	adds	r3, #1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ba:	e002      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3740      	adds	r7, #64	; 0x40
 80017c8:	46bd      	mov	sp, r7
 80017ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	00f42400 	.word	0x00f42400
 80017d8:	017d7840 	.word	0x017d7840

080017dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07b      	b.n	80018e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017fe:	d009      	beq.n	8001814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
 8001806:	e005      	b.n	8001814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe ffb8 	bl	80007a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800184a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001898:	ea42 0103 	orr.w	r1, r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	f003 0104 	and.w	r1, r3, #4
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f003 0210 	and.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b088      	sub	sp, #32
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4613      	mov	r3, r2
 80018fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_SPI_Transmit+0x22>
 800190c:	2302      	movs	r3, #2
 800190e:	e126      	b.n	8001b5e <HAL_SPI_Transmit+0x270>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001918:	f7ff f870 	bl	80009fc <HAL_GetTick>
 800191c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d002      	beq.n	8001934 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800192e:	2302      	movs	r3, #2
 8001930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001932:	e10b      	b.n	8001b4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_SPI_Transmit+0x52>
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001944:	e102      	b.n	8001b4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2203      	movs	r2, #3
 800194a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	88fa      	ldrh	r2, [r7, #6]
 800195e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800198c:	d10f      	bne.n	80019ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800199c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	2b40      	cmp	r3, #64	; 0x40
 80019ba:	d007      	beq.n	80019cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d4:	d14b      	bne.n	8001a6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_SPI_Transmit+0xf6>
 80019de:	8afb      	ldrh	r3, [r7, #22]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d13e      	bne.n	8001a62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	881a      	ldrh	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	1c9a      	adds	r2, r3, #2
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a08:	e02b      	b.n	8001a62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d112      	bne.n	8001a3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	1c9a      	adds	r2, r3, #2
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a3c:	e011      	b.n	8001a62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a3e:	f7fe ffdd 	bl	80009fc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d803      	bhi.n	8001a56 <HAL_SPI_Transmit+0x168>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d102      	bne.n	8001a5c <HAL_SPI_Transmit+0x16e>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a60:	e074      	b.n	8001b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ce      	bne.n	8001a0a <HAL_SPI_Transmit+0x11c>
 8001a6c:	e04c      	b.n	8001b08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_SPI_Transmit+0x18e>
 8001a76:	8afb      	ldrh	r3, [r7, #22]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d140      	bne.n	8001afe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	330c      	adds	r3, #12
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001aa2:	e02c      	b.n	8001afe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d113      	bne.n	8001ada <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	330c      	adds	r3, #12
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ad8:	e011      	b.n	8001afe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ada:	f7fe ff8f 	bl	80009fc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d803      	bhi.n	8001af2 <HAL_SPI_Transmit+0x204>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d102      	bne.n	8001af8 <HAL_SPI_Transmit+0x20a>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001afc:	e026      	b.n	8001b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1cd      	bne.n	8001aa4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fa55 	bl	8001fbc <SPI_EndRxTxTransaction>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	77fb      	strb	r3, [r7, #31]
 8001b48:	e000      	b.n	8001b4c <HAL_SPI_Transmit+0x25e>
  }

error:
 8001b4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b08c      	sub	sp, #48	; 0x30
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_SPI_TransmitReceive+0x26>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e18a      	b.n	8001ea2 <HAL_SPI_TransmitReceive+0x33c>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b94:	f7fe ff32 	bl	80009fc <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d00f      	beq.n	8001bd6 <HAL_SPI_TransmitReceive+0x70>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bbc:	d107      	bne.n	8001bce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_SPI_TransmitReceive+0x68>
 8001bc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d003      	beq.n	8001bd6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bd4:	e15b      	b.n	8001e8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_SPI_TransmitReceive+0x82>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_SPI_TransmitReceive+0x82>
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d103      	bne.n	8001bf0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bee:	e14e      	b.n	8001e8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d003      	beq.n	8001c04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	887a      	ldrh	r2, [r7, #2]
 8001c1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	887a      	ldrh	r2, [r7, #2]
 8001c26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d007      	beq.n	8001c58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c60:	d178      	bne.n	8001d54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_SPI_TransmitReceive+0x10a>
 8001c6a:	8b7b      	ldrh	r3, [r7, #26]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d166      	bne.n	8001d3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	1c9a      	adds	r2, r3, #2
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c94:	e053      	b.n	8001d3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d11b      	bne.n	8001cdc <HAL_SPI_TransmitReceive+0x176>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d016      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x176>
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d113      	bne.n	8001cdc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	1c9a      	adds	r2, r3, #2
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d119      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x1b8>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	1c9a      	adds	r2, r3, #2
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d1e:	f7fe fe6d 	bl	80009fc <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d807      	bhi.n	8001d3e <HAL_SPI_TransmitReceive+0x1d8>
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d003      	beq.n	8001d3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d3c:	e0a7      	b.n	8001e8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1a6      	bne.n	8001c96 <HAL_SPI_TransmitReceive+0x130>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1a1      	bne.n	8001c96 <HAL_SPI_TransmitReceive+0x130>
 8001d52:	e07c      	b.n	8001e4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_SPI_TransmitReceive+0x1fc>
 8001d5c:	8b7b      	ldrh	r3, [r7, #26]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d16b      	bne.n	8001e3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d88:	e057      	b.n	8001e3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d11c      	bne.n	8001dd2 <HAL_SPI_TransmitReceive+0x26c>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d017      	beq.n	8001dd2 <HAL_SPI_TransmitReceive+0x26c>
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d114      	bne.n	8001dd2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	330c      	adds	r3, #12
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d119      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x2ae>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d014      	beq.n	8001e14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e14:	f7fe fdf2 	bl	80009fc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d803      	bhi.n	8001e2c <HAL_SPI_TransmitReceive+0x2c6>
 8001e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2a:	d102      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x2cc>
 8001e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e38:	e029      	b.n	8001e8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1a2      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x224>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d19d      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f8b2 	bl	8001fbc <SPI_EndRxTxTransaction>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e6a:	e010      	b.n	8001e8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10b      	bne.n	8001e8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	e000      	b.n	8001e8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3730      	adds	r7, #48	; 0x30
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ebc:	f7fe fd9e 	bl	80009fc <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ecc:	f7fe fd96 	bl	80009fc <HAL_GetTick>
 8001ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	015b      	lsls	r3, r3, #5
 8001ed8:	0d1b      	lsrs	r3, r3, #20
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ee2:	e054      	b.n	8001f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d050      	beq.n	8001f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001eec:	f7fe fd86 	bl	80009fc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d902      	bls.n	8001f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d13d      	bne.n	8001f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f1a:	d111      	bne.n	8001f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f24:	d004      	beq.n	8001f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2e:	d107      	bne.n	8001f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f48:	d10f      	bne.n	8001f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e017      	b.n	8001fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d19b      	bne.n	8001ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000000 	.word	0x20000000

08001fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <SPI_EndRxTxTransaction+0x7c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <SPI_EndRxTxTransaction+0x80>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0d5b      	lsrs	r3, r3, #21
 8001fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fe6:	d112      	bne.n	800200e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff5a 	bl	8001eac <SPI_WaitFlagStateUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f043 0220 	orr.w	r2, r3, #32
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e00f      	b.n	800202e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3b01      	subs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b80      	cmp	r3, #128	; 0x80
 8002026:	d0f2      	beq.n	800200e <SPI_EndRxTxTransaction+0x52>
 8002028:	e000      	b.n	800202c <SPI_EndRxTxTransaction+0x70>
        break;
 800202a:	bf00      	nop
  }

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000
 800203c:	165e9f81 	.word	0x165e9f81

08002040 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002044:	4904      	ldr	r1, [pc, #16]	; (8002058 <MX_FATFS_Init+0x18>)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_FATFS_Init+0x1c>)
 8002048:	f002 ff7c 	bl	8004f44 <FATFS_LinkDriver>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <MX_FATFS_Init+0x20>)
 8002052:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20002110 	.word	0x20002110
 800205c:	2000000c 	.word	0x2000000c
 8002060:	2000210c 	.word	0x2000210c

08002064 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002068:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 f9e9 	bl	8005458 <SD_disk_initialize>
 8002086:	4603      	mov	r3, r0
 8002088:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fac0 	bl	8005624 <SD_disk_status>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4603      	mov	r3, r0
 80020be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 80020c0:	7bf8      	ldrb	r0, [r7, #15]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	f003 fac2 	bl	8005650 <SD_disk_read>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80020e8:	7bf8      	ldrb	r0, [r7, #15]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	f003 fb18 	bl	8005724 <SD_disk_write>
 80020f4:	4603      	mov	r3, r0
 80020f6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	603a      	str	r2, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	460b      	mov	r3, r1
 800210e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	79b9      	ldrb	r1, [r7, #6]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fb88 	bl	800582c <SD_disk_ioctl>
 800211c:	4603      	mov	r3, r0
 800211e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <disk_status+0x30>)
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	79fa      	ldrb	r2, [r7, #7]
 8002140:	4905      	ldr	r1, [pc, #20]	; (8002158 <disk_status+0x30>)
 8002142:	440a      	add	r2, r1
 8002144:	7a12      	ldrb	r2, [r2, #8]
 8002146:	4610      	mov	r0, r2
 8002148:	4798      	blx	r3
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000233c 	.word	0x2000233c

0800215c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <disk_initialize+0x48>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <disk_initialize+0x48>)
 8002178:	2101      	movs	r1, #1
 800217a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <disk_initialize+0x48>)
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	79fa      	ldrb	r2, [r7, #7]
 800218a:	4906      	ldr	r1, [pc, #24]	; (80021a4 <disk_initialize+0x48>)
 800218c:	440a      	add	r2, r1
 800218e:	7a12      	ldrb	r2, [r2, #8]
 8002190:	4610      	mov	r0, r2
 8002192:	4798      	blx	r3
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000233c 	.word	0x2000233c

080021a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <disk_read+0x3c>)
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	689c      	ldr	r4, [r3, #8]
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <disk_read+0x3c>)
 80021c8:	4413      	add	r3, r2
 80021ca:	7a18      	ldrb	r0, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	47a0      	blx	r4
 80021d4:	4603      	mov	r3, r0
 80021d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000233c 	.word	0x2000233c

080021e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <disk_write+0x3c>)
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	68dc      	ldr	r4, [r3, #12]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <disk_write+0x3c>)
 8002208:	4413      	add	r3, r2
 800220a:	7a18      	ldrb	r0, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	47a0      	blx	r4
 8002214:	4603      	mov	r3, r0
 8002216:	75fb      	strb	r3, [r7, #23]
  return res;
 8002218:	7dfb      	ldrb	r3, [r7, #23]
}
 800221a:	4618      	mov	r0, r3
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	bf00      	nop
 8002224:	2000233c 	.word	0x2000233c

08002228 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	603a      	str	r2, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	460b      	mov	r3, r1
 8002236:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <disk_ioctl+0x38>)
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	79fa      	ldrb	r2, [r7, #7]
 8002246:	4906      	ldr	r1, [pc, #24]	; (8002260 <disk_ioctl+0x38>)
 8002248:	440a      	add	r2, r1
 800224a:	7a10      	ldrb	r0, [r2, #8]
 800224c:	79b9      	ldrb	r1, [r7, #6]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4798      	blx	r3
 8002252:	4603      	mov	r3, r0
 8002254:	73fb      	strb	r3, [r7, #15]
  return res;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000233c 	.word	0x2000233c

08002264 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3301      	adds	r3, #1
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21b      	sxth	r3, r3
 8002284:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002286:	89fb      	ldrh	r3, [r7, #14]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3303      	adds	r3, #3
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	3202      	adds	r2, #2
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	3201      	adds	r2, #1
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80022cc:	68fb      	ldr	r3, [r7, #12]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	887a      	ldrh	r2, [r7, #2]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	1c53      	adds	r3, r2, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1c59      	adds	r1, r3, #1
 800238c:	6179      	str	r1, [r7, #20]
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3b01      	subs	r3, #1
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f1      	bne.n	8002382 <mem_cpy+0x1a>
	}
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80023aa:	b480      	push	{r7}
 80023ac:	b087      	sub	sp, #28
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	617a      	str	r2, [r7, #20]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f3      	bne.n	80023ba <mem_set+0x10>
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	61fa      	str	r2, [r7, #28]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	61ba      	str	r2, [r7, #24]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	1acb      	subs	r3, r1, r3
 800240c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3b01      	subs	r3, #1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <mem_cmp+0x40>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0eb      	beq.n	80023f8 <mem_cmp+0x18>

	return r;
 8002420:	697b      	ldr	r3, [r7, #20]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002438:	e002      	b.n	8002440 <chk_chr+0x12>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <chk_chr+0x26>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	4293      	cmp	r3, r2
 8002452:	d1f2      	bne.n	800243a <chk_chr+0xc>
	return *str;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	e029      	b.n	80024cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <chk_lock+0xb4>)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01d      	beq.n	80024c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002486:	4a24      	ldr	r2, [pc, #144]	; (8002518 <chk_lock+0xb4>)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d116      	bne.n	80024c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002498:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <chk_lock+0xb4>)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d10c      	bne.n	80024c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <chk_lock+0xb4>)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4413      	add	r3, r2
 80024b4:	3308      	adds	r3, #8
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80024bc:	429a      	cmp	r2, r3
 80024be:	d102      	bne.n	80024c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80024c0:	e007      	b.n	80024d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d9d2      	bls.n	8002478 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d109      	bne.n	80024ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <chk_lock+0x80>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d101      	bne.n	80024e8 <chk_lock+0x84>
 80024e4:	2300      	movs	r3, #0
 80024e6:	e010      	b.n	800250a <chk_lock+0xa6>
 80024e8:	2312      	movs	r3, #18
 80024ea:	e00e      	b.n	800250a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <chk_lock+0xa0>
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <chk_lock+0xb4>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	4413      	add	r3, r2
 80024fa:	330c      	adds	r3, #12
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002502:	d101      	bne.n	8002508 <chk_lock+0xa4>
 8002504:	2310      	movs	r3, #16
 8002506:	e000      	b.n	800250a <chk_lock+0xa6>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2000211c 	.word	0x2000211c

0800251c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	e002      	b.n	800252e <enq_lock+0x12>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3301      	adds	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d806      	bhi.n	8002542 <enq_lock+0x26>
 8002534:	4a09      	ldr	r2, [pc, #36]	; (800255c <enq_lock+0x40>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4413      	add	r3, r2
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f2      	bne.n	8002528 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000211c 	.word	0x2000211c

08002560 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e01f      	b.n	80025b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002570:	4a41      	ldr	r2, [pc, #260]	; (8002678 <inc_lock+0x118>)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	4413      	add	r3, r2
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d113      	bne.n	80025aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002582:	4a3d      	ldr	r2, [pc, #244]	; (8002678 <inc_lock+0x118>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002592:	429a      	cmp	r2, r3
 8002594:	d109      	bne.n	80025aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002596:	4a38      	ldr	r2, [pc, #224]	; (8002678 <inc_lock+0x118>)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	4413      	add	r3, r2
 800259e:	3308      	adds	r3, #8
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d006      	beq.n	80025b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3301      	adds	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d9dc      	bls.n	8002570 <inc_lock+0x10>
 80025b6:	e000      	b.n	80025ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80025b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d132      	bne.n	8002626 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e002      	b.n	80025cc <inc_lock+0x6c>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d806      	bhi.n	80025e0 <inc_lock+0x80>
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <inc_lock+0x118>)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4413      	add	r3, r2
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f2      	bne.n	80025c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d101      	bne.n	80025ea <inc_lock+0x8a>
 80025e6:	2300      	movs	r3, #0
 80025e8:	e040      	b.n	800266c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4922      	ldr	r1, [pc, #136]	; (8002678 <inc_lock+0x118>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	440b      	add	r3, r1
 80025f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	491e      	ldr	r1, [pc, #120]	; (8002678 <inc_lock+0x118>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	440b      	add	r3, r1
 8002604:	3304      	adds	r3, #4
 8002606:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	491a      	ldr	r1, [pc, #104]	; (8002678 <inc_lock+0x118>)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	440b      	add	r3, r1
 8002614:	3308      	adds	r3, #8
 8002616:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <inc_lock+0x118>)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	330c      	adds	r3, #12
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <inc_lock+0xe0>
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <inc_lock+0x118>)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	4413      	add	r3, r2
 8002634:	330c      	adds	r3, #12
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <inc_lock+0xe0>
 800263c:	2300      	movs	r3, #0
 800263e:	e015      	b.n	800266c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d108      	bne.n	8002658 <inc_lock+0xf8>
 8002646:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <inc_lock+0x118>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	330c      	adds	r3, #12
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	e001      	b.n	800265c <inc_lock+0xfc>
 8002658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265c:	4906      	ldr	r1, [pc, #24]	; (8002678 <inc_lock+0x118>)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	440b      	add	r3, r1
 8002664:	330c      	adds	r3, #12
 8002666:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3301      	adds	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	2000211c 	.word	0x2000211c

0800267c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d825      	bhi.n	80026dc <dec_lock+0x60>
		n = Files[i].ctr;
 8002690:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <dec_lock+0x74>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	4413      	add	r3, r2
 8002698:	330c      	adds	r3, #12
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a4:	d101      	bne.n	80026aa <dec_lock+0x2e>
 80026a6:	2300      	movs	r3, #0
 80026a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80026aa:	89fb      	ldrh	r3, [r7, #14]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <dec_lock+0x3a>
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <dec_lock+0x74>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	330c      	adds	r3, #12
 80026c0:	89fa      	ldrh	r2, [r7, #14]
 80026c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80026c4:	89fb      	ldrh	r3, [r7, #14]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <dec_lock+0x5a>
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <dec_lock+0x74>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	737b      	strb	r3, [r7, #13]
 80026da:	e001      	b.n	80026e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80026dc:	2302      	movs	r3, #2
 80026de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80026e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	2000211c 	.word	0x2000211c

080026f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e010      	b.n	8002724 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <clear_lock+0x44>)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	4413      	add	r3, r2
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d105      	bne.n	800271e <clear_lock+0x2a>
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <clear_lock+0x44>)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d9eb      	bls.n	8002702 <clear_lock+0xe>
	}
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	2000211c 	.word	0x2000211c

0800273c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d034      	beq.n	80027ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7858      	ldrb	r0, [r3, #1]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002760:	2301      	movs	r3, #1
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	f7ff fd40 	bl	80021e8 <disk_write>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <sync_window+0x38>
			res = FR_DISK_ERR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	e022      	b.n	80027ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	429a      	cmp	r2, r3
 8002788:	d217      	bcs.n	80027ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	789b      	ldrb	r3, [r3, #2]
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e010      	b.n	80027b4 <sync_window+0x78>
					wsect += fs->fsize;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4413      	add	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7858      	ldrb	r0, [r3, #1]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80027a6:	2301      	movs	r3, #1
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	f7ff fd1d 	bl	80021e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d8eb      	bhi.n	8002792 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d01b      	beq.n	8002814 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ffad 	bl	800273c <sync_window>
 80027e2:	4603      	mov	r3, r0
 80027e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d113      	bne.n	8002814 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7858      	ldrb	r0, [r3, #1]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80027f6:	2301      	movs	r3, #1
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	f7ff fcd5 	bl	80021a8 <disk_read>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff87 	bl	800273c <sync_window>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d159      	bne.n	80028ec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d149      	bne.n	80028d4 <sync_fs+0xb4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d145      	bne.n	80028d4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	899b      	ldrh	r3, [r3, #12]
 8002852:	461a      	mov	r2, r3
 8002854:	2100      	movs	r1, #0
 8002856:	f7ff fda8 	bl	80023aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3338      	adds	r3, #56	; 0x38
 800285e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002862:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fd37 	bl	80022da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3338      	adds	r3, #56	; 0x38
 8002870:	4921      	ldr	r1, [pc, #132]	; (80028f8 <sync_fs+0xd8>)
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fd4c 	bl	8002310 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3338      	adds	r3, #56	; 0x38
 800287c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002880:	491e      	ldr	r1, [pc, #120]	; (80028fc <sync_fs+0xdc>)
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fd44 	bl	8002310 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3338      	adds	r3, #56	; 0x38
 800288c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f7ff fd3a 	bl	8002310 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3338      	adds	r3, #56	; 0x38
 80028a0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f7ff fd30 	bl	8002310 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7858      	ldrb	r0, [r3, #1]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c8:	2301      	movs	r3, #1
 80028ca:	f7ff fc8d 	bl	80021e8 <disk_write>
			fs->fsi_flag = 0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fca3 	bl	8002228 <disk_ioctl>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <sync_fs+0xcc>
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	41615252 	.word	0x41615252
 80028fc:	61417272 	.word	0x61417272

08002900 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	3b02      	subs	r3, #2
 800290e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	3b02      	subs	r3, #2
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d301      	bcc.n	8002920 <clust2sect+0x20>
 800291c:	2300      	movs	r3, #0
 800291e:	e008      	b.n	8002932 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	895b      	ldrh	r3, [r3, #10]
 8002924:	461a      	mov	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	fb03 f202 	mul.w	r2, r3, r2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4413      	add	r3, r2
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d904      	bls.n	800295e <get_fat+0x20>
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <get_fat+0x26>
		val = 1;	/* Internal error */
 800295e:	2301      	movs	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e0bb      	b.n	8002adc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	f000 8083 	beq.w	8002a7a <get_fat+0x13c>
 8002974:	2b03      	cmp	r3, #3
 8002976:	f300 80a7 	bgt.w	8002ac8 <get_fat+0x18a>
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <get_fat+0x46>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d056      	beq.n	8002a30 <get_fat+0xf2>
 8002982:	e0a1      	b.n	8002ac8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	899b      	ldrh	r3, [r3, #12]
 800299a:	4619      	mov	r1, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	fbb3 f3f1 	udiv	r3, r3, r1
 80029a2:	4413      	add	r3, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	6938      	ldr	r0, [r7, #16]
 80029a8:	f7ff ff0c 	bl	80027c4 <move_window>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 808d 	bne.w	8002ace <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60fa      	str	r2, [r7, #12]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	8992      	ldrh	r2, [r2, #12]
 80029be:	fbb3 f1f2 	udiv	r1, r3, r2
 80029c2:	fb01 f202 	mul.w	r2, r1, r2
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	899b      	ldrh	r3, [r3, #12]
 80029da:	4619      	mov	r1, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e2:	4413      	add	r3, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	6938      	ldr	r0, [r7, #16]
 80029e8:	f7ff feec 	bl	80027c4 <move_window>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d16f      	bne.n	8002ad2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	899b      	ldrh	r3, [r3, #12]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80029fe:	fb01 f202 	mul.w	r2, r1, r2
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <get_fat+0xe8>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	e002      	b.n	8002a2c <get_fat+0xee>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	617b      	str	r3, [r7, #20]
			break;
 8002a2e:	e055      	b.n	8002adc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	899b      	ldrh	r3, [r3, #12]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a44:	4413      	add	r3, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	6938      	ldr	r0, [r7, #16]
 8002a4a:	f7ff febb 	bl	80027c4 <move_window>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d140      	bne.n	8002ad6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	8992      	ldrh	r2, [r2, #12]
 8002a62:	fbb3 f0f2 	udiv	r0, r3, r2
 8002a66:	fb00 f202 	mul.w	r2, r0, r2
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fbf8 	bl	8002264 <ld_word>
 8002a74:	4603      	mov	r3, r0
 8002a76:	617b      	str	r3, [r7, #20]
			break;
 8002a78:	e030      	b.n	8002adc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	899b      	ldrh	r3, [r3, #12]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	4413      	add	r3, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	6938      	ldr	r0, [r7, #16]
 8002a94:	f7ff fe96 	bl	80027c4 <move_window>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11d      	bne.n	8002ada <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	8992      	ldrh	r2, [r2, #12]
 8002aac:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ab0:	fb00 f202 	mul.w	r2, r0, r2
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fbeb 	bl	8002294 <ld_dword>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ac4:	617b      	str	r3, [r7, #20]
			break;
 8002ac6:	e009      	b.n	8002adc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e006      	b.n	8002adc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002ace:	bf00      	nop
 8002ad0:	e004      	b.n	8002adc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002ada:	bf00      	nop
		}
	}

	return val;
 8002adc:	697b      	ldr	r3, [r7, #20]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002ae6:	b590      	push	{r4, r7, lr}
 8002ae8:	b089      	sub	sp, #36	; 0x24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002af2:	2302      	movs	r3, #2
 8002af4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f240 8109 	bls.w	8002d10 <put_fat+0x22a>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f080 8103 	bcs.w	8002d10 <put_fat+0x22a>
		switch (fs->fs_type) {
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	f000 80b6 	beq.w	8002c80 <put_fat+0x19a>
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	f300 80fb 	bgt.w	8002d10 <put_fat+0x22a>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d003      	beq.n	8002b26 <put_fat+0x40>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	f000 8083 	beq.w	8002c2a <put_fat+0x144>
 8002b24:	e0f4      	b.n	8002d10 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	899b      	ldrh	r3, [r3, #12]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b44:	4413      	add	r3, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fe3b 	bl	80027c4 <move_window>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b52:	7ffb      	ldrb	r3, [r7, #31]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f040 80d4 	bne.w	8002d02 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	61ba      	str	r2, [r7, #24]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	8992      	ldrh	r2, [r2, #12]
 8002b6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002b6e:	fb00 f202 	mul.w	r2, r0, r2
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <put_fat+0xb8>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e001      	b.n	8002ba2 <put_fat+0xbc>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	899b      	ldrh	r3, [r3, #12]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff fdff 	bl	80027c4 <move_window>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 809a 	bne.w	8002d06 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	899b      	ldrh	r3, [r3, #12]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	fbb3 f0f2 	udiv	r0, r3, r2
 8002be4:	fb00 f202 	mul.w	r2, r0, r2
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <put_fat+0x11a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e00e      	b.n	8002c1e <put_fat+0x138>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	f023 030f 	bic.w	r3, r3, #15
 8002c0a:	b25a      	sxtb	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	70da      	strb	r2, [r3, #3]
			break;
 8002c28:	e072      	b.n	8002d10 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	899b      	ldrh	r3, [r3, #12]
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4619      	mov	r1, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3e:	4413      	add	r3, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff fdbe 	bl	80027c4 <move_window>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002c4c:	7ffb      	ldrb	r3, [r7, #31]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d15b      	bne.n	8002d0a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	8992      	ldrh	r2, [r2, #12]
 8002c60:	fbb3 f0f2 	udiv	r0, r3, r2
 8002c64:	fb00 f202 	mul.w	r2, r0, r2
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	b292      	uxth	r2, r2
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fb31 	bl	80022da <st_word>
			fs->wflag = 1;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	70da      	strb	r2, [r3, #3]
			break;
 8002c7e:	e047      	b.n	8002d10 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	899b      	ldrh	r3, [r3, #12]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c94:	4413      	add	r3, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fd93 	bl	80027c4 <move_window>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d132      	bne.n	8002d0e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	8992      	ldrh	r2, [r2, #12]
 8002cbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8002cc0:	fb00 f202 	mul.w	r2, r0, r2
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fae3 	bl	8002294 <ld_dword>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	8992      	ldrh	r2, [r2, #12]
 8002ce6:	fbb3 f0f2 	udiv	r0, r3, r2
 8002cea:	fb00 f202 	mul.w	r2, r0, r2
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fb0b 	bl	8002310 <st_dword>
			fs->wflag = 1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	70da      	strb	r2, [r3, #3]
			break;
 8002d00:	e006      	b.n	8002d10 <put_fat+0x22a>
			if (res != FR_OK) break;
 8002d02:	bf00      	nop
 8002d04:	e004      	b.n	8002d10 <put_fat+0x22a>
			if (res != FR_OK) break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <put_fat+0x22a>
			if (res != FR_OK) break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <put_fat+0x22a>
			if (res != FR_OK) break;
 8002d0e:	bf00      	nop
		}
	}
	return res;
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}

08002d1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d904      	bls.n	8002d40 <remove_chain+0x26>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d301      	bcc.n	8002d44 <remove_chain+0x2a>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e04b      	b.n	8002ddc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	69b8      	ldr	r0, [r7, #24]
 8002d52:	f7ff fec8 	bl	8002ae6 <put_fat>
 8002d56:	4603      	mov	r3, r0
 8002d58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002d5a:	7ffb      	ldrb	r3, [r7, #31]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <remove_chain+0x4a>
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	e03b      	b.n	8002ddc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fde9 	bl	800293e <get_fat>
 8002d6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d031      	beq.n	8002dd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <remove_chain+0x64>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e02e      	b.n	8002ddc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d101      	bne.n	8002d8a <remove_chain+0x70>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e028      	b.n	8002ddc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	69b8      	ldr	r0, [r7, #24]
 8002d90:	f7ff fea9 	bl	8002ae6 <put_fat>
 8002d94:	4603      	mov	r3, r0
 8002d96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002d98:	7ffb      	ldrb	r3, [r7, #31]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <remove_chain+0x88>
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
 8002da0:	e01c      	b.n	8002ddc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	3b02      	subs	r3, #2
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d20b      	bcs.n	8002dc8 <remove_chain+0xae>
			fs->free_clst++;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	791b      	ldrb	r3, [r3, #4]
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d3c6      	bcc.n	8002d64 <remove_chain+0x4a>
 8002dd6:	e000      	b.n	8002dda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002dd8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <create_chain+0x2c>
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d31b      	bcc.n	8002e48 <create_chain+0x64>
 8002e10:	2301      	movs	r3, #1
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e018      	b.n	8002e48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fd90 	bl	800293e <get_fat>
 8002e1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d801      	bhi.n	8002e2a <create_chain+0x46>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e070      	b.n	8002f0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d101      	bne.n	8002e36 <create_chain+0x52>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	e06a      	b.n	8002f0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d201      	bcs.n	8002e44 <create_chain+0x60>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	e063      	b.n	8002f0c <create_chain+0x128>
		scl = clst;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d307      	bcc.n	8002e6c <create_chain+0x88>
				ncl = 2;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d901      	bls.n	8002e6c <create_chain+0x88>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e04f      	b.n	8002f0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002e6c:	69f9      	ldr	r1, [r7, #28]
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fd65 	bl	800293e <get_fat>
 8002e74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00e      	beq.n	8002e9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d003      	beq.n	8002e8a <create_chain+0xa6>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d101      	bne.n	8002e8e <create_chain+0xaa>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	e03e      	b.n	8002f0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d1da      	bne.n	8002e4c <create_chain+0x68>
 8002e96:	2300      	movs	r3, #0
 8002e98:	e038      	b.n	8002f0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8002e9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69f9      	ldr	r1, [r7, #28]
 8002ea2:	6938      	ldr	r0, [r7, #16]
 8002ea4:	f7ff fe1f 	bl	8002ae6 <put_fat>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <create_chain+0xe2>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	6938      	ldr	r0, [r7, #16]
 8002ebe:	f7ff fe12 	bl	8002ae6 <put_fat>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d116      	bne.n	8002efa <create_chain+0x116>
		fs->last_clst = ncl;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	3b02      	subs	r3, #2
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d804      	bhi.n	8002eea <create_chain+0x106>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	791b      	ldrb	r3, [r3, #4]
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	711a      	strb	r2, [r3, #4]
 8002ef8:	e007      	b.n	8002f0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <create_chain+0x122>
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
 8002f04:	e000      	b.n	8002f08 <create_chain+0x124>
 8002f06:	2301      	movs	r3, #1
 8002f08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002f0a:	69fb      	ldr	r3, [r7, #28]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	3304      	adds	r3, #4
 8002f2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	899b      	ldrh	r3, [r3, #12]
 8002f30:	461a      	mov	r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	8952      	ldrh	r2, [r2, #10]
 8002f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1d1a      	adds	r2, r3, #4
 8002f46:	613a      	str	r2, [r7, #16]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <clmt_clust+0x42>
 8002f52:	2300      	movs	r3, #0
 8002f54:	e010      	b.n	8002f78 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d307      	bcc.n	8002f6e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002f6c:	e7e9      	b.n	8002f42 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8002f6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	4413      	add	r3, r2
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9a:	d204      	bcs.n	8002fa6 <dir_sdi+0x22>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <dir_sdi+0x26>
		return FR_INT_ERR;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e071      	b.n	800308e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <dir_sdi+0x46>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d902      	bls.n	8002fca <dir_sdi+0x46>
		clst = fs->dirbase;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10c      	bne.n	8002fea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	8912      	ldrh	r2, [r2, #8]
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d301      	bcc.n	8002fe0 <dir_sdi+0x5c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e056      	b.n	800308e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	61da      	str	r2, [r3, #28]
 8002fe8:	e02d      	b.n	8003046 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	895b      	ldrh	r3, [r3, #10]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	899b      	ldrh	r3, [r3, #12]
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002ffa:	e019      	b.n	8003030 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fc9c 	bl	800293e <get_fat>
 8003006:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d101      	bne.n	8003014 <dir_sdi+0x90>
 8003010:	2301      	movs	r3, #1
 8003012:	e03c      	b.n	800308e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d904      	bls.n	8003024 <dir_sdi+0xa0>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d301      	bcc.n	8003028 <dir_sdi+0xa4>
 8003024:	2302      	movs	r3, #2
 8003026:	e032      	b.n	800308e <dir_sdi+0x10a>
			ofs -= csz;
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d2e1      	bcs.n	8002ffc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	6938      	ldr	r0, [r7, #16]
 800303c:	f7ff fc60 	bl	8002900 <clust2sect>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <dir_sdi+0xd4>
 8003054:	2302      	movs	r3, #2
 8003056:	e01a      	b.n	800308e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	899b      	ldrh	r3, [r3, #12]
 8003060:	4619      	mov	r1, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	fbb3 f3f1 	udiv	r3, r3, r1
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	899b      	ldrh	r3, [r3, #12]
 8003078:	461a      	mov	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003080:	fb00 f202 	mul.w	r2, r0, r2
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	18ca      	adds	r2, r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	3320      	adds	r3, #32
 80030ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <dir_next+0x28>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030bc:	d301      	bcc.n	80030c2 <dir_next+0x2c>
 80030be:	2304      	movs	r3, #4
 80030c0:	e0bb      	b.n	800323a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	899b      	ldrh	r3, [r3, #12]
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80030ce:	fb01 f202 	mul.w	r2, r1, r2
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 809d 	bne.w	8003214 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	8912      	ldrh	r2, [r2, #8]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f0c0 808d 	bcc.w	8003214 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	61da      	str	r2, [r3, #28]
 8003100:	2304      	movs	r3, #4
 8003102:	e09a      	b.n	800323a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	899b      	ldrh	r3, [r3, #12]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	8952      	ldrh	r2, [r2, #10]
 8003114:	3a01      	subs	r2, #1
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d17b      	bne.n	8003214 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f7ff fc0a 	bl	800293e <get_fat>
 800312a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d801      	bhi.n	8003136 <dir_next+0xa0>
 8003132:	2302      	movs	r3, #2
 8003134:	e081      	b.n	800323a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d101      	bne.n	8003142 <dir_next+0xac>
 800313e:	2301      	movs	r3, #1
 8003140:	e07b      	b.n	800323a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	d359      	bcc.n	8003200 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	61da      	str	r2, [r3, #28]
 8003158:	2304      	movs	r3, #4
 800315a:	e06e      	b.n	800323a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f7ff fe3d 	bl	8002de4 <create_chain>
 800316a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <dir_next+0xe0>
 8003172:	2307      	movs	r3, #7
 8003174:	e061      	b.n	800323a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <dir_next+0xea>
 800317c:	2302      	movs	r3, #2
 800317e:	e05c      	b.n	800323a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d101      	bne.n	800318c <dir_next+0xf6>
 8003188:	2301      	movs	r3, #1
 800318a:	e056      	b.n	800323a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff fad5 	bl	800273c <sync_window>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <dir_next+0x106>
 8003198:	2301      	movs	r3, #1
 800319a:	e04e      	b.n	800323a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	899b      	ldrh	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	2100      	movs	r1, #0
 80031aa:	f7ff f8fe 	bl	80023aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fba3 	bl	8002900 <clust2sect>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	635a      	str	r2, [r3, #52]	; 0x34
 80031c0:	e012      	b.n	80031e8 <dir_next+0x152>
						fs->wflag = 1;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff fab7 	bl	800273c <sync_window>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <dir_next+0x142>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e030      	b.n	800323a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3301      	adds	r3, #1
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	895b      	ldrh	r3, [r3, #10]
 80031ec:	461a      	mov	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d3e6      	bcc.n	80031c2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003206:	6979      	ldr	r1, [r7, #20]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fb79 	bl	8002900 <clust2sect>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	899b      	ldrh	r3, [r3, #12]
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	fbb3 f0f2 	udiv	r0, r3, r2
 800322c:	fb00 f202 	mul.w	r2, r0, r2
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	18ca      	adds	r2, r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003252:	2100      	movs	r1, #0
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fe95 	bl	8002f84 <dir_sdi>
 800325a:	4603      	mov	r3, r0
 800325c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d12b      	bne.n	80032bc <dir_alloc+0x7a>
		n = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4619      	mov	r1, r3
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff faa8 	bl	80027c4 <move_window>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11d      	bne.n	80032ba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2be5      	cmp	r3, #229	; 0xe5
 8003286:	d004      	beq.n	8003292 <dir_alloc+0x50>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3301      	adds	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d102      	bne.n	80032a6 <dir_alloc+0x64>
 80032a0:	e00c      	b.n	80032bc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80032a6:	2101      	movs	r1, #1
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fef4 	bl	8003096 <dir_next>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0d7      	beq.n	8003268 <dir_alloc+0x26>
 80032b8:	e000      	b.n	80032bc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80032ba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d101      	bne.n	80032c6 <dir_alloc+0x84>
 80032c2:	2307      	movs	r3, #7
 80032c4:	75fb      	strb	r3, [r7, #23]
	return res;
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	331a      	adds	r3, #26
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe ffc0 	bl	8002264 <ld_word>
 80032e4:	4603      	mov	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d109      	bne.n	8003304 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe ffb5 	bl	8002264 <ld_word>
 80032fa:	4603      	mov	r3, r0
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003304:	68fb      	ldr	r3, [r7, #12]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	331a      	adds	r3, #26
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	b292      	uxth	r2, r2
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe ffd8 	bl	80022da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d109      	bne.n	8003346 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f103 0214 	add.w	r2, r3, #20
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	b29b      	uxth	r3, r3
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fe ffca 	bl	80022da <st_word>
	}
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	331a      	adds	r3, #26
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe ff80 	bl	8002264 <ld_word>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <cmp_lfn+0x1e>
 800336a:	2300      	movs	r3, #0
 800336c:	e059      	b.n	8003422 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003384:	2301      	movs	r3, #1
 8003386:	81fb      	strh	r3, [r7, #14]
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	e033      	b.n	80033f6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800338e:	4a27      	ldr	r2, [pc, #156]	; (800342c <cmp_lfn+0xdc>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4413      	add	r3, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe ff61 	bl	8002264 <ld_word>
 80033a2:	4603      	mov	r3, r0
 80033a4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01a      	beq.n	80033e2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2bfe      	cmp	r3, #254	; 0xfe
 80033b0:	d812      	bhi.n	80033d8 <cmp_lfn+0x88>
 80033b2:	89bb      	ldrh	r3, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 fe11 	bl	8004fdc <ff_wtoupper>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461c      	mov	r4, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	617a      	str	r2, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fe05 	bl	8004fdc <ff_wtoupper>
 80033d2:	4603      	mov	r3, r0
 80033d4:	429c      	cmp	r4, r3
 80033d6:	d001      	beq.n	80033dc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80033d8:	2300      	movs	r3, #0
 80033da:	e022      	b.n	8003422 <cmp_lfn+0xd2>
			}
			wc = uc;
 80033dc:	89bb      	ldrh	r3, [r7, #12]
 80033de:	81fb      	strh	r3, [r7, #14]
 80033e0:	e006      	b.n	80033f0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80033e2:	89bb      	ldrh	r3, [r7, #12]
 80033e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d001      	beq.n	80033f0 <cmp_lfn+0xa0>
 80033ec:	2300      	movs	r3, #0
 80033ee:	e018      	b.n	8003422 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	3301      	adds	r3, #1
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d9c8      	bls.n	800338e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00b      	beq.n	8003420 <cmp_lfn+0xd0>
 8003408:	89fb      	ldrh	r3, [r7, #14]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <cmp_lfn+0xd0>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <cmp_lfn+0xd0>
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003420:	2301      	movs	r3, #1
}
 8003422:	4618      	mov	r0, r3
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd90      	pop	{r4, r7, pc}
 800342a:	bf00      	nop
 800342c:	08005bf4 	.word	0x08005bf4

08003430 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	460b      	mov	r3, r1
 8003440:	71fb      	strb	r3, [r7, #7]
 8003442:	4613      	mov	r3, r2
 8003444:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	330d      	adds	r3, #13
 800344a:	79ba      	ldrb	r2, [r7, #6]
 800344c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	330b      	adds	r3, #11
 8003452:	220f      	movs	r2, #15
 8003454:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	330c      	adds	r3, #12
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	331a      	adds	r3, #26
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe ff38 	bl	80022da <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	82fb      	strh	r3, [r7, #22]
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003482:	8afb      	ldrh	r3, [r7, #22]
 8003484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <put_lfn+0x6c>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	61fa      	str	r2, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800349c:	4a17      	ldr	r2, [pc, #92]	; (80034fc <put_lfn+0xcc>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4413      	add	r3, r2
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	8afa      	ldrh	r2, [r7, #22]
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe ff13 	bl	80022da <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80034b4:	8afb      	ldrh	r3, [r7, #22]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <put_lfn+0x90>
 80034ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034be:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	3301      	adds	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d9da      	bls.n	8003482 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80034cc:	8afb      	ldrh	r3, [r7, #22]
 80034ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d006      	beq.n	80034e4 <put_lfn+0xb4>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <put_lfn+0xbc>
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	79fa      	ldrb	r2, [r7, #7]
 80034f0:	701a      	strb	r2, [r3, #0]
}
 80034f2:	bf00      	nop
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	08005bf4 	.word	0x08005bf4

08003500 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	; 0x30
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800350e:	220b      	movs	r2, #11
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7fe ff28 	bl	8002368 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d92b      	bls.n	8003576 <gen_numname+0x76>
		sr = seq;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003522:	e022      	b.n	800356a <gen_numname+0x6a>
			wc = *lfn++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
 8003532:	e017      	b.n	8003564 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005a      	lsls	r2, r3, #1
 8003538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003542:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <gen_numname+0x5e>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003558:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800355c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	3301      	adds	r3, #1
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	2b0f      	cmp	r3, #15
 8003568:	d9e4      	bls.n	8003534 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1d8      	bne.n	8003524 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003576:	2307      	movs	r3, #7
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3330      	adds	r3, #48	; 0x30
 8003586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800358a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800358e:	2b39      	cmp	r3, #57	; 0x39
 8003590:	d904      	bls.n	800359c <gen_numname+0x9c>
 8003592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003596:	3307      	adds	r3, #7
 8003598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	1e5a      	subs	r2, r3, #1
 80035a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80035a2:	3330      	adds	r3, #48	; 0x30
 80035a4:	443b      	add	r3, r7
 80035a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80035aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1df      	bne.n	800357a <gen_numname+0x7a>
	ns[i] = '~';
 80035ba:	f107 0214 	add.w	r2, r7, #20
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	4413      	add	r3, r2
 80035c2:	227e      	movs	r2, #126	; 0x7e
 80035c4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e002      	b.n	80035d2 <gen_numname+0xd2>
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	3301      	adds	r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d205      	bcs.n	80035e6 <gen_numname+0xe6>
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	4413      	add	r3, r2
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d1f2      	bne.n	80035cc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	2b07      	cmp	r3, #7
 80035ea:	d807      	bhi.n	80035fc <gen_numname+0xfc>
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80035f2:	3330      	adds	r3, #48	; 0x30
 80035f4:	443b      	add	r3, r7
 80035f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80035fa:	e000      	b.n	80035fe <gen_numname+0xfe>
 80035fc:	2120      	movs	r1, #32
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	627a      	str	r2, [r7, #36]	; 0x24
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	460a      	mov	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	2b07      	cmp	r3, #7
 8003610:	d9e9      	bls.n	80035e6 <gen_numname+0xe6>
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	3730      	adds	r7, #48	; 0x30
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003628:	230b      	movs	r3, #11
 800362a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	01db      	lsls	r3, r3, #7
 8003634:	4313      	orrs	r3, r2
 8003636:	b2da      	uxtb	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1c59      	adds	r1, r3, #1
 800363c:	6079      	str	r1, [r7, #4]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4413      	add	r3, r2
 8003642:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3b01      	subs	r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ed      	bne.n	800362c <sum_sfn+0x10>
	return sum;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800366c:	2100      	movs	r1, #0
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fc88 	bl	8002f84 <dir_sdi>
 8003674:	4603      	mov	r3, r0
 8003676:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <dir_find+0x24>
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	e0a9      	b.n	80037d6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003682:	23ff      	movs	r3, #255	; 0xff
 8003684:	753b      	strb	r3, [r7, #20]
 8003686:	7d3b      	ldrb	r3, [r7, #20]
 8003688:	757b      	strb	r3, [r7, #21]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4619      	mov	r1, r3
 8003698:	6938      	ldr	r0, [r7, #16]
 800369a:	f7ff f893 	bl	80027c4 <move_window>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 8090 	bne.w	80037ca <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80036b2:	7dbb      	ldrb	r3, [r7, #22]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <dir_find+0x60>
 80036b8:	2304      	movs	r3, #4
 80036ba:	75fb      	strb	r3, [r7, #23]
 80036bc:	e08a      	b.n	80037d4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	330b      	adds	r3, #11
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80036d2:	7dbb      	ldrb	r3, [r7, #22]
 80036d4:	2be5      	cmp	r3, #229	; 0xe5
 80036d6:	d007      	beq.n	80036e8 <dir_find+0x8a>
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <dir_find+0x98>
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d006      	beq.n	80036f6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80036e8:	23ff      	movs	r3, #255	; 0xff
 80036ea:	757b      	strb	r3, [r7, #21]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f04f 32ff 	mov.w	r2, #4294967295
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
 80036f4:	e05e      	b.n	80037b4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b0f      	cmp	r3, #15
 80036fa:	d136      	bne.n	800376a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d154      	bne.n	80037b4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	7b5b      	ldrb	r3, [r3, #13]
 800371a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800371c:	7dbb      	ldrb	r3, [r7, #22]
 800371e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003722:	75bb      	strb	r3, [r7, #22]
 8003724:	7dbb      	ldrb	r3, [r7, #22]
 8003726:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003730:	7dba      	ldrb	r2, [r7, #22]
 8003732:	7d7b      	ldrb	r3, [r7, #21]
 8003734:	429a      	cmp	r2, r3
 8003736:	d115      	bne.n	8003764 <dir_find+0x106>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	330d      	adds	r3, #13
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	7d3a      	ldrb	r2, [r7, #20]
 8003742:	429a      	cmp	r2, r3
 8003744:	d10e      	bne.n	8003764 <dir_find+0x106>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7ff fdfd 	bl	8003350 <cmp_lfn>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <dir_find+0x106>
 800375c:	7d7b      	ldrb	r3, [r7, #21]
 800375e:	3b01      	subs	r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e000      	b.n	8003766 <dir_find+0x108>
 8003764:	23ff      	movs	r3, #255	; 0xff
 8003766:	757b      	strb	r3, [r7, #21]
 8003768:	e024      	b.n	80037b4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800376a:	7d7b      	ldrb	r3, [r7, #21]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <dir_find+0x126>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff51 	bl	800361c <sum_sfn>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	7d3b      	ldrb	r3, [r7, #20]
 8003780:	4293      	cmp	r3, r2
 8003782:	d024      	beq.n	80037ce <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <dir_find+0x14a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a18      	ldr	r0, [r3, #32]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3324      	adds	r3, #36	; 0x24
 800379a:	220b      	movs	r2, #11
 800379c:	4619      	mov	r1, r3
 800379e:	f7fe fe1f 	bl	80023e0 <mem_cmp>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d014      	beq.n	80037d2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80037a8:	23ff      	movs	r3, #255	; 0xff
 80037aa:	757b      	strb	r3, [r7, #21]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f04f 32ff 	mov.w	r2, #4294967295
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80037b4:	2100      	movs	r1, #0
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fc6d 	bl	8003096 <dir_next>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f43f af65 	beq.w	8003692 <dir_find+0x34>
 80037c8:	e004      	b.n	80037d4 <dir_find+0x176>
		if (res != FR_OK) break;
 80037ca:	bf00      	nop
 80037cc:	e002      	b.n	80037d4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80037d2:	bf00      	nop

	return res;
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80037f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <dir_register+0x20>
 80037fc:	2306      	movs	r3, #6
 80037fe:	e0e0      	b.n	80039c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003800:	2300      	movs	r3, #0
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	e002      	b.n	800380c <dir_register+0x2c>
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	3301      	adds	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f4      	bne.n	8003806 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	220c      	movs	r2, #12
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fd9d 	bl	8002368 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d032      	beq.n	800389e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2240      	movs	r2, #64	; 0x40
 800383c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8003840:	2301      	movs	r3, #1
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
 8003844:	e016      	b.n	8003874 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	f107 010c 	add.w	r1, r7, #12
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	f7ff fe53 	bl	8003500 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff feff 	bl	800365e <dir_find>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	3301      	adds	r3, #1
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	2b63      	cmp	r3, #99	; 0x63
 8003878:	d9e5      	bls.n	8003846 <dir_register+0x66>
 800387a:	e000      	b.n	800387e <dir_register+0x9e>
			if (res != FR_OK) break;
 800387c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2b64      	cmp	r3, #100	; 0x64
 8003882:	d101      	bne.n	8003888 <dir_register+0xa8>
 8003884:	2307      	movs	r3, #7
 8003886:	e09c      	b.n	80039c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800388c:	2b04      	cmp	r3, #4
 800388e:	d002      	beq.n	8003896 <dir_register+0xb6>
 8003890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003894:	e095      	b.n	80039c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003896:	7dfa      	ldrb	r2, [r7, #23]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <dir_register+0xd8>
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	330c      	adds	r3, #12
 80038ac:	4a47      	ldr	r2, [pc, #284]	; (80039cc <dir_register+0x1ec>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3301      	adds	r3, #1
 80038b6:	e000      	b.n	80038ba <dir_register+0xda>
 80038b8:	2301      	movs	r3, #1
 80038ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80038bc:	6a39      	ldr	r1, [r7, #32]
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fcbf 	bl	8003242 <dir_alloc>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80038ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d148      	bne.n	8003964 <dir_register+0x184>
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d042      	beq.n	8003964 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	015b      	lsls	r3, r3, #5
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fb4a 	bl	8002f84 <dir_sdi>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80038f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d132      	bne.n	8003964 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3324      	adds	r3, #36	; 0x24
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fe8a 	bl	800361c <sum_sfn>
 8003908:	4603      	mov	r3, r0
 800390a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4619      	mov	r1, r3
 8003912:	69f8      	ldr	r0, [r7, #28]
 8003914:	f7fe ff56 	bl	80027c4 <move_window>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800391e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11d      	bne.n	8003962 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	6918      	ldr	r0, [r3, #16]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a19      	ldr	r1, [r3, #32]
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	7efb      	ldrb	r3, [r7, #27]
 8003934:	f7ff fd7c 	bl	8003430 <put_lfn>
				fs->wflag = 1;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2201      	movs	r2, #1
 800393c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800393e:	2100      	movs	r1, #0
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fba8 	bl	8003096 <dir_next>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800394c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <dir_register+0x184>
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	3b01      	subs	r3, #1
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1d5      	bne.n	800390c <dir_register+0x12c>
 8003960:	e000      	b.n	8003964 <dir_register+0x184>
				if (res != FR_OK) break;
 8003962:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003968:	2b00      	cmp	r3, #0
 800396a:	d128      	bne.n	80039be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4619      	mov	r1, r3
 8003972:	69f8      	ldr	r0, [r7, #28]
 8003974:	f7fe ff26 	bl	80027c4 <move_window>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800397e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11b      	bne.n	80039be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	2220      	movs	r2, #32
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fd0b 	bl	80023aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a18      	ldr	r0, [r3, #32]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3324      	adds	r3, #36	; 0x24
 800399c:	220b      	movs	r2, #11
 800399e:	4619      	mov	r1, r3
 80039a0:	f7fe fce2 	bl	8002368 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f002 0218 	and.w	r2, r2, #24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	2201      	movs	r2, #1
 80039bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80039be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3730      	adds	r7, #48	; 0x30
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	4ec4ec4f 	.word	0x4ec4ec4f

080039d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	61ba      	str	r2, [r7, #24]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80039fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a00:	2b1f      	cmp	r3, #31
 8003a02:	d940      	bls.n	8003a86 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a06:	2b2f      	cmp	r3, #47	; 0x2f
 8003a08:	d006      	beq.n	8003a18 <create_name+0x48>
 8003a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a0c:	2b5c      	cmp	r3, #92	; 0x5c
 8003a0e:	d110      	bne.n	8003a32 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003a10:	e002      	b.n	8003a18 <create_name+0x48>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b2f      	cmp	r3, #47	; 0x2f
 8003a22:	d0f6      	beq.n	8003a12 <create_name+0x42>
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8003a2e:	d0f0      	beq.n	8003a12 <create_name+0x42>
			break;
 8003a30:	e02a      	b.n	8003a88 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2bfe      	cmp	r3, #254	; 0xfe
 8003a36:	d901      	bls.n	8003a3c <create_name+0x6c>
 8003a38:	2306      	movs	r3, #6
 8003a3a:	e17d      	b.n	8003d38 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fa8c 	bl	8004f64 <ff_convert>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <create_name+0x8a>
 8003a56:	2306      	movs	r3, #6
 8003a58:	e16e      	b.n	8003d38 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5e:	d809      	bhi.n	8003a74 <create_name+0xa4>
 8003a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a62:	4619      	mov	r1, r3
 8003a64:	488d      	ldr	r0, [pc, #564]	; (8003c9c <create_name+0x2cc>)
 8003a66:	f7fe fce2 	bl	800242e <chk_chr>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <create_name+0xa4>
 8003a70:	2306      	movs	r3, #6
 8003a72:	e161      	b.n	8003d38 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	617a      	str	r2, [r7, #20]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a82:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003a84:	e7b4      	b.n	80039f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8003a86:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a94:	2b1f      	cmp	r3, #31
 8003a96:	d801      	bhi.n	8003a9c <create_name+0xcc>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	e000      	b.n	8003a9e <create_name+0xce>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003aa2:	e011      	b.n	8003ac8 <create_name+0xf8>
		w = lfn[di - 1];
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8003ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d002      	beq.n	8003ac2 <create_name+0xf2>
 8003abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003abe:	2b2e      	cmp	r3, #46	; 0x2e
 8003ac0:	d106      	bne.n	8003ad0 <create_name+0x100>
		di--;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ea      	bne.n	8003aa4 <create_name+0xd4>
 8003ace:	e000      	b.n	8003ad2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8003ad0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	2200      	movs	r2, #0
 8003adc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <create_name+0x118>
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	e127      	b.n	8003d38 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	220b      	movs	r2, #11
 8003aee:	2120      	movs	r1, #32
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fc5a 	bl	80023aa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e002      	b.n	8003b02 <create_name+0x132>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	3301      	adds	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d0f5      	beq.n	8003afc <create_name+0x12c>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b1c:	d0ee      	beq.n	8003afc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <create_name+0x168>
 8003b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b28:	f043 0303 	orr.w	r3, r3, #3
 8003b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003b30:	e002      	b.n	8003b38 <create_name+0x168>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <create_name+0x182>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003b44:	3b01      	subs	r3, #1
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b50:	d1ef      	bne.n	8003b32 <create_name+0x162>

	i = b = 0; ni = 8;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b58:	2300      	movs	r3, #0
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	61ba      	str	r2, [r7, #24]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8090 	beq.w	8003c98 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003b78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d006      	beq.n	8003b8c <create_name+0x1bc>
 8003b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b80:	2b2e      	cmp	r3, #46	; 0x2e
 8003b82:	d10a      	bne.n	8003b9a <create_name+0x1ca>
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d006      	beq.n	8003b9a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8003b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b90:	f043 0303 	orr.w	r3, r3, #3
 8003b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b98:	e07d      	b.n	8003c96 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d203      	bcs.n	8003baa <create_name+0x1da>
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d123      	bne.n	8003bf2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b0b      	cmp	r3, #11
 8003bae:	d106      	bne.n	8003bbe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8003bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb4:	f043 0303 	orr.w	r3, r3, #3
 8003bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bbc:	e075      	b.n	8003caa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d005      	beq.n	8003bd2 <create_name+0x202>
 8003bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bca:	f043 0303 	orr.w	r3, r3, #3
 8003bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d866      	bhi.n	8003ca8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	2308      	movs	r3, #8
 8003be0:	623b      	str	r3, [r7, #32]
 8003be2:	230b      	movs	r3, #11
 8003be4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8003be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003bf0:	e051      	b.n	8003c96 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf6:	d914      	bls.n	8003c22 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 f9b1 	bl	8004f64 <ff_convert>
 8003c02:	4603      	mov	r3, r0
 8003c04:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <create_name+0x246>
 8003c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c0e:	3b80      	subs	r3, #128	; 0x80
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <create_name+0x2d0>)
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <create_name+0x268>
 8003c28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	481d      	ldr	r0, [pc, #116]	; (8003ca4 <create_name+0x2d4>)
 8003c2e:	f7fe fbfe 	bl	800242e <chk_chr>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003c38:	235f      	movs	r3, #95	; 0x5f
 8003c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c40:	f043 0303 	orr.w	r3, r3, #3
 8003c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c48:	e01b      	b.n	8003c82 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d909      	bls.n	8003c64 <create_name+0x294>
 8003c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c52:	2b5a      	cmp	r3, #90	; 0x5a
 8003c54:	d806      	bhi.n	8003c64 <create_name+0x294>
					b |= 2;
 8003c56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c62:	e00e      	b.n	8003c82 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c66:	2b60      	cmp	r3, #96	; 0x60
 8003c68:	d90b      	bls.n	8003c82 <create_name+0x2b2>
 8003c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c6c:	2b7a      	cmp	r3, #122	; 0x7a
 8003c6e:	d808      	bhi.n	8003c82 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8003c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c7e:	3b20      	subs	r3, #32
 8003c80:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	623a      	str	r2, [r7, #32]
 8003c88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c8a:	b2d1      	uxtb	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	460a      	mov	r2, r1
 8003c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8003c96:	e763      	b.n	8003b60 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8003c98:	bf00      	nop
 8003c9a:	e006      	b.n	8003caa <create_name+0x2da>
 8003c9c:	08005b1c 	.word	0x08005b1c
 8003ca0:	08005b74 	.word	0x08005b74
 8003ca4:	08005b28 	.word	0x08005b28
			if (si > di) break;			/* No extension */
 8003ca8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb0:	2be5      	cmp	r3, #229	; 0xe5
 8003cb2:	d103      	bne.n	8003cbc <create_name+0x2ec>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d104      	bne.n	8003ccc <create_name+0x2fc>
 8003cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8003ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d005      	beq.n	8003ce4 <create_name+0x314>
 8003cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d105      	bne.n	8003cf0 <create_name+0x320>
 8003ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d117      	bne.n	8003d2c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <create_name+0x344>
 8003d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d0c:	f043 0310 	orr.w	r3, r3, #16
 8003d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003d14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d105      	bne.n	8003d2c <create_name+0x35c>
 8003d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d24:	f043 0308 	orr.w	r3, r3, #8
 8003d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8003d36:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3728      	adds	r7, #40	; 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003d54:	e002      	b.n	8003d5c <follow_path+0x1c>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b2f      	cmp	r3, #47	; 0x2f
 8003d62:	d0f8      	beq.n	8003d56 <follow_path+0x16>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b5c      	cmp	r3, #92	; 0x5c
 8003d6a:	d0f4      	beq.n	8003d56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b1f      	cmp	r3, #31
 8003d78:	d80a      	bhi.n	8003d90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003d82:	2100      	movs	r1, #0
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff f8fd 	bl	8002f84 <dir_sdi>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]
 8003d8e:	e048      	b.n	8003e22 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003d90:	463b      	mov	r3, r7
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fe1b 	bl	80039d0 <create_name>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d139      	bne.n	8003e18 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fc5a 	bl	800365e <dir_find>
 8003daa:	4603      	mov	r3, r0
 8003dac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003db4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d12c      	bne.n	8003e1c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003dc2:	7afb      	ldrb	r3, [r7, #11]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d127      	bne.n	8003e1c <follow_path+0xdc>
 8003dcc:	2305      	movs	r3, #5
 8003dce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003dd0:	e024      	b.n	8003e1c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d121      	bne.n	8003e20 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	799b      	ldrb	r3, [r3, #6]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003de8:	2305      	movs	r3, #5
 8003dea:	75fb      	strb	r3, [r7, #23]
 8003dec:	e019      	b.n	8003e22 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	8992      	ldrh	r2, [r2, #12]
 8003dfc:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e00:	fb00 f202 	mul.w	r2, r0, r2
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	440b      	add	r3, r1
 8003e08:	4619      	mov	r1, r3
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff fa60 	bl	80032d0 <ld_clust>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003e16:	e7bb      	b.n	8003d90 <follow_path+0x50>
			if (res != FR_OK) break;
 8003e18:	bf00      	nop
 8003e1a:	e002      	b.n	8003e22 <follow_path+0xe2>
				break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003e20:	bf00      	nop
			}
		}
	}

	return res;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d031      	beq.n	8003ea6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e002      	b.n	8003e50 <get_ldnumber+0x24>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b1f      	cmp	r3, #31
 8003e56:	d903      	bls.n	8003e60 <get_ldnumber+0x34>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b3a      	cmp	r3, #58	; 0x3a
 8003e5e:	d1f4      	bne.n	8003e4a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b3a      	cmp	r3, #58	; 0x3a
 8003e66:	d11c      	bne.n	8003ea2 <get_ldnumber+0x76>
			tp = *path;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	60fa      	str	r2, [r7, #12]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3b30      	subs	r3, #48	; 0x30
 8003e78:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b09      	cmp	r3, #9
 8003e7e:	d80e      	bhi.n	8003e9e <get_ldnumber+0x72>
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d10a      	bne.n	8003e9e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <get_ldnumber+0x72>
					vol = (int)i;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3301      	adds	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	e002      	b.n	8003ea8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003ea6:	693b      	ldr	r3, [r7, #16]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	70da      	strb	r2, [r3, #3]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe fc78 	bl	80027c4 <move_window>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <check_fs+0x2a>
 8003eda:	2304      	movs	r3, #4
 8003edc:	e038      	b.n	8003f50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3338      	adds	r3, #56	; 0x38
 8003ee2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe f9bc 	bl	8002264 <ld_word>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <check_fs+0x48>
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e029      	b.n	8003f50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f02:	2be9      	cmp	r3, #233	; 0xe9
 8003f04:	d009      	beq.n	8003f1a <check_fs+0x66>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f0c:	2beb      	cmp	r3, #235	; 0xeb
 8003f0e:	d11e      	bne.n	8003f4e <check_fs+0x9a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f16:	2b90      	cmp	r3, #144	; 0x90
 8003f18:	d119      	bne.n	8003f4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3338      	adds	r3, #56	; 0x38
 8003f1e:	3336      	adds	r3, #54	; 0x36
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe f9b7 	bl	8002294 <ld_dword>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f2c:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <check_fs+0xa4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <check_fs+0x82>
 8003f32:	2300      	movs	r3, #0
 8003f34:	e00c      	b.n	8003f50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3338      	adds	r3, #56	; 0x38
 8003f3a:	3352      	adds	r3, #82	; 0x52
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f9a9 	bl	8002294 <ld_dword>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <check_fs+0xa8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <check_fs+0x9a>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003f4e:	2302      	movs	r3, #2
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	00544146 	.word	0x00544146
 8003f5c:	33544146 	.word	0x33544146

08003f60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b096      	sub	sp, #88	; 0x58
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff ff59 	bl	8003e2c <get_ldnumber>
 8003f7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da01      	bge.n	8003f86 <find_volume+0x26>
 8003f82:	230b      	movs	r3, #11
 8003f84:	e265      	b.n	8004452 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003f86:	4a9f      	ldr	r2, [pc, #636]	; (8004204 <find_volume+0x2a4>)
 8003f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <find_volume+0x3a>
 8003f96:	230c      	movs	r3, #12
 8003f98:	e25b      	b.n	8004452 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe f8b7 	bl	8002128 <disk_status>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003fc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10c      	bne.n	8003fe6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <find_volume+0x82>
 8003fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003fde:	230a      	movs	r3, #10
 8003fe0:	e237      	b.n	8004452 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e235      	b.n	8004452 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	785b      	ldrb	r3, [r3, #1]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe f8af 	bl	800215c <disk_initialize>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004010:	2303      	movs	r3, #3
 8004012:	e21e      	b.n	8004452 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <find_volume+0xca>
 800401a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004026:	230a      	movs	r3, #10
 8004028:	e213      	b.n	8004452 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	7858      	ldrb	r0, [r3, #1]
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	330c      	adds	r3, #12
 8004032:	461a      	mov	r2, r3
 8004034:	2102      	movs	r1, #2
 8004036:	f7fe f8f7 	bl	8002228 <disk_ioctl>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <find_volume+0xe4>
 8004040:	2301      	movs	r3, #1
 8004042:	e206      	b.n	8004452 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	899b      	ldrh	r3, [r3, #12]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d80d      	bhi.n	800406a <find_volume+0x10a>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	899b      	ldrh	r3, [r3, #12]
 8004052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004056:	d308      	bcc.n	800406a <find_volume+0x10a>
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	899b      	ldrh	r3, [r3, #12]
 800405c:	461a      	mov	r2, r3
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	899b      	ldrh	r3, [r3, #12]
 8004062:	3b01      	subs	r3, #1
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <find_volume+0x10e>
 800406a:	2301      	movs	r3, #1
 800406c:	e1f1      	b.n	8004452 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004076:	f7ff ff1d 	bl	8003eb4 <check_fs>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004084:	2b02      	cmp	r3, #2
 8004086:	d149      	bne.n	800411c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004088:	2300      	movs	r3, #0
 800408a:	643b      	str	r3, [r7, #64]	; 0x40
 800408c:	e01e      	b.n	80040cc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800409c:	4413      	add	r3, r2
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	3304      	adds	r3, #4
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <find_volume+0x158>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	3308      	adds	r3, #8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe f8f0 	bl	8002294 <ld_dword>
 80040b4:	4602      	mov	r2, r0
 80040b6:	e000      	b.n	80040ba <find_volume+0x15a>
 80040b8:	2200      	movs	r2, #0
 80040ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	3358      	adds	r3, #88	; 0x58
 80040c0:	443b      	add	r3, r7
 80040c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80040c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c8:	3301      	adds	r3, #1
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40
 80040cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d9dd      	bls.n	800408e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80040d2:	2300      	movs	r3, #0
 80040d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80040d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <find_volume+0x182>
 80040dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040de:	3b01      	subs	r3, #1
 80040e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80040e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3358      	adds	r3, #88	; 0x58
 80040e8:	443b      	add	r3, r7
 80040ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80040ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80040f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <find_volume+0x1a2>
 80040f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040fa:	f7ff fedb 	bl	8003eb4 <check_fs>
 80040fe:	4603      	mov	r3, r0
 8004100:	e000      	b.n	8004104 <find_volume+0x1a4>
 8004102:	2303      	movs	r3, #3
 8004104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800410c:	2b01      	cmp	r3, #1
 800410e:	d905      	bls.n	800411c <find_volume+0x1bc>
 8004110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004112:	3301      	adds	r3, #1
 8004114:	643b      	str	r3, [r7, #64]	; 0x40
 8004116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004118:	2b03      	cmp	r3, #3
 800411a:	d9e2      	bls.n	80040e2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800411c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004120:	2b04      	cmp	r3, #4
 8004122:	d101      	bne.n	8004128 <find_volume+0x1c8>
 8004124:	2301      	movs	r3, #1
 8004126:	e194      	b.n	8004452 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800412c:	2b01      	cmp	r3, #1
 800412e:	d901      	bls.n	8004134 <find_volume+0x1d4>
 8004130:	230d      	movs	r3, #13
 8004132:	e18e      	b.n	8004452 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	3338      	adds	r3, #56	; 0x38
 8004138:	330b      	adds	r3, #11
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe f892 	bl	8002264 <ld_word>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	899b      	ldrh	r3, [r3, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <find_volume+0x1f0>
 800414c:	230d      	movs	r3, #13
 800414e:	e180      	b.n	8004452 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	3338      	adds	r3, #56	; 0x38
 8004154:	3316      	adds	r3, #22
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f884 	bl	8002264 <ld_word>
 800415c:	4603      	mov	r3, r0
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <find_volume+0x214>
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	3338      	adds	r3, #56	; 0x38
 800416a:	3324      	adds	r3, #36	; 0x24
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe f891 	bl	8002294 <ld_dword>
 8004172:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004178:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d005      	beq.n	8004198 <find_volume+0x238>
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	789b      	ldrb	r3, [r3, #2]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d001      	beq.n	8004198 <find_volume+0x238>
 8004194:	230d      	movs	r3, #13
 8004196:	e15c      	b.n	8004452 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	461a      	mov	r2, r3
 800419e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a0:	fb02 f303 	mul.w	r3, r2, r3
 80041a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	895b      	ldrh	r3, [r3, #10]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <find_volume+0x26c>
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	895b      	ldrh	r3, [r3, #10]
 80041be:	461a      	mov	r2, r3
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	895b      	ldrh	r3, [r3, #10]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <find_volume+0x270>
 80041cc:	230d      	movs	r3, #13
 80041ce:	e140      	b.n	8004452 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	3338      	adds	r3, #56	; 0x38
 80041d4:	3311      	adds	r3, #17
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe f844 	bl	8002264 <ld_word>
 80041dc:	4603      	mov	r3, r0
 80041de:	461a      	mov	r2, r3
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	891b      	ldrh	r3, [r3, #8]
 80041e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ea:	8992      	ldrh	r2, [r2, #12]
 80041ec:	0952      	lsrs	r2, r2, #5
 80041ee:	b292      	uxth	r2, r2
 80041f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80041f4:	fb01 f202 	mul.w	r2, r1, r2
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <find_volume+0x2a8>
 8004200:	230d      	movs	r3, #13
 8004202:	e126      	b.n	8004452 <find_volume+0x4f2>
 8004204:	20002114 	.word	0x20002114

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	3338      	adds	r3, #56	; 0x38
 800420c:	3313      	adds	r3, #19
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe f828 	bl	8002264 <ld_word>
 8004214:	4603      	mov	r3, r0
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <find_volume+0x2cc>
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	3338      	adds	r3, #56	; 0x38
 8004222:	3320      	adds	r3, #32
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe f835 	bl	8002294 <ld_dword>
 800422a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	3338      	adds	r3, #56	; 0x38
 8004230:	330e      	adds	r3, #14
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe f816 	bl	8002264 <ld_word>
 8004238:	4603      	mov	r3, r0
 800423a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800423c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <find_volume+0x2e6>
 8004242:	230d      	movs	r3, #13
 8004244:	e105      	b.n	8004452 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004246:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424a:	4413      	add	r3, r2
 800424c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800424e:	8911      	ldrh	r1, [r2, #8]
 8004250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004252:	8992      	ldrh	r2, [r2, #12]
 8004254:	0952      	lsrs	r2, r2, #5
 8004256:	b292      	uxth	r2, r2
 8004258:	fbb1 f2f2 	udiv	r2, r1, r2
 800425c:	b292      	uxth	r2, r2
 800425e:	4413      	add	r3, r2
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	429a      	cmp	r2, r3
 8004268:	d201      	bcs.n	800426e <find_volume+0x30e>
 800426a:	230d      	movs	r3, #13
 800426c:	e0f1      	b.n	8004452 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800426e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004276:	8952      	ldrh	r2, [r2, #10]
 8004278:	fbb3 f3f2 	udiv	r3, r3, r2
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <find_volume+0x328>
 8004284:	230d      	movs	r3, #13
 8004286:	e0e4      	b.n	8004452 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004288:	2303      	movs	r3, #3
 800428a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004294:	4293      	cmp	r3, r2
 8004296:	d802      	bhi.n	800429e <find_volume+0x33e>
 8004298:	2302      	movs	r3, #2
 800429a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d802      	bhi.n	80042ae <find_volume+0x34e>
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80042bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80042be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c0:	441a      	add	r2, r3
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80042c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	441a      	add	r2, r3
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80042d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d11e      	bne.n	8004316 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	3338      	adds	r3, #56	; 0x38
 80042dc:	332a      	adds	r3, #42	; 0x2a
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd ffc0 	bl	8002264 <ld_word>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <find_volume+0x38e>
 80042ea:	230d      	movs	r3, #13
 80042ec:	e0b1      	b.n	8004452 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	891b      	ldrh	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <find_volume+0x39a>
 80042f6:	230d      	movs	r3, #13
 80042f8:	e0ab      	b.n	8004452 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	3338      	adds	r3, #56	; 0x38
 80042fe:	332c      	adds	r3, #44	; 0x2c
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd ffc7 	bl	8002294 <ld_dword>
 8004306:	4602      	mov	r2, r0
 8004308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	647b      	str	r3, [r7, #68]	; 0x44
 8004314:	e01f      	b.n	8004356 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	891b      	ldrh	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <find_volume+0x3c2>
 800431e:	230d      	movs	r3, #13
 8004320:	e097      	b.n	8004452 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	441a      	add	r2, r3
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800432e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004332:	2b02      	cmp	r3, #2
 8004334:	d103      	bne.n	800433e <find_volume+0x3de>
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	e00a      	b.n	8004354 <find_volume+0x3f4>
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	085a      	lsrs	r2, r3, #1
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	899b      	ldrh	r3, [r3, #12]
 800435e:	4619      	mov	r1, r3
 8004360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004362:	440b      	add	r3, r1
 8004364:	3b01      	subs	r3, #1
 8004366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004368:	8989      	ldrh	r1, [r1, #12]
 800436a:	fbb3 f3f1 	udiv	r3, r3, r1
 800436e:	429a      	cmp	r2, r3
 8004370:	d201      	bcs.n	8004376 <find_volume+0x416>
 8004372:	230d      	movs	r3, #13
 8004374:	e06d      	b.n	8004452 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	619a      	str	r2, [r3, #24]
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800438c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004390:	2b03      	cmp	r3, #3
 8004392:	d149      	bne.n	8004428 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	3338      	adds	r3, #56	; 0x38
 8004398:	3330      	adds	r3, #48	; 0x30
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd ff62 	bl	8002264 <ld_word>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d140      	bne.n	8004428 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80043a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a8:	3301      	adds	r3, #1
 80043aa:	4619      	mov	r1, r3
 80043ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043ae:	f7fe fa09 	bl	80027c4 <move_window>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d137      	bne.n	8004428 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	2200      	movs	r2, #0
 80043bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	3338      	adds	r3, #56	; 0x38
 80043c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd ff4c 	bl	8002264 <ld_word>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d127      	bne.n	8004428 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	3338      	adds	r3, #56	; 0x38
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd ff59 	bl	8002294 <ld_dword>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <find_volume+0x4fc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d11e      	bne.n	8004428 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	3338      	adds	r3, #56	; 0x38
 80043ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd ff4e 	bl	8002294 <ld_dword>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4a19      	ldr	r2, [pc, #100]	; (8004460 <find_volume+0x500>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d113      	bne.n	8004428 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	3338      	adds	r3, #56	; 0x38
 8004404:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd ff43 	bl	8002294 <ld_dword>
 800440e:	4602      	mov	r2, r0
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	3338      	adds	r3, #56	; 0x38
 8004418:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd ff39 	bl	8002294 <ld_dword>
 8004422:	4602      	mov	r2, r0
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800442e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <find_volume+0x504>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <find_volume+0x504>)
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <find_volume+0x504>)
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <find_volume+0x508>)
 8004448:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800444a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800444c:	f7fe f952 	bl	80026f4 <clear_lock>
#endif
	return FR_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3758      	adds	r7, #88	; 0x58
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	41615252 	.word	0x41615252
 8004460:	61417272 	.word	0x61417272
 8004464:	20002118 	.word	0x20002118
 8004468:	2000213c 	.word	0x2000213c

0800446c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004476:	2309      	movs	r3, #9
 8004478:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01c      	beq.n	80044ba <validate+0x4e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d018      	beq.n	80044ba <validate+0x4e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d013      	beq.n	80044ba <validate+0x4e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	889a      	ldrh	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	88db      	ldrh	r3, [r3, #6]
 800449c:	429a      	cmp	r2, r3
 800449e:	d10c      	bne.n	80044ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd fe3e 	bl	8002128 <disk_status>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <validate+0x4e>
			res = FR_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <validate+0x5a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	e000      	b.n	80044c8 <validate+0x5c>
 80044c6:	2300      	movs	r3, #0
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	6013      	str	r3, [r2, #0]
	return res;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80044ea:	f107 0310 	add.w	r3, r7, #16
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fc9c 	bl	8003e2c <get_ldnumber>
 80044f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da01      	bge.n	8004500 <f_mount+0x28>
 80044fc:	230b      	movs	r3, #11
 80044fe:	e02b      	b.n	8004558 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <f_mount+0x88>)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004508:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004510:	69b8      	ldr	r0, [r7, #24]
 8004512:	f7fe f8ef 	bl	80026f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	490d      	ldr	r1, [pc, #52]	; (8004560 <f_mount+0x88>)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <f_mount+0x66>
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d001      	beq.n	8004542 <f_mount+0x6a>
 800453e:	2300      	movs	r3, #0
 8004540:	e00a      	b.n	8004558 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004542:	f107 010c 	add.w	r1, r7, #12
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	2200      	movs	r2, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fd07 	bl	8003f60 <find_volume>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004556:	7dfb      	ldrb	r3, [r7, #23]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20002114 	.word	0x20002114

08004564 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b09a      	sub	sp, #104	; 0x68
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <f_open+0x18>
 8004578:	2309      	movs	r3, #9
 800457a:	e1bb      	b.n	80048f4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004582:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004584:	79fa      	ldrb	r2, [r7, #7]
 8004586:	f107 0114 	add.w	r1, r7, #20
 800458a:	f107 0308 	add.w	r3, r7, #8
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fce6 	bl	8003f60 <find_volume>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800459a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 819f 	bne.w	80048e2 <f_open+0x37e>
		dj.obj.fs = fs;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	f107 0318 	add.w	r3, r7, #24
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fbc5 	bl	8003d40 <follow_path>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80045bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d11a      	bne.n	80045fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80045c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	da03      	bge.n	80045d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80045ce:	2306      	movs	r3, #6
 80045d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80045d4:	e011      	b.n	80045fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	f107 0318 	add.w	r3, r7, #24
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd ff38 	bl	8002464 <chk_lock>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	f003 031c 	and.w	r3, r3, #28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d07f      	beq.n	8004704 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004608:	2b00      	cmp	r3, #0
 800460a:	d017      	beq.n	800463c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800460c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004610:	2b04      	cmp	r3, #4
 8004612:	d10e      	bne.n	8004632 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004614:	f7fd ff82 	bl	800251c <enq_lock>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d006      	beq.n	800462c <f_open+0xc8>
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f8dc 	bl	80037e0 <dir_register>
 8004628:	4603      	mov	r3, r0
 800462a:	e000      	b.n	800462e <f_open+0xca>
 800462c:	2312      	movs	r3, #18
 800462e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	f043 0308 	orr.w	r3, r3, #8
 8004638:	71fb      	strb	r3, [r7, #7]
 800463a:	e010      	b.n	800465e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800463c:	7fbb      	ldrb	r3, [r7, #30]
 800463e:	f003 0311 	and.w	r3, r3, #17
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <f_open+0xea>
					res = FR_DENIED;
 8004646:	2307      	movs	r3, #7
 8004648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800464c:	e007      	b.n	800465e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <f_open+0xfa>
 8004658:	2308      	movs	r3, #8
 800465a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800465e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004662:	2b00      	cmp	r3, #0
 8004664:	d168      	bne.n	8004738 <f_open+0x1d4>
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d063      	beq.n	8004738 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004670:	f7fd fcf8 	bl	8002064 <get_fattime>
 8004674:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	330e      	adds	r3, #14
 800467a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fe47 	bl	8002310 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	3316      	adds	r3, #22
 8004686:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004688:	4618      	mov	r0, r3
 800468a:	f7fd fe41 	bl	8002310 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	330b      	adds	r3, #11
 8004692:	2220      	movs	r2, #32
 8004694:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fe17 	bl	80032d0 <ld_clust>
 80046a2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046a8:	2200      	movs	r2, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fe2f 	bl	800330e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	331c      	adds	r3, #28
 80046b4:	2100      	movs	r1, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd fe2a 	bl	8002310 <st_dword>
					fs->wflag = 1;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2201      	movs	r2, #1
 80046c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80046c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d037      	beq.n	8004738 <f_open+0x1d4>
						dw = fs->winsect;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80046ce:	f107 0318 	add.w	r3, r7, #24
 80046d2:	2200      	movs	r2, #0
 80046d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fb1f 	bl	8002d1a <remove_chain>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80046e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d126      	bne.n	8004738 <f_open+0x1d4>
							res = move_window(fs, dw);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe f868 	bl	80027c4 <move_window>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046fe:	3a01      	subs	r2, #1
 8004700:	615a      	str	r2, [r3, #20]
 8004702:	e019      	b.n	8004738 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004704:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800470c:	7fbb      	ldrb	r3, [r7, #30]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <f_open+0x1ba>
					res = FR_NO_FILE;
 8004716:	2304      	movs	r3, #4
 8004718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800471c:	e00c      	b.n	8004738 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <f_open+0x1d4>
 8004728:	7fbb      	ldrb	r3, [r7, #30]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <f_open+0x1d4>
						res = FR_DENIED;
 8004732:	2307      	movs	r3, #7
 8004734:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8004738:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800473c:	2b00      	cmp	r3, #0
 800473e:	d128      	bne.n	8004792 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004750:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800475a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	f107 0318 	add.w	r3, r7, #24
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f7fd fef1 	bl	8002560 <inc_lock>
 800477e:	4602      	mov	r2, r0
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <f_open+0x22e>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004792:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80a3 	bne.w	80048e2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a0:	4611      	mov	r1, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fd94 	bl	80032d0 <ld_clust>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	331c      	adds	r3, #28
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd fd6e 	bl	8002294 <ld_dword>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	88da      	ldrh	r2, [r3, #6]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	79fa      	ldrb	r2, [r7, #7]
 80047d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3330      	adds	r3, #48	; 0x30
 80047ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fd fdd8 	bl	80023aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d06e      	beq.n	80048e2 <f_open+0x37e>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d06a      	beq.n	80048e2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	895b      	ldrh	r3, [r3, #10]
 8004818:	461a      	mov	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	899b      	ldrh	r3, [r3, #12]
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004830:	e016      	b.n	8004860 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe f881 	bl	800293e <get_fat>
 800483c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800483e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004840:	2b01      	cmp	r3, #1
 8004842:	d802      	bhi.n	800484a <f_open+0x2e6>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800484a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d102      	bne.n	8004858 <f_open+0x2f4>
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004858:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <f_open+0x30c>
 8004868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	429a      	cmp	r2, r3
 800486e:	d8e0      	bhi.n	8004832 <f_open+0x2ce>
				}
				fp->clust = clst;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004874:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800487a:	2b00      	cmp	r3, #0
 800487c:	d131      	bne.n	80048e2 <f_open+0x37e>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	899b      	ldrh	r3, [r3, #12]
 8004882:	461a      	mov	r2, r3
 8004884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004886:	fbb3 f1f2 	udiv	r1, r3, r2
 800488a:	fb01 f202 	mul.w	r2, r1, r2
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d026      	beq.n	80048e2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe f831 	bl	8002900 <clust2sect>
 800489e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80048a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <f_open+0x34a>
						res = FR_INT_ERR;
 80048a6:	2302      	movs	r3, #2
 80048a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80048ac:	e019      	b.n	80048e2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	899b      	ldrh	r3, [r3, #12]
 80048b2:	461a      	mov	r2, r3
 80048b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	7858      	ldrb	r0, [r3, #1]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	2301      	movs	r3, #1
 80048d2:	f7fd fc69 	bl	80021a8 <disk_read>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <f_open+0x37e>
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80048e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <f_open+0x38c>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80048f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3768      	adds	r7, #104	; 0x68
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08c      	sub	sp, #48	; 0x30
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f107 0210 	add.w	r2, r7, #16
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fda5 	bl	800446c <validate>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <f_write+0x44>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	7d5b      	ldrb	r3, [r3, #21]
 8004934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <f_write+0x4a>
 8004940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004944:	e16a      	b.n	8004c1c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	7d1b      	ldrb	r3, [r3, #20]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <f_write+0x5a>
 8004952:	2307      	movs	r3, #7
 8004954:	e162      	b.n	8004c1c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	429a      	cmp	r2, r3
 8004964:	f080 814c 	bcs.w	8004c00 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	43db      	mvns	r3, r3
 800496e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004970:	e146      	b.n	8004c00 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	8992      	ldrh	r2, [r2, #12]
 800497a:	fbb3 f1f2 	udiv	r1, r3, r2
 800497e:	fb01 f202 	mul.w	r2, r1, r2
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 80f1 	bne.w	8004b6c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	8992      	ldrh	r2, [r2, #12]
 8004992:	fbb3 f3f2 	udiv	r3, r3, r2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	8952      	ldrh	r2, [r2, #10]
 800499a:	3a01      	subs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d143      	bne.n	8004a2e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10c      	bne.n	80049c8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11a      	bne.n	80049f0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fa10 	bl	8002de4 <create_chain>
 80049c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80049c6:	e013      	b.n	80049f0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	4619      	mov	r1, r3
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7fe fa9c 	bl	8002f14 <clmt_clust>
 80049dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80049de:	e007      	b.n	80049f0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fe f9fb 	bl	8002de4 <create_chain>
 80049ee:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8109 	beq.w	8004c0a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d104      	bne.n	8004a08 <f_write+0x10c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2202      	movs	r2, #2
 8004a02:	755a      	strb	r2, [r3, #21]
 8004a04:	2302      	movs	r3, #2
 8004a06:	e109      	b.n	8004c1c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d104      	bne.n	8004a1a <f_write+0x11e>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	755a      	strb	r2, [r3, #21]
 8004a16:	2301      	movs	r3, #1
 8004a18:	e100      	b.n	8004c1c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a1e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <f_write+0x132>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	7d1b      	ldrb	r3, [r3, #20]
 8004a32:	b25b      	sxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da18      	bge.n	8004a6a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	7858      	ldrb	r0, [r3, #1]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	2301      	movs	r3, #1
 8004a48:	f7fd fbce 	bl	80021e8 <disk_write>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <f_write+0x160>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	755a      	strb	r2, [r3, #21]
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0df      	b.n	8004c1c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	7d1b      	ldrb	r3, [r3, #20]
 8004a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f7fd ff44 	bl	8002900 <clust2sect>
 8004a78:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <f_write+0x18e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2202      	movs	r2, #2
 8004a84:	755a      	strb	r2, [r3, #21]
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0c8      	b.n	8004c1c <f_write+0x320>
			sect += csect;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4413      	add	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	899b      	ldrh	r3, [r3, #12]
 8004a96:	461a      	mov	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a9e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d043      	beq.n	8004b2e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	4413      	add	r3, r2
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	8952      	ldrh	r2, [r2, #10]
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d905      	bls.n	8004ac0 <f_write+0x1c4>
					cc = fs->csize - csect;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	895b      	ldrh	r3, [r3, #10]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	7858      	ldrb	r0, [r3, #1]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	69f9      	ldr	r1, [r7, #28]
 8004aca:	f7fd fb8d 	bl	80021e8 <disk_write>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <f_write+0x1e2>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	755a      	strb	r2, [r3, #21]
 8004ada:	2301      	movs	r3, #1
 8004adc:	e09e      	b.n	8004c1c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1a      	ldr	r2, [r3, #32]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	6a3a      	ldr	r2, [r7, #32]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d918      	bls.n	8004b1e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	8992      	ldrh	r2, [r2, #12]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	18d1      	adds	r1, r2, r3
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	899b      	ldrh	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f7fd fc2c 	bl	8002368 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	7d1b      	ldrb	r3, [r3, #20]
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	899b      	ldrh	r3, [r3, #12]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004b2c:	e04b      	b.n	8004bc6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d016      	beq.n	8004b66 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	699a      	ldr	r2, [r3, #24]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d210      	bcs.n	8004b66 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	7858      	ldrb	r0, [r3, #1]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b4e:	2301      	movs	r3, #1
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	f7fd fb29 	bl	80021a8 <disk_read>
 8004b56:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	755a      	strb	r2, [r3, #21]
 8004b62:	2301      	movs	r3, #1
 8004b64:	e05a      	b.n	8004c1c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	899b      	ldrh	r3, [r3, #12]
 8004b70:	4618      	mov	r0, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	8992      	ldrh	r2, [r2, #12]
 8004b7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b7e:	fb01 f202 	mul.w	r2, r1, r2
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	1ac3      	subs	r3, r0, r3
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d901      	bls.n	8004b94 <f_write+0x298>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	8992      	ldrh	r2, [r2, #12]
 8004ba2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ba6:	fb00 f202 	mul.w	r2, r0, r2
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	440b      	add	r3, r1
 8004bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb0:	69f9      	ldr	r1, [r7, #28]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd fbd8 	bl	8002368 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	7d1b      	ldrb	r3, [r3, #20]
 8004bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	4413      	add	r3, r2
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	619a      	str	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	bf38      	it	cc
 8004be6:	461a      	movcc	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	60da      	str	r2, [r3, #12]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	441a      	add	r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f47f aeb5 	bne.w	8004972 <f_write+0x76>
 8004c08:	e000      	b.n	8004c0c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004c0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	7d1b      	ldrb	r3, [r3, #20]
 8004c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3730      	adds	r7, #48	; 0x30
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f107 0208 	add.w	r2, r7, #8
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fc19 	bl	800446c <validate>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d168      	bne.n	8004d16 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7d1b      	ldrb	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d062      	beq.n	8004d16 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7d1b      	ldrb	r3, [r3, #20]
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da15      	bge.n	8004c86 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	7858      	ldrb	r0, [r3, #1]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f7fd fabd 	bl	80021e8 <disk_write>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <f_sync+0x54>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e04f      	b.n	8004d18 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7d1b      	ldrb	r3, [r3, #20]
 8004c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004c86:	f7fd f9ed 	bl	8002064 <get_fattime>
 8004c8a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fd fd95 	bl	80027c4 <move_window>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d138      	bne.n	8004d16 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	330b      	adds	r3, #11
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	330b      	adds	r3, #11
 8004cb4:	f042 0220 	orr.w	r2, r2, #32
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	f7fe fb21 	bl	800330e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f103 021c 	add.w	r2, r3, #28
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fd fb19 	bl	8002310 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3316      	adds	r3, #22
 8004ce2:	6939      	ldr	r1, [r7, #16]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fd fb13 	bl	8002310 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3312      	adds	r3, #18
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fd faf2 	bl	80022da <st_word>
					fs->wflag = 1;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fd fd8e 	bl	8002820 <sync_fs>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7d1b      	ldrb	r3, [r3, #20]
 8004d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff ff7b 	bl	8004c24 <f_sync>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d118      	bne.n	8004d6a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f107 0208 	add.w	r2, r7, #8
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fb93 	bl	800446c <validate>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fc91 	bl	800267c <dec_lock>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b0a      	cmp	r3, #10
 8004d84:	d103      	bne.n	8004d8e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8004d86:	210d      	movs	r1, #13
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff fff3 	bl	8004d74 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	db25      	blt.n	8004de6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	60fa      	str	r2, [r7, #12]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	4413      	add	r3, r2
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b3c      	cmp	r3, #60	; 0x3c
 8004dac:	dd12      	ble.n	8004dd4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f103 010c 	add.w	r1, r3, #12
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f107 0308 	add.w	r3, r7, #8
 8004dbe:	f7ff fd9d 	bl	80048fc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d101      	bne.n	8004dce <putc_bfd+0x5a>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e001      	b.n	8004dd2 <putc_bfd+0x5e>
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	e000      	b.n	8004de8 <putc_bfd+0x74>
	if (i < 0) return;
 8004de6:	bf00      	nop
}
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db16      	blt.n	8004e2c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f103 010c 	add.w	r1, r3, #12
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f107 030c 	add.w	r3, r7, #12
 8004e12:	f7ff fd73 	bl	80048fc <f_write>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d107      	bne.n	8004e2c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d102      	bne.n	8004e2c <putc_flush+0x3e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	e001      	b.n	8004e30 <putc_flush+0x42>
	return EOF;
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	609a      	str	r2, [r3, #8]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b096      	sub	sp, #88	; 0x58
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8004e6c:	f107 030c 	add.w	r3, r7, #12
 8004e70:	6839      	ldr	r1, [r7, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff ffe0 	bl	8004e38 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8004e78:	e009      	b.n	8004e8e <f_puts+0x2c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	f107 030c 	add.w	r3, r7, #12
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff ff73 	bl	8004d74 <putc_bfd>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f1      	bne.n	8004e7a <f_puts+0x18>
	return putc_flush(&pb);
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff ffa7 	bl	8004dee <putc_flush>
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3758      	adds	r7, #88	; 0x58
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004ec4:	7a5b      	ldrb	r3, [r3, #9]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d131      	bne.n	8004f30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004ecc:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004ece:	7a5b      	ldrb	r3, [r3, #9]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004edc:	7a5b      	ldrb	r3, [r3, #9]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004eea:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004eec:	7a5b      	ldrb	r3, [r3, #9]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	79fa      	ldrb	r2, [r7, #7]
 8004ef8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004efc:	7a5b      	ldrb	r3, [r3, #9]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	b2d1      	uxtb	r1, r2
 8004f04:	4a0e      	ldr	r2, [pc, #56]	; (8004f40 <FATFS_LinkDriverEx+0x94>)
 8004f06:	7251      	strb	r1, [r2, #9]
 8004f08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004f0a:	7dbb      	ldrb	r3, [r7, #22]
 8004f0c:	3330      	adds	r3, #48	; 0x30
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3301      	adds	r3, #1
 8004f18:	223a      	movs	r2, #58	; 0x3a
 8004f1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	3302      	adds	r3, #2
 8004f20:	222f      	movs	r2, #47	; 0x2f
 8004f22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	3303      	adds	r3, #3
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	2000233c 	.word	0x2000233c

08004f44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ffaa 	bl	8004eac <FATFS_LinkDriverEx>
 8004f58:	4603      	mov	r3, r0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	2b7f      	cmp	r3, #127	; 0x7f
 8004f74:	d802      	bhi.n	8004f7c <ff_convert+0x18>
		c = chr;
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	81fb      	strh	r3, [r7, #14]
 8004f7a:	e025      	b.n	8004fc8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	2bff      	cmp	r3, #255	; 0xff
 8004f86:	d805      	bhi.n	8004f94 <ff_convert+0x30>
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	3b80      	subs	r3, #128	; 0x80
 8004f8c:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <ff_convert+0x74>)
 8004f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f92:	e000      	b.n	8004f96 <ff_convert+0x32>
 8004f94:	2300      	movs	r3, #0
 8004f96:	81fb      	strh	r3, [r7, #14]
 8004f98:	e016      	b.n	8004fc8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	81fb      	strh	r3, [r7, #14]
 8004f9e:	e009      	b.n	8004fb4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8004fa0:	89fb      	ldrh	r3, [r7, #14]
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <ff_convert+0x74>)
 8004fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa8:	88fa      	ldrh	r2, [r7, #6]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d006      	beq.n	8004fbc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8004fae:	89fb      	ldrh	r3, [r7, #14]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	81fb      	strh	r3, [r7, #14]
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb8:	d9f2      	bls.n	8004fa0 <ff_convert+0x3c>
 8004fba:	e000      	b.n	8004fbe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8004fbc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	3380      	adds	r3, #128	; 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8004fc8:	89fb      	ldrh	r3, [r7, #14]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	08005c04 	.word	0x08005c04

08004fdc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d201      	bcs.n	8004ff2 <ff_wtoupper+0x16>
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <ff_wtoupper+0x10c>)
 8004ff0:	e000      	b.n	8004ff4 <ff_wtoupper+0x18>
 8004ff2:	4b3e      	ldr	r3, [pc, #248]	; (80050ec <ff_wtoupper+0x110>)
 8004ff4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	1c9a      	adds	r2, r3, #2
 8004ffa:	617a      	str	r2, [r7, #20]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8005000:	8a7b      	ldrh	r3, [r7, #18]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d068      	beq.n	80050d8 <ff_wtoupper+0xfc>
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	8a7b      	ldrh	r3, [r7, #18]
 800500a:	429a      	cmp	r2, r3
 800500c:	d364      	bcc.n	80050d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	617a      	str	r2, [r7, #20]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	823b      	strh	r3, [r7, #16]
 8005018:	8a3b      	ldrh	r3, [r7, #16]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	81fb      	strh	r3, [r7, #14]
 800501e:	8a3b      	ldrh	r3, [r7, #16]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005024:	88fa      	ldrh	r2, [r7, #6]
 8005026:	8a79      	ldrh	r1, [r7, #18]
 8005028:	8a3b      	ldrh	r3, [r7, #16]
 800502a:	440b      	add	r3, r1
 800502c:	429a      	cmp	r2, r3
 800502e:	da49      	bge.n	80050c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005030:	89fb      	ldrh	r3, [r7, #14]
 8005032:	2b08      	cmp	r3, #8
 8005034:	d84f      	bhi.n	80050d6 <ff_wtoupper+0xfa>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <ff_wtoupper+0x60>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005061 	.word	0x08005061
 8005040:	08005073 	.word	0x08005073
 8005044:	08005089 	.word	0x08005089
 8005048:	08005091 	.word	0x08005091
 800504c:	08005099 	.word	0x08005099
 8005050:	080050a1 	.word	0x080050a1
 8005054:	080050a9 	.word	0x080050a9
 8005058:	080050b1 	.word	0x080050b1
 800505c:	080050b9 	.word	0x080050b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	8a7b      	ldrh	r3, [r7, #18]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	80fb      	strh	r3, [r7, #6]
 8005070:	e027      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	b29b      	uxth	r3, r3
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	b29b      	uxth	r3, r3
 8005080:	88fa      	ldrh	r2, [r7, #6]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	80fb      	strh	r3, [r7, #6]
 8005086:	e01c      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	3b10      	subs	r3, #16
 800508c:	80fb      	strh	r3, [r7, #6]
 800508e:	e018      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	3b20      	subs	r3, #32
 8005094:	80fb      	strh	r3, [r7, #6]
 8005096:	e014      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	3b30      	subs	r3, #48	; 0x30
 800509c:	80fb      	strh	r3, [r7, #6]
 800509e:	e010      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	3b1a      	subs	r3, #26
 80050a4:	80fb      	strh	r3, [r7, #6]
 80050a6:	e00c      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	3308      	adds	r3, #8
 80050ac:	80fb      	strh	r3, [r7, #6]
 80050ae:	e008      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	3b50      	subs	r3, #80	; 0x50
 80050b4:	80fb      	strh	r3, [r7, #6]
 80050b6:	e004      	b.n	80050c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80050be:	80fb      	strh	r3, [r7, #6]
 80050c0:	bf00      	nop
			}
			break;
 80050c2:	e008      	b.n	80050d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d195      	bne.n	8004ff6 <ff_wtoupper+0x1a>
 80050ca:	8a3b      	ldrh	r3, [r7, #16]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80050d4:	e78f      	b.n	8004ff6 <ff_wtoupper+0x1a>
			break;
 80050d6:	bf00      	nop
	}

	return chr;
 80050d8:	88fb      	ldrh	r3, [r7, #6]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	08005d04 	.word	0x08005d04
 80050ec:	08005ef8 	.word	0x08005ef8

080050f0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80050f4:	2200      	movs	r2, #0
 80050f6:	2110      	movs	r1, #16
 80050f8:	4803      	ldr	r0, [pc, #12]	; (8005108 <SELECT+0x18>)
 80050fa:	f7fb ff31 	bl	8000f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80050fe:	2001      	movs	r0, #1
 8005100:	f7fb fc88 	bl	8000a14 <HAL_Delay>
}
 8005104:	bf00      	nop
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40020000 	.word	0x40020000

0800510c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005110:	2201      	movs	r2, #1
 8005112:	2110      	movs	r1, #16
 8005114:	4803      	ldr	r0, [pc, #12]	; (8005124 <DESELECT+0x18>)
 8005116:	f7fb ff23 	bl	8000f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800511a:	2001      	movs	r0, #1
 800511c:	f7fb fc7a 	bl	8000a14 <HAL_Delay>
}
 8005120:	bf00      	nop
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40020000 	.word	0x40020000

08005128 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005132:	bf00      	nop
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <SPI_TxByte+0x30>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d1f8      	bne.n	8005134 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005142:	1df9      	adds	r1, r7, #7
 8005144:	2364      	movs	r3, #100	; 0x64
 8005146:	2201      	movs	r2, #1
 8005148:	4803      	ldr	r0, [pc, #12]	; (8005158 <SPI_TxByte+0x30>)
 800514a:	f7fc fbd0 	bl	80018ee <HAL_SPI_Transmit>
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200020b0 	.word	0x200020b0

0800515c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005168:	bf00      	nop
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <SPI_TxBuffer+0x30>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d1f8      	bne.n	800516a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	2364      	movs	r3, #100	; 0x64
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4803      	ldr	r0, [pc, #12]	; (800518c <SPI_TxBuffer+0x30>)
 8005180:	f7fc fbb5 	bl	80018ee <HAL_SPI_Transmit>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	200020b0 	.word	0x200020b0

08005190 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8005196:	23ff      	movs	r3, #255	; 0xff
 8005198:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800519a:	bf00      	nop
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <SPI_RxByte+0x34>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d1f8      	bne.n	800519c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80051aa:	1dba      	adds	r2, r7, #6
 80051ac:	1df9      	adds	r1, r7, #7
 80051ae:	2364      	movs	r3, #100	; 0x64
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2301      	movs	r3, #1
 80051b4:	4803      	ldr	r0, [pc, #12]	; (80051c4 <SPI_RxByte+0x34>)
 80051b6:	f7fc fcd6 	bl	8001b66 <HAL_SPI_TransmitReceive>

	return data;
 80051ba:	79bb      	ldrb	r3, [r7, #6]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200020b0 	.word	0x200020b0

080051c8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80051d0:	f7ff ffde 	bl	8005190 <SPI_RxByte>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	701a      	strb	r2, [r3, #0]
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <SD_ReadyWait+0x30>)
 80051ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051f0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80051f2:	f7ff ffcd 	bl	8005190 <SPI_RxByte>
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	2bff      	cmp	r3, #255	; 0xff
 80051fe:	d003      	beq.n	8005208 <SD_ReadyWait+0x24>
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <SD_ReadyWait+0x30>)
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f4      	bne.n	80051f2 <SD_ReadyWait+0xe>

	return res;
 8005208:	79fb      	ldrb	r3, [r7, #7]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	2000234a 	.word	0x2000234a

08005218 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800521e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005222:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8005224:	f7ff ff72 	bl	800510c <DESELECT>
	for(int i = 0; i < 10; i++)
 8005228:	2300      	movs	r3, #0
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	e005      	b.n	800523a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800522e:	20ff      	movs	r0, #255	; 0xff
 8005230:	f7ff ff7a 	bl	8005128 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3301      	adds	r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b09      	cmp	r3, #9
 800523e:	ddf6      	ble.n	800522e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8005240:	f7ff ff56 	bl	80050f0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8005258:	2395      	movs	r3, #149	; 0x95
 800525a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800525c:	463b      	mov	r3, r7
 800525e:	2106      	movs	r1, #6
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff ff7b 	bl	800515c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8005266:	e002      	b.n	800526e <SD_PowerOn+0x56>
	{
		cnt--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3b01      	subs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800526e:	f7ff ff8f 	bl	8005190 <SPI_RxByte>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d002      	beq.n	800527e <SD_PowerOn+0x66>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f4      	bne.n	8005268 <SD_PowerOn+0x50>
	}

	DESELECT();
 800527e:	f7ff ff45 	bl	800510c <DESELECT>
	SPI_TxByte(0XFF);
 8005282:	20ff      	movs	r0, #255	; 0xff
 8005284:	f7ff ff50 	bl	8005128 <SPI_TxByte>

	PowerFlag = 1;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <SD_PowerOn+0x80>)
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2000234d 	.word	0x2000234d

0800529c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <SD_PowerOff+0x14>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	2000234d 	.word	0x2000234d

080052b4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <SD_CheckPower+0x14>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	2000234d 	.word	0x2000234d

080052cc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <SD_RxDataBlock+0x58>)
 80052d8:	22c8      	movs	r2, #200	; 0xc8
 80052da:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80052dc:	f7ff ff58 	bl	8005190 <SPI_RxByte>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2bff      	cmp	r3, #255	; 0xff
 80052e8:	d103      	bne.n	80052f2 <SD_RxDataBlock+0x26>
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <SD_RxDataBlock+0x58>)
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f4      	bne.n	80052dc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2bfe      	cmp	r3, #254	; 0xfe
 80052f6:	d001      	beq.n	80052fc <SD_RxDataBlock+0x30>
 80052f8:	2300      	movs	r3, #0
 80052fa:	e00f      	b.n	800531c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff ff60 	bl	80051c8 <SPI_RxBytePtr>
	} while(len--);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1e5a      	subs	r2, r3, #1
 800530c:	603a      	str	r2, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f4      	bne.n	80052fc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8005312:	f7ff ff3d 	bl	8005190 <SPI_RxByte>
	SPI_RxByte();
 8005316:	f7ff ff3b 	bl	8005190 <SPI_RxByte>

	return TRUE;
 800531a:	2301      	movs	r3, #1
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20002348 	.word	0x20002348

08005328 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8005338:	f7ff ff54 	bl	80051e4 <SD_ReadyWait>
 800533c:	4603      	mov	r3, r0
 800533e:	2bff      	cmp	r3, #255	; 0xff
 8005340:	d001      	beq.n	8005346 <SD_TxDataBlock+0x1e>
 8005342:	2300      	movs	r3, #0
 8005344:	e02f      	b.n	80053a6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff feed 	bl	8005128 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	2bfd      	cmp	r3, #253	; 0xfd
 8005352:	d020      	beq.n	8005396 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8005354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff feff 	bl	800515c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800535e:	f7ff ff17 	bl	8005190 <SPI_RxByte>
		SPI_RxByte();
 8005362:	f7ff ff15 	bl	8005190 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8005366:	e00b      	b.n	8005380 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8005368:	f7ff ff12 	bl	8005190 <SPI_RxByte>
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	2b05      	cmp	r3, #5
 8005378:	d006      	beq.n	8005388 <SD_TxDataBlock+0x60>
			i++;
 800537a:	7bbb      	ldrb	r3, [r7, #14]
 800537c:	3301      	adds	r3, #1
 800537e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	2b40      	cmp	r3, #64	; 0x40
 8005384:	d9f0      	bls.n	8005368 <SD_TxDataBlock+0x40>
 8005386:	e000      	b.n	800538a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8005388:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800538a:	bf00      	nop
 800538c:	f7ff ff00 	bl	8005190 <SPI_RxByte>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0fa      	beq.n	800538c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	2b05      	cmp	r3, #5
 800539e:	d101      	bne.n	80053a4 <SD_TxDataBlock+0x7c>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	4603      	mov	r3, r0
 80053b6:	6039      	str	r1, [r7, #0]
 80053b8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80053ba:	f7ff ff13 	bl	80051e4 <SD_ReadyWait>
 80053be:	4603      	mov	r3, r0
 80053c0:	2bff      	cmp	r3, #255	; 0xff
 80053c2:	d001      	beq.n	80053c8 <SD_SendCmd+0x1a>
 80053c4:	23ff      	movs	r3, #255	; 0xff
 80053c6:	e042      	b.n	800544e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff feac 	bl	8005128 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	0e1b      	lsrs	r3, r3, #24
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fea6 	bl	8005128 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fea0 	bl	8005128 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fe9a 	bl	8005128 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fe95 	bl	8005128 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d102      	bne.n	800540a <SD_SendCmd+0x5c>
 8005404:	2395      	movs	r3, #149	; 0x95
 8005406:	73fb      	strb	r3, [r7, #15]
 8005408:	e007      	b.n	800541a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	2b48      	cmp	r3, #72	; 0x48
 800540e:	d102      	bne.n	8005416 <SD_SendCmd+0x68>
 8005410:	2387      	movs	r3, #135	; 0x87
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e001      	b.n	800541a <SD_SendCmd+0x6c>
	else crc = 1;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fe83 	bl	8005128 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	2b4c      	cmp	r3, #76	; 0x4c
 8005426:	d101      	bne.n	800542c <SD_SendCmd+0x7e>
 8005428:	f7ff feb2 	bl	8005190 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800542c:	230a      	movs	r3, #10
 800542e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8005430:	f7ff feae 	bl	8005190 <SPI_RxByte>
 8005434:	4603      	mov	r3, r0
 8005436:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8005438:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800543c:	2b00      	cmp	r3, #0
 800543e:	da05      	bge.n	800544c <SD_SendCmd+0x9e>
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	3b01      	subs	r3, #1
 8005444:	73bb      	strb	r3, [r7, #14]
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f1      	bne.n	8005430 <SD_SendCmd+0x82>

	return res;
 800544c:	7b7b      	ldrb	r3, [r7, #13]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <SD_disk_initialize+0x14>
 8005468:	2301      	movs	r3, #1
 800546a:	e0d1      	b.n	8005610 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800546c:	4b6a      	ldr	r3, [pc, #424]	; (8005618 <SD_disk_initialize+0x1c0>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <SD_disk_initialize+0x2a>
 800547a:	4b67      	ldr	r3, [pc, #412]	; (8005618 <SD_disk_initialize+0x1c0>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	e0c6      	b.n	8005610 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8005482:	f7ff fec9 	bl	8005218 <SD_PowerOn>

	/* slave select */
	SELECT();
 8005486:	f7ff fe33 	bl	80050f0 <SELECT>

	/* check disk type */
	type = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800548e:	2100      	movs	r1, #0
 8005490:	2040      	movs	r0, #64	; 0x40
 8005492:	f7ff ff8c 	bl	80053ae <SD_SendCmd>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 80a1 	bne.w	80055e0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800549e:	4b5f      	ldr	r3, [pc, #380]	; (800561c <SD_disk_initialize+0x1c4>)
 80054a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054a4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80054a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054aa:	2048      	movs	r0, #72	; 0x48
 80054ac:	f7ff ff7f 	bl	80053ae <SD_SendCmd>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d155      	bne.n	8005562 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
 80054ba:	e00c      	b.n	80054d6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80054bc:	7bfc      	ldrb	r4, [r7, #15]
 80054be:	f7ff fe67 	bl	8005190 <SPI_RxByte>
 80054c2:	4603      	mov	r3, r0
 80054c4:	461a      	mov	r2, r3
 80054c6:	f104 0310 	add.w	r3, r4, #16
 80054ca:	443b      	add	r3, r7
 80054cc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	3301      	adds	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d9ef      	bls.n	80054bc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80054dc:	7abb      	ldrb	r3, [r7, #10]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d17e      	bne.n	80055e0 <SD_disk_initialize+0x188>
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	2baa      	cmp	r3, #170	; 0xaa
 80054e6:	d17b      	bne.n	80055e0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80054e8:	2100      	movs	r1, #0
 80054ea:	2077      	movs	r0, #119	; 0x77
 80054ec:	f7ff ff5f 	bl	80053ae <SD_SendCmd>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d807      	bhi.n	8005506 <SD_disk_initialize+0xae>
 80054f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054fa:	2069      	movs	r0, #105	; 0x69
 80054fc:	f7ff ff57 	bl	80053ae <SD_SendCmd>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8005506:	4b45      	ldr	r3, [pc, #276]	; (800561c <SD_disk_initialize+0x1c4>)
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1ec      	bne.n	80054e8 <SD_disk_initialize+0x90>
 800550e:	e000      	b.n	8005512 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005510:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005512:	4b42      	ldr	r3, [pc, #264]	; (800561c <SD_disk_initialize+0x1c4>)
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d062      	beq.n	80055e0 <SD_disk_initialize+0x188>
 800551a:	2100      	movs	r1, #0
 800551c:	207a      	movs	r0, #122	; 0x7a
 800551e:	f7ff ff46 	bl	80053ae <SD_SendCmd>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d15b      	bne.n	80055e0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e00c      	b.n	8005548 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800552e:	7bfc      	ldrb	r4, [r7, #15]
 8005530:	f7ff fe2e 	bl	8005190 <SPI_RxByte>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	f104 0310 	add.w	r3, r4, #16
 800553c:	443b      	add	r3, r7
 800553e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	3301      	adds	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b03      	cmp	r3, #3
 800554c:	d9ef      	bls.n	800552e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800554e:	7a3b      	ldrb	r3, [r7, #8]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <SD_disk_initialize+0x104>
 8005558:	230c      	movs	r3, #12
 800555a:	e000      	b.n	800555e <SD_disk_initialize+0x106>
 800555c:	2304      	movs	r3, #4
 800555e:	73bb      	strb	r3, [r7, #14]
 8005560:	e03e      	b.n	80055e0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005562:	2100      	movs	r1, #0
 8005564:	2077      	movs	r0, #119	; 0x77
 8005566:	f7ff ff22 	bl	80053ae <SD_SendCmd>
 800556a:	4603      	mov	r3, r0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d808      	bhi.n	8005582 <SD_disk_initialize+0x12a>
 8005570:	2100      	movs	r1, #0
 8005572:	2069      	movs	r0, #105	; 0x69
 8005574:	f7ff ff1b 	bl	80053ae <SD_SendCmd>
 8005578:	4603      	mov	r3, r0
 800557a:	2b01      	cmp	r3, #1
 800557c:	d801      	bhi.n	8005582 <SD_disk_initialize+0x12a>
 800557e:	2302      	movs	r3, #2
 8005580:	e000      	b.n	8005584 <SD_disk_initialize+0x12c>
 8005582:	2301      	movs	r3, #1
 8005584:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d10e      	bne.n	80055aa <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800558c:	2100      	movs	r1, #0
 800558e:	2077      	movs	r0, #119	; 0x77
 8005590:	f7ff ff0d 	bl	80053ae <SD_SendCmd>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d80e      	bhi.n	80055b8 <SD_disk_initialize+0x160>
 800559a:	2100      	movs	r1, #0
 800559c:	2069      	movs	r0, #105	; 0x69
 800559e:	f7ff ff06 	bl	80053ae <SD_SendCmd>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <SD_disk_initialize+0x160>
 80055a8:	e00c      	b.n	80055c4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80055aa:	2100      	movs	r1, #0
 80055ac:	2041      	movs	r0, #65	; 0x41
 80055ae:	f7ff fefe 	bl	80053ae <SD_SendCmd>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80055b8:	4b18      	ldr	r3, [pc, #96]	; (800561c <SD_disk_initialize+0x1c4>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e2      	bne.n	8005586 <SD_disk_initialize+0x12e>
 80055c0:	e000      	b.n	80055c4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80055c2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80055c4:	4b15      	ldr	r3, [pc, #84]	; (800561c <SD_disk_initialize+0x1c4>)
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <SD_disk_initialize+0x184>
 80055cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055d0:	2050      	movs	r0, #80	; 0x50
 80055d2:	f7ff feec 	bl	80053ae <SD_SendCmd>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <SD_disk_initialize+0x188>
 80055dc:	2300      	movs	r3, #0
 80055de:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80055e0:	4a0f      	ldr	r2, [pc, #60]	; (8005620 <SD_disk_initialize+0x1c8>)
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80055e6:	f7ff fd91 	bl	800510c <DESELECT>
	SPI_RxByte();
 80055ea:	f7ff fdd1 	bl	8005190 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80055f4:	4b08      	ldr	r3, [pc, #32]	; (8005618 <SD_disk_initialize+0x1c0>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <SD_disk_initialize+0x1c0>)
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e001      	b.n	800560a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8005606:	f7ff fe49 	bl	800529c <SD_PowerOff>
	}

	return Stat;
 800560a:	4b03      	ldr	r3, [pc, #12]	; (8005618 <SD_disk_initialize+0x1c0>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b2db      	uxtb	r3, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bd90      	pop	{r4, r7, pc}
 8005618:	20000020 	.word	0x20000020
 800561c:	20002348 	.word	0x20002348
 8005620:	2000234c 	.word	0x2000234c

08005624 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <SD_disk_status+0x14>
 8005634:	2301      	movs	r3, #1
 8005636:	e002      	b.n	800563e <SD_disk_status+0x1a>
	return Stat;
 8005638:	4b04      	ldr	r3, [pc, #16]	; (800564c <SD_disk_status+0x28>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b2db      	uxtb	r3, r3
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000020 	.word	0x20000020

08005650 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <SD_disk_read+0x1c>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <SD_disk_read+0x20>
 800566c:	2304      	movs	r3, #4
 800566e:	e051      	b.n	8005714 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <SD_disk_read+0xcc>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <SD_disk_read+0x32>
 800567e:	2303      	movs	r3, #3
 8005680:	e048      	b.n	8005714 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005682:	4b27      	ldr	r3, [pc, #156]	; (8005720 <SD_disk_read+0xd0>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <SD_disk_read+0x44>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	025b      	lsls	r3, r3, #9
 8005692:	607b      	str	r3, [r7, #4]

	SELECT();
 8005694:	f7ff fd2c 	bl	80050f0 <SELECT>

	if (count == 1)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d111      	bne.n	80056c2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	2051      	movs	r0, #81	; 0x51
 80056a2:	f7ff fe84 	bl	80053ae <SD_SendCmd>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d129      	bne.n	8005700 <SD_disk_read+0xb0>
 80056ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056b0:	68b8      	ldr	r0, [r7, #8]
 80056b2:	f7ff fe0b 	bl	80052cc <SD_RxDataBlock>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d021      	beq.n	8005700 <SD_disk_read+0xb0>
 80056bc:	2300      	movs	r3, #0
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	e01e      	b.n	8005700 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	2052      	movs	r0, #82	; 0x52
 80056c6:	f7ff fe72 	bl	80053ae <SD_SendCmd>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d117      	bne.n	8005700 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80056d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056d4:	68b8      	ldr	r0, [r7, #8]
 80056d6:	f7ff fdf9 	bl	80052cc <SD_RxDataBlock>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <SD_disk_read+0xa6>
				buff += 512;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80056e6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ed      	bne.n	80056d0 <SD_disk_read+0x80>
 80056f4:	e000      	b.n	80056f8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80056f6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80056f8:	2100      	movs	r1, #0
 80056fa:	204c      	movs	r0, #76	; 0x4c
 80056fc:	f7ff fe57 	bl	80053ae <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8005700:	f7ff fd04 	bl	800510c <DESELECT>
	SPI_RxByte();
 8005704:	f7ff fd44 	bl	8005190 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20000020 	.word	0x20000020
 8005720:	2000234c 	.word	0x2000234c

08005724 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4603      	mov	r3, r0
 8005732:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <SD_disk_write+0x1c>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <SD_disk_write+0x20>
 8005740:	2304      	movs	r3, #4
 8005742:	e06b      	b.n	800581c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005744:	4b37      	ldr	r3, [pc, #220]	; (8005824 <SD_disk_write+0x100>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <SD_disk_write+0x32>
 8005752:	2303      	movs	r3, #3
 8005754:	e062      	b.n	800581c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8005756:	4b33      	ldr	r3, [pc, #204]	; (8005824 <SD_disk_write+0x100>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <SD_disk_write+0x44>
 8005764:	2302      	movs	r3, #2
 8005766:	e059      	b.n	800581c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005768:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <SD_disk_write+0x104>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <SD_disk_write+0x56>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	025b      	lsls	r3, r3, #9
 8005778:	607b      	str	r3, [r7, #4]

	SELECT();
 800577a:	f7ff fcb9 	bl	80050f0 <SELECT>

	if (count == 1)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d110      	bne.n	80057a6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	2058      	movs	r0, #88	; 0x58
 8005788:	f7ff fe11 	bl	80053ae <SD_SendCmd>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d13a      	bne.n	8005808 <SD_disk_write+0xe4>
 8005792:	21fe      	movs	r1, #254	; 0xfe
 8005794:	68b8      	ldr	r0, [r7, #8]
 8005796:	f7ff fdc7 	bl	8005328 <SD_TxDataBlock>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d033      	beq.n	8005808 <SD_disk_write+0xe4>
			count = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	e030      	b.n	8005808 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <SD_disk_write+0x104>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80057b2:	2100      	movs	r1, #0
 80057b4:	2077      	movs	r0, #119	; 0x77
 80057b6:	f7ff fdfa 	bl	80053ae <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	2057      	movs	r0, #87	; 0x57
 80057be:	f7ff fdf6 	bl	80053ae <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	2059      	movs	r0, #89	; 0x59
 80057c6:	f7ff fdf2 	bl	80053ae <SD_SendCmd>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11b      	bne.n	8005808 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80057d0:	21fc      	movs	r1, #252	; 0xfc
 80057d2:	68b8      	ldr	r0, [r7, #8]
 80057d4:	f7ff fda8 	bl	8005328 <SD_TxDataBlock>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <SD_disk_write+0xd0>
				buff += 512;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1ee      	bne.n	80057d0 <SD_disk_write+0xac>
 80057f2:	e000      	b.n	80057f6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80057f4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80057f6:	21fd      	movs	r1, #253	; 0xfd
 80057f8:	2000      	movs	r0, #0
 80057fa:	f7ff fd95 	bl	8005328 <SD_TxDataBlock>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <SD_disk_write+0xe4>
			{
				count = 1;
 8005804:	2301      	movs	r3, #1
 8005806:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8005808:	f7ff fc80 	bl	800510c <DESELECT>
	SPI_RxByte();
 800580c:	f7ff fcc0 	bl	8005190 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bf14      	ite	ne
 8005816:	2301      	movne	r3, #1
 8005818:	2300      	moveq	r3, #0
 800581a:	b2db      	uxtb	r3, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000020 	.word	0x20000020
 8005828:	2000234c 	.word	0x2000234c

0800582c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b08b      	sub	sp, #44	; 0x2c
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	603a      	str	r2, [r7, #0]
 8005836:	71fb      	strb	r3, [r7, #7]
 8005838:	460b      	mov	r3, r1
 800583a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <SD_disk_ioctl+0x1e>
 8005846:	2304      	movs	r3, #4
 8005848:	e115      	b.n	8005a76 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8005850:	79bb      	ldrb	r3, [r7, #6]
 8005852:	2b05      	cmp	r3, #5
 8005854:	d124      	bne.n	80058a0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d012      	beq.n	8005884 <SD_disk_ioctl+0x58>
 800585e:	2b02      	cmp	r3, #2
 8005860:	dc1a      	bgt.n	8005898 <SD_disk_ioctl+0x6c>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <SD_disk_ioctl+0x40>
 8005866:	2b01      	cmp	r3, #1
 8005868:	d006      	beq.n	8005878 <SD_disk_ioctl+0x4c>
 800586a:	e015      	b.n	8005898 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800586c:	f7ff fd16 	bl	800529c <SD_PowerOff>
			res = RES_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005876:	e0fc      	b.n	8005a72 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8005878:	f7ff fcce 	bl	8005218 <SD_PowerOn>
			res = RES_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005882:	e0f6      	b.n	8005a72 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	1c5c      	adds	r4, r3, #1
 8005888:	f7ff fd14 	bl	80052b4 <SD_CheckPower>
 800588c:	4603      	mov	r3, r0
 800588e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8005890:	2300      	movs	r3, #0
 8005892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005896:	e0ec      	b.n	8005a72 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8005898:	2304      	movs	r3, #4
 800589a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800589e:	e0e8      	b.n	8005a72 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80058a0:	4b77      	ldr	r3, [pc, #476]	; (8005a80 <SD_disk_ioctl+0x254>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <SD_disk_ioctl+0x86>
 80058ae:	2303      	movs	r3, #3
 80058b0:	e0e1      	b.n	8005a76 <SD_disk_ioctl+0x24a>

		SELECT();
 80058b2:	f7ff fc1d 	bl	80050f0 <SELECT>

		switch (ctrl)
 80058b6:	79bb      	ldrb	r3, [r7, #6]
 80058b8:	2b0d      	cmp	r3, #13
 80058ba:	f200 80cb 	bhi.w	8005a54 <SD_disk_ioctl+0x228>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <SD_disk_ioctl+0x98>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080059bf 	.word	0x080059bf
 80058c8:	080058fd 	.word	0x080058fd
 80058cc:	080059af 	.word	0x080059af
 80058d0:	08005a55 	.word	0x08005a55
 80058d4:	08005a55 	.word	0x08005a55
 80058d8:	08005a55 	.word	0x08005a55
 80058dc:	08005a55 	.word	0x08005a55
 80058e0:	08005a55 	.word	0x08005a55
 80058e4:	08005a55 	.word	0x08005a55
 80058e8:	08005a55 	.word	0x08005a55
 80058ec:	08005a55 	.word	0x08005a55
 80058f0:	080059d1 	.word	0x080059d1
 80058f4:	080059f5 	.word	0x080059f5
 80058f8:	08005a19 	.word	0x08005a19
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80058fc:	2100      	movs	r1, #0
 80058fe:	2049      	movs	r0, #73	; 0x49
 8005900:	f7ff fd55 	bl	80053ae <SD_SendCmd>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	f040 80a8 	bne.w	8005a5c <SD_disk_ioctl+0x230>
 800590c:	f107 030c 	add.w	r3, r7, #12
 8005910:	2110      	movs	r1, #16
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fcda 	bl	80052cc <SD_RxDataBlock>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 809e 	beq.w	8005a5c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8005920:	7b3b      	ldrb	r3, [r7, #12]
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	d10e      	bne.n	8005948 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800592a:	7d7b      	ldrb	r3, [r7, #21]
 800592c:	b29a      	uxth	r2, r3
 800592e:	7d3b      	ldrb	r3, [r7, #20]
 8005930:	b29b      	uxth	r3, r3
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	b29b      	uxth	r3, r3
 8005936:	4413      	add	r3, r2
 8005938:	b29b      	uxth	r3, r3
 800593a:	3301      	adds	r3, #1
 800593c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800593e:	8bfb      	ldrh	r3, [r7, #30]
 8005940:	029a      	lsls	r2, r3, #10
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e02e      	b.n	80059a6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005948:	7c7b      	ldrb	r3, [r7, #17]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	b2da      	uxtb	r2, r3
 8005950:	7dbb      	ldrb	r3, [r7, #22]
 8005952:	09db      	lsrs	r3, r3, #7
 8005954:	b2db      	uxtb	r3, r3
 8005956:	4413      	add	r3, r2
 8005958:	b2da      	uxtb	r2, r3
 800595a:	7d7b      	ldrb	r3, [r7, #21]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f003 0306 	and.w	r3, r3, #6
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4413      	add	r3, r2
 8005968:	b2db      	uxtb	r3, r3
 800596a:	3302      	adds	r3, #2
 800596c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005970:	7d3b      	ldrb	r3, [r7, #20]
 8005972:	099b      	lsrs	r3, r3, #6
 8005974:	b2db      	uxtb	r3, r3
 8005976:	b29a      	uxth	r2, r3
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	b29b      	uxth	r3, r3
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	b29b      	uxth	r3, r3
 8005980:	4413      	add	r3, r2
 8005982:	b29a      	uxth	r2, r3
 8005984:	7cbb      	ldrb	r3, [r7, #18]
 8005986:	029b      	lsls	r3, r3, #10
 8005988:	b29b      	uxth	r3, r3
 800598a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800598e:	b29b      	uxth	r3, r3
 8005990:	4413      	add	r3, r2
 8005992:	b29b      	uxth	r3, r3
 8005994:	3301      	adds	r3, #1
 8005996:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8005998:	8bfa      	ldrh	r2, [r7, #30]
 800599a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800599e:	3b09      	subs	r3, #9
 80059a0:	409a      	lsls	r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80059ac:	e056      	b.n	8005a5c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80059bc:	e055      	b.n	8005a6a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80059be:	f7ff fc11 	bl	80051e4 <SD_ReadyWait>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2bff      	cmp	r3, #255	; 0xff
 80059c6:	d14b      	bne.n	8005a60 <SD_disk_ioctl+0x234>
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80059ce:	e047      	b.n	8005a60 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80059d0:	2100      	movs	r1, #0
 80059d2:	2049      	movs	r0, #73	; 0x49
 80059d4:	f7ff fceb 	bl	80053ae <SD_SendCmd>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d142      	bne.n	8005a64 <SD_disk_ioctl+0x238>
 80059de:	2110      	movs	r1, #16
 80059e0:	6a38      	ldr	r0, [r7, #32]
 80059e2:	f7ff fc73 	bl	80052cc <SD_RxDataBlock>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d03b      	beq.n	8005a64 <SD_disk_ioctl+0x238>
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80059f2:	e037      	b.n	8005a64 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80059f4:	2100      	movs	r1, #0
 80059f6:	204a      	movs	r0, #74	; 0x4a
 80059f8:	f7ff fcd9 	bl	80053ae <SD_SendCmd>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d132      	bne.n	8005a68 <SD_disk_ioctl+0x23c>
 8005a02:	2110      	movs	r1, #16
 8005a04:	6a38      	ldr	r0, [r7, #32]
 8005a06:	f7ff fc61 	bl	80052cc <SD_RxDataBlock>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02b      	beq.n	8005a68 <SD_disk_ioctl+0x23c>
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005a16:	e027      	b.n	8005a68 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8005a18:	2100      	movs	r1, #0
 8005a1a:	207a      	movs	r0, #122	; 0x7a
 8005a1c:	f7ff fcc7 	bl	80053ae <SD_SendCmd>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a2c:	e00b      	b.n	8005a46 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8005a2e:	6a3c      	ldr	r4, [r7, #32]
 8005a30:	1c63      	adds	r3, r4, #1
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	f7ff fbac 	bl	8005190 <SPI_RxByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8005a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a40:	3301      	adds	r3, #1
 8005a42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d9ef      	bls.n	8005a2e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a5a:	e006      	b.n	8005a6a <SD_disk_ioctl+0x23e>
			break;
 8005a5c:	bf00      	nop
 8005a5e:	e004      	b.n	8005a6a <SD_disk_ioctl+0x23e>
			break;
 8005a60:	bf00      	nop
 8005a62:	e002      	b.n	8005a6a <SD_disk_ioctl+0x23e>
			break;
 8005a64:	bf00      	nop
 8005a66:	e000      	b.n	8005a6a <SD_disk_ioctl+0x23e>
			break;
 8005a68:	bf00      	nop
		}

		DESELECT();
 8005a6a:	f7ff fb4f 	bl	800510c <DESELECT>
		SPI_RxByte();
 8005a6e:	f7ff fb8f 	bl	8005190 <SPI_RxByte>
	}

	return res;
 8005a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	372c      	adds	r7, #44	; 0x2c
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000020 	.word	0x20000020

08005a84 <memset>:
 8005a84:	4402      	add	r2, r0
 8005a86:	4603      	mov	r3, r0
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d100      	bne.n	8005a8e <memset+0xa>
 8005a8c:	4770      	bx	lr
 8005a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a92:	e7f9      	b.n	8005a88 <memset+0x4>

08005a94 <__libc_init_array>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4d0d      	ldr	r5, [pc, #52]	; (8005acc <__libc_init_array+0x38>)
 8005a98:	4c0d      	ldr	r4, [pc, #52]	; (8005ad0 <__libc_init_array+0x3c>)
 8005a9a:	1b64      	subs	r4, r4, r5
 8005a9c:	10a4      	asrs	r4, r4, #2
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	42a6      	cmp	r6, r4
 8005aa2:	d109      	bne.n	8005ab8 <__libc_init_array+0x24>
 8005aa4:	4d0b      	ldr	r5, [pc, #44]	; (8005ad4 <__libc_init_array+0x40>)
 8005aa6:	4c0c      	ldr	r4, [pc, #48]	; (8005ad8 <__libc_init_array+0x44>)
 8005aa8:	f000 f818 	bl	8005adc <_init>
 8005aac:	1b64      	subs	r4, r4, r5
 8005aae:	10a4      	asrs	r4, r4, #2
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	42a6      	cmp	r6, r4
 8005ab4:	d105      	bne.n	8005ac2 <__libc_init_array+0x2e>
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abc:	4798      	blx	r3
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7ee      	b.n	8005aa0 <__libc_init_array+0xc>
 8005ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac6:	4798      	blx	r3
 8005ac8:	3601      	adds	r6, #1
 8005aca:	e7f2      	b.n	8005ab2 <__libc_init_array+0x1e>
 8005acc:	08005fbc 	.word	0x08005fbc
 8005ad0:	08005fbc 	.word	0x08005fbc
 8005ad4:	08005fbc 	.word	0x08005fbc
 8005ad8:	08005fc0 	.word	0x08005fc0

08005adc <_init>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_fini>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr
