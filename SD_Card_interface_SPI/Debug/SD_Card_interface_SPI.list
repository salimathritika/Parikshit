
SD_Card_interface_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006130  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ac  080067ac  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080067ac  080067ac  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067ac  080067ac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080067b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002330  20000024  080067d8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002354  080067d8  00022354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b511  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fed  00000000  00000000  0002b565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa4c  00000000  00000000  0002eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f424  00000000  00000000  000494fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3c1  00000000  00000000  00058920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf0  00000000  00000000  000f6d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080062a4 	.word	0x080062a4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	080062a4 	.word	0x080062a4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f9b3 	bl	800053a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f82c 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8ae 	bl	8000338 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001dc:	f000 f86e 	bl	80002bc <MX_SPI1_Init>
  MX_FATFS_Init();
 80001e0:	f002 f8ee 	bl	80023c0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
    HAL_Delay(500);
 80001e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e8:	f000 fa1c 	bl	8000624 <HAL_Delay>
    f_mount(&fs, "", 0);
 80001ec:	2200      	movs	r2, #0
 80001ee:	490b      	ldr	r1, [pc, #44]	; (800021c <main+0x50>)
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <main+0x54>)
 80001f2:	f004 fb33 	bl	800485c <f_mount>
    f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80001f6:	2213      	movs	r2, #19
 80001f8:	490a      	ldr	r1, [pc, #40]	; (8000224 <main+0x58>)
 80001fa:	480b      	ldr	r0, [pc, #44]	; (8000228 <main+0x5c>)
 80001fc:	f004 fb74 	bl	80048e8 <f_open>
    f_lseek(&fil, fil.fptr);
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <main+0x5c>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4619      	mov	r1, r3
 8000206:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x5c>)
 8000208:	f004 ff76 	bl	80050f8 <f_lseek>
    f_puts("Hello from Parikshit\n", &fil);
 800020c:	4906      	ldr	r1, [pc, #24]	; (8000228 <main+0x5c>)
 800020e:	4807      	ldr	r0, [pc, #28]	; (800022c <main+0x60>)
 8000210:	f005 fa0d 	bl	800562e <f_puts>
    f_close(&fil);
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x5c>)
 8000216:	f004 ff45 	bl	80050a4 <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021a:	e7fe      	b.n	800021a <main+0x4e>
 800021c:	080062bc 	.word	0x080062bc
 8000220:	20000040 	.word	0x20000040
 8000224:	080062c0 	.word	0x080062c0
 8000228:	20001078 	.word	0x20001078
 800022c:	080062cc 	.word	0x080062cc

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0314 	add.w	r3, r7, #20
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f006 f828 	bl	8006294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000256:	f000 fc87 	bl	8000b68 <HAL_PWREx_ControlVoltageScaling>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000260:	f000 f882 	bl	8000368 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000264:	2310      	movs	r3, #16
 8000266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000270:	2360      	movs	r3, #96	; 0x60
 8000272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fcc9 	bl	8000c14 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000288:	f000 f86e 	bl	8000368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000290:	2300      	movs	r3, #0
 8000292:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	463b      	mov	r3, r7
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 f917 	bl	80014d8 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b0:	f000 f85a 	bl	8000368 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3758      	adds	r7, #88	; 0x58
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_SPI1_Init+0x74>)
 80002c2:	4a1c      	ldr	r2, [pc, #112]	; (8000334 <MX_SPI1_Init+0x78>)
 80002c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c6:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <MX_SPI1_Init+0x74>)
 80002c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_SPI1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <MX_SPI1_Init+0x74>)
 80002d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <MX_SPI1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <MX_SPI1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_SPI1_Init+0x74>)
 80002ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_SPI1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_SPI1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_SPI1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_SPI1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_SPI1_Init+0x74>)
 800030a:	2207      	movs	r2, #7
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_SPI1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_SPI1_Init+0x74>)
 8000316:	2208      	movs	r2, #8
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_SPI1_Init+0x74>)
 800031c:	f001 fac8 	bl	80018b0 <HAL_SPI_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000326:	f000 f81f 	bl	8000368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200020a8 	.word	0x200020a8
 8000334:	40013000 	.word	0x40013000

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_GPIO_Init+0x2c>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <MX_GPIO_Init+0x2c>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_GPIO_Init+0x2c>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000

08000368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036c:	b672      	cpsid	i
}
 800036e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000370:	e7fe      	b.n	8000370 <Error_Handler+0x8>
	...

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_MspInit+0x44>)
 800037c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <HAL_MspInit+0x44>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6613      	str	r3, [r2, #96]	; 0x60
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_MspInit+0x44>)
 8000388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <HAL_MspInit+0x44>)
 8000394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000396:	4a08      	ldr	r2, [pc, #32]	; (80003b8 <HAL_MspInit+0x44>)
 8000398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800039c:	6593      	str	r3, [r2, #88]	; 0x58
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <HAL_MspInit+0x44>)
 80003a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	; 0x28
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a17      	ldr	r2, [pc, #92]	; (8000438 <HAL_SPI_MspInit+0x7c>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d128      	bne.n	8000430 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <HAL_SPI_MspInit+0x80>)
 80003e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e2:	4a16      	ldr	r2, [pc, #88]	; (800043c <HAL_SPI_MspInit+0x80>)
 80003e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003e8:	6613      	str	r3, [r2, #96]	; 0x60
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <HAL_SPI_MspInit+0x80>)
 80003ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f2:	613b      	str	r3, [r7, #16]
 80003f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <HAL_SPI_MspInit+0x80>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a10      	ldr	r2, [pc, #64]	; (800043c <HAL_SPI_MspInit+0x80>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <HAL_SPI_MspInit+0x80>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800040e:	23c2      	movs	r3, #194	; 0xc2
 8000410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000412:	2302      	movs	r3, #2
 8000414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800041a:	2303      	movs	r3, #3
 800041c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800041e:	2305      	movs	r3, #5
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	4619      	mov	r1, r3
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f000 fa04 	bl	8000838 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000430:	bf00      	nop
 8000432:	3728      	adds	r7, #40	; 0x28
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40013000 	.word	0x40013000
 800043c:	40021000 	.word	0x40021000

08000440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <NMI_Handler+0x4>

08000446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <HardFault_Handler+0x4>

0800044c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <MemManage_Handler+0x4>

08000452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <UsageFault_Handler+0x4>

0800045e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <SysTick_Handler+0x34>)
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d005      	beq.n	80004a0 <SysTick_Handler+0x18>
			Timer1--;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <SysTick_Handler+0x34>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	3b01      	subs	r3, #1
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <SysTick_Handler+0x34>)
 800049e:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <SysTick_Handler+0x38>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d005      	beq.n	80004b4 <SysTick_Handler+0x2c>
			Timer2--;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <SysTick_Handler+0x38>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <SysTick_Handler+0x38>)
 80004b2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b4:	f000 f896 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	2000234c 	.word	0x2000234c
 80004c0:	2000234e 	.word	0x2000234e

080004c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004ec:	f7ff ffea 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	; (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	; (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000516:	f005 fe99 	bl	800624c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051a:	f7ff fe57 	bl	80001cc <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000520:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800052c:	080067b4 	.word	0x080067b4
  ldr r2, =_sbss
 8000530:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000534:	20002354 	.word	0x20002354

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>

0800053a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f943 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800054a:	200f      	movs	r0, #15
 800054c:	f000 f80e 	bl	800056c <HAL_InitTick>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	e001      	b.n	8000560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800055c:	f7ff ff0a 	bl	8000374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000560:	79fb      	ldrb	r3, [r7, #7]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_InitTick+0x6c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d023      	beq.n	80005c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <HAL_InitTick+0x70>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_InitTick+0x6c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f941 	bl	800081e <HAL_SYSTICK_Config>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d10f      	bne.n	80005c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	d809      	bhi.n	80005bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a8:	2200      	movs	r2, #0
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 f919 	bl	80007e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <HAL_InitTick+0x74>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	e007      	b.n	80005cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e004      	b.n	80005cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e001      	b.n	80005cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000004 	.word	0x20000004

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000008 	.word	0x20000008
 8000608:	2000210c 	.word	0x2000210c

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2000210c 	.word	0x2000210c

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff ffee 	bl	800060c <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_Delay+0x44>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800064a:	bf00      	nop
 800064c:	f7ff ffde 	bl	800060c <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8f7      	bhi.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000008 	.word	0x20000008

0800066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <__NVIC_GetPriorityGrouping+0x18>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff47 	bl	800066c <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff5c 	bl	80006b4 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffb0 	bl	800078c <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000846:	e14e      	b.n	8000ae6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 8140 	beq.w	8000ae0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 0303 	and.w	r3, r3, #3
 8000868:	2b01      	cmp	r3, #1
 800086a:	d005      	beq.n	8000878 <HAL_GPIO_Init+0x40>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b02      	cmp	r3, #2
 8000876:	d130      	bne.n	80008da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4313      	orrs	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ae:	2201      	movs	r2, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	f003 0201 	and.w	r2, r3, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d017      	beq.n	8000916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	2b02      	cmp	r3, #2
 8000920:	d123      	bne.n	800096a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	220f      	movs	r2, #15
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	08da      	lsrs	r2, r3, #3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3208      	adds	r2, #8
 8000964:	6939      	ldr	r1, [r7, #16]
 8000966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 0203 	and.w	r2, r3, #3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 809a 	beq.w	8000ae0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ac:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 80009ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b0:	4a54      	ldr	r2, [pc, #336]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6613      	str	r3, [r2, #96]	; 0x60
 80009b8:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 80009ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c4:	4a50      	ldr	r2, [pc, #320]	; (8000b08 <HAL_GPIO_Init+0x2d0>)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3302      	adds	r3, #2
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	220f      	movs	r2, #15
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009ee:	d013      	beq.n	8000a18 <HAL_GPIO_Init+0x1e0>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_GPIO_Init+0x2d4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d00d      	beq.n	8000a14 <HAL_GPIO_Init+0x1dc>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a45      	ldr	r2, [pc, #276]	; (8000b10 <HAL_GPIO_Init+0x2d8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d007      	beq.n	8000a10 <HAL_GPIO_Init+0x1d8>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d101      	bne.n	8000a0c <HAL_GPIO_Init+0x1d4>
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e006      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	e004      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	f002 0203 	and.w	r2, r2, #3
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a2a:	4937      	ldr	r1, [pc, #220]	; (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a38:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a5c:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a86:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa22 f303 	lsr.w	r3, r2, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f47f aea9 	bne.w	8000848 <HAL_GPIO_Init+0x10>
  }
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	48000400 	.word	0x48000400
 8000b10:	48000800 	.word	0x48000800
 8000b14:	48000c00 	.word	0x48000c00
 8000b18:	40010400 	.word	0x40010400

08000b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b2c:	787b      	ldrb	r3, [r7, #1]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b38:	e002      	b.n	8000b40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40007000 	.word	0x40007000

08000b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b76:	d130      	bne.n	8000bda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b84:	d038      	beq.n	8000bf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2232      	movs	r2, #50	; 0x32
 8000b9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3301      	adds	r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bac:	e002      	b.n	8000bb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bc0:	d102      	bne.n	8000bc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f2      	bne.n	8000bae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd4:	d110      	bne.n	8000bf8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e00f      	b.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be6:	d007      	beq.n	8000bf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40007000 	.word	0x40007000
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	431bde83 	.word	0x431bde83

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f000 bc4f 	b.w	80014c6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c28:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c32:	4b95      	ldr	r3, [pc, #596]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 80e6 	beq.w	8000e16 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d007      	beq.n	8000c60 <HAL_RCC_OscConfig+0x4c>
 8000c50:	6a3b      	ldr	r3, [r7, #32]
 8000c52:	2b0c      	cmp	r3, #12
 8000c54:	f040 808d 	bne.w	8000d72 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	f040 8089 	bne.w	8000d72 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c60:	4b89      	ldr	r3, [pc, #548]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <HAL_RCC_OscConfig+0x66>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f000 bc26 	b.w	80014c6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c7e:	4b82      	ldr	r3, [pc, #520]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d004      	beq.n	8000c94 <HAL_RCC_OscConfig+0x80>
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c92:	e005      	b.n	8000ca0 <HAL_RCC_OscConfig+0x8c>
 8000c94:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d224      	bcs.n	8000cee <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fda1 	bl	80017f0 <RCC_SetFlashLatencyFromMSIRange>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f000 bc06 	b.w	80014c6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cba:	4b73      	ldr	r3, [pc, #460]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a72      	ldr	r2, [pc, #456]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4b70      	ldr	r3, [pc, #448]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	496d      	ldr	r1, [pc, #436]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cd8:	4b6b      	ldr	r3, [pc, #428]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	4968      	ldr	r1, [pc, #416]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e025      	b.n	8000d3a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cee:	4b66      	ldr	r3, [pc, #408]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a65      	ldr	r2, [pc, #404]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b63      	ldr	r3, [pc, #396]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	4960      	ldr	r1, [pc, #384]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d0c:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	495b      	ldr	r1, [pc, #364]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d109      	bne.n	8000d3a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fd60 	bl	80017f0 <RCC_SetFlashLatencyFromMSIRange>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e3c5      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d3a:	f000 fccd 	bl	80016d8 <HAL_RCC_GetSysClockFreq>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	4b51      	ldr	r3, [pc, #324]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	4950      	ldr	r1, [pc, #320]	; (8000e8c <HAL_RCC_OscConfig+0x278>)
 8000d4c:	5ccb      	ldrb	r3, [r1, r3]
 8000d4e:	f003 031f 	and.w	r3, r3, #31
 8000d52:	fa22 f303 	lsr.w	r3, r2, r3
 8000d56:	4a4e      	ldr	r2, [pc, #312]	; (8000e90 <HAL_RCC_OscConfig+0x27c>)
 8000d58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d5a:	4b4e      	ldr	r3, [pc, #312]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fc04 	bl	800056c <HAL_InitTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d052      	beq.n	8000e14 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
 8000d70:	e3a9      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d032      	beq.n	8000de0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d7a:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d86:	f7ff fc41 	bl	800060c <HAL_GetTick>
 8000d8a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d8c:	e008      	b.n	8000da0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fc3d 	bl	800060c <HAL_GetTick>
 8000d92:	4602      	mov	r2, r0
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e392      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f0      	beq.n	8000d8e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a35      	ldr	r2, [pc, #212]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	4930      	ldr	r1, [pc, #192]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	492b      	ldr	r1, [pc, #172]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	604b      	str	r3, [r1, #4]
 8000dde:	e01a      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a28      	ldr	r2, [pc, #160]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000de6:	f023 0301 	bic.w	r3, r3, #1
 8000dea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc0e 	bl	800060c <HAL_GetTick>
 8000df0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df4:	f7ff fc0a 	bl	800060c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e35f      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x1e0>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d073      	beq.n	8000f0a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d005      	beq.n	8000e34 <HAL_RCC_OscConfig+0x220>
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	2b0c      	cmp	r3, #12
 8000e2c:	d10e      	bne.n	8000e4c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d10b      	bne.n	8000e4c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d063      	beq.n	8000f08 <HAL_RCC_OscConfig+0x2f4>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d15f      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e33c      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e54:	d106      	bne.n	8000e64 <HAL_RCC_OscConfig+0x250>
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e025      	b.n	8000eb0 <HAL_RCC_OscConfig+0x29c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e6c:	d114      	bne.n	8000e98 <HAL_RCC_OscConfig+0x284>
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a02      	ldr	r2, [pc, #8]	; (8000e88 <HAL_RCC_OscConfig+0x274>)
 8000e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e013      	b.n	8000eb0 <HAL_RCC_OscConfig+0x29c>
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	0800632c 	.word	0x0800632c
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000004 	.word	0x20000004
 8000e98:	4b8f      	ldr	r3, [pc, #572]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a8e      	ldr	r2, [pc, #568]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b8c      	ldr	r3, [pc, #560]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a8b      	ldr	r2, [pc, #556]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fba8 	bl	800060c <HAL_GetTick>
 8000ebc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fba4 	bl	800060c <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e2f9      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed2:	4b81      	ldr	r3, [pc, #516]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x2ac>
 8000ede:	e014      	b.n	8000f0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fb94 	bl	800060c <HAL_GetTick>
 8000ee4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fb90 	bl	800060c <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e2e5      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000efa:	4b77      	ldr	r3, [pc, #476]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x2d4>
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d060      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_OscConfig+0x314>
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	2b0c      	cmp	r3, #12
 8000f20:	d119      	bne.n	8000f56 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d116      	bne.n	8000f56 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f28:	4b6b      	ldr	r3, [pc, #428]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_RCC_OscConfig+0x32c>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e2c2      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	061b      	lsls	r3, r3, #24
 8000f4e:	4962      	ldr	r1, [pc, #392]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f54:	e040      	b.n	8000fd8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d023      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a5d      	ldr	r2, [pc, #372]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fb4f 	bl	800060c <HAL_GetTick>
 8000f6e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f72:	f7ff fb4b 	bl	800060c <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e2a0      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f84:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f90:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	061b      	lsls	r3, r3, #24
 8000f9e:	494e      	ldr	r1, [pc, #312]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
 8000fa4:	e018      	b.n	8000fd8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa6:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fb2b 	bl	800060c <HAL_GetTick>
 8000fb6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fb27 	bl	800060c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e27c      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f0      	bne.n	8000fba <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8082 	beq.w	80010ea <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d05f      	beq.n	80010ae <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	429a      	cmp	r2, r3
 8001002:	d037      	beq.n	8001074 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e254      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d01b      	beq.n	800105e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102c:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001036:	f7ff fae9 	bl	800060c <HAL_GetTick>
 800103a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103e:	f7ff fae5 	bl	800060c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b11      	cmp	r3, #17
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e23a      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ef      	bne.n	800103e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001064:	f023 0210 	bic.w	r2, r3, #16
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	491a      	ldr	r1, [pc, #104]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	4313      	orrs	r3, r2
 8001070:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001084:	f7ff fac2 	bl	800060c <HAL_GetTick>
 8001088:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fabe 	bl	800060c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b11      	cmp	r3, #17
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e213      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0ef      	beq.n	800108c <HAL_RCC_OscConfig+0x478>
 80010ac:	e01d      	b.n	80010ea <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010be:	f7ff faa5 	bl	800060c <HAL_GetTick>
 80010c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c4:	e00a      	b.n	80010dc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c6:	f7ff faa1 	bl	800060c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	d903      	bls.n	80010dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e1f6      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
 80010d8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010dc:	4ba9      	ldr	r3, [pc, #676]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80010de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1ed      	bne.n	80010c6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80bd 	beq.w	8001272 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010fe:	4ba1      	ldr	r3, [pc, #644]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10e      	bne.n	8001128 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b9e      	ldr	r3, [pc, #632]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a9d      	ldr	r2, [pc, #628]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b9b      	ldr	r3, [pc, #620]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001128:	4b97      	ldr	r3, [pc, #604]	; (8001388 <HAL_RCC_OscConfig+0x774>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001130:	2b00      	cmp	r3, #0
 8001132:	d118      	bne.n	8001166 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001134:	4b94      	ldr	r3, [pc, #592]	; (8001388 <HAL_RCC_OscConfig+0x774>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a93      	ldr	r2, [pc, #588]	; (8001388 <HAL_RCC_OscConfig+0x774>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001140:	f7ff fa64 	bl	800060c <HAL_GetTick>
 8001144:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001148:	f7ff fa60 	bl	800060c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1b5      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800115a:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <HAL_RCC_OscConfig+0x774>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d02c      	beq.n	80011cc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001172:	4b84      	ldr	r3, [pc, #528]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001178:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001184:	497f      	ldr	r1, [pc, #508]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001186:	4313      	orrs	r3, r2
 8001188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d010      	beq.n	80011ba <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	4a79      	ldr	r2, [pc, #484]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011a8:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ae:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b8:	e018      	b.n	80011ec <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011ba:	4b72      	ldr	r3, [pc, #456]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c0:	4a70      	ldr	r2, [pc, #448]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ca:	e00f      	b.n	80011ec <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d2:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011dc:	4b69      	ldr	r3, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e2:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d016      	beq.n	8001222 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f4:	f7ff fa0a 	bl	800060c <HAL_GetTick>
 80011f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff fa06 	bl	800060c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f241 3288 	movw	r2, #5000	; 0x1388
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e159      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001212:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ed      	beq.n	80011fc <HAL_RCC_OscConfig+0x5e8>
 8001220:	e01d      	b.n	800125e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff f9f3 	bl	800060c <HAL_GetTick>
 8001226:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff f9ef 	bl	800060c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e142      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ed      	bne.n	800122a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800124e:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001254:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800125a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800125e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001262:	2b01      	cmp	r3, #1
 8001264:	d105      	bne.n	8001272 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a46      	ldr	r2, [pc, #280]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 800126c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800128c:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff f9b9 	bl	800060c <HAL_GetTick>
 800129a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800129e:	f7ff f9b5 	bl	800060c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e10a      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80012b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0ef      	beq.n	800129e <HAL_RCC_OscConfig+0x68a>
 80012be:	e01b      	b.n	80012f8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80012c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012c6:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff f99c 	bl	800060c <HAL_GetTick>
 80012d4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012d8:	f7ff f998 	bl	800060c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0ed      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 80012ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ef      	bne.n	80012d8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80e1 	beq.w	80014c4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	2b02      	cmp	r3, #2
 8001308:	f040 80b5 	bne.w	8001476 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	429a      	cmp	r2, r3
 800131e:	d124      	bne.n	800136a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132a:	3b01      	subs	r3, #1
 800132c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d11b      	bne.n	800136a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800133e:	429a      	cmp	r2, r3
 8001340:	d113      	bne.n	800136a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	3b01      	subs	r3, #1
 8001350:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001352:	429a      	cmp	r2, r3
 8001354:	d109      	bne.n	800136a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	3b01      	subs	r3, #1
 8001364:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d05f      	beq.n	800142a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d05a      	beq.n	8001426 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_RCC_OscConfig+0x770>)
 8001376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800137c:	f7ff f946 	bl	800060c <HAL_GetTick>
 8001380:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001382:	e00c      	b.n	800139e <HAL_RCC_OscConfig+0x78a>
 8001384:	40021000 	.word	0x40021000
 8001388:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff f93e 	bl	800060c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e093      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139e:	4b4c      	ldr	r3, [pc, #304]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <HAL_RCC_OscConfig+0x8c0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ba:	3a01      	subs	r2, #1
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	4311      	orrs	r1, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013c4:	0212      	lsls	r2, r2, #8
 80013c6:	4311      	orrs	r1, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013cc:	0852      	lsrs	r2, r2, #1
 80013ce:	3a01      	subs	r2, #1
 80013d0:	0552      	lsls	r2, r2, #21
 80013d2:	4311      	orrs	r1, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013d8:	0852      	lsrs	r2, r2, #1
 80013da:	3a01      	subs	r2, #1
 80013dc:	0652      	lsls	r2, r2, #25
 80013de:	430a      	orrs	r2, r1
 80013e0:	493b      	ldr	r1, [pc, #236]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a39      	ldr	r2, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80013ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	4a36      	ldr	r2, [pc, #216]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80013f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013fc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013fe:	f7ff f905 	bl	800060c <HAL_GetTick>
 8001402:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff f901 	bl	800060c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e056      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001424:	e04e      	b.n	80014c4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e04d      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d146      	bne.n	80014c4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001440:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 8001448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800144e:	f7ff f8dd 	bl	800060c <HAL_GetTick>
 8001452:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff f8d9 	bl	800060c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e02e      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x842>
 8001474:	e026      	b.n	80014c4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d021      	beq.n	80014c0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 8001482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff f8c0 	bl	800060c <HAL_GetTick>
 800148c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff f8bc 	bl	800060c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e011      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_RCC_OscConfig+0x8bc>)
 80014b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014b8:	f023 0303 	bic.w	r3, r3, #3
 80014bc:	60d3      	str	r3, [r2, #12]
 80014be:	e001      	b.n	80014c4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	f99f808c 	.word	0xf99f808c

080014d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0e7      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d910      	bls.n	800151c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b72      	ldr	r3, [pc, #456]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0207 	bic.w	r2, r3, #7
 8001502:	4970      	ldr	r1, [pc, #448]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b6e      	ldr	r3, [pc, #440]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0cf      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d010      	beq.n	800154a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001534:	429a      	cmp	r2, r3
 8001536:	d908      	bls.n	800154a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001538:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4960      	ldr	r1, [pc, #384]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d04c      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155e:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d121      	bne.n	80015ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0a6      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d115      	bne.n	80015ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e09a      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158e:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e08e      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e086      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4943      	ldr	r1, [pc, #268]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015c0:	f7ff f824 	bl	800060c <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	e00a      	b.n	80015de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff f820 	bl	800060c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e06e      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1eb      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d010      	beq.n	800161e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001608:	429a      	cmp	r2, r3
 800160a:	d208      	bcs.n	800161e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	492b      	ldr	r1, [pc, #172]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d210      	bcs.n	800164e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 0207 	bic.w	r2, r3, #7
 8001634:	4923      	ldr	r1, [pc, #140]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_ClockConfig+0x1ec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e036      	b.n	80016bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4918      	ldr	r1, [pc, #96]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4910      	ldr	r1, [pc, #64]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800168c:	f000 f824 	bl	80016d8 <HAL_RCC_GetSysClockFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	490b      	ldr	r1, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1f4>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_RCC_ClockConfig+0x1f8>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1fc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff5b 	bl	800056c <HAL_InitTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80016ba:	7afb      	ldrb	r3, [r7, #11]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	0800632c 	.word	0x0800632c
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0x34>
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d121      	bne.n	800174a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d11e      	bne.n	800174a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e005      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001734:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10d      	bne.n	8001760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d102      	bne.n	8001756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	e004      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d101      	bne.n	8001760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_RCC_GetSysClockFreq+0x114>)
 800175e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d134      	bne.n	80017d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0xa6>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d003      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0xac>
 800177c:	e005      	b.n	800178a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001780:	617b      	str	r3, [r7, #20]
      break;
 8001782:	e005      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_GetSysClockFreq+0x114>)
 8001786:	617b      	str	r3, [r7, #20]
      break;
 8001788:	e002      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	617b      	str	r3, [r7, #20]
      break;
 800178e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	3301      	adds	r3, #1
 800179c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	fb03 f202 	mul.w	r2, r3, r2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	0e5b      	lsrs	r3, r3, #25
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	3301      	adds	r3, #1
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017d0:	69bb      	ldr	r3, [r7, #24]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	0800633c 	.word	0x0800633c
 80017e8:	00f42400 	.word	0x00f42400
 80017ec:	007a1200 	.word	0x007a1200

080017f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001808:	f7ff f9a0 	bl	8000b4c <HAL_PWREx_GetVoltageRange>
 800180c:	6178      	str	r0, [r7, #20]
 800180e:	e014      	b.n	800183a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	; 0x58
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001828:	f7ff f990 	bl	8000b4c <HAL_PWREx_GetVoltageRange>
 800182c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001840:	d10b      	bne.n	800185a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b80      	cmp	r3, #128	; 0x80
 8001846:	d919      	bls.n	800187c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2ba0      	cmp	r3, #160	; 0xa0
 800184c:	d902      	bls.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800184e:	2302      	movs	r3, #2
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	e013      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001854:	2301      	movs	r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	e010      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b80      	cmp	r3, #128	; 0x80
 800185e:	d902      	bls.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001860:	2303      	movs	r3, #3
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	e00a      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b80      	cmp	r3, #128	; 0x80
 800186a:	d102      	bne.n	8001872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800186c:	2302      	movs	r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	e004      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b70      	cmp	r3, #112	; 0x70
 8001876:	d101      	bne.n	800187c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 0207 	bic.w	r2, r3, #7
 8001884:	4909      	ldr	r1, [pc, #36]	; (80018ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e095      	b.n	80019ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018d2:	d009      	beq.n	80018e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
 80018da:	e005      	b.n	80018e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fd5a 	bl	80003bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800191e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001928:	d902      	bls.n	8001930 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e002      	b.n	8001936 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800193e:	d007      	beq.n	8001950 <HAL_SPI_Init+0xa0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001948:	d002      	beq.n	8001950 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	ea42 0103 	orr.w	r1, r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	0c1b      	lsrs	r3, r3, #16
 80019ac:	f003 0204 	and.w	r2, r3, #4
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80019cc:	ea42 0103 	orr.w	r1, r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b088      	sub	sp, #32
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_SPI_Transmit+0x22>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e158      	b.n	8001cca <HAL_SPI_Transmit+0x2d4>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a20:	f7fe fdf4 	bl	800060c <HAL_GetTick>
 8001a24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d002      	beq.n	8001a3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
 8001a38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a3a:	e13d      	b.n	8001cb8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_SPI_Transmit+0x52>
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a4c:	e134      	b.n	8001cb8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2203      	movs	r2, #3
 8001a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a98:	d10f      	bne.n	8001aba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d007      	beq.n	8001ad8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ae0:	d94b      	bls.n	8001b7a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_SPI_Transmit+0xfa>
 8001aea:	8afb      	ldrh	r3, [r7, #22]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d13e      	bne.n	8001b6e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b00:	1c9a      	adds	r2, r3, #2
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b14:	e02b      	b.n	8001b6e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d112      	bne.n	8001b4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	1c9a      	adds	r2, r3, #2
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b48:	e011      	b.n	8001b6e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b4a:	f7fe fd5f 	bl	800060c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d803      	bhi.n	8001b62 <HAL_SPI_Transmit+0x16c>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d102      	bne.n	8001b68 <HAL_SPI_Transmit+0x172>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b6c:	e0a4      	b.n	8001cb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ce      	bne.n	8001b16 <HAL_SPI_Transmit+0x120>
 8001b78:	e07c      	b.n	8001c74 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_SPI_Transmit+0x192>
 8001b82:	8afb      	ldrh	r3, [r7, #22]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d170      	bne.n	8001c6a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d912      	bls.n	8001bb8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	1c9a      	adds	r2, r3, #2
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b02      	subs	r3, #2
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bb6:	e058      	b.n	8001c6a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001bde:	e044      	b.n	8001c6a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d12b      	bne.n	8001c46 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d912      	bls.n	8001c1e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	881a      	ldrh	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	1c9a      	adds	r2, r3, #2
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b02      	subs	r3, #2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c1c:	e025      	b.n	8001c6a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c44:	e011      	b.n	8001c6a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c46:	f7fe fce1 	bl	800060c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d803      	bhi.n	8001c5e <HAL_SPI_Transmit+0x268>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d102      	bne.n	8001c64 <HAL_SPI_Transmit+0x26e>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c68:	e026      	b.n	8001cb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1b5      	bne.n	8001be0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fb5b 	bl	8002334 <SPI_EndRxTxTransaction>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10a      	bne.n	8001ca8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
 8001cb4:	e000      	b.n	8001cb8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001cb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b08a      	sub	sp, #40	; 0x28
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_SPI_TransmitReceive+0x26>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e1fb      	b.n	80020f0 <HAL_SPI_TransmitReceive+0x41e>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d00:	f7fe fc84 	bl	800060c <HAL_GetTick>
 8001d04:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d0c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d1c:	7efb      	ldrb	r3, [r7, #27]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d00e      	beq.n	8001d40 <HAL_SPI_TransmitReceive+0x6e>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d28:	d106      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x66>
 8001d32:	7efb      	ldrb	r3, [r7, #27]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d003      	beq.n	8001d40 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d3e:	e1cd      	b.n	80020dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_SPI_TransmitReceive+0x80>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_SPI_TransmitReceive+0x80>
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d58:	e1c0      	b.n	80020dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d003      	beq.n	8001d6e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	887a      	ldrh	r2, [r7, #2]
 8001d7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001db0:	d802      	bhi.n	8001db8 <HAL_SPI_TransmitReceive+0xe6>
 8001db2:	8a3b      	ldrh	r3, [r7, #16]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d908      	bls.n	8001dca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	e007      	b.n	8001dda <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dd8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d007      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e00:	d97c      	bls.n	8001efc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_SPI_TransmitReceive+0x13e>
 8001e0a:	8a7b      	ldrh	r3, [r7, #18]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d169      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	1c9a      	adds	r2, r3, #2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e34:	e056      	b.n	8001ee4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d11b      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x1aa>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0x1aa>
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d113      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	881a      	ldrh	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	1c9a      	adds	r2, r3, #2
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d11c      	bne.n	8001ec4 <HAL_SPI_TransmitReceive+0x1f2>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	1c9a      	adds	r2, r3, #2
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ec4:	f7fe fba2 	bl	800060c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d807      	bhi.n	8001ee4 <HAL_SPI_TransmitReceive+0x212>
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eda:	d003      	beq.n	8001ee4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001ee2:	e0fb      	b.n	80020dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1a3      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x164>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d19d      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x164>
 8001efa:	e0df      	b.n	80020bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_SPI_TransmitReceive+0x23a>
 8001f04:	8a7b      	ldrh	r3, [r7, #18]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	f040 80cb 	bne.w	80020a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d912      	bls.n	8001f3c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	1c9a      	adds	r2, r3, #2
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b02      	subs	r3, #2
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f3a:	e0b2      	b.n	80020a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	330c      	adds	r3, #12
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f62:	e09e      	b.n	80020a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d134      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x30a>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d02f      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x30a>
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d12c      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d912      	bls.n	8001fb2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	881a      	ldrh	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	1c9a      	adds	r2, r3, #2
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b02      	subs	r3, #2
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fb0:	e012      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	330c      	adds	r3, #12
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d148      	bne.n	800207c <HAL_SPI_TransmitReceive+0x3aa>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d042      	beq.n	800207c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d923      	bls.n	800204a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	b292      	uxth	r2, r2
 800200e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	1c9a      	adds	r2, r3, #2
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b02      	subs	r3, #2
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d81f      	bhi.n	8002078 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e016      	b.n	8002078 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f103 020c 	add.w	r2, r3, #12
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002078:	2301      	movs	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800207c:	f7fe fac6 	bl	800060c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002088:	429a      	cmp	r2, r3
 800208a:	d803      	bhi.n	8002094 <HAL_SPI_TransmitReceive+0x3c2>
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d102      	bne.n	800209a <HAL_SPI_TransmitReceive+0x3c8>
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80020a0:	e01c      	b.n	80020dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f47f af5b 	bne.w	8001f64 <HAL_SPI_TransmitReceive+0x292>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f47f af54 	bne.w	8001f64 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f937 	bl	8002334 <SPI_EndRxTxTransaction>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	661a      	str	r2, [r3, #96]	; 0x60
 80020d8:	e000      	b.n	80020dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80020da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80020ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002108:	f7fe fa80 	bl	800060c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4413      	add	r3, r2
 8002116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002118:	f7fe fa78 	bl	800060c <HAL_GetTick>
 800211c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	015b      	lsls	r3, r3, #5
 8002124:	0d1b      	lsrs	r3, r3, #20
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800212e:	e054      	b.n	80021da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002136:	d050      	beq.n	80021da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002138:	f7fe fa68 	bl	800060c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	429a      	cmp	r2, r3
 8002146:	d902      	bls.n	800214e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d13d      	bne.n	80021ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800215c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002166:	d111      	bne.n	800218c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002170:	d004      	beq.n	800217c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217a:	d107      	bne.n	800218c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800218a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002194:	d10f      	bne.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e017      	b.n	80021fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4013      	ands	r3, r2
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d19b      	bne.n	8002130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000000 	.word	0x20000000

08002208 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800221a:	f7fe f9f7 	bl	800060c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	4413      	add	r3, r2
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800222a:	f7fe f9ef 	bl	800060c <HAL_GetTick>
 800222e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	330c      	adds	r3, #12
 8002236:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00da      	lsls	r2, r3, #3
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	0d1b      	lsrs	r3, r3, #20
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002250:	e060      	b.n	8002314 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002258:	d107      	bne.n	800226a <SPI_WaitFifoStateUntilTimeout+0x62>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002268:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d050      	beq.n	8002314 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002272:	f7fe f9cb 	bl	800060c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227e:	429a      	cmp	r2, r3
 8002280:	d902      	bls.n	8002288 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	2b00      	cmp	r3, #0
 8002286:	d13d      	bne.n	8002304 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002296:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a0:	d111      	bne.n	80022c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022aa:	d004      	beq.n	80022b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b4:	d107      	bne.n	80022c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	d10f      	bne.n	80022f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e010      	b.n	8002326 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	3b01      	subs	r3, #1
 8002312:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d196      	bne.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000000 	.word	0x20000000

08002334 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff ff5b 	bl	8002208 <SPI_WaitFifoStateUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235c:	f043 0220 	orr.w	r2, r3, #32
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e027      	b.n	80023b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2200      	movs	r2, #0
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fec0 	bl	80020f8 <SPI_WaitFlagStateUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e014      	b.n	80023b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff ff34 	bl	8002208 <SPI_WaitFifoStateUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e000      	b.n	80023b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80023c4:	4904      	ldr	r1, [pc, #16]	; (80023d8 <MX_FATFS_Init+0x18>)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_FATFS_Init+0x1c>)
 80023c8:	f003 f9a2 	bl	8005710 <FATFS_LinkDriver>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <MX_FATFS_Init+0x20>)
 80023d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20002114 	.word	0x20002114
 80023dc:	2000000c 	.word	0x2000000c
 80023e0:	20002110 	.word	0x20002110

080023e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80023e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fc0d 	bl	8005c20 <SD_disk_initialize>
 8002406:	4603      	mov	r3, r0
 8002408:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_status(pdrv);
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fce4 	bl	8005dec <SD_disk_status>
 8002424:	4603      	mov	r3, r0
 8002426:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8002440:	7bf8      	ldrb	r0, [r7, #15]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	f003 fce6 	bl	8005e18 <SD_disk_read>
 800244c:	4603      	mov	r3, r0
 800244e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8002468:	7bf8      	ldrb	r0, [r7, #15]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	f003 fd3c 	bl	8005eec <SD_disk_write>
 8002474:	4603      	mov	r3, r0
 8002476:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	603a      	str	r2, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	460b      	mov	r3, r1
 800248e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	79b9      	ldrb	r1, [r7, #6]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 fdac 	bl	8005ff4 <SD_disk_ioctl>
 800249c:	4603      	mov	r3, r0
 800249e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <disk_status+0x30>)
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	79fa      	ldrb	r2, [r7, #7]
 80024c0:	4905      	ldr	r1, [pc, #20]	; (80024d8 <disk_status+0x30>)
 80024c2:	440a      	add	r2, r1
 80024c4:	7a12      	ldrb	r2, [r2, #8]
 80024c6:	4610      	mov	r0, r2
 80024c8:	4798      	blx	r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20002340 	.word	0x20002340

080024dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <disk_initialize+0x48>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <disk_initialize+0x48>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <disk_initialize+0x48>)
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	79fa      	ldrb	r2, [r7, #7]
 800250a:	4906      	ldr	r1, [pc, #24]	; (8002524 <disk_initialize+0x48>)
 800250c:	440a      	add	r2, r1
 800250e:	7a12      	ldrb	r2, [r2, #8]
 8002510:	4610      	mov	r0, r2
 8002512:	4798      	blx	r3
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20002340 	.word	0x20002340

08002528 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <disk_read+0x3c>)
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	689c      	ldr	r4, [r3, #8]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <disk_read+0x3c>)
 8002548:	4413      	add	r3, r2
 800254a:	7a18      	ldrb	r0, [r3, #8]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	47a0      	blx	r4
 8002554:	4603      	mov	r3, r0
 8002556:	75fb      	strb	r3, [r7, #23]
  return res;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	bf00      	nop
 8002564:	20002340 	.word	0x20002340

08002568 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <disk_write+0x3c>)
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	68dc      	ldr	r4, [r3, #12]
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <disk_write+0x3c>)
 8002588:	4413      	add	r3, r2
 800258a:	7a18      	ldrb	r0, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	47a0      	blx	r4
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]
  return res;
 8002598:	7dfb      	ldrb	r3, [r7, #23]
}
 800259a:	4618      	mov	r0, r3
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd90      	pop	{r4, r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20002340 	.word	0x20002340

080025a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	603a      	str	r2, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	460b      	mov	r3, r1
 80025b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <disk_ioctl+0x38>)
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	4906      	ldr	r1, [pc, #24]	; (80025e0 <disk_ioctl+0x38>)
 80025c8:	440a      	add	r2, r1
 80025ca:	7a10      	ldrb	r0, [r2, #8]
 80025cc:	79b9      	ldrb	r1, [r7, #6]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	4798      	blx	r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20002340 	.word	0x20002340

080025e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3301      	adds	r3, #1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002606:	89fb      	ldrh	r3, [r7, #14]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3303      	adds	r3, #3
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	3202      	adds	r2, #2
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	3201      	adds	r2, #1
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
	return rv;
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	887a      	ldrh	r2, [r7, #2]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	1c53      	adds	r3, r2, #1
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	6179      	str	r1, [r7, #20]
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3b01      	subs	r3, #1
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f1      	bne.n	8002702 <mem_cpy+0x1a>
	}
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800272a:	b480      	push	{r7}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	617a      	str	r2, [r7, #20]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3b01      	subs	r3, #1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f3      	bne.n	800273a <mem_set+0x10>
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	61fa      	str	r2, [r7, #28]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	61ba      	str	r2, [r7, #24]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	1acb      	subs	r3, r1, r3
 800278c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3b01      	subs	r3, #1
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <mem_cmp+0x40>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0eb      	beq.n	8002778 <mem_cmp+0x18>

	return r;
 80027a0:	697b      	ldr	r3, [r7, #20]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80027b8:	e002      	b.n	80027c0 <chk_chr+0x12>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3301      	adds	r3, #1
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <chk_chr+0x26>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d1f2      	bne.n	80027ba <chk_chr+0xc>
	return *str;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	781b      	ldrb	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e029      	b.n	800284c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80027f8:	4a27      	ldr	r2, [pc, #156]	; (8002898 <chk_lock+0xb4>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01d      	beq.n	8002842 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002806:	4a24      	ldr	r2, [pc, #144]	; (8002898 <chk_lock+0xb4>)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d116      	bne.n	8002846 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <chk_lock+0xb4>)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002828:	429a      	cmp	r2, r3
 800282a:	d10c      	bne.n	8002846 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800282c:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <chk_lock+0xb4>)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4413      	add	r3, r2
 8002834:	3308      	adds	r3, #8
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800283c:	429a      	cmp	r2, r3
 800283e:	d102      	bne.n	8002846 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002840:	e007      	b.n	8002852 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3301      	adds	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d9d2      	bls.n	80027f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d109      	bne.n	800286c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <chk_lock+0x80>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d101      	bne.n	8002868 <chk_lock+0x84>
 8002864:	2300      	movs	r3, #0
 8002866:	e010      	b.n	800288a <chk_lock+0xa6>
 8002868:	2312      	movs	r3, #18
 800286a:	e00e      	b.n	800288a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <chk_lock+0xa0>
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <chk_lock+0xb4>)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	4413      	add	r3, r2
 800287a:	330c      	adds	r3, #12
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002882:	d101      	bne.n	8002888 <chk_lock+0xa4>
 8002884:	2310      	movs	r3, #16
 8002886:	e000      	b.n	800288a <chk_lock+0xa6>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20002120 	.word	0x20002120

0800289c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	e002      	b.n	80028ae <enq_lock+0x12>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3301      	adds	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d806      	bhi.n	80028c2 <enq_lock+0x26>
 80028b4:	4a09      	ldr	r2, [pc, #36]	; (80028dc <enq_lock+0x40>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f2      	bne.n	80028a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20002120 	.word	0x20002120

080028e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	e01f      	b.n	8002930 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80028f0:	4a41      	ldr	r2, [pc, #260]	; (80029f8 <inc_lock+0x118>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	4413      	add	r3, r2
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d113      	bne.n	800292a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002902:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <inc_lock+0x118>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002912:	429a      	cmp	r2, r3
 8002914:	d109      	bne.n	800292a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002916:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <inc_lock+0x118>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	4413      	add	r3, r2
 800291e:	3308      	adds	r3, #8
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002926:	429a      	cmp	r2, r3
 8002928:	d006      	beq.n	8002938 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3301      	adds	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d9dc      	bls.n	80028f0 <inc_lock+0x10>
 8002936:	e000      	b.n	800293a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002938:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d132      	bne.n	80029a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e002      	b.n	800294c <inc_lock+0x6c>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d806      	bhi.n	8002960 <inc_lock+0x80>
 8002952:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <inc_lock+0x118>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	4413      	add	r3, r2
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f2      	bne.n	8002946 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d101      	bne.n	800296a <inc_lock+0x8a>
 8002966:	2300      	movs	r3, #0
 8002968:	e040      	b.n	80029ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4922      	ldr	r1, [pc, #136]	; (80029f8 <inc_lock+0x118>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	440b      	add	r3, r1
 8002976:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	491e      	ldr	r1, [pc, #120]	; (80029f8 <inc_lock+0x118>)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	440b      	add	r3, r1
 8002984:	3304      	adds	r3, #4
 8002986:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	491a      	ldr	r1, [pc, #104]	; (80029f8 <inc_lock+0x118>)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	440b      	add	r3, r1
 8002994:	3308      	adds	r3, #8
 8002996:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <inc_lock+0x118>)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	4413      	add	r3, r2
 80029a0:	330c      	adds	r3, #12
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <inc_lock+0xe0>
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <inc_lock+0x118>)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4413      	add	r3, r2
 80029b4:	330c      	adds	r3, #12
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <inc_lock+0xe0>
 80029bc:	2300      	movs	r3, #0
 80029be:	e015      	b.n	80029ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <inc_lock+0xf8>
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <inc_lock+0x118>)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	330c      	adds	r3, #12
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	e001      	b.n	80029dc <inc_lock+0xfc>
 80029d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029dc:	4906      	ldr	r1, [pc, #24]	; (80029f8 <inc_lock+0x118>)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	440b      	add	r3, r1
 80029e4:	330c      	adds	r3, #12
 80029e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3301      	adds	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	20002120 	.word	0x20002120

080029fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d825      	bhi.n	8002a5c <dec_lock+0x60>
		n = Files[i].ctr;
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <dec_lock+0x74>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4413      	add	r3, r2
 8002a18:	330c      	adds	r3, #12
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a24:	d101      	bne.n	8002a2a <dec_lock+0x2e>
 8002a26:	2300      	movs	r3, #0
 8002a28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002a2a:	89fb      	ldrh	r3, [r7, #14]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <dec_lock+0x3a>
 8002a30:	89fb      	ldrh	r3, [r7, #14]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <dec_lock+0x74>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	4413      	add	r3, r2
 8002a3e:	330c      	adds	r3, #12
 8002a40:	89fa      	ldrh	r2, [r7, #14]
 8002a42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002a44:	89fb      	ldrh	r3, [r7, #14]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <dec_lock+0x5a>
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <dec_lock+0x74>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	4413      	add	r3, r2
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	737b      	strb	r3, [r7, #13]
 8002a5a:	e001      	b.n	8002a60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002a60:	7b7b      	ldrb	r3, [r7, #13]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20002120 	.word	0x20002120

08002a74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e010      	b.n	8002aa4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002a82:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <clear_lock+0x44>)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d105      	bne.n	8002a9e <clear_lock+0x2a>
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <clear_lock+0x44>)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d9eb      	bls.n	8002a82 <clear_lock+0xe>
	}
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	20002120 	.word	0x20002120

08002abc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	78db      	ldrb	r3, [r3, #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d034      	beq.n	8002b3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7858      	ldrb	r0, [r3, #1]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	f7ff fd40 	bl	8002568 <disk_write>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e022      	b.n	8002b3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	1ad2      	subs	r2, r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d217      	bcs.n	8002b3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	789b      	ldrb	r3, [r3, #2]
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	e010      	b.n	8002b34 <sync_window+0x78>
					wsect += fs->fsize;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4413      	add	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7858      	ldrb	r0, [r3, #1]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002b26:	2301      	movs	r3, #1
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	f7ff fd1d 	bl	8002568 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d8eb      	bhi.n	8002b12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d01b      	beq.n	8002b94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffad 	bl	8002abc <sync_window>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d113      	bne.n	8002b94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7858      	ldrb	r0, [r3, #1]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002b76:	2301      	movs	r3, #1
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	f7ff fcd5 	bl	8002528 <disk_read>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff87 	bl	8002abc <sync_window>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d159      	bne.n	8002c6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d149      	bne.n	8002c54 <sync_fs+0xb4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	791b      	ldrb	r3, [r3, #4]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d145      	bne.n	8002c54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	899b      	ldrh	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	f7ff fda8 	bl	800272a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3338      	adds	r3, #56	; 0x38
 8002bde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002be2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fd37 	bl	800265a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3338      	adds	r3, #56	; 0x38
 8002bf0:	4921      	ldr	r1, [pc, #132]	; (8002c78 <sync_fs+0xd8>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fd4c 	bl	8002690 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3338      	adds	r3, #56	; 0x38
 8002bfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002c00:	491e      	ldr	r1, [pc, #120]	; (8002c7c <sync_fs+0xdc>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fd44 	bl	8002690 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3338      	adds	r3, #56	; 0x38
 8002c0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f7ff fd3a 	bl	8002690 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3338      	adds	r3, #56	; 0x38
 8002c20:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7ff fd30 	bl	8002690 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7858      	ldrb	r0, [r3, #1]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f7ff fc8d 	bl	8002568 <disk_write>
			fs->fsi_flag = 0;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fca3 	bl	80025a8 <disk_ioctl>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <sync_fs+0xcc>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	41615252 	.word	0x41615252
 8002c7c:	61417272 	.word	0x61417272

08002c80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3b02      	subs	r3, #2
 8002c8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	3b02      	subs	r3, #2
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d301      	bcc.n	8002ca0 <clust2sect+0x20>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e008      	b.n	8002cb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	895b      	ldrh	r3, [r3, #10]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	fb03 f202 	mul.w	r2, r3, r2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4413      	add	r3, r2
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d904      	bls.n	8002cde <get_fat+0x20>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002cde:	2301      	movs	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e0bb      	b.n	8002e5c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	f000 8083 	beq.w	8002dfa <get_fat+0x13c>
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	f300 80a7 	bgt.w	8002e48 <get_fat+0x18a>
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d002      	beq.n	8002d04 <get_fat+0x46>
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d056      	beq.n	8002db0 <get_fat+0xf2>
 8002d02:	e0a1      	b.n	8002e48 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	899b      	ldrh	r3, [r3, #12]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d22:	4413      	add	r3, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	6938      	ldr	r0, [r7, #16]
 8002d28:	f7ff ff0c 	bl	8002b44 <move_window>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 808d 	bne.w	8002e4e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	60fa      	str	r2, [r7, #12]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	8992      	ldrh	r2, [r2, #12]
 8002d3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d42:	fb01 f202 	mul.w	r2, r1, r2
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	899b      	ldrh	r3, [r3, #12]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d62:	4413      	add	r3, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	6938      	ldr	r0, [r7, #16]
 8002d68:	f7ff feec 	bl	8002b44 <move_window>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d16f      	bne.n	8002e52 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	899b      	ldrh	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d7e:	fb01 f202 	mul.w	r2, r1, r2
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <get_fat+0xe8>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	e002      	b.n	8002dac <get_fat+0xee>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	617b      	str	r3, [r7, #20]
			break;
 8002dae:	e055      	b.n	8002e5c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	899b      	ldrh	r3, [r3, #12]
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6938      	ldr	r0, [r7, #16]
 8002dca:	f7ff febb 	bl	8002b44 <move_window>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d140      	bne.n	8002e56 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	8992      	ldrh	r2, [r2, #12]
 8002de2:	fbb3 f0f2 	udiv	r0, r3, r2
 8002de6:	fb00 f202 	mul.w	r2, r0, r2
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fbf8 	bl	80025e4 <ld_word>
 8002df4:	4603      	mov	r3, r0
 8002df6:	617b      	str	r3, [r7, #20]
			break;
 8002df8:	e030      	b.n	8002e5c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	899b      	ldrh	r3, [r3, #12]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0e:	4413      	add	r3, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	6938      	ldr	r0, [r7, #16]
 8002e14:	f7ff fe96 	bl	8002b44 <move_window>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	8992      	ldrh	r2, [r2, #12]
 8002e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e30:	fb00 f202 	mul.w	r2, r0, r2
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fbeb 	bl	8002614 <ld_dword>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e44:	617b      	str	r3, [r7, #20]
			break;
 8002e46:	e009      	b.n	8002e5c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002e48:	2301      	movs	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e006      	b.n	8002e5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e4e:	bf00      	nop
 8002e50:	e004      	b.n	8002e5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002e5a:	bf00      	nop
		}
	}

	return val;
 8002e5c:	697b      	ldr	r3, [r7, #20]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002e66:	b590      	push	{r4, r7, lr}
 8002e68:	b089      	sub	sp, #36	; 0x24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002e72:	2302      	movs	r3, #2
 8002e74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f240 8102 	bls.w	8003082 <put_fat+0x21c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f080 80fc 	bcs.w	8003082 <put_fat+0x21c>
		switch (fs->fs_type) {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	f000 80b6 	beq.w	8003000 <put_fat+0x19a>
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	f300 80fd 	bgt.w	8003094 <put_fat+0x22e>
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d003      	beq.n	8002ea6 <put_fat+0x40>
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	f000 8083 	beq.w	8002faa <put_fat+0x144>
 8002ea4:	e0f6      	b.n	8003094 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	899b      	ldrh	r3, [r3, #12]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fe3b 	bl	8002b44 <move_window>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 80d6 	bne.w	8003086 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	61ba      	str	r2, [r7, #24]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	8992      	ldrh	r2, [r2, #12]
 8002eea:	fbb3 f0f2 	udiv	r0, r3, r2
 8002eee:	fb00 f202 	mul.w	r2, r0, r2
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <put_fat+0xb8>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	b25a      	sxtb	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e001      	b.n	8002f22 <put_fat+0xbc>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	899b      	ldrh	r3, [r3, #12]
 8002f34:	4619      	mov	r1, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff fdff 	bl	8002b44 <move_window>
 8002f46:	4603      	mov	r3, r0
 8002f48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 809c 	bne.w	800308a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	899b      	ldrh	r3, [r3, #12]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f64:	fb00 f202 	mul.w	r2, r0, r2
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <put_fat+0x11a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e00e      	b.n	8002f9e <put_fat+0x138>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	f023 030f 	bic.w	r3, r3, #15
 8002f8a:	b25a      	sxtb	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	70da      	strb	r2, [r3, #3]
			break;
 8002fa8:	e074      	b.n	8003094 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	899b      	ldrh	r3, [r3, #12]
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fdbe 	bl	8002b44 <move_window>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d15d      	bne.n	800308e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	8992      	ldrh	r2, [r2, #12]
 8002fe0:	fbb3 f0f2 	udiv	r0, r3, r2
 8002fe4:	fb00 f202 	mul.w	r2, r0, r2
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	b292      	uxth	r2, r2
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fb31 	bl	800265a <st_word>
			fs->wflag = 1;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	70da      	strb	r2, [r3, #3]
			break;
 8002ffe:	e049      	b.n	8003094 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	899b      	ldrh	r3, [r3, #12]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	b29b      	uxth	r3, r3
 800300c:	4619      	mov	r1, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	fbb3 f3f1 	udiv	r3, r3, r1
 8003014:	4413      	add	r3, r2
 8003016:	4619      	mov	r1, r3
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff fd93 	bl	8002b44 <move_window>
 800301e:	4603      	mov	r3, r0
 8003020:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d134      	bne.n	8003092 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	8992      	ldrh	r2, [r2, #12]
 800303c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003040:	fb00 f202 	mul.w	r2, r0, r2
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	440b      	add	r3, r1
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fae3 	bl	8002614 <ld_dword>
 800304e:	4603      	mov	r3, r0
 8003050:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003054:	4323      	orrs	r3, r4
 8003056:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	8992      	ldrh	r2, [r2, #12]
 8003066:	fbb3 f0f2 	udiv	r0, r3, r2
 800306a:	fb00 f202 	mul.w	r2, r0, r2
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	440b      	add	r3, r1
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fb0b 	bl	8002690 <st_dword>
			fs->wflag = 1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	70da      	strb	r2, [r3, #3]
			break;
 8003080:	e008      	b.n	8003094 <put_fat+0x22e>
		}
	}
 8003082:	bf00      	nop
 8003084:	e006      	b.n	8003094 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003086:	bf00      	nop
 8003088:	e004      	b.n	8003094 <put_fat+0x22e>
			if (res != FR_OK) break;
 800308a:	bf00      	nop
 800308c:	e002      	b.n	8003094 <put_fat+0x22e>
			if (res != FR_OK) break;
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003092:	bf00      	nop
	return res;
 8003094:	7ffb      	ldrb	r3, [r7, #31]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}

0800309e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b088      	sub	sp, #32
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d904      	bls.n	80030c4 <remove_chain+0x26>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d301      	bcc.n	80030c8 <remove_chain+0x2a>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e04b      	b.n	8003160 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80030ce:	f04f 32ff 	mov.w	r2, #4294967295
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	69b8      	ldr	r0, [r7, #24]
 80030d6:	f7ff fec6 	bl	8002e66 <put_fat>
 80030da:	4603      	mov	r3, r0
 80030dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80030de:	7ffb      	ldrb	r3, [r7, #31]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <remove_chain+0x4a>
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
 80030e6:	e03b      	b.n	8003160 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fde7 	bl	8002cbe <get_fat>
 80030f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d031      	beq.n	800315c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <remove_chain+0x64>
 80030fe:	2302      	movs	r3, #2
 8003100:	e02e      	b.n	8003160 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d101      	bne.n	800310e <remove_chain+0x70>
 800310a:	2301      	movs	r3, #1
 800310c:	e028      	b.n	8003160 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800310e:	2200      	movs	r2, #0
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	69b8      	ldr	r0, [r7, #24]
 8003114:	f7ff fea7 	bl	8002e66 <put_fat>
 8003118:	4603      	mov	r3, r0
 800311a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800311c:	7ffb      	ldrb	r3, [r7, #31]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <remove_chain+0x88>
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	e01c      	b.n	8003160 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	3b02      	subs	r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d20b      	bcs.n	800314c <remove_chain+0xae>
			fs->free_clst++;
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	791b      	ldrb	r3, [r3, #4]
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	b2da      	uxtb	r2, r3
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3c6      	bcc.n	80030e8 <remove_chain+0x4a>
 800315a:	e000      	b.n	800315e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800315c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <create_chain+0x2c>
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	429a      	cmp	r2, r3
 8003192:	d31b      	bcc.n	80031cc <create_chain+0x64>
 8003194:	2301      	movs	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	e018      	b.n	80031cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff fd8e 	bl	8002cbe <get_fat>
 80031a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d801      	bhi.n	80031ae <create_chain+0x46>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e070      	b.n	8003290 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d101      	bne.n	80031ba <create_chain+0x52>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	e06a      	b.n	8003290 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d201      	bcs.n	80031c8 <create_chain+0x60>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	e063      	b.n	8003290 <create_chain+0x128>
		scl = clst;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3301      	adds	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d307      	bcc.n	80031f0 <create_chain+0x88>
				ncl = 2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d901      	bls.n	80031f0 <create_chain+0x88>
 80031ec:	2300      	movs	r3, #0
 80031ee:	e04f      	b.n	8003290 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80031f0:	69f9      	ldr	r1, [r7, #28]
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fd63 	bl	8002cbe <get_fat>
 80031f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d003      	beq.n	800320e <create_chain+0xa6>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d101      	bne.n	8003212 <create_chain+0xaa>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	e03e      	b.n	8003290 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	429a      	cmp	r2, r3
 8003218:	d1da      	bne.n	80031d0 <create_chain+0x68>
 800321a:	2300      	movs	r3, #0
 800321c:	e038      	b.n	8003290 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800321e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69f9      	ldr	r1, [r7, #28]
 8003226:	6938      	ldr	r0, [r7, #16]
 8003228:	f7ff fe1d 	bl	8002e66 <put_fat>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <create_chain+0xe2>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	6938      	ldr	r0, [r7, #16]
 8003242:	f7ff fe10 	bl	8002e66 <put_fat>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <create_chain+0x116>
		fs->last_clst = ncl;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	3b02      	subs	r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d804      	bhi.n	800326e <create_chain+0x106>
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	791b      	ldrb	r3, [r3, #4]
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	b2da      	uxtb	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	711a      	strb	r2, [r3, #4]
 800327c:	e007      	b.n	800328e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <create_chain+0x122>
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e000      	b.n	800328c <create_chain+0x124>
 800328a:	2301      	movs	r3, #1
 800328c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800328e:	69fb      	ldr	r3, [r7, #28]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	3304      	adds	r3, #4
 80032ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	899b      	ldrh	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	8952      	ldrh	r2, [r2, #10]
 80032c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	613a      	str	r2, [r7, #16]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <clmt_clust+0x42>
 80032d6:	2300      	movs	r3, #0
 80032d8:	e010      	b.n	80032fc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d307      	bcc.n	80032f2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3304      	adds	r3, #4
 80032ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80032f0:	e7e9      	b.n	80032c6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80032f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4413      	add	r3, r2
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331e:	d204      	bcs.n	800332a <dir_sdi+0x22>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <dir_sdi+0x26>
		return FR_INT_ERR;
 800332a:	2302      	movs	r3, #2
 800332c:	e071      	b.n	8003412 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <dir_sdi+0x46>
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d902      	bls.n	800334e <dir_sdi+0x46>
		clst = fs->dirbase;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10c      	bne.n	800336e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	8912      	ldrh	r2, [r2, #8]
 800335c:	4293      	cmp	r3, r2
 800335e:	d301      	bcc.n	8003364 <dir_sdi+0x5c>
 8003360:	2302      	movs	r3, #2
 8003362:	e056      	b.n	8003412 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	61da      	str	r2, [r3, #28]
 800336c:	e02d      	b.n	80033ca <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	895b      	ldrh	r3, [r3, #10]
 8003372:	461a      	mov	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	899b      	ldrh	r3, [r3, #12]
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800337e:	e019      	b.n	80033b4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fc9a 	bl	8002cbe <get_fat>
 800338a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d101      	bne.n	8003398 <dir_sdi+0x90>
 8003394:	2301      	movs	r3, #1
 8003396:	e03c      	b.n	8003412 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d904      	bls.n	80033a8 <dir_sdi+0xa0>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d301      	bcc.n	80033ac <dir_sdi+0xa4>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e032      	b.n	8003412 <dir_sdi+0x10a>
			ofs -= csz;
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d2e1      	bcs.n	8003380 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	6938      	ldr	r0, [r7, #16]
 80033c0:	f7ff fc5e 	bl	8002c80 <clust2sect>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <dir_sdi+0xd4>
 80033d8:	2302      	movs	r3, #2
 80033da:	e01a      	b.n	8003412 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	899b      	ldrh	r3, [r3, #12]
 80033e4:	4619      	mov	r1, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	899b      	ldrh	r3, [r3, #12]
 80033fc:	461a      	mov	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	fbb3 f0f2 	udiv	r0, r3, r2
 8003404:	fb00 f202 	mul.w	r2, r0, r2
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	18ca      	adds	r2, r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	3320      	adds	r3, #32
 8003430:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <dir_next+0x28>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003440:	d301      	bcc.n	8003446 <dir_next+0x2c>
 8003442:	2304      	movs	r3, #4
 8003444:	e0bb      	b.n	80035be <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	899b      	ldrh	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003452:	fb01 f202 	mul.w	r2, r1, r2
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 809d 	bne.w	8003598 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	8912      	ldrh	r2, [r2, #8]
 8003478:	4293      	cmp	r3, r2
 800347a:	f0c0 808d 	bcc.w	8003598 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	61da      	str	r2, [r3, #28]
 8003484:	2304      	movs	r3, #4
 8003486:	e09a      	b.n	80035be <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	899b      	ldrh	r3, [r3, #12]
 800348c:	461a      	mov	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	fbb3 f3f2 	udiv	r3, r3, r2
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	8952      	ldrh	r2, [r2, #10]
 8003498:	3a01      	subs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d17b      	bne.n	8003598 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f7ff fc08 	bl	8002cbe <get_fat>
 80034ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d801      	bhi.n	80034ba <dir_next+0xa0>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e081      	b.n	80035be <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d101      	bne.n	80034c6 <dir_next+0xac>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07b      	b.n	80035be <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d359      	bcc.n	8003584 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	61da      	str	r2, [r3, #28]
 80034dc:	2304      	movs	r3, #4
 80034de:	e06e      	b.n	80035be <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f7ff fe3d 	bl	8003168 <create_chain>
 80034ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <dir_next+0xe0>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e061      	b.n	80035be <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <dir_next+0xea>
 8003500:	2302      	movs	r3, #2
 8003502:	e05c      	b.n	80035be <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d101      	bne.n	8003510 <dir_next+0xf6>
 800350c:	2301      	movs	r3, #1
 800350e:	e056      	b.n	80035be <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff fad3 	bl	8002abc <sync_window>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <dir_next+0x106>
 800351c:	2301      	movs	r3, #1
 800351e:	e04e      	b.n	80035be <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	899b      	ldrh	r3, [r3, #12]
 800352a:	461a      	mov	r2, r3
 800352c:	2100      	movs	r1, #0
 800352e:	f7ff f8fc 	bl	800272a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	6979      	ldr	r1, [r7, #20]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff fba1 	bl	8002c80 <clust2sect>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
 8003544:	e012      	b.n	800356c <dir_next+0x152>
						fs->wflag = 1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff fab5 	bl	8002abc <sync_window>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <dir_next+0x142>
 8003558:	2301      	movs	r3, #1
 800355a:	e030      	b.n	80035be <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	3301      	adds	r3, #1
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	635a      	str	r2, [r3, #52]	; 0x34
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	895b      	ldrh	r3, [r3, #10]
 8003570:	461a      	mov	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4293      	cmp	r3, r2
 8003576:	d3e6      	bcc.n	8003546 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad2      	subs	r2, r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800358a:	6979      	ldr	r1, [r7, #20]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff fb77 	bl	8002c80 <clust2sect>
 8003592:	4602      	mov	r2, r0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	899b      	ldrh	r3, [r3, #12]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80035b0:	fb00 f202 	mul.w	r2, r0, r2
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	18ca      	adds	r2, r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80035d6:	2100      	movs	r1, #0
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fe95 	bl	8003308 <dir_sdi>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d12b      	bne.n	8003640 <dir_alloc+0x7a>
		n = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4619      	mov	r1, r3
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff faa6 	bl	8002b44 <move_window>
 80035f8:	4603      	mov	r3, r0
 80035fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2be5      	cmp	r3, #229	; 0xe5
 800360a:	d004      	beq.n	8003616 <dir_alloc+0x50>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3301      	adds	r3, #1
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d102      	bne.n	800362a <dir_alloc+0x64>
 8003624:	e00c      	b.n	8003640 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800362a:	2101      	movs	r1, #1
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fef4 	bl	800341a <dir_next>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0d7      	beq.n	80035ec <dir_alloc+0x26>
 800363c:	e000      	b.n	8003640 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800363e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d101      	bne.n	800364a <dir_alloc+0x84>
 8003646:	2307      	movs	r3, #7
 8003648:	75fb      	strb	r3, [r7, #23]
	return res;
 800364a:	7dfb      	ldrb	r3, [r7, #23]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	331a      	adds	r3, #26
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ffbe 	bl	80025e4 <ld_word>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d109      	bne.n	8003688 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe ffb3 	bl	80025e4 <ld_word>
 800367e:	4603      	mov	r3, r0
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003688:	68fb      	ldr	r3, [r7, #12]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	331a      	adds	r3, #26
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	b292      	uxth	r2, r2
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe ffd6 	bl	800265a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d109      	bne.n	80036ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f103 0214 	add.w	r2, r3, #20
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7fe ffc8 	bl	800265a <st_word>
	}
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	331a      	adds	r3, #26
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe ff7e 	bl	80025e4 <ld_word>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <cmp_lfn+0x1e>
 80036ee:	2300      	movs	r3, #0
 80036f0:	e059      	b.n	80037a6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003708:	2301      	movs	r3, #1
 800370a:	81fb      	strh	r3, [r7, #14]
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	e033      	b.n	800377a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003712:	4a27      	ldr	r2, [pc, #156]	; (80037b0 <cmp_lfn+0xdc>)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe ff5f 	bl	80025e4 <ld_word>
 8003726:	4603      	mov	r3, r0
 8003728:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800372a:	89fb      	ldrh	r3, [r7, #14]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2bfe      	cmp	r3, #254	; 0xfe
 8003734:	d812      	bhi.n	800375c <cmp_lfn+0x88>
 8003736:	89bb      	ldrh	r3, [r7, #12]
 8003738:	4618      	mov	r0, r3
 800373a:	f002 f835 	bl	80057a8 <ff_wtoupper>
 800373e:	4603      	mov	r3, r0
 8003740:	461c      	mov	r4, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	617a      	str	r2, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f002 f829 	bl	80057a8 <ff_wtoupper>
 8003756:	4603      	mov	r3, r0
 8003758:	429c      	cmp	r4, r3
 800375a:	d001      	beq.n	8003760 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800375c:	2300      	movs	r3, #0
 800375e:	e022      	b.n	80037a6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8003760:	89bb      	ldrh	r3, [r7, #12]
 8003762:	81fb      	strh	r3, [r7, #14]
 8003764:	e006      	b.n	8003774 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003766:	89bb      	ldrh	r3, [r7, #12]
 8003768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800376c:	4293      	cmp	r3, r2
 800376e:	d001      	beq.n	8003774 <cmp_lfn+0xa0>
 8003770:	2300      	movs	r3, #0
 8003772:	e018      	b.n	80037a6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3301      	adds	r3, #1
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b0c      	cmp	r3, #12
 800377e:	d9c8      	bls.n	8003712 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <cmp_lfn+0xd0>
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <cmp_lfn+0xd0>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <cmp_lfn+0xd0>
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	080063ec 	.word	0x080063ec

080037b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	460b      	mov	r3, r1
 80037c4:	71fb      	strb	r3, [r7, #7]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	330d      	adds	r3, #13
 80037ce:	79ba      	ldrb	r2, [r7, #6]
 80037d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	330b      	adds	r3, #11
 80037d6:	220f      	movs	r2, #15
 80037d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	330c      	adds	r3, #12
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	331a      	adds	r3, #26
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe ff36 	bl	800265a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	82fb      	strh	r3, [r7, #22]
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003806:	8afb      	ldrh	r3, [r7, #22]
 8003808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <put_lfn+0x6c>
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	61fa      	str	r2, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003820:	4a17      	ldr	r2, [pc, #92]	; (8003880 <put_lfn+0xcc>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4413      	add	r3, r2
 800382e:	8afa      	ldrh	r2, [r7, #22]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe ff11 	bl	800265a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003838:	8afb      	ldrh	r3, [r7, #22]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <put_lfn+0x90>
 800383e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003842:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	3301      	adds	r3, #1
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d9da      	bls.n	8003806 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003850:	8afb      	ldrh	r3, [r7, #22]
 8003852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003856:	4293      	cmp	r3, r2
 8003858:	d006      	beq.n	8003868 <put_lfn+0xb4>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <put_lfn+0xbc>
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	79fa      	ldrb	r2, [r7, #7]
 8003874:	701a      	strb	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	080063ec 	.word	0x080063ec

08003884 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	; 0x30
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003892:	220b      	movs	r2, #11
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7fe ff26 	bl	80026e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d92b      	bls.n	80038fa <gen_numname+0x76>
		sr = seq;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80038a6:	e022      	b.n	80038ee <gen_numname+0x6a>
			wc = *lfn++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80038b2:	2300      	movs	r3, #0
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b6:	e017      	b.n	80038e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005a      	lsls	r2, r3, #1
 80038bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80038c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <gen_numname+0x5e>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80038dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80038e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	3301      	adds	r3, #1
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	d9e4      	bls.n	80038b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1d8      	bne.n	80038a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80038fa:	2307      	movs	r3, #7
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3330      	adds	r3, #48	; 0x30
 800390a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800390e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003912:	2b39      	cmp	r3, #57	; 0x39
 8003914:	d904      	bls.n	8003920 <gen_numname+0x9c>
 8003916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800391a:	3307      	adds	r3, #7
 800391c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	62ba      	str	r2, [r7, #40]	; 0x28
 8003926:	3330      	adds	r3, #48	; 0x30
 8003928:	443b      	add	r3, r7
 800392a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800392e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1df      	bne.n	80038fe <gen_numname+0x7a>
	ns[i] = '~';
 800393e:	f107 0214 	add.w	r2, r7, #20
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	4413      	add	r3, r2
 8003946:	227e      	movs	r2, #126	; 0x7e
 8003948:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
 800394e:	e002      	b.n	8003956 <gen_numname+0xd2>
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	3301      	adds	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	429a      	cmp	r2, r3
 800395c:	d205      	bcs.n	800396a <gen_numname+0xe6>
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	4413      	add	r3, r2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b20      	cmp	r3, #32
 8003968:	d1f2      	bne.n	8003950 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	2b07      	cmp	r3, #7
 800396e:	d807      	bhi.n	8003980 <gen_numname+0xfc>
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	62ba      	str	r2, [r7, #40]	; 0x28
 8003976:	3330      	adds	r3, #48	; 0x30
 8003978:	443b      	add	r3, r7
 800397a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800397e:	e000      	b.n	8003982 <gen_numname+0xfe>
 8003980:	2120      	movs	r1, #32
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	627a      	str	r2, [r7, #36]	; 0x24
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	460a      	mov	r2, r1
 800398e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	2b07      	cmp	r3, #7
 8003994:	d9e9      	bls.n	800396a <gen_numname+0xe6>
}
 8003996:	bf00      	nop
 8003998:	bf00      	nop
 800399a:	3730      	adds	r7, #48	; 0x30
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80039ac:	230b      	movs	r3, #11
 80039ae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	01db      	lsls	r3, r3, #7
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	6079      	str	r1, [r7, #4]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ed      	bne.n	80039b0 <sum_sfn+0x10>
	return sum;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80039f0:	2100      	movs	r1, #0
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fc88 	bl	8003308 <dir_sdi>
 80039f8:	4603      	mov	r3, r0
 80039fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <dir_find+0x24>
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	e0a9      	b.n	8003b5a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003a06:	23ff      	movs	r3, #255	; 0xff
 8003a08:	753b      	strb	r3, [r7, #20]
 8003a0a:	7d3b      	ldrb	r3, [r7, #20]
 8003a0c:	757b      	strb	r3, [r7, #21]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6938      	ldr	r0, [r7, #16]
 8003a1e:	f7ff f891 	bl	8002b44 <move_window>
 8003a22:	4603      	mov	r3, r0
 8003a24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 8090 	bne.w	8003b4e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003a36:	7dbb      	ldrb	r3, [r7, #22]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <dir_find+0x60>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	75fb      	strb	r3, [r7, #23]
 8003a40:	e08a      	b.n	8003b58 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	330b      	adds	r3, #11
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003a56:	7dbb      	ldrb	r3, [r7, #22]
 8003a58:	2be5      	cmp	r3, #229	; 0xe5
 8003a5a:	d007      	beq.n	8003a6c <dir_find+0x8a>
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <dir_find+0x98>
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b0f      	cmp	r3, #15
 8003a6a:	d006      	beq.n	8003a7a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003a6c:	23ff      	movs	r3, #255	; 0xff
 8003a6e:	757b      	strb	r3, [r7, #21]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f04f 32ff 	mov.w	r2, #4294967295
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
 8003a78:	e05e      	b.n	8003b38 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d136      	bne.n	8003aee <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d154      	bne.n	8003b38 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003a8e:	7dbb      	ldrb	r3, [r7, #22]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	7b5b      	ldrb	r3, [r3, #13]
 8003a9e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003aa0:	7dbb      	ldrb	r3, [r7, #22]
 8003aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa6:	75bb      	strb	r3, [r7, #22]
 8003aa8:	7dbb      	ldrb	r3, [r7, #22]
 8003aaa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003ab4:	7dba      	ldrb	r2, [r7, #22]
 8003ab6:	7d7b      	ldrb	r3, [r7, #21]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d115      	bne.n	8003ae8 <dir_find+0x106>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	330d      	adds	r3, #13
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	7d3a      	ldrb	r2, [r7, #20]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d10e      	bne.n	8003ae8 <dir_find+0x106>
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f7ff fdfd 	bl	80036d4 <cmp_lfn>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <dir_find+0x106>
 8003ae0:	7d7b      	ldrb	r3, [r7, #21]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e000      	b.n	8003aea <dir_find+0x108>
 8003ae8:	23ff      	movs	r3, #255	; 0xff
 8003aea:	757b      	strb	r3, [r7, #21]
 8003aec:	e024      	b.n	8003b38 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003aee:	7d7b      	ldrb	r3, [r7, #21]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <dir_find+0x126>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff51 	bl	80039a0 <sum_sfn>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	7d3b      	ldrb	r3, [r7, #20]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d024      	beq.n	8003b52 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <dir_find+0x14a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a18      	ldr	r0, [r3, #32]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3324      	adds	r3, #36	; 0x24
 8003b1e:	220b      	movs	r2, #11
 8003b20:	4619      	mov	r1, r3
 8003b22:	f7fe fe1d 	bl	8002760 <mem_cmp>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d014      	beq.n	8003b56 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003b2c:	23ff      	movs	r3, #255	; 0xff
 8003b2e:	757b      	strb	r3, [r7, #21]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f04f 32ff 	mov.w	r2, #4294967295
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003b38:	2100      	movs	r1, #0
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fc6d 	bl	800341a <dir_next>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f43f af65 	beq.w	8003a16 <dir_find+0x34>
 8003b4c:	e004      	b.n	8003b58 <dir_find+0x176>
		if (res != FR_OK) break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003b56:	bf00      	nop

	return res;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003b78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <dir_register+0x20>
 8003b80:	2306      	movs	r3, #6
 8003b82:	e0e0      	b.n	8003d46 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	e002      	b.n	8003b90 <dir_register+0x2c>
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f4      	bne.n	8003b8a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	220c      	movs	r2, #12
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fd9b 	bl	80026e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d032      	beq.n	8003c22 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc8:	e016      	b.n	8003bf8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	f107 010c 	add.w	r1, r7, #12
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	f7ff fe53 	bl	8003884 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff feff 	bl	80039e2 <dir_find>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b63      	cmp	r3, #99	; 0x63
 8003bfc:	d9e5      	bls.n	8003bca <dir_register+0x66>
 8003bfe:	e000      	b.n	8003c02 <dir_register+0x9e>
			if (res != FR_OK) break;
 8003c00:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2b64      	cmp	r3, #100	; 0x64
 8003c06:	d101      	bne.n	8003c0c <dir_register+0xa8>
 8003c08:	2307      	movs	r3, #7
 8003c0a:	e09c      	b.n	8003d46 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d002      	beq.n	8003c1a <dir_register+0xb6>
 8003c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c18:	e095      	b.n	8003d46 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003c1a:	7dfa      	ldrb	r2, [r7, #23]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <dir_register+0xd8>
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	330c      	adds	r3, #12
 8003c30:	4a47      	ldr	r2, [pc, #284]	; (8003d50 <dir_register+0x1ec>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3301      	adds	r3, #1
 8003c3a:	e000      	b.n	8003c3e <dir_register+0xda>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003c40:	6a39      	ldr	r1, [r7, #32]
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fcbf 	bl	80035c6 <dir_alloc>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d148      	bne.n	8003ce8 <dir_register+0x184>
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d042      	beq.n	8003ce8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	015b      	lsls	r3, r3, #5
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fb4a 	bl	8003308 <dir_sdi>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d132      	bne.n	8003ce8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3324      	adds	r3, #36	; 0x24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fe8a 	bl	80039a0 <sum_sfn>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	4619      	mov	r1, r3
 8003c96:	69f8      	ldr	r0, [r7, #28]
 8003c98:	f7fe ff54 	bl	8002b44 <move_window>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8003ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d11d      	bne.n	8003ce6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	6918      	ldr	r0, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a19      	ldr	r1, [r3, #32]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	7efb      	ldrb	r3, [r7, #27]
 8003cb8:	f7ff fd7c 	bl	80037b4 <put_lfn>
				fs->wflag = 1;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fba8 	bl	800341a <dir_next>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8003cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d107      	bne.n	8003ce8 <dir_register+0x184>
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1d5      	bne.n	8003c90 <dir_register+0x12c>
 8003ce4:	e000      	b.n	8003ce8 <dir_register+0x184>
				if (res != FR_OK) break;
 8003ce6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d128      	bne.n	8003d42 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	69f8      	ldr	r0, [r7, #28]
 8003cf8:	f7fe ff24 	bl	8002b44 <move_window>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d11b      	bne.n	8003d42 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fd09 	bl	800272a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a18      	ldr	r0, [r3, #32]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	220b      	movs	r2, #11
 8003d22:	4619      	mov	r1, r3
 8003d24:	f7fe fce0 	bl	80026e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	330c      	adds	r3, #12
 8003d34:	f002 0218 	and.w	r2, r2, #24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3730      	adds	r7, #48	; 0x30
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	4ec4ec4f 	.word	0x4ec4ec4f

08003d54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	61ba      	str	r2, [r7, #24]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8003d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d84:	2b1f      	cmp	r3, #31
 8003d86:	d940      	bls.n	8003e0a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d8a:	2b2f      	cmp	r3, #47	; 0x2f
 8003d8c:	d006      	beq.n	8003d9c <create_name+0x48>
 8003d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d90:	2b5c      	cmp	r3, #92	; 0x5c
 8003d92:	d110      	bne.n	8003db6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003d94:	e002      	b.n	8003d9c <create_name+0x48>
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4413      	add	r3, r2
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b2f      	cmp	r3, #47	; 0x2f
 8003da6:	d0f6      	beq.n	8003d96 <create_name+0x42>
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b5c      	cmp	r3, #92	; 0x5c
 8003db2:	d0f0      	beq.n	8003d96 <create_name+0x42>
			break;
 8003db4:	e02a      	b.n	8003e0c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2bfe      	cmp	r3, #254	; 0xfe
 8003dba:	d901      	bls.n	8003dc0 <create_name+0x6c>
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	e17d      	b.n	80040bc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 fcb0 	bl	8005730 <ff_convert>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <create_name+0x8a>
 8003dda:	2306      	movs	r3, #6
 8003ddc:	e16e      	b.n	80040bc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de0:	2b7f      	cmp	r3, #127	; 0x7f
 8003de2:	d809      	bhi.n	8003df8 <create_name+0xa4>
 8003de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de6:	4619      	mov	r1, r3
 8003de8:	488d      	ldr	r0, [pc, #564]	; (8004020 <create_name+0x2cc>)
 8003dea:	f7fe fce0 	bl	80027ae <chk_chr>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <create_name+0xa4>
 8003df4:	2306      	movs	r3, #6
 8003df6:	e161      	b.n	80040bc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	617a      	str	r2, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003e08:	e7b4      	b.n	8003d74 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8003e0a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	441a      	add	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e18:	2b1f      	cmp	r3, #31
 8003e1a:	d801      	bhi.n	8003e20 <create_name+0xcc>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	e000      	b.n	8003e22 <create_name+0xce>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003e26:	e011      	b.n	8003e4c <create_name+0xf8>
		w = lfn[di - 1];
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8003e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d002      	beq.n	8003e46 <create_name+0xf2>
 8003e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e42:	2b2e      	cmp	r3, #46	; 0x2e
 8003e44:	d106      	bne.n	8003e54 <create_name+0x100>
		di--;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ea      	bne.n	8003e28 <create_name+0xd4>
 8003e52:	e000      	b.n	8003e56 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8003e54:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <create_name+0x118>
 8003e68:	2306      	movs	r3, #6
 8003e6a:	e127      	b.n	80040bc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3324      	adds	r3, #36	; 0x24
 8003e70:	220b      	movs	r2, #11
 8003e72:	2120      	movs	r1, #32
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe fc58 	bl	800272a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	e002      	b.n	8003e86 <create_name+0x132>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	3301      	adds	r3, #1
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d0f5      	beq.n	8003e80 <create_name+0x12c>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003ea0:	d0ee      	beq.n	8003e80 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <create_name+0x168>
 8003ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eac:	f043 0303 	orr.w	r3, r3, #3
 8003eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003eb4:	e002      	b.n	8003ebc <create_name+0x168>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <create_name+0x182>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ed4:	d1ef      	bne.n	8003eb6 <create_name+0x162>

	i = b = 0; ni = 8;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003edc:	2300      	movs	r3, #0
 8003ede:	623b      	str	r3, [r7, #32]
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	61ba      	str	r2, [r7, #24]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8090 	beq.w	800401c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d006      	beq.n	8003f10 <create_name+0x1bc>
 8003f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f04:	2b2e      	cmp	r3, #46	; 0x2e
 8003f06:	d10a      	bne.n	8003f1e <create_name+0x1ca>
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d006      	beq.n	8003f1e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8003f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f14:	f043 0303 	orr.w	r3, r3, #3
 8003f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f1c:	e07d      	b.n	800401a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d203      	bcs.n	8003f2e <create_name+0x1da>
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d123      	bne.n	8003f76 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b0b      	cmp	r3, #11
 8003f32:	d106      	bne.n	8003f42 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8003f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f38:	f043 0303 	orr.w	r3, r3, #3
 8003f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f40:	e075      	b.n	800402e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d005      	beq.n	8003f56 <create_name+0x202>
 8003f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f4e:	f043 0303 	orr.w	r3, r3, #3
 8003f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d866      	bhi.n	800402c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	2308      	movs	r3, #8
 8003f64:	623b      	str	r3, [r7, #32]
 8003f66:	230b      	movs	r3, #11
 8003f68:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8003f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f74:	e051      	b.n	800401a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f78:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7a:	d914      	bls.n	8003fa6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 fbd5 	bl	8005730 <ff_convert>
 8003f86:	4603      	mov	r3, r0
 8003f88:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <create_name+0x246>
 8003f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f92:	3b80      	subs	r3, #128	; 0x80
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <create_name+0x2d0>)
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f9e:	f043 0302 	orr.w	r3, r3, #2
 8003fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <create_name+0x268>
 8003fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fae:	4619      	mov	r1, r3
 8003fb0:	481d      	ldr	r0, [pc, #116]	; (8004028 <create_name+0x2d4>)
 8003fb2:	f7fe fbfc 	bl	80027ae <chk_chr>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003fbc:	235f      	movs	r3, #95	; 0x5f
 8003fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fc4:	f043 0303 	orr.w	r3, r3, #3
 8003fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fcc:	e01b      	b.n	8004006 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d909      	bls.n	8003fe8 <create_name+0x294>
 8003fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fd6:	2b5a      	cmp	r3, #90	; 0x5a
 8003fd8:	d806      	bhi.n	8003fe8 <create_name+0x294>
					b |= 2;
 8003fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003fe6:	e00e      	b.n	8004006 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fea:	2b60      	cmp	r3, #96	; 0x60
 8003fec:	d90b      	bls.n	8004006 <create_name+0x2b2>
 8003fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ff0:	2b7a      	cmp	r3, #122	; 0x7a
 8003ff2:	d808      	bhi.n	8004006 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8003ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004002:	3b20      	subs	r3, #32
 8004004:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	623a      	str	r2, [r7, #32]
 800400c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800400e:	b2d1      	uxtb	r1, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	460a      	mov	r2, r1
 8004016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800401a:	e763      	b.n	8003ee4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800401c:	bf00      	nop
 800401e:	e006      	b.n	800402e <create_name+0x2da>
 8004020:	080062e4 	.word	0x080062e4
 8004024:	0800636c 	.word	0x0800636c
 8004028:	080062f0 	.word	0x080062f0
			if (si > di) break;			/* No extension */
 800402c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004034:	2be5      	cmp	r3, #229	; 0xe5
 8004036:	d103      	bne.n	8004040 <create_name+0x2ec>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2205      	movs	r2, #5
 800403c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b08      	cmp	r3, #8
 8004044:	d104      	bne.n	8004050 <create_name+0x2fc>
 8004046:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b0c      	cmp	r3, #12
 800405a:	d005      	beq.n	8004068 <create_name+0x314>
 800405c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b03      	cmp	r3, #3
 8004066:	d105      	bne.n	8004074 <create_name+0x320>
 8004068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d117      	bne.n	80040b0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <create_name+0x344>
 800408c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004090:	f043 0310 	orr.w	r3, r3, #16
 8004094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d105      	bne.n	80040b0 <create_name+0x35c>
 80040a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a8:	f043 0308 	orr.w	r3, r3, #8
 80040ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80040b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80040ba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3728      	adds	r7, #40	; 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80040d8:	e002      	b.n	80040e0 <follow_path+0x1c>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b2f      	cmp	r3, #47	; 0x2f
 80040e6:	d0f8      	beq.n	80040da <follow_path+0x16>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b5c      	cmp	r3, #92	; 0x5c
 80040ee:	d0f4      	beq.n	80040da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b1f      	cmp	r3, #31
 80040fc:	d80a      	bhi.n	8004114 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2280      	movs	r2, #128	; 0x80
 8004102:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004106:	2100      	movs	r1, #0
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff f8fd 	bl	8003308 <dir_sdi>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]
 8004112:	e048      	b.n	80041a6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004114:	463b      	mov	r3, r7
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fe1b 	bl	8003d54 <create_name>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d139      	bne.n	800419c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fc5a 	bl	80039e2 <dir_find>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004138:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b04      	cmp	r3, #4
 8004144:	d12c      	bne.n	80041a0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004146:	7afb      	ldrb	r3, [r7, #11]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d127      	bne.n	80041a0 <follow_path+0xdc>
 8004150:	2305      	movs	r3, #5
 8004152:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004154:	e024      	b.n	80041a0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004156:	7afb      	ldrb	r3, [r7, #11]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d121      	bne.n	80041a4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	799b      	ldrb	r3, [r3, #6]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d102      	bne.n	8004172 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800416c:	2305      	movs	r3, #5
 800416e:	75fb      	strb	r3, [r7, #23]
 8004170:	e019      	b.n	80041a6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	8992      	ldrh	r2, [r2, #12]
 8004180:	fbb3 f0f2 	udiv	r0, r3, r2
 8004184:	fb00 f202 	mul.w	r2, r0, r2
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	440b      	add	r3, r1
 800418c:	4619      	mov	r1, r3
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff fa60 	bl	8003654 <ld_clust>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800419a:	e7bb      	b.n	8004114 <follow_path+0x50>
			if (res != FR_OK) break;
 800419c:	bf00      	nop
 800419e:	e002      	b.n	80041a6 <follow_path+0xe2>
				break;
 80041a0:	bf00      	nop
 80041a2:	e000      	b.n	80041a6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80041a4:	bf00      	nop
			}
		}
	}

	return res;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
 80041bc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d031      	beq.n	800422a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e002      	b.n	80041d4 <get_ldnumber+0x24>
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3301      	adds	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b1f      	cmp	r3, #31
 80041da:	d903      	bls.n	80041e4 <get_ldnumber+0x34>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b3a      	cmp	r3, #58	; 0x3a
 80041e2:	d1f4      	bne.n	80041ce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b3a      	cmp	r3, #58	; 0x3a
 80041ea:	d11c      	bne.n	8004226 <get_ldnumber+0x76>
			tp = *path;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	60fa      	str	r2, [r7, #12]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	3b30      	subs	r3, #48	; 0x30
 80041fc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b09      	cmp	r3, #9
 8004202:	d80e      	bhi.n	8004222 <get_ldnumber+0x72>
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	429a      	cmp	r2, r3
 800420a:	d10a      	bne.n	8004222 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <get_ldnumber+0x72>
					vol = (int)i;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	e002      	b.n	800422c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800422a:	693b      	ldr	r3, [r7, #16]
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	70da      	strb	r2, [r3, #3]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f04f 32ff 	mov.w	r2, #4294967295
 800424e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fe fc76 	bl	8002b44 <move_window>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <check_fs+0x2a>
 800425e:	2304      	movs	r3, #4
 8004260:	e038      	b.n	80042d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3338      	adds	r3, #56	; 0x38
 8004266:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe f9ba 	bl	80025e4 <ld_word>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <check_fs+0x48>
 800427c:	2303      	movs	r3, #3
 800427e:	e029      	b.n	80042d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004286:	2be9      	cmp	r3, #233	; 0xe9
 8004288:	d009      	beq.n	800429e <check_fs+0x66>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004290:	2beb      	cmp	r3, #235	; 0xeb
 8004292:	d11e      	bne.n	80042d2 <check_fs+0x9a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800429a:	2b90      	cmp	r3, #144	; 0x90
 800429c:	d119      	bne.n	80042d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3338      	adds	r3, #56	; 0x38
 80042a2:	3336      	adds	r3, #54	; 0x36
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe f9b5 	bl	8002614 <ld_dword>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <check_fs+0xa4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <check_fs+0x82>
 80042b6:	2300      	movs	r3, #0
 80042b8:	e00c      	b.n	80042d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3338      	adds	r3, #56	; 0x38
 80042be:	3352      	adds	r3, #82	; 0x52
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe f9a7 	bl	8002614 <ld_dword>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <check_fs+0xa8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <check_fs+0x9a>
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80042d2:	2302      	movs	r3, #2
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	00544146 	.word	0x00544146
 80042e0:	33544146 	.word	0x33544146

080042e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b096      	sub	sp, #88	; 0x58
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	4613      	mov	r3, r2
 80042f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff ff59 	bl	80041b0 <get_ldnumber>
 80042fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	da01      	bge.n	800430a <find_volume+0x26>
 8004306:	230b      	movs	r3, #11
 8004308:	e265      	b.n	80047d6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800430a:	4a9f      	ldr	r2, [pc, #636]	; (8004588 <find_volume+0x2a4>)
 800430c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <find_volume+0x3a>
 800431a:	230c      	movs	r3, #12
 800431c:	e25b      	b.n	80047d6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004322:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01a      	beq.n	800436a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe f8b5 	bl	80024a8 <disk_status>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10c      	bne.n	800436a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <find_volume+0x82>
 8004356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004362:	230a      	movs	r3, #10
 8004364:	e237      	b.n	80047d6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004366:	2300      	movs	r3, #0
 8004368:	e235      	b.n	80047d6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004372:	b2da      	uxtb	r2, r3
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe f8ad 	bl	80024dc <disk_initialize>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004394:	2303      	movs	r3, #3
 8004396:	e21e      	b.n	80047d6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <find_volume+0xca>
 800439e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80043aa:	230a      	movs	r3, #10
 80043ac:	e213      	b.n	80047d6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	7858      	ldrb	r0, [r3, #1]
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	330c      	adds	r3, #12
 80043b6:	461a      	mov	r2, r3
 80043b8:	2102      	movs	r1, #2
 80043ba:	f7fe f8f5 	bl	80025a8 <disk_ioctl>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <find_volume+0xe4>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e206      	b.n	80047d6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	899b      	ldrh	r3, [r3, #12]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d80d      	bhi.n	80043ee <find_volume+0x10a>
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	899b      	ldrh	r3, [r3, #12]
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043da:	d308      	bcc.n	80043ee <find_volume+0x10a>
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	899b      	ldrh	r3, [r3, #12]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	899b      	ldrh	r3, [r3, #12]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <find_volume+0x10e>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e1f1      	b.n	80047d6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80043f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043fa:	f7ff ff1d 	bl	8004238 <check_fs>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004408:	2b02      	cmp	r3, #2
 800440a:	d149      	bne.n	80044a0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800440c:	2300      	movs	r3, #0
 800440e:	643b      	str	r3, [r7, #64]	; 0x40
 8004410:	e01e      	b.n	8004450 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004420:	4413      	add	r3, r2
 8004422:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	3304      	adds	r3, #4
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <find_volume+0x158>
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	3308      	adds	r3, #8
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe f8ee 	bl	8002614 <ld_dword>
 8004438:	4602      	mov	r2, r0
 800443a:	e000      	b.n	800443e <find_volume+0x15a>
 800443c:	2200      	movs	r2, #0
 800443e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	3358      	adds	r3, #88	; 0x58
 8004444:	443b      	add	r3, r7
 8004446:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800444a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444c:	3301      	adds	r3, #1
 800444e:	643b      	str	r3, [r7, #64]	; 0x40
 8004450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004452:	2b03      	cmp	r3, #3
 8004454:	d9dd      	bls.n	8004412 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004456:	2300      	movs	r3, #0
 8004458:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800445a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <find_volume+0x182>
 8004460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004462:	3b01      	subs	r3, #1
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	3358      	adds	r3, #88	; 0x58
 800446c:	443b      	add	r3, r7
 800446e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <find_volume+0x1a2>
 800447a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800447c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800447e:	f7ff fedb 	bl	8004238 <check_fs>
 8004482:	4603      	mov	r3, r0
 8004484:	e000      	b.n	8004488 <find_volume+0x1a4>
 8004486:	2303      	movs	r3, #3
 8004488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800448c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004490:	2b01      	cmp	r3, #1
 8004492:	d905      	bls.n	80044a0 <find_volume+0x1bc>
 8004494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004496:	3301      	adds	r3, #1
 8004498:	643b      	str	r3, [r7, #64]	; 0x40
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	2b03      	cmp	r3, #3
 800449e:	d9e2      	bls.n	8004466 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80044a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d101      	bne.n	80044ac <find_volume+0x1c8>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e194      	b.n	80047d6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80044ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d901      	bls.n	80044b8 <find_volume+0x1d4>
 80044b4:	230d      	movs	r3, #13
 80044b6:	e18e      	b.n	80047d6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	3338      	adds	r3, #56	; 0x38
 80044bc:	330b      	adds	r3, #11
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe f890 	bl	80025e4 <ld_word>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	899b      	ldrh	r3, [r3, #12]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <find_volume+0x1f0>
 80044d0:	230d      	movs	r3, #13
 80044d2:	e180      	b.n	80047d6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	3338      	adds	r3, #56	; 0x38
 80044d8:	3316      	adds	r3, #22
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe f882 	bl	80025e4 <ld_word>
 80044e0:	4603      	mov	r3, r0
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80044e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <find_volume+0x214>
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	3338      	adds	r3, #56	; 0x38
 80044ee:	3324      	adds	r3, #36	; 0x24
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe f88f 	bl	8002614 <ld_dword>
 80044f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044fc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	789b      	ldrb	r3, [r3, #2]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d005      	beq.n	800451c <find_volume+0x238>
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	789b      	ldrb	r3, [r3, #2]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d001      	beq.n	800451c <find_volume+0x238>
 8004518:	230d      	movs	r3, #13
 800451a:	e15c      	b.n	80047d6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	789b      	ldrb	r3, [r3, #2]
 8004520:	461a      	mov	r2, r3
 8004522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004530:	b29a      	uxth	r2, r3
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	895b      	ldrh	r3, [r3, #10]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <find_volume+0x26c>
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	895b      	ldrh	r3, [r3, #10]
 8004542:	461a      	mov	r2, r3
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	895b      	ldrh	r3, [r3, #10]
 8004548:	3b01      	subs	r3, #1
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <find_volume+0x270>
 8004550:	230d      	movs	r3, #13
 8004552:	e140      	b.n	80047d6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	3338      	adds	r3, #56	; 0x38
 8004558:	3311      	adds	r3, #17
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe f842 	bl	80025e4 <ld_word>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	891b      	ldrh	r3, [r3, #8]
 800456c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800456e:	8992      	ldrh	r2, [r2, #12]
 8004570:	0952      	lsrs	r2, r2, #5
 8004572:	b292      	uxth	r2, r2
 8004574:	fbb3 f1f2 	udiv	r1, r3, r2
 8004578:	fb01 f202 	mul.w	r2, r1, r2
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <find_volume+0x2a8>
 8004584:	230d      	movs	r3, #13
 8004586:	e126      	b.n	80047d6 <find_volume+0x4f2>
 8004588:	20002118 	.word	0x20002118

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	3338      	adds	r3, #56	; 0x38
 8004590:	3313      	adds	r3, #19
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f826 	bl	80025e4 <ld_word>
 8004598:	4603      	mov	r3, r0
 800459a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800459c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <find_volume+0x2cc>
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	3338      	adds	r3, #56	; 0x38
 80045a6:	3320      	adds	r3, #32
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe f833 	bl	8002614 <ld_dword>
 80045ae:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	3338      	adds	r3, #56	; 0x38
 80045b4:	330e      	adds	r3, #14
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe f814 	bl	80025e4 <ld_word>
 80045bc:	4603      	mov	r3, r0
 80045be:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80045c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <find_volume+0x2e6>
 80045c6:	230d      	movs	r3, #13
 80045c8:	e105      	b.n	80047d6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80045ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80045cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ce:	4413      	add	r3, r2
 80045d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045d2:	8911      	ldrh	r1, [r2, #8]
 80045d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045d6:	8992      	ldrh	r2, [r2, #12]
 80045d8:	0952      	lsrs	r2, r2, #5
 80045da:	b292      	uxth	r2, r2
 80045dc:	fbb1 f2f2 	udiv	r2, r1, r2
 80045e0:	b292      	uxth	r2, r2
 80045e2:	4413      	add	r3, r2
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80045e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d201      	bcs.n	80045f2 <find_volume+0x30e>
 80045ee:	230d      	movs	r3, #13
 80045f0:	e0f1      	b.n	80047d6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80045f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045fa:	8952      	ldrh	r2, [r2, #10]
 80045fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <find_volume+0x328>
 8004608:	230d      	movs	r3, #13
 800460a:	e0e4      	b.n	80047d6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800460c:	2303      	movs	r3, #3
 800460e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004618:	4293      	cmp	r3, r2
 800461a:	d802      	bhi.n	8004622 <find_volume+0x33e>
 800461c:	2302      	movs	r3, #2
 800461e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004628:	4293      	cmp	r3, r2
 800462a:	d802      	bhi.n	8004632 <find_volume+0x34e>
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800463e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004640:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004644:	441a      	add	r2, r3
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800464a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	441a      	add	r2, r3
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004658:	2b03      	cmp	r3, #3
 800465a:	d11e      	bne.n	800469a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	3338      	adds	r3, #56	; 0x38
 8004660:	332a      	adds	r3, #42	; 0x2a
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd ffbe 	bl	80025e4 <ld_word>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <find_volume+0x38e>
 800466e:	230d      	movs	r3, #13
 8004670:	e0b1      	b.n	80047d6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	891b      	ldrh	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <find_volume+0x39a>
 800467a:	230d      	movs	r3, #13
 800467c:	e0ab      	b.n	80047d6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	3338      	adds	r3, #56	; 0x38
 8004682:	332c      	adds	r3, #44	; 0x2c
 8004684:	4618      	mov	r0, r3
 8004686:	f7fd ffc5 	bl	8002614 <ld_dword>
 800468a:	4602      	mov	r2, r0
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	647b      	str	r3, [r7, #68]	; 0x44
 8004698:	e01f      	b.n	80046da <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	891b      	ldrh	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <find_volume+0x3c2>
 80046a2:	230d      	movs	r3, #13
 80046a4:	e097      	b.n	80047d6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ac:	441a      	add	r2, r3
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80046b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d103      	bne.n	80046c2 <find_volume+0x3de>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	e00a      	b.n	80046d8 <find_volume+0x3f4>
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	4613      	mov	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	085a      	lsrs	r2, r3, #1
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	899b      	ldrh	r3, [r3, #12]
 80046e2:	4619      	mov	r1, r3
 80046e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e6:	440b      	add	r3, r1
 80046e8:	3b01      	subs	r3, #1
 80046ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046ec:	8989      	ldrh	r1, [r1, #12]
 80046ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d201      	bcs.n	80046fa <find_volume+0x416>
 80046f6:	230d      	movs	r3, #13
 80046f8:	e06d      	b.n	80047d6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004700:	619a      	str	r2, [r3, #24]
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004714:	2b03      	cmp	r3, #3
 8004716:	d149      	bne.n	80047ac <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	3338      	adds	r3, #56	; 0x38
 800471c:	3330      	adds	r3, #48	; 0x30
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd ff60 	bl	80025e4 <ld_word>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d140      	bne.n	80047ac <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800472a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472c:	3301      	adds	r3, #1
 800472e:	4619      	mov	r1, r3
 8004730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004732:	f7fe fa07 	bl	8002b44 <move_window>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d137      	bne.n	80047ac <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	2200      	movs	r2, #0
 8004740:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	3338      	adds	r3, #56	; 0x38
 8004746:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd ff4a 	bl	80025e4 <ld_word>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004758:	429a      	cmp	r2, r3
 800475a:	d127      	bne.n	80047ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	3338      	adds	r3, #56	; 0x38
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd ff57 	bl	8002614 <ld_dword>
 8004766:	4603      	mov	r3, r0
 8004768:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <find_volume+0x4fc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d11e      	bne.n	80047ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	3338      	adds	r3, #56	; 0x38
 8004772:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd ff4c 	bl	8002614 <ld_dword>
 800477c:	4603      	mov	r3, r0
 800477e:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <find_volume+0x500>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d113      	bne.n	80047ac <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	3338      	adds	r3, #56	; 0x38
 8004788:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800478c:	4618      	mov	r0, r3
 800478e:	f7fd ff41 	bl	8002614 <ld_dword>
 8004792:	4602      	mov	r2, r0
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	3338      	adds	r3, #56	; 0x38
 800479c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd ff37 	bl	8002614 <ld_dword>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80047b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <find_volume+0x504>)
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <find_volume+0x504>)
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <find_volume+0x504>)
 80047c2:	881a      	ldrh	r2, [r3, #0]
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <find_volume+0x508>)
 80047cc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80047ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047d0:	f7fe f950 	bl	8002a74 <clear_lock>
#endif
	return FR_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3758      	adds	r7, #88	; 0x58
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	41615252 	.word	0x41615252
 80047e4:	61417272 	.word	0x61417272
 80047e8:	2000211c 	.word	0x2000211c
 80047ec:	20002140 	.word	0x20002140

080047f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80047fa:	2309      	movs	r3, #9
 80047fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01c      	beq.n	800483e <validate+0x4e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d018      	beq.n	800483e <validate+0x4e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <validate+0x4e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	889a      	ldrh	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	88db      	ldrh	r3, [r3, #6]
 8004820:	429a      	cmp	r2, r3
 8004822:	d10c      	bne.n	800483e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd fe3c 	bl	80024a8 <disk_status>
 8004830:	4603      	mov	r3, r0
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <validate+0x4e>
			res = FR_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <validate+0x5a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	e000      	b.n	800484c <validate+0x5c>
 800484a:	2300      	movs	r3, #0
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	6013      	str	r3, [r2, #0]
	return res;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fc9c 	bl	80041b0 <get_ldnumber>
 8004878:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	da01      	bge.n	8004884 <f_mount+0x28>
 8004880:	230b      	movs	r3, #11
 8004882:	e02b      	b.n	80048dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004884:	4a17      	ldr	r2, [pc, #92]	; (80048e4 <f_mount+0x88>)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004894:	69b8      	ldr	r0, [r7, #24]
 8004896:	f7fe f8ed 	bl	8002a74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	490d      	ldr	r1, [pc, #52]	; (80048e4 <f_mount+0x88>)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <f_mount+0x66>
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <f_mount+0x6a>
 80048c2:	2300      	movs	r3, #0
 80048c4:	e00a      	b.n	80048dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80048c6:	f107 010c 	add.w	r1, r7, #12
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	2200      	movs	r2, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fd07 	bl	80042e4 <find_volume>
 80048d6:	4603      	mov	r3, r0
 80048d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20002118 	.word	0x20002118

080048e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b09a      	sub	sp, #104	; 0x68
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <f_open+0x18>
 80048fc:	2309      	movs	r3, #9
 80048fe:	e1bb      	b.n	8004c78 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004906:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004908:	79fa      	ldrb	r2, [r7, #7]
 800490a:	f107 0114 	add.w	r1, r7, #20
 800490e:	f107 0308 	add.w	r3, r7, #8
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fce6 	bl	80042e4 <find_volume>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800491e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 819f 	bne.w	8004c66 <f_open+0x37e>
		dj.obj.fs = fs;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	f107 0318 	add.w	r3, r7, #24
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fbc5 	bl	80040c4 <follow_path>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11a      	bne.n	800497e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004948:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800494c:	b25b      	sxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	da03      	bge.n	800495a <f_open+0x72>
				res = FR_INVALID_NAME;
 8004952:	2306      	movs	r3, #6
 8004954:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004958:	e011      	b.n	800497e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	f107 0318 	add.w	r3, r7, #24
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd ff36 	bl	80027e4 <chk_lock>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	f003 031c 	and.w	r3, r3, #28
 8004984:	2b00      	cmp	r3, #0
 8004986:	d07f      	beq.n	8004a88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800498c:	2b00      	cmp	r3, #0
 800498e:	d017      	beq.n	80049c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004994:	2b04      	cmp	r3, #4
 8004996:	d10e      	bne.n	80049b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004998:	f7fd ff80 	bl	800289c <enq_lock>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <f_open+0xc8>
 80049a2:	f107 0318 	add.w	r3, r7, #24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f8dc 	bl	8003b64 <dir_register>
 80049ac:	4603      	mov	r3, r0
 80049ae:	e000      	b.n	80049b2 <f_open+0xca>
 80049b0:	2312      	movs	r3, #18
 80049b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	71fb      	strb	r3, [r7, #7]
 80049be:	e010      	b.n	80049e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80049c0:	7fbb      	ldrb	r3, [r7, #30]
 80049c2:	f003 0311 	and.w	r3, r3, #17
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <f_open+0xea>
					res = FR_DENIED;
 80049ca:	2307      	movs	r3, #7
 80049cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80049d0:	e007      	b.n	80049e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <f_open+0xfa>
 80049dc:	2308      	movs	r3, #8
 80049de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80049e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d168      	bne.n	8004abc <f_open+0x1d4>
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d063      	beq.n	8004abc <f_open+0x1d4>
				dw = GET_FATTIME();
 80049f4:	f7fd fcf6 	bl	80023e4 <get_fattime>
 80049f8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	330e      	adds	r3, #14
 80049fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd fe45 	bl	8002690 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	3316      	adds	r3, #22
 8004a0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fd fe3f 	bl	8002690 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	330b      	adds	r3, #11
 8004a16:	2220      	movs	r2, #32
 8004a18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe fe17 	bl	8003654 <ld_clust>
 8004a26:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fe2f 	bl	8003692 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	331c      	adds	r3, #28
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fd fe28 	bl	8002690 <st_dword>
					fs->wflag = 1;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2201      	movs	r2, #1
 8004a44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d037      	beq.n	8004abc <f_open+0x1d4>
						dw = fs->winsect;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a50:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8004a52:	f107 0318 	add.w	r3, r7, #24
 8004a56:	2200      	movs	r2, #0
 8004a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fb1f 	bl	800309e <remove_chain>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8004a66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d126      	bne.n	8004abc <f_open+0x1d4>
							res = move_window(fs, dw);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe f866 	bl	8002b44 <move_window>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a82:	3a01      	subs	r2, #1
 8004a84:	615a      	str	r2, [r3, #20]
 8004a86:	e019      	b.n	8004abc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004a88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d115      	bne.n	8004abc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004a90:	7fbb      	ldrb	r3, [r7, #30]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004aa0:	e00c      	b.n	8004abc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <f_open+0x1d4>
 8004aac:	7fbb      	ldrb	r3, [r7, #30]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <f_open+0x1d4>
						res = FR_DENIED;
 8004ab6:	2307      	movs	r3, #7
 8004ab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8004abc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d128      	bne.n	8004b16 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf14      	ite	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	2300      	moveq	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	f107 0318 	add.w	r3, r7, #24
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd feef 	bl	80028e0 <inc_lock>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <f_open+0x22e>
 8004b10:	2302      	movs	r3, #2
 8004b12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004b16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80a3 	bne.w	8004c66 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe fd94 	bl	8003654 <ld_clust>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	331c      	adds	r3, #28
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd fd6c 	bl	8002614 <ld_dword>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	88da      	ldrh	r2, [r3, #6]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	79fa      	ldrb	r2, [r7, #7]
 8004b5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3330      	adds	r3, #48	; 0x30
 8004b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd fdd6 	bl	800272a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d06e      	beq.n	8004c66 <f_open+0x37e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d06a      	beq.n	8004c66 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	895b      	ldrh	r3, [r3, #10]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	899b      	ldrh	r3, [r3, #12]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb4:	e016      	b.n	8004be4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe f87f 	bl	8002cbe <get_fat>
 8004bc0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8004bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d802      	bhi.n	8004bce <f_open+0x2e6>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d102      	bne.n	8004bdc <f_open+0x2f4>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004be4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <f_open+0x30c>
 8004bec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d8e0      	bhi.n	8004bb6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bf8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004bfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d131      	bne.n	8004c66 <f_open+0x37e>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	899b      	ldrh	r3, [r3, #12]
 8004c06:	461a      	mov	r2, r3
 8004c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c0e:	fb01 f202 	mul.w	r2, r1, r2
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d026      	beq.n	8004c66 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe f82f 	bl	8002c80 <clust2sect>
 8004c22:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <f_open+0x34a>
						res = FR_INT_ERR;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004c30:	e019      	b.n	8004c66 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	899b      	ldrh	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c40:	441a      	add	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	7858      	ldrb	r0, [r3, #1]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	2301      	movs	r3, #1
 8004c56:	f7fd fc67 	bl	8002528 <disk_read>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <f_open+0x37e>
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004c66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <f_open+0x38c>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004c74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3768      	adds	r7, #104	; 0x68
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08c      	sub	sp, #48	; 0x30
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f107 0210 	add.w	r2, r7, #16
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fda5 	bl	80047f0 <validate>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <f_write+0x44>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	7d5b      	ldrb	r3, [r3, #21]
 8004cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <f_write+0x4a>
 8004cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cc8:	e16a      	b.n	8004fa0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	7d1b      	ldrb	r3, [r3, #20]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <f_write+0x5a>
 8004cd6:	2307      	movs	r3, #7
 8004cd8:	e162      	b.n	8004fa0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	441a      	add	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	f080 814c 	bcs.w	8004f84 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004cf4:	e146      	b.n	8004f84 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	8992      	ldrh	r2, [r2, #12]
 8004cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d02:	fb01 f202 	mul.w	r2, r1, r2
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 80f1 	bne.w	8004ef0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	8992      	ldrh	r2, [r2, #12]
 8004d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	8952      	ldrh	r2, [r2, #10]
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d143      	bne.n	8004db2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10c      	bne.n	8004d4c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d11a      	bne.n	8004d74 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fa10 	bl	8003168 <create_chain>
 8004d48:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d4a:	e013      	b.n	8004d74 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7fe fa9c 	bl	8003298 <clmt_clust>
 8004d60:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d62:	e007      	b.n	8004d74 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7fe f9fb 	bl	8003168 <create_chain>
 8004d72:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8109 	beq.w	8004f8e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d104      	bne.n	8004d8c <f_write+0x10c>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2202      	movs	r2, #2
 8004d86:	755a      	strb	r2, [r3, #21]
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e109      	b.n	8004fa0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d104      	bne.n	8004d9e <f_write+0x11e>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	755a      	strb	r2, [r3, #21]
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e100      	b.n	8004fa0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <f_write+0x132>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	7d1b      	ldrb	r3, [r3, #20]
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	da18      	bge.n	8004dee <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	7858      	ldrb	r0, [r3, #1]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f7fd fbcc 	bl	8002568 <disk_write>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <f_write+0x160>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	755a      	strb	r2, [r3, #21]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0df      	b.n	8004fa0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	7d1b      	ldrb	r3, [r3, #20]
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f7fd ff42 	bl	8002c80 <clust2sect>
 8004dfc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <f_write+0x18e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	755a      	strb	r2, [r3, #21]
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e0c8      	b.n	8004fa0 <f_write+0x320>
			sect += csect;
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	4413      	add	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	899b      	ldrh	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e22:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d043      	beq.n	8004eb2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	4413      	add	r3, r2
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	8952      	ldrh	r2, [r2, #10]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d905      	bls.n	8004e44 <f_write+0x1c4>
					cc = fs->csize - csect;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	895b      	ldrh	r3, [r3, #10]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	7858      	ldrb	r0, [r3, #1]
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	69f9      	ldr	r1, [r7, #28]
 8004e4e:	f7fd fb8b 	bl	8002568 <disk_write>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <f_write+0x1e2>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	755a      	strb	r2, [r3, #21]
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e09e      	b.n	8004fa0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1a      	ldr	r2, [r3, #32]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	6a3a      	ldr	r2, [r7, #32]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d918      	bls.n	8004ea2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a1a      	ldr	r2, [r3, #32]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	8992      	ldrh	r2, [r2, #12]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	18d1      	adds	r1, r2, r3
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	899b      	ldrh	r3, [r3, #12]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f7fd fc2a 	bl	80026e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	7d1b      	ldrb	r3, [r3, #20]
 8004e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	899b      	ldrh	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004eb0:	e04b      	b.n	8004f4a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d016      	beq.n	8004eea <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d210      	bcs.n	8004eea <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	7858      	ldrb	r0, [r3, #1]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	f7fd fb27 	bl	8002528 <disk_read>
 8004eda:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	755a      	strb	r2, [r3, #21]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e05a      	b.n	8004fa0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	899b      	ldrh	r3, [r3, #12]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	8992      	ldrh	r2, [r2, #12]
 8004efe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f02:	fb01 f202 	mul.w	r2, r1, r2
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	1ac3      	subs	r3, r0, r3
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d901      	bls.n	8004f18 <f_write+0x298>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	8992      	ldrh	r2, [r2, #12]
 8004f26:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f2a:	fb00 f202 	mul.w	r2, r0, r2
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	440b      	add	r3, r1
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	69f9      	ldr	r1, [r7, #28]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fd fbd6 	bl	80026e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	7d1b      	ldrb	r3, [r3, #20]
 8004f40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	4413      	add	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	619a      	str	r2, [r3, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	bf38      	it	cc
 8004f6a:	461a      	movcc	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	441a      	add	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f47f aeb5 	bne.w	8004cf6 <f_write+0x76>
 8004f8c:	e000      	b.n	8004f90 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004f8e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	7d1b      	ldrb	r3, [r3, #20]
 8004f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	; 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f107 0208 	add.w	r2, r7, #8
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fc19 	bl	80047f0 <validate>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d168      	bne.n	800509a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7d1b      	ldrb	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d062      	beq.n	800509a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7d1b      	ldrb	r3, [r3, #20]
 8004fd8:	b25b      	sxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da15      	bge.n	800500a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	7858      	ldrb	r0, [r3, #1]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	2301      	movs	r3, #1
 8004fee:	f7fd fabb 	bl	8002568 <disk_write>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <f_sync+0x54>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e04f      	b.n	800509c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	7d1b      	ldrb	r3, [r3, #20]
 8005000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005004:	b2da      	uxtb	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800500a:	f7fd f9eb 	bl	80023e4 <get_fattime>
 800500e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f7fd fd93 	bl	8002b44 <move_window>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005022:	7dfb      	ldrb	r3, [r7, #23]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d138      	bne.n	800509a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	330b      	adds	r3, #11
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	330b      	adds	r3, #11
 8005038:	f042 0220 	orr.w	r2, r2, #32
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	461a      	mov	r2, r3
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	f7fe fb21 	bl	8003692 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f103 021c 	add.w	r2, r3, #28
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f7fd fb17 	bl	8002690 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3316      	adds	r3, #22
 8005066:	6939      	ldr	r1, [r7, #16]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fd fb11 	bl	8002690 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3312      	adds	r3, #18
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f7fd faf0 	bl	800265a <st_word>
					fs->wflag = 1;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2201      	movs	r2, #1
 800507e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd fd8c 	bl	8002ba0 <sync_fs>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7d1b      	ldrb	r3, [r3, #20]
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	b2da      	uxtb	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ff7b 	bl	8004fa8 <f_sync>
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d118      	bne.n	80050ee <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f107 0208 	add.w	r2, r7, #8
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fb93 	bl	80047f0 <validate>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10c      	bne.n	80050ee <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fd fc8f 	bl	80029fc <dec_lock>
 80050de:	4603      	mov	r3, r0
 80050e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b090      	sub	sp, #64	; 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f107 0208 	add.w	r2, r7, #8
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fb70 	bl	80047f0 <validate>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005116:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <f_lseek+0x2e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7d5b      	ldrb	r3, [r3, #21]
 8005122:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005126:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <f_lseek+0x3c>
 800512e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005132:	e201      	b.n	8005538 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80d9 	beq.w	80052f0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d15a      	bne.n	80051fc <f_lseek+0x104>
			tbl = fp->cltbl;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	1d1a      	adds	r2, r3, #4
 8005150:	627a      	str	r2, [r7, #36]	; 0x24
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	2302      	movs	r3, #2
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03a      	beq.n	80051dc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	2300      	movs	r3, #0
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	3302      	adds	r3, #2
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	3301      	adds	r3, #1
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd fd9b 	bl	8002cbe <get_fat>
 8005188:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	2b01      	cmp	r3, #1
 800518e:	d804      	bhi.n	800519a <f_lseek+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	755a      	strb	r2, [r3, #21]
 8005196:	2302      	movs	r3, #2
 8005198:	e1ce      	b.n	8005538 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d104      	bne.n	80051ac <f_lseek+0xb4>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	755a      	strb	r2, [r3, #21]
 80051a8:	2301      	movs	r3, #1
 80051aa:	e1c5      	b.n	8005538 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3301      	adds	r3, #1
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d0de      	beq.n	8005174 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80051b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d809      	bhi.n	80051d2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	627a      	str	r2, [r7, #36]	; 0x24
 80051c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	627a      	str	r2, [r7, #36]	; 0x24
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d8:	429a      	cmp	r2, r3
 80051da:	d3c4      	bcc.n	8005166 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d803      	bhi.n	80051f4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e19f      	b.n	8005534 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80051f4:	2311      	movs	r3, #17
 80051f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80051fa:	e19b      	b.n	8005534 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d902      	bls.n	800520c <f_lseek+0x114>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 818d 	beq.w	8005534 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fe f839 	bl	8003298 <clmt_clust>
 8005226:	4602      	mov	r2, r0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7fd fd23 	bl	8002c80 <clust2sect>
 800523a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <f_lseek+0x154>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	755a      	strb	r2, [r3, #21]
 8005248:	2302      	movs	r3, #2
 800524a:	e175      	b.n	8005538 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	3b01      	subs	r3, #1
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	8992      	ldrh	r2, [r2, #12]
 8005254:	fbb3 f3f2 	udiv	r3, r3, r2
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	8952      	ldrh	r2, [r2, #10]
 800525c:	3a01      	subs	r2, #1
 800525e:	4013      	ands	r3, r2
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4413      	add	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	8992      	ldrh	r2, [r2, #12]
 800526e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005272:	fb01 f202 	mul.w	r2, r1, r2
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 815b 	beq.w	8005534 <f_lseek+0x43c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	f000 8155 	beq.w	8005534 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7d1b      	ldrb	r3, [r3, #20]
 800528e:	b25b      	sxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	da18      	bge.n	80052c6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	7858      	ldrb	r0, [r3, #1]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1a      	ldr	r2, [r3, #32]
 80052a2:	2301      	movs	r3, #1
 80052a4:	f7fd f960 	bl	8002568 <disk_write>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <f_lseek+0x1c0>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	755a      	strb	r2, [r3, #21]
 80052b4:	2301      	movs	r3, #1
 80052b6:	e13f      	b.n	8005538 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	7d1b      	ldrb	r3, [r3, #20]
 80052bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	7858      	ldrb	r0, [r3, #1]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80052d0:	2301      	movs	r3, #1
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	f7fd f928 	bl	8002528 <disk_read>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <f_lseek+0x1f0>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	755a      	strb	r2, [r3, #21]
 80052e4:	2301      	movs	r3, #1
 80052e6:	e127      	b.n	8005538 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	621a      	str	r2, [r3, #32]
 80052ee:	e121      	b.n	8005534 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d908      	bls.n	800530c <f_lseek+0x214>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7d1b      	ldrb	r3, [r3, #20]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800531a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80b5 	beq.w	800548e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	895b      	ldrh	r3, [r3, #10]
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	899b      	ldrh	r3, [r3, #12]
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01b      	beq.n	8005372 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	1e59      	subs	r1, r3, #1
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800534e:	429a      	cmp	r2, r3
 8005350:	d30f      	bcc.n	8005372 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	1e5a      	subs	r2, r3, #1
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	425b      	negs	r3, r3
 800535a:	401a      	ands	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005370:	e022      	b.n	80053b8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	2b00      	cmp	r3, #0
 800537c:	d119      	bne.n	80053b2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f7fd fef0 	bl	8003168 <create_chain>
 8005388:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b01      	cmp	r3, #1
 800538e:	d104      	bne.n	800539a <f_lseek+0x2a2>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	755a      	strb	r2, [r3, #21]
 8005396:	2302      	movs	r3, #2
 8005398:	e0ce      	b.n	8005538 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d104      	bne.n	80053ac <f_lseek+0x2b4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	755a      	strb	r2, [r3, #21]
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0c5      	b.n	8005538 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d067      	beq.n	800548e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80053be:	e03a      	b.n	8005436 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	441a      	add	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	7d1b      	ldrb	r3, [r3, #20]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fd febf 	bl	8003168 <create_chain>
 80053ea:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d108      	bne.n	8005404 <f_lseek+0x30c>
							ofs = 0; break;
 80053f2:	2300      	movs	r3, #0
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	e022      	b.n	800543e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fd fc5e 	bl	8002cbe <get_fat>
 8005402:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d104      	bne.n	8005416 <f_lseek+0x31e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	755a      	strb	r2, [r3, #21]
 8005412:	2301      	movs	r3, #1
 8005414:	e090      	b.n	8005538 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	2b01      	cmp	r3, #1
 800541a:	d904      	bls.n	8005426 <f_lseek+0x32e>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005422:	429a      	cmp	r2, r3
 8005424:	d304      	bcc.n	8005430 <f_lseek+0x338>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	755a      	strb	r2, [r3, #21]
 800542c:	2302      	movs	r3, #2
 800542e:	e083      	b.n	8005538 <f_lseek+0x440>
					fp->clust = clst;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005434:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	429a      	cmp	r2, r3
 800543c:	d8c0      	bhi.n	80053c0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	899b      	ldrh	r3, [r3, #12]
 800544e:	461a      	mov	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	fbb3 f1f2 	udiv	r1, r3, r2
 8005456:	fb01 f202 	mul.w	r2, r1, r2
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d016      	beq.n	800548e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005464:	4618      	mov	r0, r3
 8005466:	f7fd fc0b 	bl	8002c80 <clust2sect>
 800546a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <f_lseek+0x384>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	755a      	strb	r2, [r3, #21]
 8005478:	2302      	movs	r3, #2
 800547a:	e05d      	b.n	8005538 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	899b      	ldrh	r3, [r3, #12]
 8005480:	461a      	mov	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	fbb3 f3f2 	udiv	r3, r3, r2
 8005488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548a:	4413      	add	r3, r2
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	429a      	cmp	r2, r3
 8005498:	d90a      	bls.n	80054b0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	7d1b      	ldrb	r3, [r3, #20]
 80054a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	8992      	ldrh	r2, [r2, #12]
 80054b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054bc:	fb01 f202 	mul.w	r2, r1, r2
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d036      	beq.n	8005534 <f_lseek+0x43c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d031      	beq.n	8005534 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	7d1b      	ldrb	r3, [r3, #20]
 80054d4:	b25b      	sxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da18      	bge.n	800550c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	7858      	ldrb	r0, [r3, #1]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	2301      	movs	r3, #1
 80054ea:	f7fd f83d 	bl	8002568 <disk_write>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <f_lseek+0x406>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	755a      	strb	r2, [r3, #21]
 80054fa:	2301      	movs	r3, #1
 80054fc:	e01c      	b.n	8005538 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7d1b      	ldrb	r3, [r3, #20]
 8005502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005506:	b2da      	uxtb	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	7858      	ldrb	r0, [r3, #1]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005516:	2301      	movs	r3, #1
 8005518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551a:	f7fd f805 	bl	8002528 <disk_read>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <f_lseek+0x436>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	755a      	strb	r2, [r3, #21]
 800552a:	2301      	movs	r3, #1
 800552c:	e004      	b.n	8005538 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005532:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8005534:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005538:	4618      	mov	r0, r3
 800553a:	3740      	adds	r7, #64	; 0x40
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	2b0a      	cmp	r3, #10
 8005550:	d103      	bne.n	800555a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005552:	210d      	movs	r1, #13
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff fff3 	bl	8005540 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	db25      	blt.n	80055b2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4413      	add	r3, r2
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b3c      	cmp	r3, #60	; 0x3c
 8005578:	dd12      	ble.n	80055a0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 010c 	add.w	r1, r3, #12
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	f107 0308 	add.w	r3, r7, #8
 800558a:	f7ff fb79 	bl	8004c80 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	429a      	cmp	r2, r3
 8005594:	d101      	bne.n	800559a <putc_bfd+0x5a>
 8005596:	2300      	movs	r3, #0
 8005598:	e001      	b.n	800559e <putc_bfd+0x5e>
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	e000      	b.n	80055b4 <putc_bfd+0x74>
	if (i < 0) return;
 80055b2:	bf00      	nop
}
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	db16      	blt.n	80055f8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f103 010c 	add.w	r1, r3, #12
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	461a      	mov	r2, r3
 80055da:	f107 030c 	add.w	r3, r7, #12
 80055de:	f7ff fb4f 	bl	8004c80 <f_write>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d102      	bne.n	80055f8 <putc_flush+0x3e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	e001      	b.n	80055fc <putc_flush+0x42>
	return EOF;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b096      	sub	sp, #88	; 0x58
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ffe0 	bl	8005604 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005644:	e009      	b.n	800565a <f_puts+0x2c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	f107 030c 	add.w	r3, r7, #12
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ff73 	bl	8005540 <putc_bfd>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f1      	bne.n	8005646 <f_puts+0x18>
	return putc_flush(&pb);
 8005662:	f107 030c 	add.w	r3, r7, #12
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ffa7 	bl	80055ba <putc_flush>
 800566c:	4603      	mov	r3, r0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3758      	adds	r7, #88	; 0x58
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800568e:	4b1f      	ldr	r3, [pc, #124]	; (800570c <FATFS_LinkDriverEx+0x94>)
 8005690:	7a5b      	ldrb	r3, [r3, #9]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d131      	bne.n	80056fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005698:	4b1c      	ldr	r3, [pc, #112]	; (800570c <FATFS_LinkDriverEx+0x94>)
 800569a:	7a5b      	ldrb	r3, [r3, #9]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <FATFS_LinkDriverEx+0x94>)
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80056a6:	4b19      	ldr	r3, [pc, #100]	; (800570c <FATFS_LinkDriverEx+0x94>)
 80056a8:	7a5b      	ldrb	r3, [r3, #9]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	4a17      	ldr	r2, [pc, #92]	; (800570c <FATFS_LinkDriverEx+0x94>)
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <FATFS_LinkDriverEx+0x94>)
 80056b8:	7a5b      	ldrb	r3, [r3, #9]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	4b13      	ldr	r3, [pc, #76]	; (800570c <FATFS_LinkDriverEx+0x94>)
 80056c0:	4413      	add	r3, r2
 80056c2:	79fa      	ldrb	r2, [r7, #7]
 80056c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <FATFS_LinkDriverEx+0x94>)
 80056c8:	7a5b      	ldrb	r3, [r3, #9]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	b2d1      	uxtb	r1, r2
 80056d0:	4a0e      	ldr	r2, [pc, #56]	; (800570c <FATFS_LinkDriverEx+0x94>)
 80056d2:	7251      	strb	r1, [r2, #9]
 80056d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80056d6:	7dbb      	ldrb	r3, [r7, #22]
 80056d8:	3330      	adds	r3, #48	; 0x30
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	3301      	adds	r3, #1
 80056e4:	223a      	movs	r2, #58	; 0x3a
 80056e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3302      	adds	r3, #2
 80056ec:	222f      	movs	r2, #47	; 0x2f
 80056ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3303      	adds	r3, #3
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20002340 	.word	0x20002340

08005710 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800571a:	2200      	movs	r2, #0
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff ffaa 	bl	8005678 <FATFS_LinkDriverEx>
 8005724:	4603      	mov	r3, r0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	6039      	str	r1, [r7, #0]
 800573a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	2b7f      	cmp	r3, #127	; 0x7f
 8005740:	d802      	bhi.n	8005748 <ff_convert+0x18>
		c = chr;
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	81fb      	strh	r3, [r7, #14]
 8005746:	e025      	b.n	8005794 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2bff      	cmp	r3, #255	; 0xff
 8005752:	d805      	bhi.n	8005760 <ff_convert+0x30>
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	3b80      	subs	r3, #128	; 0x80
 8005758:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <ff_convert+0x74>)
 800575a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575e:	e000      	b.n	8005762 <ff_convert+0x32>
 8005760:	2300      	movs	r3, #0
 8005762:	81fb      	strh	r3, [r7, #14]
 8005764:	e016      	b.n	8005794 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005766:	2300      	movs	r3, #0
 8005768:	81fb      	strh	r3, [r7, #14]
 800576a:	e009      	b.n	8005780 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	4a0d      	ldr	r2, [pc, #52]	; (80057a4 <ff_convert+0x74>)
 8005770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	429a      	cmp	r2, r3
 8005778:	d006      	beq.n	8005788 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	3301      	adds	r3, #1
 800577e:	81fb      	strh	r3, [r7, #14]
 8005780:	89fb      	ldrh	r3, [r7, #14]
 8005782:	2b7f      	cmp	r3, #127	; 0x7f
 8005784:	d9f2      	bls.n	800576c <ff_convert+0x3c>
 8005786:	e000      	b.n	800578a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005788:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800578a:	89fb      	ldrh	r3, [r7, #14]
 800578c:	3380      	adds	r3, #128	; 0x80
 800578e:	b29b      	uxth	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005794:	89fb      	ldrh	r3, [r7, #14]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	080063fc 	.word	0x080063fc

080057a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b8:	d201      	bcs.n	80057be <ff_wtoupper+0x16>
 80057ba:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <ff_wtoupper+0x10c>)
 80057bc:	e000      	b.n	80057c0 <ff_wtoupper+0x18>
 80057be:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <ff_wtoupper+0x110>)
 80057c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	1c9a      	adds	r2, r3, #2
 80057c6:	617a      	str	r2, [r7, #20]
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80057cc:	8a7b      	ldrh	r3, [r7, #18]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d068      	beq.n	80058a4 <ff_wtoupper+0xfc>
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	8a7b      	ldrh	r3, [r7, #18]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d364      	bcc.n	80058a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	1c9a      	adds	r2, r3, #2
 80057de:	617a      	str	r2, [r7, #20]
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	823b      	strh	r3, [r7, #16]
 80057e4:	8a3b      	ldrh	r3, [r7, #16]
 80057e6:	0a1b      	lsrs	r3, r3, #8
 80057e8:	81fb      	strh	r3, [r7, #14]
 80057ea:	8a3b      	ldrh	r3, [r7, #16]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	8a79      	ldrh	r1, [r7, #18]
 80057f4:	8a3b      	ldrh	r3, [r7, #16]
 80057f6:	440b      	add	r3, r1
 80057f8:	429a      	cmp	r2, r3
 80057fa:	da49      	bge.n	8005890 <ff_wtoupper+0xe8>
			switch (cmd) {
 80057fc:	89fb      	ldrh	r3, [r7, #14]
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d84f      	bhi.n	80058a2 <ff_wtoupper+0xfa>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <ff_wtoupper+0x60>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800582d 	.word	0x0800582d
 800580c:	0800583f 	.word	0x0800583f
 8005810:	08005855 	.word	0x08005855
 8005814:	0800585d 	.word	0x0800585d
 8005818:	08005865 	.word	0x08005865
 800581c:	0800586d 	.word	0x0800586d
 8005820:	08005875 	.word	0x08005875
 8005824:	0800587d 	.word	0x0800587d
 8005828:	08005885 	.word	0x08005885
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	8a7b      	ldrh	r3, [r7, #18]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	80fb      	strh	r3, [r7, #6]
 800583c:	e027      	b.n	800588e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800583e:	88fa      	ldrh	r2, [r7, #6]
 8005840:	8a7b      	ldrh	r3, [r7, #18]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	b29b      	uxth	r3, r3
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	b29b      	uxth	r3, r3
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	80fb      	strh	r3, [r7, #6]
 8005852:	e01c      	b.n	800588e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	3b10      	subs	r3, #16
 8005858:	80fb      	strh	r3, [r7, #6]
 800585a:	e018      	b.n	800588e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	3b20      	subs	r3, #32
 8005860:	80fb      	strh	r3, [r7, #6]
 8005862:	e014      	b.n	800588e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	3b30      	subs	r3, #48	; 0x30
 8005868:	80fb      	strh	r3, [r7, #6]
 800586a:	e010      	b.n	800588e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	3b1a      	subs	r3, #26
 8005870:	80fb      	strh	r3, [r7, #6]
 8005872:	e00c      	b.n	800588e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	3308      	adds	r3, #8
 8005878:	80fb      	strh	r3, [r7, #6]
 800587a:	e008      	b.n	800588e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	3b50      	subs	r3, #80	; 0x50
 8005880:	80fb      	strh	r3, [r7, #6]
 8005882:	e004      	b.n	800588e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800588a:	80fb      	strh	r3, [r7, #6]
 800588c:	bf00      	nop
			}
			break;
 800588e:	e008      	b.n	80058a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005890:	89fb      	ldrh	r3, [r7, #14]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d195      	bne.n	80057c2 <ff_wtoupper+0x1a>
 8005896:	8a3b      	ldrh	r3, [r7, #16]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80058a0:	e78f      	b.n	80057c2 <ff_wtoupper+0x1a>
			break;
 80058a2:	bf00      	nop
	}

	return chr;
 80058a4:	88fb      	ldrh	r3, [r7, #6]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	080064fc 	.word	0x080064fc
 80058b8:	080066f0 	.word	0x080066f0

080058bc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80058c0:	2200      	movs	r2, #0
 80058c2:	2110      	movs	r1, #16
 80058c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058c8:	f7fb f928 	bl	8000b1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80058cc:	2001      	movs	r0, #1
 80058ce:	f7fa fea9 	bl	8000624 <HAL_Delay>
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80058da:	2201      	movs	r2, #1
 80058dc:	2110      	movs	r1, #16
 80058de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058e2:	f7fb f91b 	bl	8000b1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80058e6:	2001      	movs	r0, #1
 80058e8:	f7fa fe9c 	bl	8000624 <HAL_Delay>
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80058fa:	bf00      	nop
 80058fc:	4b08      	ldr	r3, [pc, #32]	; (8005920 <SPI_TxByte+0x30>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d1f8      	bne.n	80058fc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800590a:	1df9      	adds	r1, r7, #7
 800590c:	2364      	movs	r3, #100	; 0x64
 800590e:	2201      	movs	r2, #1
 8005910:	4803      	ldr	r0, [pc, #12]	; (8005920 <SPI_TxByte+0x30>)
 8005912:	f7fc f870 	bl	80019f6 <HAL_SPI_Transmit>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200020a8 	.word	0x200020a8

08005924 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005930:	bf00      	nop
 8005932:	4b08      	ldr	r3, [pc, #32]	; (8005954 <SPI_TxBuffer+0x30>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b02      	cmp	r3, #2
 800593e:	d1f8      	bne.n	8005932 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005940:	887a      	ldrh	r2, [r7, #2]
 8005942:	2364      	movs	r3, #100	; 0x64
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4803      	ldr	r0, [pc, #12]	; (8005954 <SPI_TxBuffer+0x30>)
 8005948:	f7fc f855 	bl	80019f6 <HAL_SPI_Transmit>
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	200020a8 	.word	0x200020a8

08005958 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800595e:	23ff      	movs	r3, #255	; 0xff
 8005960:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005962:	bf00      	nop
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <SPI_RxByte+0x34>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d1f8      	bne.n	8005964 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005972:	1dba      	adds	r2, r7, #6
 8005974:	1df9      	adds	r1, r7, #7
 8005976:	2364      	movs	r3, #100	; 0x64
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	4803      	ldr	r0, [pc, #12]	; (800598c <SPI_RxByte+0x34>)
 800597e:	f7fc f9a8 	bl	8001cd2 <HAL_SPI_TransmitReceive>

	return data;
 8005982:	79bb      	ldrb	r3, [r7, #6]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	200020a8 	.word	0x200020a8

08005990 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8005998:	f7ff ffde 	bl	8005958 <SPI_RxByte>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	701a      	strb	r2, [r3, #0]
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80059b2:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <SD_ReadyWait+0x30>)
 80059b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80059b8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80059ba:	f7ff ffcd 	bl	8005958 <SPI_RxByte>
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	2bff      	cmp	r3, #255	; 0xff
 80059c6:	d003      	beq.n	80059d0 <SD_ReadyWait+0x24>
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <SD_ReadyWait+0x30>)
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f4      	bne.n	80059ba <SD_ReadyWait+0xe>

	return res;
 80059d0:	79fb      	ldrb	r3, [r7, #7]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	2000234e 	.word	0x2000234e

080059e0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80059e6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80059ea:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80059ec:	f7ff ff73 	bl	80058d6 <DESELECT>
	for(int i = 0; i < 10; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	e005      	b.n	8005a02 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80059f6:	20ff      	movs	r0, #255	; 0xff
 80059f8:	f7ff ff7a 	bl	80058f0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b09      	cmp	r3, #9
 8005a06:	ddf6      	ble.n	80059f6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8005a08:	f7ff ff58 	bl	80058bc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8005a20:	2395      	movs	r3, #149	; 0x95
 8005a22:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8005a24:	463b      	mov	r3, r7
 8005a26:	2106      	movs	r1, #6
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff7b 	bl	8005924 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8005a2e:	e002      	b.n	8005a36 <SD_PowerOn+0x56>
	{
		cnt--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8005a36:	f7ff ff8f 	bl	8005958 <SPI_RxByte>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d002      	beq.n	8005a46 <SD_PowerOn+0x66>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f4      	bne.n	8005a30 <SD_PowerOn+0x50>
	}

	DESELECT();
 8005a46:	f7ff ff46 	bl	80058d6 <DESELECT>
	SPI_TxByte(0XFF);
 8005a4a:	20ff      	movs	r0, #255	; 0xff
 8005a4c:	f7ff ff50 	bl	80058f0 <SPI_TxByte>

	PowerFlag = 1;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <SD_PowerOn+0x80>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20002351 	.word	0x20002351

08005a64 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <SD_PowerOff+0x14>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
}
 8005a6e:	bf00      	nop
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20002351 	.word	0x20002351

08005a7c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8005a80:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <SD_CheckPower+0x14>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20002351 	.word	0x20002351

08005a94 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <SD_RxDataBlock+0x58>)
 8005aa0:	22c8      	movs	r2, #200	; 0xc8
 8005aa2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8005aa4:	f7ff ff58 	bl	8005958 <SPI_RxByte>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2bff      	cmp	r3, #255	; 0xff
 8005ab0:	d103      	bne.n	8005aba <SD_RxDataBlock+0x26>
 8005ab2:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <SD_RxDataBlock+0x58>)
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f4      	bne.n	8005aa4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2bfe      	cmp	r3, #254	; 0xfe
 8005abe:	d001      	beq.n	8005ac4 <SD_RxDataBlock+0x30>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e00f      	b.n	8005ae4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ff60 	bl	8005990 <SPI_RxBytePtr>
	} while(len--);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	603a      	str	r2, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f4      	bne.n	8005ac4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8005ada:	f7ff ff3d 	bl	8005958 <SPI_RxByte>
	SPI_RxByte();
 8005ade:	f7ff ff3b 	bl	8005958 <SPI_RxByte>

	return TRUE;
 8005ae2:	2301      	movs	r3, #1
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	2000234c 	.word	0x2000234c

08005af0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8005b00:	f7ff ff54 	bl	80059ac <SD_ReadyWait>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2bff      	cmp	r3, #255	; 0xff
 8005b08:	d001      	beq.n	8005b0e <SD_TxDataBlock+0x1e>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e02f      	b.n	8005b6e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff feed 	bl	80058f0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	2bfd      	cmp	r3, #253	; 0xfd
 8005b1a:	d020      	beq.n	8005b5e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8005b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff feff 	bl	8005924 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8005b26:	f7ff ff17 	bl	8005958 <SPI_RxByte>
		SPI_RxByte();
 8005b2a:	f7ff ff15 	bl	8005958 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8005b2e:	e00b      	b.n	8005b48 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8005b30:	f7ff ff12 	bl	8005958 <SPI_RxByte>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d006      	beq.n	8005b50 <SD_TxDataBlock+0x60>
			i++;
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	3301      	adds	r3, #1
 8005b46:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d9f0      	bls.n	8005b30 <SD_TxDataBlock+0x40>
 8005b4e:	e000      	b.n	8005b52 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8005b50:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8005b52:	bf00      	nop
 8005b54:	f7ff ff00 	bl	8005958 <SPI_RxByte>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0fa      	beq.n	8005b54 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	d101      	bne.n	8005b6c <SD_TxDataBlock+0x7c>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <SD_TxDataBlock+0x7e>

	return FALSE;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	6039      	str	r1, [r7, #0]
 8005b80:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8005b82:	f7ff ff13 	bl	80059ac <SD_ReadyWait>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2bff      	cmp	r3, #255	; 0xff
 8005b8a:	d001      	beq.n	8005b90 <SD_SendCmd+0x1a>
 8005b8c:	23ff      	movs	r3, #255	; 0xff
 8005b8e:	e042      	b.n	8005c16 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff feac 	bl	80058f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	0e1b      	lsrs	r3, r3, #24
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fea6 	bl	80058f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fea0 	bl	80058f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff fe9a 	bl	80058f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fe95 	bl	80058f0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d102      	bne.n	8005bd2 <SD_SendCmd+0x5c>
 8005bcc:	2395      	movs	r3, #149	; 0x95
 8005bce:	73fb      	strb	r3, [r7, #15]
 8005bd0:	e007      	b.n	8005be2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	2b48      	cmp	r3, #72	; 0x48
 8005bd6:	d102      	bne.n	8005bde <SD_SendCmd+0x68>
 8005bd8:	2387      	movs	r3, #135	; 0x87
 8005bda:	73fb      	strb	r3, [r7, #15]
 8005bdc:	e001      	b.n	8005be2 <SD_SendCmd+0x6c>
	else crc = 1;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fe83 	bl	80058f0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b4c      	cmp	r3, #76	; 0x4c
 8005bee:	d101      	bne.n	8005bf4 <SD_SendCmd+0x7e>
 8005bf0:	f7ff feb2 	bl	8005958 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8005bf8:	f7ff feae 	bl	8005958 <SPI_RxByte>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8005c00:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	da05      	bge.n	8005c14 <SD_SendCmd+0x9e>
 8005c08:	7bbb      	ldrb	r3, [r7, #14]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	73bb      	strb	r3, [r7, #14]
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f1      	bne.n	8005bf8 <SD_SendCmd+0x82>

	return res;
 8005c14:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <SD_disk_initialize+0x14>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0d1      	b.n	8005dd8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8005c34:	4b6a      	ldr	r3, [pc, #424]	; (8005de0 <SD_disk_initialize+0x1c0>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <SD_disk_initialize+0x2a>
 8005c42:	4b67      	ldr	r3, [pc, #412]	; (8005de0 <SD_disk_initialize+0x1c0>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e0c6      	b.n	8005dd8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8005c4a:	f7ff fec9 	bl	80059e0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8005c4e:	f7ff fe35 	bl	80058bc <SELECT>

	/* check disk type */
	type = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8005c56:	2100      	movs	r1, #0
 8005c58:	2040      	movs	r0, #64	; 0x40
 8005c5a:	f7ff ff8c 	bl	8005b76 <SD_SendCmd>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 80a1 	bne.w	8005da8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8005c66:	4b5f      	ldr	r3, [pc, #380]	; (8005de4 <SD_disk_initialize+0x1c4>)
 8005c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c6c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005c6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c72:	2048      	movs	r0, #72	; 0x48
 8005c74:	f7ff ff7f 	bl	8005b76 <SD_SendCmd>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d155      	bne.n	8005d2a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
 8005c82:	e00c      	b.n	8005c9e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8005c84:	7bfc      	ldrb	r4, [r7, #15]
 8005c86:	f7ff fe67 	bl	8005958 <SPI_RxByte>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f104 0310 	add.w	r3, r4, #16
 8005c92:	443b      	add	r3, r7
 8005c94:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d9ef      	bls.n	8005c84 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005ca4:	7abb      	ldrb	r3, [r7, #10]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d17e      	bne.n	8005da8 <SD_disk_initialize+0x188>
 8005caa:	7afb      	ldrb	r3, [r7, #11]
 8005cac:	2baa      	cmp	r3, #170	; 0xaa
 8005cae:	d17b      	bne.n	8005da8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	2077      	movs	r0, #119	; 0x77
 8005cb4:	f7ff ff5f 	bl	8005b76 <SD_SendCmd>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d807      	bhi.n	8005cce <SD_disk_initialize+0xae>
 8005cbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005cc2:	2069      	movs	r0, #105	; 0x69
 8005cc4:	f7ff ff57 	bl	8005b76 <SD_SendCmd>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8005cce:	4b45      	ldr	r3, [pc, #276]	; (8005de4 <SD_disk_initialize+0x1c4>)
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1ec      	bne.n	8005cb0 <SD_disk_initialize+0x90>
 8005cd6:	e000      	b.n	8005cda <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005cd8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005cda:	4b42      	ldr	r3, [pc, #264]	; (8005de4 <SD_disk_initialize+0x1c4>)
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d062      	beq.n	8005da8 <SD_disk_initialize+0x188>
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	207a      	movs	r0, #122	; 0x7a
 8005ce6:	f7ff ff46 	bl	8005b76 <SD_SendCmd>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d15b      	bne.n	8005da8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	e00c      	b.n	8005d10 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8005cf6:	7bfc      	ldrb	r4, [r7, #15]
 8005cf8:	f7ff fe2e 	bl	8005958 <SPI_RxByte>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f104 0310 	add.w	r3, r4, #16
 8005d04:	443b      	add	r3, r7
 8005d06:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d9ef      	bls.n	8005cf6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005d16:	7a3b      	ldrb	r3, [r7, #8]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <SD_disk_initialize+0x104>
 8005d20:	230c      	movs	r3, #12
 8005d22:	e000      	b.n	8005d26 <SD_disk_initialize+0x106>
 8005d24:	2304      	movs	r3, #4
 8005d26:	73bb      	strb	r3, [r7, #14]
 8005d28:	e03e      	b.n	8005da8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	2077      	movs	r0, #119	; 0x77
 8005d2e:	f7ff ff22 	bl	8005b76 <SD_SendCmd>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d808      	bhi.n	8005d4a <SD_disk_initialize+0x12a>
 8005d38:	2100      	movs	r1, #0
 8005d3a:	2069      	movs	r0, #105	; 0x69
 8005d3c:	f7ff ff1b 	bl	8005b76 <SD_SendCmd>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d801      	bhi.n	8005d4a <SD_disk_initialize+0x12a>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e000      	b.n	8005d4c <SD_disk_initialize+0x12c>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d10e      	bne.n	8005d72 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005d54:	2100      	movs	r1, #0
 8005d56:	2077      	movs	r0, #119	; 0x77
 8005d58:	f7ff ff0d 	bl	8005b76 <SD_SendCmd>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d80e      	bhi.n	8005d80 <SD_disk_initialize+0x160>
 8005d62:	2100      	movs	r1, #0
 8005d64:	2069      	movs	r0, #105	; 0x69
 8005d66:	f7ff ff06 	bl	8005b76 <SD_SendCmd>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d107      	bne.n	8005d80 <SD_disk_initialize+0x160>
 8005d70:	e00c      	b.n	8005d8c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005d72:	2100      	movs	r1, #0
 8005d74:	2041      	movs	r0, #65	; 0x41
 8005d76:	f7ff fefe 	bl	8005b76 <SD_SendCmd>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <SD_disk_initialize+0x1c4>)
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e2      	bne.n	8005d4e <SD_disk_initialize+0x12e>
 8005d88:	e000      	b.n	8005d8c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005d8a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005d8c:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <SD_disk_initialize+0x1c4>)
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <SD_disk_initialize+0x184>
 8005d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d98:	2050      	movs	r0, #80	; 0x50
 8005d9a:	f7ff feec 	bl	8005b76 <SD_SendCmd>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <SD_disk_initialize+0x188>
 8005da4:	2300      	movs	r3, #0
 8005da6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8005da8:	4a0f      	ldr	r2, [pc, #60]	; (8005de8 <SD_disk_initialize+0x1c8>)
 8005daa:	7bbb      	ldrb	r3, [r7, #14]
 8005dac:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8005dae:	f7ff fd92 	bl	80058d6 <DESELECT>
	SPI_RxByte();
 8005db2:	f7ff fdd1 	bl	8005958 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <SD_disk_initialize+0x1c0>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f023 0301 	bic.w	r3, r3, #1
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <SD_disk_initialize+0x1c0>)
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e001      	b.n	8005dd2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8005dce:	f7ff fe49 	bl	8005a64 <SD_PowerOff>
	}

	return Stat;
 8005dd2:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <SD_disk_initialize+0x1c0>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b2db      	uxtb	r3, r3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd90      	pop	{r4, r7, pc}
 8005de0:	20000020 	.word	0x20000020
 8005de4:	2000234c 	.word	0x2000234c
 8005de8:	20002350 	.word	0x20002350

08005dec <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <SD_disk_status+0x14>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e002      	b.n	8005e06 <SD_disk_status+0x1a>
	return Stat;
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <SD_disk_status+0x28>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000020 	.word	0x20000020

08005e18 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <SD_disk_read+0x1c>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <SD_disk_read+0x20>
 8005e34:	2304      	movs	r3, #4
 8005e36:	e051      	b.n	8005edc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005e38:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <SD_disk_read+0xcc>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <SD_disk_read+0x32>
 8005e46:	2303      	movs	r3, #3
 8005e48:	e048      	b.n	8005edc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <SD_disk_read+0xd0>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <SD_disk_read+0x44>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	025b      	lsls	r3, r3, #9
 8005e5a:	607b      	str	r3, [r7, #4]

	SELECT();
 8005e5c:	f7ff fd2e 	bl	80058bc <SELECT>

	if (count == 1)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d111      	bne.n	8005e8a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	2051      	movs	r0, #81	; 0x51
 8005e6a:	f7ff fe84 	bl	8005b76 <SD_SendCmd>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d129      	bne.n	8005ec8 <SD_disk_read+0xb0>
 8005e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e78:	68b8      	ldr	r0, [r7, #8]
 8005e7a:	f7ff fe0b 	bl	8005a94 <SD_RxDataBlock>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d021      	beq.n	8005ec8 <SD_disk_read+0xb0>
 8005e84:	2300      	movs	r3, #0
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	e01e      	b.n	8005ec8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	2052      	movs	r0, #82	; 0x52
 8005e8e:	f7ff fe72 	bl	8005b76 <SD_SendCmd>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d117      	bne.n	8005ec8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8005e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e9c:	68b8      	ldr	r0, [r7, #8]
 8005e9e:	f7ff fdf9 	bl	8005a94 <SD_RxDataBlock>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <SD_disk_read+0xa6>
				buff += 512;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005eae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1ed      	bne.n	8005e98 <SD_disk_read+0x80>
 8005ebc:	e000      	b.n	8005ec0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8005ebe:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	204c      	movs	r0, #76	; 0x4c
 8005ec4:	f7ff fe57 	bl	8005b76 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8005ec8:	f7ff fd05 	bl	80058d6 <DESELECT>
	SPI_RxByte();
 8005ecc:	f7ff fd44 	bl	8005958 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bf14      	ite	ne
 8005ed6:	2301      	movne	r3, #1
 8005ed8:	2300      	moveq	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000020 	.word	0x20000020
 8005ee8:	20002350 	.word	0x20002350

08005eec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <SD_disk_write+0x1c>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <SD_disk_write+0x20>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	e06b      	b.n	8005fe4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f0c:	4b37      	ldr	r3, [pc, #220]	; (8005fec <SD_disk_write+0x100>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <SD_disk_write+0x32>
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e062      	b.n	8005fe4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8005f1e:	4b33      	ldr	r3, [pc, #204]	; (8005fec <SD_disk_write+0x100>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <SD_disk_write+0x44>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e059      	b.n	8005fe4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005f30:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <SD_disk_write+0x104>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <SD_disk_write+0x56>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	025b      	lsls	r3, r3, #9
 8005f40:	607b      	str	r3, [r7, #4]

	SELECT();
 8005f42:	f7ff fcbb 	bl	80058bc <SELECT>

	if (count == 1)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d110      	bne.n	8005f6e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	2058      	movs	r0, #88	; 0x58
 8005f50:	f7ff fe11 	bl	8005b76 <SD_SendCmd>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d13a      	bne.n	8005fd0 <SD_disk_write+0xe4>
 8005f5a:	21fe      	movs	r1, #254	; 0xfe
 8005f5c:	68b8      	ldr	r0, [r7, #8]
 8005f5e:	f7ff fdc7 	bl	8005af0 <SD_TxDataBlock>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d033      	beq.n	8005fd0 <SD_disk_write+0xe4>
			count = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	e030      	b.n	8005fd0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <SD_disk_write+0x104>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	2077      	movs	r0, #119	; 0x77
 8005f7e:	f7ff fdfa 	bl	8005b76 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	2057      	movs	r0, #87	; 0x57
 8005f86:	f7ff fdf6 	bl	8005b76 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	2059      	movs	r0, #89	; 0x59
 8005f8e:	f7ff fdf2 	bl	8005b76 <SD_SendCmd>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11b      	bne.n	8005fd0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005f98:	21fc      	movs	r1, #252	; 0xfc
 8005f9a:	68b8      	ldr	r0, [r7, #8]
 8005f9c:	f7ff fda8 	bl	8005af0 <SD_TxDataBlock>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <SD_disk_write+0xd0>
				buff += 512;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005fac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1ee      	bne.n	8005f98 <SD_disk_write+0xac>
 8005fba:	e000      	b.n	8005fbe <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005fbc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8005fbe:	21fd      	movs	r1, #253	; 0xfd
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f7ff fd95 	bl	8005af0 <SD_TxDataBlock>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <SD_disk_write+0xe4>
			{
				count = 1;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8005fd0:	f7ff fc81 	bl	80058d6 <DESELECT>
	SPI_RxByte();
 8005fd4:	f7ff fcc0 	bl	8005958 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bf14      	ite	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	2300      	moveq	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000020 	.word	0x20000020
 8005ff0:	20002350 	.word	0x20002350

08005ff4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b08b      	sub	sp, #44	; 0x2c
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	603a      	str	r2, [r7, #0]
 8005ffe:	71fb      	strb	r3, [r7, #7]
 8006000:	460b      	mov	r3, r1
 8006002:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <SD_disk_ioctl+0x1e>
 800600e:	2304      	movs	r3, #4
 8006010:	e115      	b.n	800623e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8006018:	79bb      	ldrb	r3, [r7, #6]
 800601a:	2b05      	cmp	r3, #5
 800601c:	d124      	bne.n	8006068 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d012      	beq.n	800604c <SD_disk_ioctl+0x58>
 8006026:	2b02      	cmp	r3, #2
 8006028:	dc1a      	bgt.n	8006060 <SD_disk_ioctl+0x6c>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <SD_disk_ioctl+0x40>
 800602e:	2b01      	cmp	r3, #1
 8006030:	d006      	beq.n	8006040 <SD_disk_ioctl+0x4c>
 8006032:	e015      	b.n	8006060 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8006034:	f7ff fd16 	bl	8005a64 <SD_PowerOff>
			res = RES_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800603e:	e0fc      	b.n	800623a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8006040:	f7ff fcce 	bl	80059e0 <SD_PowerOn>
			res = RES_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800604a:	e0f6      	b.n	800623a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	1c5c      	adds	r4, r3, #1
 8006050:	f7ff fd14 	bl	8005a7c <SD_CheckPower>
 8006054:	4603      	mov	r3, r0
 8006056:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800605e:	e0ec      	b.n	800623a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006066:	e0e8      	b.n	800623a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006068:	4b77      	ldr	r3, [pc, #476]	; (8006248 <SD_disk_ioctl+0x254>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <SD_disk_ioctl+0x86>
 8006076:	2303      	movs	r3, #3
 8006078:	e0e1      	b.n	800623e <SD_disk_ioctl+0x24a>

		SELECT();
 800607a:	f7ff fc1f 	bl	80058bc <SELECT>

		switch (ctrl)
 800607e:	79bb      	ldrb	r3, [r7, #6]
 8006080:	2b0d      	cmp	r3, #13
 8006082:	f200 80cb 	bhi.w	800621c <SD_disk_ioctl+0x228>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <SD_disk_ioctl+0x98>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	08006187 	.word	0x08006187
 8006090:	080060c5 	.word	0x080060c5
 8006094:	08006177 	.word	0x08006177
 8006098:	0800621d 	.word	0x0800621d
 800609c:	0800621d 	.word	0x0800621d
 80060a0:	0800621d 	.word	0x0800621d
 80060a4:	0800621d 	.word	0x0800621d
 80060a8:	0800621d 	.word	0x0800621d
 80060ac:	0800621d 	.word	0x0800621d
 80060b0:	0800621d 	.word	0x0800621d
 80060b4:	0800621d 	.word	0x0800621d
 80060b8:	08006199 	.word	0x08006199
 80060bc:	080061bd 	.word	0x080061bd
 80060c0:	080061e1 	.word	0x080061e1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80060c4:	2100      	movs	r1, #0
 80060c6:	2049      	movs	r0, #73	; 0x49
 80060c8:	f7ff fd55 	bl	8005b76 <SD_SendCmd>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 80a8 	bne.w	8006224 <SD_disk_ioctl+0x230>
 80060d4:	f107 030c 	add.w	r3, r7, #12
 80060d8:	2110      	movs	r1, #16
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fcda 	bl	8005a94 <SD_RxDataBlock>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 809e 	beq.w	8006224 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80060e8:	7b3b      	ldrb	r3, [r7, #12]
 80060ea:	099b      	lsrs	r3, r3, #6
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10e      	bne.n	8006110 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80060f2:	7d7b      	ldrb	r3, [r7, #21]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	7d3b      	ldrb	r3, [r7, #20]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4413      	add	r3, r2
 8006100:	b29b      	uxth	r3, r3
 8006102:	3301      	adds	r3, #1
 8006104:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8006106:	8bfb      	ldrh	r3, [r7, #30]
 8006108:	029a      	lsls	r2, r3, #10
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e02e      	b.n	800616e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006110:	7c7b      	ldrb	r3, [r7, #17]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	b2da      	uxtb	r2, r3
 8006118:	7dbb      	ldrb	r3, [r7, #22]
 800611a:	09db      	lsrs	r3, r3, #7
 800611c:	b2db      	uxtb	r3, r3
 800611e:	4413      	add	r3, r2
 8006120:	b2da      	uxtb	r2, r3
 8006122:	7d7b      	ldrb	r3, [r7, #21]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 0306 	and.w	r3, r3, #6
 800612c:	b2db      	uxtb	r3, r3
 800612e:	4413      	add	r3, r2
 8006130:	b2db      	uxtb	r3, r3
 8006132:	3302      	adds	r3, #2
 8006134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006138:	7d3b      	ldrb	r3, [r7, #20]
 800613a:	099b      	lsrs	r3, r3, #6
 800613c:	b2db      	uxtb	r3, r3
 800613e:	b29a      	uxth	r2, r3
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	b29b      	uxth	r3, r3
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	b29b      	uxth	r3, r3
 8006148:	4413      	add	r3, r2
 800614a:	b29a      	uxth	r2, r3
 800614c:	7cbb      	ldrb	r3, [r7, #18]
 800614e:	029b      	lsls	r3, r3, #10
 8006150:	b29b      	uxth	r3, r3
 8006152:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006156:	b29b      	uxth	r3, r3
 8006158:	4413      	add	r3, r2
 800615a:	b29b      	uxth	r3, r3
 800615c:	3301      	adds	r3, #1
 800615e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8006160:	8bfa      	ldrh	r2, [r7, #30]
 8006162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006166:	3b09      	subs	r3, #9
 8006168:	409a      	lsls	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8006174:	e056      	b.n	8006224 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006184:	e055      	b.n	8006232 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8006186:	f7ff fc11 	bl	80059ac <SD_ReadyWait>
 800618a:	4603      	mov	r3, r0
 800618c:	2bff      	cmp	r3, #255	; 0xff
 800618e:	d14b      	bne.n	8006228 <SD_disk_ioctl+0x234>
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006196:	e047      	b.n	8006228 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006198:	2100      	movs	r1, #0
 800619a:	2049      	movs	r0, #73	; 0x49
 800619c:	f7ff fceb 	bl	8005b76 <SD_SendCmd>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d142      	bne.n	800622c <SD_disk_ioctl+0x238>
 80061a6:	2110      	movs	r1, #16
 80061a8:	6a38      	ldr	r0, [r7, #32]
 80061aa:	f7ff fc73 	bl	8005a94 <SD_RxDataBlock>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d03b      	beq.n	800622c <SD_disk_ioctl+0x238>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80061ba:	e037      	b.n	800622c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80061bc:	2100      	movs	r1, #0
 80061be:	204a      	movs	r0, #74	; 0x4a
 80061c0:	f7ff fcd9 	bl	8005b76 <SD_SendCmd>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d132      	bne.n	8006230 <SD_disk_ioctl+0x23c>
 80061ca:	2110      	movs	r1, #16
 80061cc:	6a38      	ldr	r0, [r7, #32]
 80061ce:	f7ff fc61 	bl	8005a94 <SD_RxDataBlock>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d02b      	beq.n	8006230 <SD_disk_ioctl+0x23c>
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80061de:	e027      	b.n	8006230 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80061e0:	2100      	movs	r1, #0
 80061e2:	207a      	movs	r0, #122	; 0x7a
 80061e4:	f7ff fcc7 	bl	8005b76 <SD_SendCmd>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d116      	bne.n	800621c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80061ee:	2300      	movs	r3, #0
 80061f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061f4:	e00b      	b.n	800620e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80061f6:	6a3c      	ldr	r4, [r7, #32]
 80061f8:	1c63      	adds	r3, r4, #1
 80061fa:	623b      	str	r3, [r7, #32]
 80061fc:	f7ff fbac 	bl	8005958 <SPI_RxByte>
 8006200:	4603      	mov	r3, r0
 8006202:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8006204:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006208:	3301      	adds	r3, #1
 800620a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800620e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006212:	2b03      	cmp	r3, #3
 8006214:	d9ef      	bls.n	80061f6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800621c:	2304      	movs	r3, #4
 800621e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006222:	e006      	b.n	8006232 <SD_disk_ioctl+0x23e>
			break;
 8006224:	bf00      	nop
 8006226:	e004      	b.n	8006232 <SD_disk_ioctl+0x23e>
			break;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <SD_disk_ioctl+0x23e>
			break;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <SD_disk_ioctl+0x23e>
			break;
 8006230:	bf00      	nop
		}

		DESELECT();
 8006232:	f7ff fb50 	bl	80058d6 <DESELECT>
		SPI_RxByte();
 8006236:	f7ff fb8f 	bl	8005958 <SPI_RxByte>
	}

	return res;
 800623a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800623e:	4618      	mov	r0, r3
 8006240:	372c      	adds	r7, #44	; 0x2c
 8006242:	46bd      	mov	sp, r7
 8006244:	bd90      	pop	{r4, r7, pc}
 8006246:	bf00      	nop
 8006248:	20000020 	.word	0x20000020

0800624c <__libc_init_array>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	4d0d      	ldr	r5, [pc, #52]	; (8006284 <__libc_init_array+0x38>)
 8006250:	4c0d      	ldr	r4, [pc, #52]	; (8006288 <__libc_init_array+0x3c>)
 8006252:	1b64      	subs	r4, r4, r5
 8006254:	10a4      	asrs	r4, r4, #2
 8006256:	2600      	movs	r6, #0
 8006258:	42a6      	cmp	r6, r4
 800625a:	d109      	bne.n	8006270 <__libc_init_array+0x24>
 800625c:	4d0b      	ldr	r5, [pc, #44]	; (800628c <__libc_init_array+0x40>)
 800625e:	4c0c      	ldr	r4, [pc, #48]	; (8006290 <__libc_init_array+0x44>)
 8006260:	f000 f820 	bl	80062a4 <_init>
 8006264:	1b64      	subs	r4, r4, r5
 8006266:	10a4      	asrs	r4, r4, #2
 8006268:	2600      	movs	r6, #0
 800626a:	42a6      	cmp	r6, r4
 800626c:	d105      	bne.n	800627a <__libc_init_array+0x2e>
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	f855 3b04 	ldr.w	r3, [r5], #4
 8006274:	4798      	blx	r3
 8006276:	3601      	adds	r6, #1
 8006278:	e7ee      	b.n	8006258 <__libc_init_array+0xc>
 800627a:	f855 3b04 	ldr.w	r3, [r5], #4
 800627e:	4798      	blx	r3
 8006280:	3601      	adds	r6, #1
 8006282:	e7f2      	b.n	800626a <__libc_init_array+0x1e>
 8006284:	080067ac 	.word	0x080067ac
 8006288:	080067ac 	.word	0x080067ac
 800628c:	080067ac 	.word	0x080067ac
 8006290:	080067b0 	.word	0x080067b0

08006294 <memset>:
 8006294:	4402      	add	r2, r0
 8006296:	4603      	mov	r3, r0
 8006298:	4293      	cmp	r3, r2
 800629a:	d100      	bne.n	800629e <memset+0xa>
 800629c:	4770      	bx	lr
 800629e:	f803 1b01 	strb.w	r1, [r3], #1
 80062a2:	e7f9      	b.n	8006298 <memset+0x4>

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
