
InputCapture_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003264  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003430  08003430  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003430  08003430  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003430  08003430  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08003444  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08003444  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d4d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c5  00000000  00000000  00029dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000851  00000000  00000000  0002c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0de  00000000  00000000  0002c8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b572  00000000  00000000  0004b98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0402  00000000  00000000  00056f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c8c  00000000  00000000  00117304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00119f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080033d8 	.word	0x080033d8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080033d8 	.word	0x080033d8

080001cc <HAL_TIM_IC_CaptureCallback>:

/* Measure Frequency */
float frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	7f1b      	ldrb	r3, [r3, #28]
 80001d8:	2b02      	cmp	r3, #2
 80001da:	d147      	bne.n	800026c <HAL_TIM_IC_CaptureCallback+0xa0>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80001dc:	4b25      	ldr	r3, [pc, #148]	; (8000274 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d10a      	bne.n	80001fa <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80001e4:	2104      	movs	r1, #4
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f002 fab4 	bl	8002754 <HAL_TIM_ReadCapturedValue>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a22      	ldr	r2, [pc, #136]	; (8000278 <HAL_TIM_IC_CaptureCallback+0xac>)
 80001f0:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80001f2:	4b20      	ldr	r3, [pc, #128]	; (8000274 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 80001f8:	e038      	b.n	800026c <HAL_TIM_IC_CaptureCallback+0xa0>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80001fa:	2104      	movs	r1, #4
 80001fc:	6878      	ldr	r0, [r7, #4]
 80001fe:	f002 faa9 	bl	8002754 <HAL_TIM_ReadCapturedValue>
 8000202:	4603      	mov	r3, r0
 8000204:	4a1d      	ldr	r2, [pc, #116]	; (800027c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000206:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <HAL_TIM_IC_CaptureCallback+0xac>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	429a      	cmp	r2, r3
 8000212:	d907      	bls.n	8000224 <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 8000214:	4b19      	ldr	r3, [pc, #100]	; (800027c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_TIM_IC_CaptureCallback+0xac>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	1ad3      	subs	r3, r2, r3
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	e00d      	b.n	8000240 <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b14      	ldr	r3, [pc, #80]	; (800027c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d907      	bls.n	8000240 <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b10      	ldr	r3, [pc, #64]	; (8000278 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	3b01      	subs	r3, #1
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800023e:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000242:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	ee07 3a90 	vmov	s15, r3
 800024c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000250:	edd7 6a03 	vldr	s13, [r7, #12]
 8000254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800025a:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2200      	movs	r2, #0
 8000264:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000080 	.word	0x20000080
 8000278:	20000074 	.word	0x20000074
 800027c:	20000078 	.word	0x20000078
 8000280:	2000007c 	.word	0x2000007c
 8000284:	49742400 	.word	0x49742400
 8000288:	20000084 	.word	0x20000084

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000290:	f000 fa69 	bl	8000766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000294:	f000 f814 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000298:	f000 f930 	bl	80004fc <MX_GPIO_Init>
  MX_TIM1_Init();
 800029c:	f000 f860 	bl	8000360 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR3 = 50;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0x2c>)
 80002a2:	2232      	movs	r2, #50	; 0x32
 80002a4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002a6:	2108      	movs	r1, #8
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <main+0x30>)
 80002aa:	f001 fc69 	bl	8001b80 <HAL_TIM_PWM_Start>

    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80002ae:	2104      	movs	r1, #4
 80002b0:	4802      	ldr	r0, [pc, #8]	; (80002bc <main+0x30>)
 80002b2:	f001 fda5 	bl	8001e00 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <main+0x2a>
 80002b8:	40012c00 	.word	0x40012c00
 80002bc:	20000028 	.word	0x20000028

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	; 0x58
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	2244      	movs	r2, #68	; 0x44
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 f856 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e6:	f000 fd3d 	bl	8000d64 <HAL_PWREx_ControlVoltageScaling>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f0:	f000 f91c 	bl	800052c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f4:	2301      	movs	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	2303      	movs	r3, #3
 8000304:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000306:	2301      	movs	r3, #1
 8000308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 800030a:	2319      	movs	r3, #25
 800030c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030e:	2307      	movs	r3, #7
 8000310:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000316:	2304      	movs	r3, #4
 8000318:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fd76 	bl	8000e10 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032a:	f000 f8ff 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2303      	movs	r3, #3
 8000334:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	2103      	movs	r1, #3
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f976 	bl	8001638 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000352:	f000 f8eb 	bl	800052c <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3758      	adds	r7, #88	; 0x58
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b09e      	sub	sp, #120	; 0x78
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000380:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	222c      	movs	r2, #44	; 0x2c
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 ffe9 	bl	8003380 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ae:	4b51      	ldr	r3, [pc, #324]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003b0:	4a51      	ldr	r2, [pc, #324]	; (80004f8 <MX_TIM1_Init+0x198>)
 80003b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80003b4:	4b4f      	ldr	r3, [pc, #316]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003b6:	2231      	movs	r2, #49	; 0x31
 80003b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ba:	4b4e      	ldr	r3, [pc, #312]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80003c0:	4b4c      	ldr	r3, [pc, #304]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003c2:	2263      	movs	r2, #99	; 0x63
 80003c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b4b      	ldr	r3, [pc, #300]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003cc:	4b49      	ldr	r3, [pc, #292]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d2:	4b48      	ldr	r3, [pc, #288]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003d8:	4846      	ldr	r0, [pc, #280]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003da:	f001 fb19 	bl	8001a10 <HAL_TIM_Base_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80003e4:	f000 f8a2 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ec:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003f2:	4619      	mov	r1, r3
 80003f4:	483f      	ldr	r0, [pc, #252]	; (80004f4 <MX_TIM1_Init+0x194>)
 80003f6:	f002 f8e3 	bl	80025c0 <HAL_TIM_ConfigClockSource>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000400:	f000 f894 	bl	800052c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000404:	483b      	ldr	r0, [pc, #236]	; (80004f4 <MX_TIM1_Init+0x194>)
 8000406:	f001 fc99 	bl	8001d3c <HAL_TIM_IC_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000410:	f000 f88c 	bl	800052c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000414:	4837      	ldr	r0, [pc, #220]	; (80004f4 <MX_TIM1_Init+0x194>)
 8000416:	f001 fb52 	bl	8001abe <HAL_TIM_PWM_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000420:	f000 f884 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000430:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000434:	4619      	mov	r1, r3
 8000436:	482f      	ldr	r0, [pc, #188]	; (80004f4 <MX_TIM1_Init+0x194>)
 8000438:	f002 fea6 	bl	8003188 <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000442:	f000 f873 	bl	800052c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000446:	2300      	movs	r3, #0
 8000448:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800044a:	2301      	movs	r3, #1
 800044c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000456:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800045a:	2204      	movs	r2, #4
 800045c:	4619      	mov	r1, r3
 800045e:	4825      	ldr	r0, [pc, #148]	; (80004f4 <MX_TIM1_Init+0x194>)
 8000460:	f001 fefe 	bl	8002260 <HAL_TIM_IC_ConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800046a:	f000 f85f 	bl	800052c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046e:	2360      	movs	r3, #96	; 0x60
 8000470:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000476:	2300      	movs	r3, #0
 8000478:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800047a:	2300      	movs	r3, #0
 800047c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000482:	2300      	movs	r3, #0
 8000484:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000486:	2300      	movs	r3, #0
 8000488:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800048a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800048e:	2208      	movs	r2, #8
 8000490:	4619      	mov	r1, r3
 8000492:	4818      	ldr	r0, [pc, #96]	; (80004f4 <MX_TIM1_Init+0x194>)
 8000494:	f001 ff80 	bl	8002398 <HAL_TIM_PWM_ConfigChannel>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800049e:	f000 f845 	bl	800052c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4619      	mov	r1, r3
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <MX_TIM1_Init+0x194>)
 80004d8:	f002 febc 	bl	8003254 <HAL_TIMEx_ConfigBreakDeadTime>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80004e2:	f000 f823 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <MX_TIM1_Init+0x194>)
 80004e8:	f000 f896 	bl	8000618 <HAL_TIM_MspPostInit>

}
 80004ec:	bf00      	nop
 80004ee:	3778      	adds	r7, #120	; 0x78
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000028 	.word	0x20000028
 80004f8:	40012c00 	.word	0x40012c00

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_GPIO_Init+0x2c>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <MX_GPIO_Init+0x2c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_GPIO_Init+0x2c>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x44>)
 8000540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_MspInit+0x44>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6613      	str	r3, [r2, #96]	; 0x60
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_MspInit+0x44>)
 800054c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <HAL_MspInit+0x44>)
 8000558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_MspInit+0x44>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	6593      	str	r3, [r2, #88]	; 0x58
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_MspInit+0x44>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <HAL_TIM_Base_MspInit+0x90>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d131      	bne.n	8000606 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <HAL_TIM_Base_MspInit+0x94>)
 80005a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a6:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <HAL_TIM_Base_MspInit+0x94>)
 80005a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005ac:	6613      	str	r3, [r2, #96]	; 0x60
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_TIM_Base_MspInit+0x94>)
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_TIM_Base_MspInit+0x94>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <HAL_TIM_Base_MspInit+0x94>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_TIM_Base_MspInit+0x94>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 fa3f 	bl	8000a74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	201b      	movs	r0, #27
 80005fc:	f000 fa03 	bl	8000a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000600:	201b      	movs	r0, #27
 8000602:	f000 fa1c 	bl	8000a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40012c00 	.word	0x40012c00
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <HAL_TIM_MspPostInit+0x68>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d11d      	bne.n	8000676 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_TIM_MspPostInit+0x6c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <HAL_TIM_MspPostInit+0x6c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_TIM_MspPostInit+0x6c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f000 f9ff 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012c00 	.word	0x40012c00
 8000684:	40021000 	.word	0x40021000

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f89c 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <TIM1_CC_IRQHandler+0x10>)
 80006e2:	f001 fcbb 	bl	800205c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff ffea 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	; (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f002 fe25 	bl	8003390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000746:	f7ff fda1 	bl	800028c <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800074c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000758:	08003438 	.word	0x08003438
  ldr r2, =_sbss
 800075c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000760:	2000008c 	.word	0x2000008c

08000764 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_IRQHandler>

08000766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f93d 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000776:	200f      	movs	r0, #15
 8000778:	f000 f80e 	bl	8000798 <HAL_InitTick>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	e001      	b.n	800078c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000788:	f7ff fed6 	bl	8000538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800078c:	79fb      	ldrb	r3, [r7, #7]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_InitTick+0x6c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d023      	beq.n	80007f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_InitTick+0x70>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_InitTick+0x6c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f949 	bl	8000a5a <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10f      	bne.n	80007ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d809      	bhi.n	80007e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f000 f913 	bl	8000a06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_InitTick+0x74>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	e007      	b.n	80007f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e004      	b.n	80007f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e001      	b.n	80007f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	20000000 	.word	0x20000000
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x20>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x24>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_IncTick+0x24>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000088 	.word	0x20000088

08000838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000088 	.word	0x20000088

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <__NVIC_EnableIRQ+0x38>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	; (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
         );
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	; 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009bc:	d301      	bcc.n	80009c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009be:	2301      	movs	r3, #1
 80009c0:	e00f      	b.n	80009e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <SysTick_Config+0x40>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ca:	210f      	movs	r1, #15
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f7ff ff8e 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SysTick_Config+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009da:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SysTick_Config+0x40>)
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff29 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a18:	f7ff ff3e 	bl	8000898 <__NVIC_GetPriorityGrouping>
 8000a1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f7ff ff8e 	bl	8000944 <NVIC_EncodePriority>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff5d 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff31 	bl	80008b4 <__NVIC_EnableIRQ>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffa2 	bl	80009ac <SysTick_Config>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e148      	b.n	8000d16 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 813a 	beq.w	8000d10 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x40>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	f003 0201 	and.w	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0203 	and.w	r2, r3, #3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8094 	beq.w	8000d10 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <HAL_GPIO_Init+0x2c0>)
 8000bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bec:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <HAL_GPIO_Init+0x2c0>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf4:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <HAL_GPIO_Init+0x2c0>)
 8000bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c00:	4a4d      	ldr	r2, [pc, #308]	; (8000d38 <HAL_GPIO_Init+0x2c4>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c2a:	d00d      	beq.n	8000c48 <HAL_GPIO_Init+0x1d4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a43      	ldr	r2, [pc, #268]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d007      	beq.n	8000c44 <HAL_GPIO_Init+0x1d0>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d101      	bne.n	8000c40 <HAL_GPIO_Init+0x1cc>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x1d6>
 8000c40:	2307      	movs	r3, #7
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x1d6>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x1d6>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5a:	4937      	ldr	r1, [pc, #220]	; (8000d38 <HAL_GPIO_Init+0x2c4>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c68:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c8c:	4a2d      	ldr	r2, [pc, #180]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cb6:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f47f aeaf 	bne.w	8000a84 <HAL_GPIO_Init+0x10>
  }
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48000800 	.word	0x48000800
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40007000 	.word	0x40007000

08000d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d72:	d130      	bne.n	8000dd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d80:	d038      	beq.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2232      	movs	r2, #50	; 0x32
 8000d98:	fb02 f303 	mul.w	r3, r2, r3
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0c9b      	lsrs	r3, r3, #18
 8000da4:	3301      	adds	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000da8:	e002      	b.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dbc:	d102      	bne.n	8000dc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f2      	bne.n	8000daa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd0:	d110      	bne.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e00f      	b.n	8000df6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de2:	d007      	beq.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40007000 	.word	0x40007000
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	431bde83 	.word	0x431bde83

08000e10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f000 bc02 	b.w	8001628 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e24:	4b96      	ldr	r3, [pc, #600]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e2e:	4b94      	ldr	r3, [pc, #592]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80e4 	beq.w	800100e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <HAL_RCC_OscConfig+0x4c>
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b0c      	cmp	r3, #12
 8000e50:	f040 808b 	bne.w	8000f6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	f040 8087 	bne.w	8000f6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e5c:	4b88      	ldr	r3, [pc, #544]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <HAL_RCC_OscConfig+0x64>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e3d9      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a1a      	ldr	r2, [r3, #32]
 8000e78:	4b81      	ldr	r3, [pc, #516]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <HAL_RCC_OscConfig+0x7e>
 8000e84:	4b7e      	ldr	r3, [pc, #504]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e8c:	e005      	b.n	8000e9a <HAL_RCC_OscConfig+0x8a>
 8000e8e:	4b7c      	ldr	r3, [pc, #496]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d223      	bcs.n	8000ee6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fd54 	bl	8001950 <RCC_SetFlashLatencyFromMSIRange>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e3ba      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb2:	4b73      	ldr	r3, [pc, #460]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a72      	ldr	r2, [pc, #456]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b70      	ldr	r3, [pc, #448]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	496d      	ldr	r1, [pc, #436]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed0:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	4968      	ldr	r1, [pc, #416]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
 8000ee4:	e025      	b.n	8000f32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee6:	4b66      	ldr	r3, [pc, #408]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a65      	ldr	r2, [pc, #404]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b63      	ldr	r3, [pc, #396]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4960      	ldr	r1, [pc, #384]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f04:	4b5e      	ldr	r3, [pc, #376]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	495b      	ldr	r1, [pc, #364]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fd14 	bl	8001950 <RCC_SetFlashLatencyFromMSIRange>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e37a      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f32:	f000 fc81 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 8000f36:	4602      	mov	r2, r0
 8000f38:	4b51      	ldr	r3, [pc, #324]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	4950      	ldr	r1, [pc, #320]	; (8001084 <HAL_RCC_OscConfig+0x274>)
 8000f44:	5ccb      	ldrb	r3, [r1, r3]
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4e:	4a4e      	ldr	r2, [pc, #312]	; (8001088 <HAL_RCC_OscConfig+0x278>)
 8000f50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f52:	4b4e      	ldr	r3, [pc, #312]	; (800108c <HAL_RCC_OscConfig+0x27c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fc1e 	bl	8000798 <HAL_InitTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d052      	beq.n	800100c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	e35e      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d032      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f72:	4b43      	ldr	r3, [pc, #268]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a42      	ldr	r2, [pc, #264]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc5b 	bl	8000838 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f86:	f7ff fc57 	bl	8000838 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e347      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f98:	4b39      	ldr	r3, [pc, #228]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa4:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a35      	ldr	r2, [pc, #212]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b33      	ldr	r3, [pc, #204]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4930      	ldr	r1, [pc, #192]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	492b      	ldr	r1, [pc, #172]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	604b      	str	r3, [r1, #4]
 8000fd6:	e01a      	b.n	800100e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fde:	f023 0301 	bic.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fc28 	bl	8000838 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc24 	bl	8000838 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e314      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x1dc>
 800100a:	e000      	b.n	800100e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800100c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d073      	beq.n	8001102 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b08      	cmp	r3, #8
 800101e:	d005      	beq.n	800102c <HAL_RCC_OscConfig+0x21c>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b0c      	cmp	r3, #12
 8001024:	d10e      	bne.n	8001044 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d10b      	bne.n	8001044 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d063      	beq.n	8001100 <HAL_RCC_OscConfig+0x2f0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d15f      	bne.n	8001100 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e2f1      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104c:	d106      	bne.n	800105c <HAL_RCC_OscConfig+0x24c>
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e025      	b.n	80010a8 <HAL_RCC_OscConfig+0x298>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001064:	d114      	bne.n	8001090 <HAL_RCC_OscConfig+0x280>
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a02      	ldr	r2, [pc, #8]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e013      	b.n	80010a8 <HAL_RCC_OscConfig+0x298>
 8001080:	40021000 	.word	0x40021000
 8001084:	080033f0 	.word	0x080033f0
 8001088:	20000000 	.word	0x20000000
 800108c:	20000004 	.word	0x20000004
 8001090:	4ba0      	ldr	r3, [pc, #640]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a9f      	ldr	r2, [pc, #636]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b9d      	ldr	r3, [pc, #628]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a9c      	ldr	r2, [pc, #624]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b0:	f7ff fbc2 	bl	8000838 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fbbe 	bl	8000838 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	; 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e2ae      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ca:	4b92      	ldr	r3, [pc, #584]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x2a8>
 80010d6:	e014      	b.n	8001102 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fbae 	bl	8000838 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fbaa 	bl	8000838 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e29a      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f2:	4b88      	ldr	r3, [pc, #544]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2d0>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d060      	beq.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d005      	beq.n	8001120 <HAL_RCC_OscConfig+0x310>
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b0c      	cmp	r3, #12
 8001118:	d119      	bne.n	800114e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d116      	bne.n	800114e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_OscConfig+0x328>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e277      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	061b      	lsls	r3, r3, #24
 8001146:	4973      	ldr	r1, [pc, #460]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114c:	e040      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d023      	beq.n	800119e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001156:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6e      	ldr	r2, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff fb69 	bl	8000838 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fb65 	bl	8000838 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e255      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800117c:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	061b      	lsls	r3, r3, #24
 8001196:	495f      	ldr	r1, [pc, #380]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
 800119c:	e018      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80011a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb45 	bl	8000838 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fb41 	bl	8000838 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e231      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c4:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f0      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d03c      	beq.n	8001256 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d01c      	beq.n	800121e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e4:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80011e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ea:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f4:	f7ff fb20 	bl	8000838 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fb1c 	bl	8000838 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e20c      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ef      	beq.n	80011fc <HAL_RCC_OscConfig+0x3ec>
 800121c:	e01b      	b.n	8001256 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001224:	4a3b      	ldr	r2, [pc, #236]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122e:	f7ff fb03 	bl	8000838 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001236:	f7ff faff 	bl	8000838 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e1ef      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800124a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1ef      	bne.n	8001236 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80a6 	beq.w	80013b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10d      	bne.n	8001290 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	4b27      	ldr	r3, [pc, #156]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127e:	6593      	str	r3, [r2, #88]	; 0x58
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800128c:	2301      	movs	r3, #1
 800128e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_RCC_OscConfig+0x508>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d118      	bne.n	80012ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_RCC_OscConfig+0x508>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x508>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fac6 	bl	8000838 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b0:	f7ff fac2 	bl	8000838 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1b2      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_RCC_OscConfig+0x508>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d108      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4d8>
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80012d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e6:	e029      	b.n	800133c <HAL_RCC_OscConfig+0x52c>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d115      	bne.n	800131c <HAL_RCC_OscConfig+0x50c>
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80012f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_RCC_OscConfig+0x504>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001310:	e014      	b.n	800133c <HAL_RCC_OscConfig+0x52c>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40007000 	.word	0x40007000
 800131c:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	4a99      	ldr	r2, [pc, #612]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132c:	4b96      	ldr	r3, [pc, #600]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a95      	ldr	r2, [pc, #596]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d016      	beq.n	8001372 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fa78 	bl	8000838 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fa74 	bl	8000838 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e162      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001362:	4b89      	ldr	r3, [pc, #548]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0ed      	beq.n	800134c <HAL_RCC_OscConfig+0x53c>
 8001370:	e015      	b.n	800139e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001372:	f7ff fa61 	bl	8000838 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001378:	e00a      	b.n	8001390 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fa5d 	bl	8000838 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f241 3288 	movw	r2, #5000	; 0x1388
 8001388:	4293      	cmp	r3, r2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e14b      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001390:	4b7d      	ldr	r3, [pc, #500]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1ed      	bne.n	800137a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a4:	4b78      	ldr	r3, [pc, #480]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	4a77      	ldr	r2, [pc, #476]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80013aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d03c      	beq.n	8001436 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01c      	beq.n	80013fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013c4:	4b70      	ldr	r3, [pc, #448]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80013c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ca:	4a6f      	ldr	r2, [pc, #444]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fa30 	bl	8000838 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013dc:	f7ff fa2c 	bl	8000838 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e11c      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013ee:	4b66      	ldr	r3, [pc, #408]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80013f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ef      	beq.n	80013dc <HAL_RCC_OscConfig+0x5cc>
 80013fc:	e01b      	b.n	8001436 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013fe:	4b62      	ldr	r3, [pc, #392]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001404:	4a60      	ldr	r2, [pc, #384]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140e:	f7ff fa13 	bl	8000838 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001416:	f7ff fa0f 	bl	8000838 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0ff      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001428:	4b57      	ldr	r3, [pc, #348]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 800142a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ef      	bne.n	8001416 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80f3 	beq.w	8001626 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	2b02      	cmp	r3, #2
 8001446:	f040 80c9 	bne.w	80015dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 0203 	and.w	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	429a      	cmp	r2, r3
 800145c:	d12c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	3b01      	subs	r3, #1
 800146a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d123      	bne.n	80014b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d11b      	bne.n	80014b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d113      	bne.n	80014b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	3b01      	subs	r3, #1
 800149e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d109      	bne.n	80014b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d06b      	beq.n	8001590 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d062      	beq.n	8001584 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0ac      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a2d      	ldr	r2, [pc, #180]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80014d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014da:	f7ff f9ad 	bl	8000838 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff f9a9 	bl	8000838 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e099      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_RCC_OscConfig+0x77c>)
 8001506:	4013      	ands	r3, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001510:	3a01      	subs	r2, #1
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	4311      	orrs	r1, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800151a:	0212      	lsls	r2, r2, #8
 800151c:	4311      	orrs	r1, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001522:	0852      	lsrs	r2, r2, #1
 8001524:	3a01      	subs	r2, #1
 8001526:	0552      	lsls	r2, r2, #21
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800152e:	0852      	lsrs	r2, r2, #1
 8001530:	3a01      	subs	r2, #1
 8001532:	0652      	lsls	r2, r2, #25
 8001534:	4311      	orrs	r1, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800153a:	06d2      	lsls	r2, r2, #27
 800153c:	430a      	orrs	r2, r1
 800153e:	4912      	ldr	r1, [pc, #72]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001540:	4313      	orrs	r3, r2
 8001542:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800155c:	f7ff f96c 	bl	8000838 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff f968 	bl	8000838 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e058      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_RCC_OscConfig+0x778>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001582:	e050      	b.n	8001626 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e04f      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
 8001588:	40021000 	.word	0x40021000
 800158c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d144      	bne.n	8001626 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a23      	ldr	r2, [pc, #140]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 80015a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4a20      	ldr	r2, [pc, #128]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 80015ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015b4:	f7ff f940 	bl	8000838 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff f93c 	bl	8000838 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e02c      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x7ac>
 80015da:	e024      	b.n	8001626 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d01f      	beq.n	8001622 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 80015e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff f923 	bl	8000838 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff f91f 	bl	8000838 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e00f      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4905      	ldr	r1, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x820>)
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x824>)
 800161c:	4013      	ands	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
 8001620:	e001      	b.n	8001626 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	feeefffc 	.word	0xfeeefffc

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0e7      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4970      	ldr	r1, [pc, #448]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b6e      	ldr	r3, [pc, #440]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0cf      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d010      	beq.n	80016aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001694:	429a      	cmp	r2, r3
 8001696:	d908      	bls.n	80016aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4960      	ldr	r1, [pc, #384]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d04c      	beq.n	8001750 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016be:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d121      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0a6      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	4b54      	ldr	r3, [pc, #336]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d115      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e09a      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ee:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e08e      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fe:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e086      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4943      	ldr	r1, [pc, #268]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001720:	f7ff f88a 	bl	8000838 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f886 	bl	8000838 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e06e      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001768:	429a      	cmp	r2, r3
 800176a:	d208      	bcs.n	800177e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	492b      	ldr	r1, [pc, #172]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d210      	bcs.n	80017ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 0207 	bic.w	r2, r3, #7
 8001794:	4923      	ldr	r1, [pc, #140]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e036      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4918      	ldr	r1, [pc, #96]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4910      	ldr	r1, [pc, #64]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ec:	f000 f824 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x1f4>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 800180a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1fc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe ffc1 	bl	8000798 <HAL_InitTick>
 8001816:	4603      	mov	r3, r0
 8001818:	72fb      	strb	r3, [r7, #11]

  return status;
 800181a:	7afb      	ldrb	r3, [r7, #11]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	080033f0 	.word	0x080033f0
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001846:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x34>
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d121      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d11e      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d107      	bne.n	8001888 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e005      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10d      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_GetSysClockFreq+0x110>)
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	e004      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_RCC_GetSysClockFreq+0x114>)
 80018be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d134      	bne.n	8001930 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0xa6>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d003      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0xac>
 80018dc:	e005      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_RCC_GetSysClockFreq+0x110>)
 80018e0:	617b      	str	r3, [r7, #20]
      break;
 80018e2:	e005      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_GetSysClockFreq+0x114>)
 80018e6:	617b      	str	r3, [r7, #20]
      break;
 80018e8:	e002      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	617b      	str	r3, [r7, #20]
      break;
 80018ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	3301      	adds	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	fb03 f202 	mul.w	r2, r3, r2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	0e5b      	lsrs	r3, r3, #25
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	3301      	adds	r3, #1
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001930:	69bb      	ldr	r3, [r7, #24]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	08003400 	.word	0x08003400
 8001948:	00f42400 	.word	0x00f42400
 800194c:	007a1200 	.word	0x007a1200

08001950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001968:	f7ff f9ee 	bl	8000d48 <HAL_PWREx_GetVoltageRange>
 800196c:	6178      	str	r0, [r7, #20]
 800196e:	e014      	b.n	800199a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001988:	f7ff f9de 	bl	8000d48 <HAL_PWREx_GetVoltageRange>
 800198c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a0:	d10b      	bne.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d919      	bls.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2ba0      	cmp	r3, #160	; 0xa0
 80019ac:	d902      	bls.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019ae:	2302      	movs	r3, #2
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e013      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b4:	2301      	movs	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e010      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d902      	bls.n	80019c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019c0:	2303      	movs	r3, #3
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	e00a      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d102      	bne.n	80019d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019cc:	2302      	movs	r3, #2
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	e004      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b70      	cmp	r3, #112	; 0x70
 80019d6:	d101      	bne.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 0207 	bic.w	r2, r3, #7
 80019e4:	4909      	ldr	r1, [pc, #36]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40022000 	.word	0x40022000

08001a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e049      	b.n	8001ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fda2 	bl	8000580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f000 feec 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e049      	b.n	8001b64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f841 	bl	8001b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f000 fe95 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_TIM_PWM_Start+0x24>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e03c      	b.n	8001c1e <HAL_TIM_PWM_Start+0x9e>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d109      	bne.n	8001bbe <HAL_TIM_PWM_Start+0x3e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	e02f      	b.n	8001c1e <HAL_TIM_PWM_Start+0x9e>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d109      	bne.n	8001bd8 <HAL_TIM_PWM_Start+0x58>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e022      	b.n	8001c1e <HAL_TIM_PWM_Start+0x9e>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d109      	bne.n	8001bf2 <HAL_TIM_PWM_Start+0x72>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	e015      	b.n	8001c1e <HAL_TIM_PWM_Start+0x9e>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d109      	bne.n	8001c0c <HAL_TIM_PWM_Start+0x8c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e008      	b.n	8001c1e <HAL_TIM_PWM_Start+0x9e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e07e      	b.n	8001d24 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d104      	bne.n	8001c36 <HAL_TIM_PWM_Start+0xb6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c34:	e023      	b.n	8001c7e <HAL_TIM_PWM_Start+0xfe>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d104      	bne.n	8001c46 <HAL_TIM_PWM_Start+0xc6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	e01b      	b.n	8001c7e <HAL_TIM_PWM_Start+0xfe>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d104      	bne.n	8001c56 <HAL_TIM_PWM_Start+0xd6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c54:	e013      	b.n	8001c7e <HAL_TIM_PWM_Start+0xfe>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_PWM_Start+0xe6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c64:	e00b      	b.n	8001c7e <HAL_TIM_PWM_Start+0xfe>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_PWM_Start+0xf6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c74:	e003      	b.n	8001c7e <HAL_TIM_PWM_Start+0xfe>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fa58 	bl	800313c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <HAL_TIM_PWM_Start+0x1ac>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_TIM_PWM_Start+0x12a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_TIM_PWM_Start+0x1b0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_TIM_PWM_Start+0x12a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <HAL_TIM_PWM_Start+0x1b4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PWM_Start+0x12e>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_TIM_PWM_Start+0x130>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_TIM_PWM_Start+0x1ac>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d009      	beq.n	8001ce2 <HAL_TIM_PWM_Start+0x162>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd6:	d004      	beq.n	8001ce2 <HAL_TIM_PWM_Start+0x162>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_TIM_PWM_Start+0x1b0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d115      	bne.n	8001d0e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_TIM_PWM_Start+0x1b8>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d015      	beq.n	8001d20 <HAL_TIM_PWM_Start+0x1a0>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d011      	beq.n	8001d20 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0c:	e008      	b.n	8001d20 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e000      	b.n	8001d22 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40014000 	.word	0x40014000
 8001d34:	40014400 	.word	0x40014400
 8001d38:	00010007 	.word	0x00010007

08001d3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e049      	b.n	8001de2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f841 	bl	8001dea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 fd56 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_IC_Start_IT+0x1e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	e023      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x66>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_IC_Start_IT+0x2e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	e01b      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x66>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_IC_Start_IT+0x3e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	e013      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x66>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_IC_Start_IT+0x4e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	e00b      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x66>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d104      	bne.n	8001e5e <HAL_TIM_IC_Start_IT+0x5e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e003      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x66>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <HAL_TIM_IC_Start_IT+0x78>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e013      	b.n	8001ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d104      	bne.n	8001e88 <HAL_TIM_IC_Start_IT+0x88>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e00b      	b.n	8001ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d104      	bne.n	8001e98 <HAL_TIM_IC_Start_IT+0x98>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e003      	b.n	8001ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0c9      	b.n	8002046 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_IC_Start_IT+0xc2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	e023      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x10a>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_IC_Start_IT+0xd2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	e01b      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x10a>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_IC_Start_IT+0xe2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee0:	e013      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x10a>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d104      	bne.n	8001ef2 <HAL_TIM_IC_Start_IT+0xf2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ef0:	e00b      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x10a>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b10      	cmp	r3, #16
 8001ef6:	d104      	bne.n	8001f02 <HAL_TIM_IC_Start_IT+0x102>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f00:	e003      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x10a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d104      	bne.n	8001f1a <HAL_TIM_IC_Start_IT+0x11a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f18:	e013      	b.n	8001f42 <HAL_TIM_IC_Start_IT+0x142>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d104      	bne.n	8001f2a <HAL_TIM_IC_Start_IT+0x12a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f28:	e00b      	b.n	8001f42 <HAL_TIM_IC_Start_IT+0x142>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d104      	bne.n	8001f3a <HAL_TIM_IC_Start_IT+0x13a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f38:	e003      	b.n	8001f42 <HAL_TIM_IC_Start_IT+0x142>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d841      	bhi.n	8001fcc <HAL_TIM_IC_Start_IT+0x1cc>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <HAL_TIM_IC_Start_IT+0x150>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08001fcd 	.word	0x08001fcd
 8001f58:	08001fcd 	.word	0x08001fcd
 8001f5c:	08001fcd 	.word	0x08001fcd
 8001f60:	08001f97 	.word	0x08001f97
 8001f64:	08001fcd 	.word	0x08001fcd
 8001f68:	08001fcd 	.word	0x08001fcd
 8001f6c:	08001fcd 	.word	0x08001fcd
 8001f70:	08001fa9 	.word	0x08001fa9
 8001f74:	08001fcd 	.word	0x08001fcd
 8001f78:	08001fcd 	.word	0x08001fcd
 8001f7c:	08001fcd 	.word	0x08001fcd
 8001f80:	08001fbb 	.word	0x08001fbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0202 	orr.w	r2, r2, #2
 8001f92:	60da      	str	r2, [r3, #12]
      break;
 8001f94:	e01d      	b.n	8001fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0204 	orr.w	r2, r2, #4
 8001fa4:	60da      	str	r2, [r3, #12]
      break;
 8001fa6:	e014      	b.n	8001fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0208 	orr.w	r2, r2, #8
 8001fb6:	60da      	str	r2, [r3, #12]
      break;
 8001fb8:	e00b      	b.n	8001fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0210 	orr.w	r2, r2, #16
 8001fc8:	60da      	str	r2, [r3, #12]
      break;
 8001fca:	e002      	b.n	8001fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d135      	bne.n	8002044 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 f8ab 	bl	800313c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_TIM_IC_Start_IT+0x250>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_TIM_IC_Start_IT+0x204>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_IC_Start_IT+0x204>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_TIM_IC_Start_IT+0x254>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d115      	bne.n	8002030 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_TIM_IC_Start_IT+0x258>)
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d015      	beq.n	8002042 <HAL_TIM_IC_Start_IT+0x242>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d011      	beq.n	8002042 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202e:	e008      	b.n	8002042 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e000      	b.n	8002044 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002042:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40012c00 	.word	0x40012c00
 8002054:	40014000 	.word	0x40014000
 8002058:	00010007 	.word	0x00010007

0800205c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d020      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01b      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0202 	mvn.w	r2, #2
 8002090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe f890 	bl	80001cc <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fb9e 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fba5 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d020      	beq.n	800210c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0204 	mvn.w	r2, #4
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe f86a 	bl	80001cc <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fb78 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fb7f 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d020      	beq.n	8002158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0208 	mvn.w	r2, #8
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe f844 	bl	80001cc <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fb52 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fb59 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0210 	mvn.w	r2, #16
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2208      	movs	r2, #8
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe f81e 	bl	80001cc <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fb2c 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fb33 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0201 	mvn.w	r2, #1
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fb0a 	bl	80027dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00c      	beq.n	80021ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f001 f8b6 	bl	8003358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f001 f8ae 	bl	800336c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 faf2 	bl	8002818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0220 	mvn.w	r2, #32
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f001 f876 	bl	8003344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_TIM_IC_ConfigChannel+0x1e>
 800227a:	2302      	movs	r3, #2
 800227c:	e088      	b.n	8002390 <HAL_TIM_IC_ConfigChannel+0x130>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800229c:	f000 fda8 	bl	8002df0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 020c 	bic.w	r2, r2, #12
 80022ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6999      	ldr	r1, [r3, #24]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	619a      	str	r2, [r3, #24]
 80022c2:	e060      	b.n	8002386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d11c      	bne.n	8002304 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80022da:	f000 fe0e 	bl	8002efa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6999      	ldr	r1, [r3, #24]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e040      	b.n	8002386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11b      	bne.n	8002342 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800231a:	f000 fe5b 	bl	8002fd4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 020c 	bic.w	r2, r2, #12
 800232c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
 8002340:	e021      	b.n	8002386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d11c      	bne.n	8002382 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002358:	f000 fe78 	bl	800304c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800236a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69d9      	ldr	r1, [r3, #28]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
 8002380:	e001      	b.n	8002386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800238e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0ff      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b14      	cmp	r3, #20
 80023c2:	f200 80f0 	bhi.w	80025a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	08002421 	.word	0x08002421
 80023d0:	080025a7 	.word	0x080025a7
 80023d4:	080025a7 	.word	0x080025a7
 80023d8:	080025a7 	.word	0x080025a7
 80023dc:	08002461 	.word	0x08002461
 80023e0:	080025a7 	.word	0x080025a7
 80023e4:	080025a7 	.word	0x080025a7
 80023e8:	080025a7 	.word	0x080025a7
 80023ec:	080024a3 	.word	0x080024a3
 80023f0:	080025a7 	.word	0x080025a7
 80023f4:	080025a7 	.word	0x080025a7
 80023f8:	080025a7 	.word	0x080025a7
 80023fc:	080024e3 	.word	0x080024e3
 8002400:	080025a7 	.word	0x080025a7
 8002404:	080025a7 	.word	0x080025a7
 8002408:	080025a7 	.word	0x080025a7
 800240c:	08002525 	.word	0x08002525
 8002410:	080025a7 	.word	0x080025a7
 8002414:	080025a7 	.word	0x080025a7
 8002418:	080025a7 	.word	0x080025a7
 800241c:	08002565 	.word	0x08002565
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fa64 	bl	80028f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0208 	orr.w	r2, r2, #8
 800243a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6999      	ldr	r1, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	619a      	str	r2, [r3, #24]
      break;
 800245e:	e0a5      	b.n	80025ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fac0 	bl	80029ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6999      	ldr	r1, [r3, #24]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	021a      	lsls	r2, r3, #8
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	619a      	str	r2, [r3, #24]
      break;
 80024a0:	e084      	b.n	80025ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fb19 	bl	8002ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0208 	orr.w	r2, r2, #8
 80024bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0204 	bic.w	r2, r2, #4
 80024cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69d9      	ldr	r1, [r3, #28]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	61da      	str	r2, [r3, #28]
      break;
 80024e0:	e064      	b.n	80025ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fb71 	bl	8002bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	021a      	lsls	r2, r3, #8
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	61da      	str	r2, [r3, #28]
      break;
 8002522:	e043      	b.n	80025ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fbae 	bl	8002c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0204 	bic.w	r2, r2, #4
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002562:	e023      	b.n	80025ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fbe6 	bl	8002d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	021a      	lsls	r2, r3, #8
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025a4:	e002      	b.n	80025ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
      break;
 80025aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop

080025c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_TIM_ConfigClockSource+0x1c>
 80025d8:	2302      	movs	r3, #2
 80025da:	e0b6      	b.n	800274a <HAL_TIM_ConfigClockSource+0x18a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002618:	d03e      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0xd8>
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	f200 8087 	bhi.w	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	f000 8086 	beq.w	8002736 <HAL_TIM_ConfigClockSource+0x176>
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262e:	d87f      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002630:	2b70      	cmp	r3, #112	; 0x70
 8002632:	d01a      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xaa>
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d87b      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002638:	2b60      	cmp	r3, #96	; 0x60
 800263a:	d050      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x11e>
 800263c:	2b60      	cmp	r3, #96	; 0x60
 800263e:	d877      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002640:	2b50      	cmp	r3, #80	; 0x50
 8002642:	d03c      	beq.n	80026be <HAL_TIM_ConfigClockSource+0xfe>
 8002644:	2b50      	cmp	r3, #80	; 0x50
 8002646:	d873      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d058      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x13e>
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d86f      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002650:	2b30      	cmp	r3, #48	; 0x30
 8002652:	d064      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15e>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d86b      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002658:	2b20      	cmp	r3, #32
 800265a:	d060      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15e>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d867      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15e>
 8002664:	2b10      	cmp	r3, #16
 8002666:	d05a      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15e>
 8002668:	e062      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800267a:	f000 fd3f 	bl	80030fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800268c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	609a      	str	r2, [r3, #8]
      break;
 8002696:	e04f      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026a8:	f000 fd28 	bl	80030fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ba:	609a      	str	r2, [r3, #8]
      break;
 80026bc:	e03c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ca:	461a      	mov	r2, r3
 80026cc:	f000 fbe6 	bl	8002e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2150      	movs	r1, #80	; 0x50
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fcf5 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 80026dc:	e02c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 fc42 	bl	8002f74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2160      	movs	r1, #96	; 0x60
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fce5 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e01c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270a:	461a      	mov	r2, r3
 800270c:	f000 fbc6 	bl	8002e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2140      	movs	r1, #64	; 0x40
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fcd5 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 800271c:	e00c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f000 fccc 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 800272e:	e003      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e000      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d831      	bhi.n	80027cc <HAL_TIM_ReadCapturedValue+0x78>
 8002768:	a201      	add	r2, pc, #4	; (adr r2, 8002770 <HAL_TIM_ReadCapturedValue+0x1c>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	080027a5 	.word	0x080027a5
 8002774:	080027cd 	.word	0x080027cd
 8002778:	080027cd 	.word	0x080027cd
 800277c:	080027cd 	.word	0x080027cd
 8002780:	080027af 	.word	0x080027af
 8002784:	080027cd 	.word	0x080027cd
 8002788:	080027cd 	.word	0x080027cd
 800278c:	080027cd 	.word	0x080027cd
 8002790:	080027b9 	.word	0x080027b9
 8002794:	080027cd 	.word	0x080027cd
 8002798:	080027cd 	.word	0x080027cd
 800279c:	080027cd 	.word	0x080027cd
 80027a0:	080027c3 	.word	0x080027c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027aa:	60fb      	str	r3, [r7, #12]

      break;
 80027ac:	e00f      	b.n	80027ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	60fb      	str	r3, [r7, #12]

      break;
 80027b6:	e00a      	b.n	80027ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	60fb      	str	r3, [r7, #12]

      break;
 80027c0:	e005      	b.n	80027ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	60fb      	str	r3, [r7, #12]

      break;
 80027ca:	e000      	b.n	80027ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80027cc:	bf00      	nop
  }

  return tmpreg;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <TIM_Base_SetConfig+0xbc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0x20>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d108      	bne.n	800285e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <TIM_Base_SetConfig+0xbc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_Base_SetConfig+0x52>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0x52>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <TIM_Base_SetConfig+0xc0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x52>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <TIM_Base_SetConfig+0xc4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <TIM_Base_SetConfig+0xbc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0xa0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <TIM_Base_SetConfig+0xc0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0xa0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <TIM_Base_SetConfig+0xc4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d103      	bne.n	80028d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	615a      	str	r2, [r3, #20]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40014000 	.word	0x40014000
 80028f0:	40014400 	.word	0x40014400

080028f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f023 0201 	bic.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f023 0302 	bic.w	r3, r3, #2
 8002940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <TIM_OC1_SetConfig+0xec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <TIM_OC1_SetConfig+0x70>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <TIM_OC1_SetConfig+0xf0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_OC1_SetConfig+0x70>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <TIM_OC1_SetConfig+0xf4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10c      	bne.n	800297e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f023 0308 	bic.w	r3, r3, #8
 800296a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <TIM_OC1_SetConfig+0xec>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <TIM_OC1_SetConfig+0xa2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <TIM_OC1_SetConfig+0xf0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_OC1_SetConfig+0xa2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <TIM_OC1_SetConfig+0xf4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d111      	bne.n	80029ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800299c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	621a      	str	r2, [r3, #32]
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40014000 	.word	0x40014000
 80029e8:	40014400 	.word	0x40014400

080029ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f023 0210 	bic.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0320 	bic.w	r3, r3, #32
 8002a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <TIM_OC2_SetConfig+0xe8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10d      	bne.n	8002a6c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <TIM_OC2_SetConfig+0xe8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d007      	beq.n	8002a84 <TIM_OC2_SetConfig+0x98>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <TIM_OC2_SetConfig+0xec>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_OC2_SetConfig+0x98>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <TIM_OC2_SetConfig+0xf0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d113      	bne.n	8002aac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40014400 	.word	0x40014400

08002ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <TIM_OC3_SetConfig+0xe4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10d      	bne.n	8002b5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <TIM_OC3_SetConfig+0xe4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_OC3_SetConfig+0x96>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <TIM_OC3_SetConfig+0xe8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_OC3_SetConfig+0x96>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <TIM_OC3_SetConfig+0xec>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40014400 	.word	0x40014400

08002bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	031b      	lsls	r3, r3, #12
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <TIM_OC4_SetConfig+0xb0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_OC4_SetConfig+0x74>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <TIM_OC4_SetConfig+0xb4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC4_SetConfig+0x74>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <TIM_OC4_SetConfig+0xb8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d109      	bne.n	8002c58 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40014400 	.word	0x40014400

08002c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <TIM_OC5_SetConfig+0xa4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_OC5_SetConfig+0x6a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <TIM_OC5_SetConfig+0xa8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_OC5_SetConfig+0x6a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <TIM_OC5_SetConfig+0xac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d109      	bne.n	8002d0a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	621a      	str	r2, [r3, #32]
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40014000 	.word	0x40014000
 8002d38:	40014400 	.word	0x40014400

08002d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	051b      	lsls	r3, r3, #20
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <TIM_OC6_SetConfig+0xa8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_OC6_SetConfig+0x6c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <TIM_OC6_SetConfig+0xac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_OC6_SetConfig+0x6c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <TIM_OC6_SetConfig+0xb0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d109      	bne.n	8002dbc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	621a      	str	r2, [r3, #32]
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400

08002df0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f023 0201 	bic.w	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <TIM_TI1_SetConfig+0xa4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_TI1_SetConfig+0x3e>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d003      	beq.n	8002e2e <TIM_TI1_SetConfig+0x3e>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <TIM_TI1_SetConfig+0xa8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <TIM_TI1_SetConfig+0x42>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <TIM_TI1_SetConfig+0x44>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e003      	b.n	8002e52 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f023 030a 	bic.w	r3, r3, #10
 8002e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 030a 	and.w	r3, r3, #10
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40014000 	.word	0x40014000

08002e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0201 	bic.w	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f023 030a 	bic.w	r3, r3, #10
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	621a      	str	r2, [r3, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b087      	sub	sp, #28
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 0210 	bic.w	r2, r3, #16
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	031b      	lsls	r3, r3, #12
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0210 	bic.w	r2, r3, #16
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	031b      	lsls	r3, r3, #12
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	621a      	str	r2, [r3, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f023 0303 	bic.w	r3, r3, #3
 8003000:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003010:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	b2db      	uxtb	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003024:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800308a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	031b      	lsls	r3, r3, #12
 8003090:	b29b      	uxth	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800309e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	031b      	lsls	r3, r3, #12
 80030a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f043 0307 	orr.w	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	431a      	orrs	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2201      	movs	r2, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800319c:	2302      	movs	r3, #2
 800319e:	e04f      	b.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a21      	ldr	r2, [pc, #132]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d108      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d004      	beq.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a10      	ldr	r2, [pc, #64]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10c      	bne.n	800322e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800321a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	4313      	orrs	r3, r2
 8003224:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40014000 	.word	0x40014000

08003254 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800326c:	2302      	movs	r3, #2
 800326e:	e060      	b.n	8003332 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d115      	bne.n	8003320 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	051b      	lsls	r3, r3, #20
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40012c00 	.word	0x40012c00

08003344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <memset>:
 8003380:	4402      	add	r2, r0
 8003382:	4603      	mov	r3, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <__libc_init_array>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4d0d      	ldr	r5, [pc, #52]	; (80033c8 <__libc_init_array+0x38>)
 8003394:	4c0d      	ldr	r4, [pc, #52]	; (80033cc <__libc_init_array+0x3c>)
 8003396:	1b64      	subs	r4, r4, r5
 8003398:	10a4      	asrs	r4, r4, #2
 800339a:	2600      	movs	r6, #0
 800339c:	42a6      	cmp	r6, r4
 800339e:	d109      	bne.n	80033b4 <__libc_init_array+0x24>
 80033a0:	4d0b      	ldr	r5, [pc, #44]	; (80033d0 <__libc_init_array+0x40>)
 80033a2:	4c0c      	ldr	r4, [pc, #48]	; (80033d4 <__libc_init_array+0x44>)
 80033a4:	f000 f818 	bl	80033d8 <_init>
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	2600      	movs	r6, #0
 80033ae:	42a6      	cmp	r6, r4
 80033b0:	d105      	bne.n	80033be <__libc_init_array+0x2e>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b8:	4798      	blx	r3
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7ee      	b.n	800339c <__libc_init_array+0xc>
 80033be:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c2:	4798      	blx	r3
 80033c4:	3601      	adds	r6, #1
 80033c6:	e7f2      	b.n	80033ae <__libc_init_array+0x1e>
 80033c8:	08003430 	.word	0x08003430
 80033cc:	08003430 	.word	0x08003430
 80033d0:	08003430 	.word	0x08003430
 80033d4:	08003434 	.word	0x08003434

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
