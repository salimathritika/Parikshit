
Mag_interface_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002370  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800253c  0800253c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800253c  0800253c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800253c  0800253c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002540  08002540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002550  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002550  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009495  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001939  00000000  00000000  000294d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018771  00000000  00000000  0002bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae8c  00000000  00000000  00044739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a46  00000000  00000000  0004f5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e800b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  000e805c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080024e4 	.word	0x080024e4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080024e4 	.word	0x080024e4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f9ad 	bl	800052e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f81c 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f89e 	bl	8000318 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001dc:	f000 f85e 	bl	800029c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    hi2c1.Devaddress = devadd;
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0x3c>)
 80001e2:	22d0      	movs	r2, #208	; 0xd0
 80001e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c1.Memaddress = memadd;
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <main+0x3c>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c1.XferSize = 1u;
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <main+0x3c>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c1.pBuffPtr = &mag;
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <main+0x3c>)
 80001f4:	4a05      	ldr	r2, [pc, #20]	; (800020c <main+0x40>)
 80001f6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_I2C_Init(&hi2c1);
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x3c>)
 80001fa:	f000 fc65 	bl	8000ac8 <HAL_I2C_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  read(&hi2c1,&mag);
 80001fe:	4903      	ldr	r1, [pc, #12]	; (800020c <main+0x40>)
 8000200:	4801      	ldr	r0, [pc, #4]	; (8000208 <main+0x3c>)
 8000202:	f002 f92d 	bl	8002460 <read>
 8000206:	e7fa      	b.n	80001fe <main+0x32>
 8000208:	20000028 	.word	0x20000028
 800020c:	2000007c 	.word	0x2000007c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b096      	sub	sp, #88	; 0x58
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2244      	movs	r2, #68	; 0x44
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 f958 	bl	80024d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000236:	f001 f8e9 	bl	800140c <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000240:	f000 f88e 	bl	8000360 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000244:	2310      	movs	r3, #16
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000250:	2360      	movs	r3, #96	; 0x60
 8000252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	4618      	mov	r0, r3
 800025e:	f001 f92b 	bl	80014b8 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000268:	f000 f87a 	bl	8000360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f001 fd79 	bl	8001d7c <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000290:	f000 f866 	bl	8000360 <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3758      	adds	r7, #88	; 0x58
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <MX_I2C1_Init+0x74>)
 80002a2:	4a1c      	ldr	r2, [pc, #112]	; (8000314 <MX_I2C1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <MX_I2C1_Init+0x74>)
 80002a8:	f640 6214 	movw	r2, #3604	; 0xe14
 80002ac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ae:	4b18      	ldr	r3, [pc, #96]	; (8000310 <MX_I2C1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <MX_I2C1_Init+0x74>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <MX_I2C1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <MX_I2C1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_I2C1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_I2C1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <MX_I2C1_Init+0x74>)
 80002da:	f000 fbf5 	bl	8000ac8 <HAL_I2C_Init>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002e4:	f000 f83c 	bl	8000360 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002e8:	2100      	movs	r1, #0
 80002ea:	4809      	ldr	r0, [pc, #36]	; (8000310 <MX_I2C1_Init+0x74>)
 80002ec:	f000 ffe8 	bl	80012c0 <HAL_I2CEx_ConfigAnalogFilter>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002f6:	f000 f833 	bl	8000360 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002fa:	2100      	movs	r1, #0
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_I2C1_Init+0x74>)
 80002fe:	f001 f82a 	bl	8001356 <HAL_I2CEx_ConfigDigitalFilter>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000308:	f000 f82a 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000028 	.word	0x20000028
 8000314:	40005400 	.word	0x40005400

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_GPIO_Init+0x44>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <MX_GPIO_Init+0x44>)
 8000324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_GPIO_Init+0x44>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_GPIO_Init+0x44>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <MX_GPIO_Init+0x44>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_GPIO_Init+0x44>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000368:	e7fe      	b.n	8000368 <Error_Handler+0x8>
	...

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <HAL_MspInit+0x44>)
 8000374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <HAL_MspInit+0x44>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6613      	str	r3, [r2, #96]	; 0x60
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_MspInit+0x44>)
 8000380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <HAL_MspInit+0x44>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <HAL_MspInit+0x44>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000394:	6593      	str	r3, [r2, #88]	; 0x58
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <HAL_MspInit+0x44>)
 8000398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800039a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b096      	sub	sp, #88	; 0x58
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	2234      	movs	r2, #52	; 0x34
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f002 f87d 	bl	80024d4 <memset>
  if(hi2c->Instance==I2C1)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a1f      	ldr	r2, [pc, #124]	; (800045c <HAL_I2C_MspInit+0xa8>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d137      	bne.n	8000454 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003e4:	2340      	movs	r3, #64	; 0x40
 80003e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 feaf 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80003fc:	f7ff ffb0 	bl	8000360 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <HAL_I2C_MspInit+0xac>)
 8000402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000404:	4a16      	ldr	r2, [pc, #88]	; (8000460 <HAL_I2C_MspInit+0xac>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <HAL_I2C_MspInit+0xac>)
 800040e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000418:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800041c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800041e:	2312      	movs	r3, #18
 8000420:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000426:	2303      	movs	r3, #3
 8000428:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800042a:	2304      	movs	r3, #4
 800042c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000432:	4619      	mov	r1, r3
 8000434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000438:	f000 f9d4 	bl	80007e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <HAL_I2C_MspInit+0xac>)
 800043e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_I2C_MspInit+0xac>)
 8000442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000446:	6593      	str	r3, [r2, #88]	; 0x58
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <HAL_I2C_MspInit+0xac>)
 800044a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800044c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000454:	bf00      	nop
 8000456:	3758      	adds	r7, #88	; 0x58
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40005400 	.word	0x40005400
 8000460:	40021000 	.word	0x40021000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler+0x4>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <UsageFault_Handler+0x4>

08000482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b0:	f000 f892 	bl	80005d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <SystemInit+0x20>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c2:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <SystemInit+0x20>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e0:	f7ff ffea 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050a:	f001 ffbf 	bl	800248c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800050e:	f7ff fe5d 	bl	80001cc <main>

08000512 <LoopForever>:

LoopForever:
    b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000514:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000520:	08002544 	.word	0x08002544
  ldr r2, =_sbss
 8000524:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000528:	20000084 	.word	0x20000084

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>

0800052e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000534:	2300      	movs	r3, #0
 8000536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f91f 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800053e:	200f      	movs	r0, #15
 8000540:	f000 f80e 	bl	8000560 <HAL_InitTick>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d002      	beq.n	8000550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	e001      	b.n	8000554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000550:	f7ff ff0c 	bl	800036c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000554:	79fb      	ldrb	r3, [r7, #7]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_InitTick+0x6c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d023      	beq.n	80005bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <HAL_InitTick+0x70>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_InitTick+0x6c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f91d 	bl	80007ca <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10f      	bne.n	80005b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d809      	bhi.n	80005b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f8f5 	bl	8000792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_InitTick+0x74>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
 80005ae:	e007      	b.n	80005c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005b0:	2301      	movs	r3, #1
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	e004      	b.n	80005c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e001      	b.n	80005c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x20>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x24>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_IncTick+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000080 	.word	0x20000080

08000600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return uwTick;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_GetTick+0x14>)
 8000606:	681b      	ldr	r3, [r3, #0]
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000080 	.word	0x20000080

08000618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <__NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	; (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f7ff ff8e 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff47 	bl	8000618 <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff5c 	bl	8000660 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff8e 	bl	80006d0 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5d 	bl	800067c <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffb0 	bl	8000738 <SysTick_Config>
 80007d8:	4603      	mov	r3, r0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f2:	e14e      	b.n	8000a92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	f000 8140 	beq.w	8000a8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	2b01      	cmp	r3, #1
 8000816:	d005      	beq.n	8000824 <HAL_GPIO_Init+0x40>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	2b02      	cmp	r3, #2
 8000822:	d130      	bne.n	8000886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	2203      	movs	r2, #3
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	68da      	ldr	r2, [r3, #12]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4313      	orrs	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800085a:	2201      	movs	r2, #1
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4013      	ands	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	091b      	lsrs	r3, r3, #4
 8000870:	f003 0201 	and.w	r2, r3, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 0303 	and.w	r3, r3, #3
 800088e:	2b03      	cmp	r3, #3
 8000890:	d017      	beq.n	80008c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d123      	bne.n	8000916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	08da      	lsrs	r2, r3, #3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3208      	adds	r2, #8
 80008d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	220f      	movs	r2, #15
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	691a      	ldr	r2, [r3, #16]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	6939      	ldr	r1, [r7, #16]
 8000912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 0203 	and.w	r2, r3, #3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 809a 	beq.w	8000a8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000958:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <HAL_GPIO_Init+0x2cc>)
 800095a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095c:	4a54      	ldr	r2, [pc, #336]	; (8000ab0 <HAL_GPIO_Init+0x2cc>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6613      	str	r3, [r2, #96]	; 0x60
 8000964:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <HAL_GPIO_Init+0x2cc>)
 8000966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000970:	4a50      	ldr	r2, [pc, #320]	; (8000ab4 <HAL_GPIO_Init+0x2d0>)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	089b      	lsrs	r3, r3, #2
 8000976:	3302      	adds	r3, #2
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	220f      	movs	r2, #15
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800099a:	d013      	beq.n	80009c4 <HAL_GPIO_Init+0x1e0>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a46      	ldr	r2, [pc, #280]	; (8000ab8 <HAL_GPIO_Init+0x2d4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d00d      	beq.n	80009c0 <HAL_GPIO_Init+0x1dc>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a45      	ldr	r2, [pc, #276]	; (8000abc <HAL_GPIO_Init+0x2d8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d007      	beq.n	80009bc <HAL_GPIO_Init+0x1d8>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <HAL_GPIO_Init+0x2dc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d101      	bne.n	80009b8 <HAL_GPIO_Init+0x1d4>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e006      	b.n	80009c6 <HAL_GPIO_Init+0x1e2>
 80009b8:	2307      	movs	r3, #7
 80009ba:	e004      	b.n	80009c6 <HAL_GPIO_Init+0x1e2>
 80009bc:	2302      	movs	r3, #2
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0x1e2>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <HAL_GPIO_Init+0x1e2>
 80009c4:	2300      	movs	r3, #0
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	f002 0203 	and.w	r2, r2, #3
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	4093      	lsls	r3, r2
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009d6:	4937      	ldr	r1, [pc, #220]	; (8000ab4 <HAL_GPIO_Init+0x2d0>)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	3302      	adds	r3, #2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009e4:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a32:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa22 f303 	lsr.w	r3, r2, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f47f aea9 	bne.w	80007f4 <HAL_GPIO_Init+0x10>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	371c      	adds	r7, #28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e081      	b.n	8000bde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d106      	bne.n	8000af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fc60 	bl	80003b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2224      	movs	r2, #36	; 0x24
 8000af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0201 	bic.w	r2, r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d107      	bne.n	8000b42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	e006      	b.n	8000b50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000b4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d104      	bne.n	8000b62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	691a      	ldr	r2, [r3, #16]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69d9      	ldr	r1, [r3, #28]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a1a      	ldr	r2, [r3, #32]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0201 	orr.w	r2, r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2220      	movs	r2, #32
 8000bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	817b      	strh	r3, [r7, #10]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	813b      	strh	r3, [r7, #8]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b20      	cmp	r3, #32
 8000c0c:	f040 80fd 	bne.w	8000e0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <HAL_I2C_Mem_Read+0x34>
 8000c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e0f1      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d101      	bne.n	8000c36 <HAL_I2C_Mem_Read+0x4e>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e0ea      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c3e:	f7ff fcdf 	bl	8000600 <HAL_GetTick>
 8000c42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2319      	movs	r3, #25
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f95b 	bl	8000f0c <I2C_WaitOnFlagUntilTimeout>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e0d5      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2222      	movs	r2, #34	; 0x22
 8000c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2240      	movs	r2, #64	; 0x40
 8000c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6a3a      	ldr	r2, [r7, #32]
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000c88:	88f8      	ldrh	r0, [r7, #6]
 8000c8a:	893a      	ldrh	r2, [r7, #8]
 8000c8c:	8979      	ldrh	r1, [r7, #10]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	4603      	mov	r3, r0
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f000 f8bf 	bl	8000e1c <I2C_RequestMemoryRead>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e0ad      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d90e      	bls.n	8000cd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	22ff      	movs	r2, #255	; 0xff
 8000cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	8979      	ldrh	r1, [r7, #10]
 8000cc8:	4b52      	ldr	r3, [pc, #328]	; (8000e14 <HAL_I2C_Mem_Read+0x22c>)
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f000 fac3 	bl	800125c <I2C_TransferConfig>
 8000cd6:	e00f      	b.n	8000cf8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	8979      	ldrh	r1, [r7, #10]
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <HAL_I2C_Mem_Read+0x22c>)
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 fab2 	bl	800125c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2104      	movs	r1, #4
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f000 f902 	bl	8000f0c <I2C_WaitOnFlagUntilTimeout>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e07c      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d034      	beq.n	8000db8 <HAL_I2C_Mem_Read+0x1d0>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d130      	bne.n	8000db8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f8d3 	bl	8000f0c <I2C_WaitOnFlagUntilTimeout>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e04d      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d90e      	bls.n	8000d98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	8979      	ldrh	r1, [r7, #10]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 fa63 	bl	800125c <I2C_TransferConfig>
 8000d96:	e00f      	b.n	8000db8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	8979      	ldrh	r1, [r7, #10]
 8000daa:	2300      	movs	r3, #0
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 fa52 	bl	800125c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d19a      	bne.n	8000cf8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 f920 	bl	800100c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e01a      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2220      	movs	r2, #32
 8000ddc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6859      	ldr	r1, [r3, #4]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_I2C_Mem_Read+0x230>)
 8000dea:	400b      	ands	r3, r1
 8000dec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2220      	movs	r2, #32
 8000df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8000e0a:	2302      	movs	r3, #2
  }
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	80002400 	.word	0x80002400
 8000e18:	fe00e800 	.word	0xfe00e800

08000e1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	817b      	strh	r3, [r7, #10]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	813b      	strh	r3, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	8979      	ldrh	r1, [r7, #10]
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <I2C_RequestMemoryRead+0xa4>)
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 fa0a 	bl	800125c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 f89d 	bl	8000f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e02c      	b.n	8000eb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d105      	bne.n	8000e6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e62:	893b      	ldrh	r3, [r7, #8]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8000e6c:	e015      	b.n	8000e9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000e6e:	893b      	ldrh	r3, [r7, #8]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	69b9      	ldr	r1, [r7, #24]
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f000 f883 	bl	8000f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e012      	b.n	8000eb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e90:	893b      	ldrh	r3, [r7, #8]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 f831 	bl	8000f0c <I2C_WaitOnFlagUntilTimeout>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	80002000 	.word	0x80002000

08000ec4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d103      	bne.n	8000ee2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d007      	beq.n	8000f00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	619a      	str	r2, [r3, #24]
  }
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f1c:	e022      	b.n	8000f64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d01e      	beq.n	8000f64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f26:	f7ff fb6b 	bl	8000600 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d302      	bcc.n	8000f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d113      	bne.n	8000f64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	f043 0220 	orr.w	r2, r3, #32
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e00f      	b.n	8000f84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	bf0c      	ite	eq
 8000f74:	2301      	moveq	r3, #1
 8000f76:	2300      	movne	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d0cd      	beq.n	8000f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f98:	e02c      	b.n	8000ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f000 f870 	bl	8001084 <I2C_IsErrorOccurred>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e02a      	b.n	8001004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d01e      	beq.n	8000ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fb6:	f7ff fb23 	bl	8000600 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d302      	bcc.n	8000fcc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d113      	bne.n	8000ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	f043 0220 	orr.w	r2, r3, #32
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2220      	movs	r2, #32
 8000fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e007      	b.n	8001004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d1cb      	bne.n	8000f9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001018:	e028      	b.n	800106c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 f830 	bl	8001084 <I2C_IsErrorOccurred>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e026      	b.n	800107c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800102e:	f7ff fae7 	bl	8000600 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	429a      	cmp	r2, r3
 800103c:	d302      	bcc.n	8001044 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d113      	bne.n	800106c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	f043 0220 	orr.w	r2, r3, #32
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2220      	movs	r2, #32
 8001054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e007      	b.n	800107c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	2b20      	cmp	r3, #32
 8001078:	d1cf      	bne.n	800101a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d075      	beq.n	800119c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2210      	movs	r2, #16
 80010b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010b8:	e056      	b.n	8001168 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d052      	beq.n	8001168 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010c2:	f7ff fa9d 	bl	8000600 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d302      	bcc.n	80010d8 <I2C_IsErrorOccurred+0x54>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d147      	bne.n	8001168 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010fa:	d12e      	bne.n	800115a <I2C_IsErrorOccurred+0xd6>
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001102:	d02a      	beq.n	800115a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001104:	7cfb      	ldrb	r3, [r7, #19]
 8001106:	2b20      	cmp	r3, #32
 8001108:	d027      	beq.n	800115a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001118:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800111a:	f7ff fa71 	bl	8000600 <HAL_GetTick>
 800111e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001120:	e01b      	b.n	800115a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001122:	f7ff fa6d 	bl	8000600 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b19      	cmp	r3, #25
 800112e:	d914      	bls.n	800115a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f043 0220 	orr.w	r2, r3, #32
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2220      	movs	r2, #32
 8001140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	2b20      	cmp	r3, #32
 8001166:	d1dc      	bne.n	8001122 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b20      	cmp	r3, #32
 8001174:	d003      	beq.n	800117e <I2C_IsErrorOccurred+0xfa>
 8001176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117a:	2b00      	cmp	r3, #0
 800117c:	d09d      	beq.n	80010ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800117e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001182:	2b00      	cmp	r3, #0
 8001184:	d103      	bne.n	800118e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2220      	movs	r2, #32
 800118c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00b      	beq.n	80011c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001202:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800120a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01c      	beq.n	800124c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7ff fe56 	bl	8000ec4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6859      	ldr	r1, [r3, #4]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <I2C_IsErrorOccurred+0x1d4>)
 8001224:	400b      	ands	r3, r1
 8001226:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	431a      	orrs	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2220      	movs	r2, #32
 8001238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800124c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001250:	4618      	mov	r0, r3
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	fe00e800 	.word	0xfe00e800

0800125c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	817b      	strh	r3, [r7, #10]
 800126a:	4613      	mov	r3, r2
 800126c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800126e:	897b      	ldrh	r3, [r7, #10]
 8001270:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001274:	7a7b      	ldrb	r3, [r7, #9]
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800127c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	4313      	orrs	r3, r2
 8001286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800128a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	0d5b      	lsrs	r3, r3, #21
 8001296:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <I2C_TransferConfig+0x60>)
 800129c:	430b      	orrs	r3, r1
 800129e:	43db      	mvns	r3, r3
 80012a0:	ea02 0103 	and.w	r1, r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80012ae:	bf00      	nop
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	03ff63ff 	.word	0x03ff63ff

080012c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d138      	bne.n	8001348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e032      	b.n	800134a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	e000      	b.n	800134a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001348:	2302      	movs	r3, #2
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b20      	cmp	r3, #32
 800136a:	d139      	bne.n	80013e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001376:	2302      	movs	r3, #2
 8001378:	e033      	b.n	80013e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2224      	movs	r2, #36	; 0x24
 8001386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	e000      	b.n	80013e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013e0:	2302      	movs	r3, #2
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <HAL_PWREx_GetVoltageRange+0x18>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40007000 	.word	0x40007000

0800140c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800141a:	d130      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001428:	d038      	beq.n	800149c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2232      	movs	r2, #50	; 0x32
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	3301      	adds	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001450:	e002      	b.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3b01      	subs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001464:	d102      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f2      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001478:	d110      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e00f      	b.n	800149e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148a:	d007      	beq.n	800149c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40007000 	.word	0x40007000
 80014b0:	20000000 	.word	0x20000000
 80014b4:	431bde83 	.word	0x431bde83

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f000 bc4f 	b.w	8001d6a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014cc:	4b97      	ldr	r3, [pc, #604]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d6:	4b95      	ldr	r3, [pc, #596]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80e6 	beq.w	80016ba <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <HAL_RCC_OscConfig+0x4c>
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	f040 808d 	bne.w	8001616 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	f040 8089 	bne.w	8001616 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001504:	4b89      	ldr	r3, [pc, #548]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_RCC_OscConfig+0x66>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	f000 bc26 	b.w	8001d6a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <HAL_RCC_OscConfig+0x80>
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001536:	e005      	b.n	8001544 <HAL_RCC_OscConfig+0x8c>
 8001538:	4b7c      	ldr	r3, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001544:	4293      	cmp	r3, r2
 8001546:	d224      	bcs.n	8001592 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fda1 	bl	8002094 <RCC_SetFlashLatencyFromMSIRange>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	f000 bc06 	b.w	8001d6a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155e:	4b73      	ldr	r3, [pc, #460]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a72      	ldr	r2, [pc, #456]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b70      	ldr	r3, [pc, #448]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	496d      	ldr	r1, [pc, #436]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157c:	4b6b      	ldr	r3, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	4968      	ldr	r1, [pc, #416]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	e025      	b.n	80015de <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001592:	4b66      	ldr	r3, [pc, #408]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a65      	ldr	r2, [pc, #404]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	4960      	ldr	r1, [pc, #384]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b0:	4b5e      	ldr	r3, [pc, #376]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	495b      	ldr	r1, [pc, #364]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fd60 	bl	8002094 <RCC_SetFlashLatencyFromMSIRange>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e3c5      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015de:	f000 fccd 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b51      	ldr	r3, [pc, #324]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4950      	ldr	r1, [pc, #320]	; (8001730 <HAL_RCC_OscConfig+0x278>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	4a4e      	ldr	r2, [pc, #312]	; (8001734 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <HAL_RCC_OscConfig+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffac 	bl	8000560 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d052      	beq.n	80016b8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	e3a9      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d032      	beq.n	8001684 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a42      	ldr	r2, [pc, #264]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162a:	f7fe ffe9 	bl	8000600 <HAL_GetTick>
 800162e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001632:	f7fe ffe5 	bl	8000600 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e392      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a35      	ldr	r2, [pc, #212]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	4930      	ldr	r1, [pc, #192]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	492b      	ldr	r1, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
 8001682:	e01a      	b.n	80016ba <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a28      	ldr	r2, [pc, #160]	; (800172c <HAL_RCC_OscConfig+0x274>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001690:	f7fe ffb6 	bl	8000600 <HAL_GetTick>
 8001694:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001698:	f7fe ffb2 	bl	8000600 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e35f      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x1e0>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d073      	beq.n	80017ae <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x220>
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d10e      	bne.n	80016f0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d10b      	bne.n	80016f0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d063      	beq.n	80017ac <HAL_RCC_OscConfig+0x2f4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d15f      	bne.n	80017ac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e33c      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x250>
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_RCC_OscConfig+0x274>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e025      	b.n	8001754 <HAL_RCC_OscConfig+0x29c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001710:	d114      	bne.n	800173c <HAL_RCC_OscConfig+0x284>
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a02      	ldr	r2, [pc, #8]	; (800172c <HAL_RCC_OscConfig+0x274>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e013      	b.n	8001754 <HAL_RCC_OscConfig+0x29c>
 800172c:	40021000 	.word	0x40021000
 8001730:	080024fc 	.word	0x080024fc
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004
 800173c:	4b8f      	ldr	r3, [pc, #572]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a8e      	ldr	r2, [pc, #568]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b8c      	ldr	r3, [pc, #560]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a8b      	ldr	r2, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7fe ff50 	bl	8000600 <HAL_GetTick>
 8001760:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7fe ff4c 	bl	8000600 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e2f9      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	4b81      	ldr	r3, [pc, #516]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x2ac>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7fe ff3c 	bl	8000600 <HAL_GetTick>
 8001788:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7fe ff38 	bl	8000600 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e2e5      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179e:	4b77      	ldr	r3, [pc, #476]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x2d4>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d060      	beq.n	800187c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x314>
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d119      	bne.n	80017fa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d116      	bne.n	80017fa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x32c>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e2c2      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	4962      	ldr	r1, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	e040      	b.n	800187c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d023      	beq.n	800184a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001802:	4b5e      	ldr	r3, [pc, #376]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7fe fef7 	bl	8000600 <HAL_GetTick>
 8001812:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7fe fef3 	bl	8000600 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e2a0      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001828:	4b54      	ldr	r3, [pc, #336]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	494e      	ldr	r1, [pc, #312]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
 8001848:	e018      	b.n	800187c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7fe fed3 	bl	8000600 <HAL_GetTick>
 800185a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7fe fecf 	bl	8000600 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e27c      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001870:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 8082 	beq.w	800198e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d05f      	beq.n	8001952 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001892:	4b3a      	ldr	r3, [pc, #232]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001898:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699a      	ldr	r2, [r3, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d037      	beq.n	8001918 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e254      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01b      	beq.n	8001902 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d0:	4a2a      	ldr	r2, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018da:	f7fe fe91 	bl	8000600 <HAL_GetTick>
 80018de:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7fe fe8d 	bl	8000600 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b11      	cmp	r3, #17
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e23a      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ef      	bne.n	80018e2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001908:	f023 0210 	bic.w	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	491a      	ldr	r1, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7fe fe6a 	bl	8000600 <HAL_GetTick>
 800192c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7fe fe66 	bl	8000600 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b11      	cmp	r3, #17
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e213      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ef      	beq.n	8001930 <HAL_RCC_OscConfig+0x478>
 8001950:	e01d      	b.n	800198e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_RCC_OscConfig+0x4c4>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7fe fe4d 	bl	8000600 <HAL_GetTick>
 8001966:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196a:	f7fe fe49 	bl	8000600 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b11      	cmp	r3, #17
 8001976:	d903      	bls.n	8001980 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1f6      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
 800197c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001980:	4ba9      	ldr	r3, [pc, #676]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ed      	bne.n	800196a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80bd 	beq.w	8001b16 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019a2:	4ba1      	ldr	r3, [pc, #644]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10e      	bne.n	80019cc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b9e      	ldr	r3, [pc, #632]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	4a9d      	ldr	r2, [pc, #628]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ba:	4b9b      	ldr	r3, [pc, #620]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b97      	ldr	r3, [pc, #604]	; (8001c2c <HAL_RCC_OscConfig+0x774>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d118      	bne.n	8001a0a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d8:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_RCC_OscConfig+0x774>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a93      	ldr	r2, [pc, #588]	; (8001c2c <HAL_RCC_OscConfig+0x774>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e4:	f7fe fe0c 	bl	8000600 <HAL_GetTick>
 80019e8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7fe fe08 	bl	8000600 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1b5      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	4b8b      	ldr	r3, [pc, #556]	; (8001c2c <HAL_RCC_OscConfig+0x774>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d02c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001a16:	4b84      	ldr	r3, [pc, #528]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	497f      	ldr	r1, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a3c:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a4c:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a75      	ldr	r2, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5c:	e018      	b.n	8001a90 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a5e:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	4a70      	ldr	r2, [pc, #448]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a70:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	4a6c      	ldr	r2, [pc, #432]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a80:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a68      	ldr	r2, [pc, #416]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a88:	f023 0304 	bic.w	r3, r3, #4
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d016      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7fe fdb2 	bl	8000600 <HAL_GetTick>
 8001a9c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7fe fdae 	bl	8000600 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e159      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ed      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x5e8>
 8001ac4:	e01d      	b.n	8001b02 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7fe fd9b 	bl	8000600 <HAL_GetTick>
 8001aca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7fe fd97 	bl	8000600 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e142      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ed      	bne.n	8001ace <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001af2:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af8:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d105      	bne.n	8001b16 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a46      	ldr	r2, [pc, #280]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b30:	4a3d      	ldr	r2, [pc, #244]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3a:	f7fe fd61 	bl	8000600 <HAL_GetTick>
 8001b3e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b42:	f7fe fd5d 	bl	8000600 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e10a      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ef      	beq.n	8001b42 <HAL_RCC_OscConfig+0x68a>
 8001b62:	e01b      	b.n	8001b9c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7fe fd44 	bl	8000600 <HAL_GetTick>
 8001b78:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7c:	f7fe fd40 	bl	8000600 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e0ed      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ef      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80e1 	beq.w	8001d68 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	f040 80b5 	bne.w	8001d1a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d124      	bne.n	8001c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d11b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d113      	bne.n	8001c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d05f      	beq.n	8001cce <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d05a      	beq.n	8001cca <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c20:	f7fe fcee 	bl	8000600 <HAL_GetTick>
 8001c24:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c26:	e00c      	b.n	8001c42 <HAL_RCC_OscConfig+0x78a>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe fce6 	bl	8000600 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e093      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x8c0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c68:	0212      	lsls	r2, r2, #8
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c70:	0852      	lsrs	r2, r2, #1
 8001c72:	3a01      	subs	r2, #1
 8001c74:	0552      	lsls	r2, r2, #21
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c7c:	0852      	lsrs	r2, r2, #1
 8001c7e:	3a01      	subs	r2, #1
 8001c80:	0652      	lsls	r2, r2, #25
 8001c82:	430a      	orrs	r2, r1
 8001c84:	493b      	ldr	r1, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a39      	ldr	r2, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c94:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4a36      	ldr	r2, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ca2:	f7fe fcad 	bl	8000600 <HAL_GetTick>
 8001ca6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fca9 	bl	8000600 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e056      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc8:	e04e      	b.n	8001d68 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e04d      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d146      	bne.n	8001d68 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cf2:	f7fe fc85 	bl	8000600 <HAL_GetTick>
 8001cf6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe fc81 	bl	8000600 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e02e      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x842>
 8001d18:	e026      	b.n	8001d68 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d021      	beq.n	8001d64 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe fc68 	bl	8000600 <HAL_GetTick>
 8001d30:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe fc64 	bl	8000600 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e011      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_RCC_OscConfig+0x8bc>)
 8001d58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d5c:	f023 0303 	bic.w	r3, r3, #3
 8001d60:	60d3      	str	r3, [r2, #12]
 8001d62:	e001      	b.n	8001d68 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	f99f808c 	.word	0xf99f808c

08001d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0e7      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4970      	ldr	r1, [pc, #448]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b6e      	ldr	r3, [pc, #440]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0cf      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d010      	beq.n	8001dee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d908      	bls.n	8001dee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4960      	ldr	r1, [pc, #384]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d04c      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0a6      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e09a      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e32:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e08e      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e42:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e086      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4943      	ldr	r1, [pc, #268]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e64:	f7fe fbcc 	bl	8000600 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7fe fbc8 	bl	8000600 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e06e      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d208      	bcs.n	8001ec2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	492b      	ldr	r1, [pc, #172]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d210      	bcs.n	8001ef2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 0207 	bic.w	r2, r3, #7
 8001ed8:	4923      	ldr	r1, [pc, #140]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e036      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4918      	ldr	r1, [pc, #96]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4910      	ldr	r1, [pc, #64]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f30:	f000 f824 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	490b      	ldr	r1, [pc, #44]	; (8001f70 <HAL_RCC_ClockConfig+0x1f4>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1fc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fb03 	bl	8000560 <HAL_InitTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	080024fc 	.word	0x080024fc
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000004 	.word	0x20000004

08001f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d121      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d11e      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	e004      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_RCC_GetSysClockFreq+0x114>)
 8002002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d134      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0xa6>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d003      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0xac>
 8002020:	e005      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCC_GetSysClockFreq+0x110>)
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	e005      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_GetSysClockFreq+0x114>)
 800202a:	617b      	str	r3, [r7, #20]
      break;
 800202c:	e002      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	617b      	str	r3, [r7, #20]
      break;
 8002032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	3301      	adds	r3, #1
 8002040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	fb03 f202 	mul.w	r2, r3, r2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	0e5b      	lsrs	r3, r3, #25
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	3301      	adds	r3, #1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002074:	69bb      	ldr	r3, [r7, #24]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	0800250c 	.word	0x0800250c
 800208c:	00f42400 	.word	0x00f42400
 8002090:	007a1200 	.word	0x007a1200

08002094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020ac:	f7ff f9a0 	bl	80013f0 <HAL_PWREx_GetVoltageRange>
 80020b0:	6178      	str	r0, [r7, #20]
 80020b2:	e014      	b.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6593      	str	r3, [r2, #88]	; 0x58
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020cc:	f7ff f990 	bl	80013f0 <HAL_PWREx_GetVoltageRange>
 80020d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d10b      	bne.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d919      	bls.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2ba0      	cmp	r3, #160	; 0xa0
 80020f0:	d902      	bls.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f2:	2302      	movs	r3, #2
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	e013      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f8:	2301      	movs	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e010      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d902      	bls.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002104:	2303      	movs	r3, #3
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e00a      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d102      	bne.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002110:	2302      	movs	r3, #2
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e004      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b70      	cmp	r3, #112	; 0x70
 800211a:	d101      	bne.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800211c:	2301      	movs	r3, #1
 800211e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 0207 	bic.w	r2, r3, #7
 8002128:	4909      	ldr	r1, [pc, #36]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800215c:	2300      	movs	r3, #0
 800215e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002160:	2300      	movs	r3, #0
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 809e 	beq.w	80022ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a39      	ldr	r2, [pc, #228]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fa24 	bl	8000600 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe fa20 	bl	8000600 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d902      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	74fb      	strb	r3, [r7, #19]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15a      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01e      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d019      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222a:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d016      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe f9e0 	bl	8000600 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	e00b      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe f9dc 	bl	8000600 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d902      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	74fb      	strb	r3, [r7, #19]
            break;
 800225a:	e006      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ec      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002286:	e009      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229c:	7c7b      	ldrb	r3, [r7, #17]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b6e      	ldr	r3, [pc, #440]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a6d      	ldr	r2, [pc, #436]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ba:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f023 0203 	bic.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4964      	ldr	r1, [pc, #400]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022dc:	4b5f      	ldr	r3, [pc, #380]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	495c      	ldr	r1, [pc, #368]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4953      	ldr	r1, [pc, #332]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002320:	4b4e      	ldr	r3, [pc, #312]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	494b      	ldr	r1, [pc, #300]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4942      	ldr	r1, [pc, #264]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002364:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	493a      	ldr	r1, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002386:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4931      	ldr	r1, [pc, #196]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4929      	ldr	r1, [pc, #164]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4920      	ldr	r1, [pc, #128]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	4918      	ldr	r1, [pc, #96]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800240a:	d105      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d015      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	490a      	ldr	r1, [pc, #40]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002442:	d105      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800244a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002450:	7cbb      	ldrb	r3, [r7, #18]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <read>:
 *  @parameter     Pointer to i2c structure, pointer to the variable storing the value from magnetometer
 *  @return value  Void
 *
 */
void read(I2C_HandleTypeDef *hi2c1,uint8_t *mag)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af04      	add	r7, sp, #16
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
	/*function to read value sent by magnetometer*/
    HAL_I2C_Mem_Read(hi2c1, 0xD0, 0x00, 1u, mag, 1u, 1000);//not using & because it is an address
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	9302      	str	r3, [sp, #8]
 8002470:	2301      	movs	r3, #1
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	2200      	movs	r2, #0
 800247c:	21d0      	movs	r1, #208	; 0xd0
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fbb2 	bl	8000be8 <HAL_I2C_Mem_Read>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <__libc_init_array>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	4d0d      	ldr	r5, [pc, #52]	; (80024c4 <__libc_init_array+0x38>)
 8002490:	4c0d      	ldr	r4, [pc, #52]	; (80024c8 <__libc_init_array+0x3c>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	2600      	movs	r6, #0
 8002498:	42a6      	cmp	r6, r4
 800249a:	d109      	bne.n	80024b0 <__libc_init_array+0x24>
 800249c:	4d0b      	ldr	r5, [pc, #44]	; (80024cc <__libc_init_array+0x40>)
 800249e:	4c0c      	ldr	r4, [pc, #48]	; (80024d0 <__libc_init_array+0x44>)
 80024a0:	f000 f820 	bl	80024e4 <_init>
 80024a4:	1b64      	subs	r4, r4, r5
 80024a6:	10a4      	asrs	r4, r4, #2
 80024a8:	2600      	movs	r6, #0
 80024aa:	42a6      	cmp	r6, r4
 80024ac:	d105      	bne.n	80024ba <__libc_init_array+0x2e>
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
 80024b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b4:	4798      	blx	r3
 80024b6:	3601      	adds	r6, #1
 80024b8:	e7ee      	b.n	8002498 <__libc_init_array+0xc>
 80024ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80024be:	4798      	blx	r3
 80024c0:	3601      	adds	r6, #1
 80024c2:	e7f2      	b.n	80024aa <__libc_init_array+0x1e>
 80024c4:	0800253c 	.word	0x0800253c
 80024c8:	0800253c 	.word	0x0800253c
 80024cc:	0800253c 	.word	0x0800253c
 80024d0:	08002540 	.word	0x08002540

080024d4 <memset>:
 80024d4:	4402      	add	r2, r0
 80024d6:	4603      	mov	r3, r0
 80024d8:	4293      	cmp	r3, r2
 80024da:	d100      	bne.n	80024de <memset+0xa>
 80024dc:	4770      	bx	lr
 80024de:	f803 1b01 	strb.w	r1, [r3], #1
 80024e2:	e7f9      	b.n	80024d8 <memset+0x4>

080024e4 <_init>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr

080024f0 <_fini>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	bf00      	nop
 80024f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f6:	bc08      	pop	{r3}
 80024f8:	469e      	mov	lr, r3
 80024fa:	4770      	bx	lr
