
Temp_Sensor_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  24000010  08003df0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000088  08003df0  00020088  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c4f3  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019a9  00000000  00000000  0002c531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a18  00000000  00000000  0002dee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000950  00000000  00000000  0002e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000306df  00000000  00000000  0002f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ce60  00000000  00000000  0005f927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001381ac  00000000  00000000  0006c787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a4933  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028f4  00000000  00000000  001a4984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003db0 	.word	0x08003db0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08003db0 	.word	0x08003db0

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000312:	f000 f8f9 	bl	8000508 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fa77 	bl	8000808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f82d 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8c9 	bl	80004b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000322:	f000 f887 	bl	8000434 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    hi2c1.Devaddress = 0x9A;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <main+0x64>)
 8000328:	229a      	movs	r2, #154	; 0x9a
 800032a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c1.Memaddress = 0x01;
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <main+0x64>)
 800032e:	2201      	movs	r2, #1
 8000330:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c1.XferSize = 1u;
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <main+0x64>)
 8000334:	2201      	movs	r2, #1
 8000336:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c1.Mode = HAL_I2C_MODE_MASTER;
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <main+0x64>)
 800033a:	2210      	movs	r2, #16
 800033c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c1.State = HAL_I2C_STATE_READY;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <main+0x64>)
 8000342:	2220      	movs	r2, #32
 8000344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c1.pBuffPtr = &temp;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <main+0x64>)
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <main+0x68>)
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_I2C_Init(&hi2c1);
 800034e:	4808      	ldr	r0, [pc, #32]	; (8000370 <main+0x64>)
 8000350:	f000 fdf4 	bl	8000f3c <HAL_I2C_Init>
    HAL_I2C_Mem_Read(&hi2c1, 0x9A, 0x01, 1u, &temp, 1u, 1000);
 8000354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000358:	9302      	str	r3, [sp, #8]
 800035a:	2301      	movs	r3, #1
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <main+0x68>)
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2301      	movs	r3, #1
 8000364:	2201      	movs	r2, #1
 8000366:	219a      	movs	r1, #154	; 0x9a
 8000368:	4801      	ldr	r0, [pc, #4]	; (8000370 <main+0x64>)
 800036a:	f000 fe77 	bl	800105c <HAL_I2C_Mem_Read>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036e:	e7fe      	b.n	800036e <main+0x62>
 8000370:	2400002c 	.word	0x2400002c
 8000374:	24000080 	.word	0x24000080

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	; 0x70
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000382:	224c      	movs	r2, #76	; 0x4c
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fd0a 	bl	8003da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2220      	movs	r2, #32
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fd04 	bl	8003da0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000398:	2004      	movs	r0, #4
 800039a:	f001 fa75 	bl	8001888 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	4b23      	ldr	r3, [pc, #140]	; (8000430 <SystemClock_Config+0xb8>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <SystemClock_Config+0xb8>)
 80003ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <SystemClock_Config+0xb8>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003be:	bf00      	nop
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <SystemClock_Config+0xb8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003cc:	d1f8      	bne.n	80003c0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003d6:	2340      	movs	r3, #64	; 0x40
 80003d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003da:	2300      	movs	r3, #0
 80003dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 faaa 	bl	800193c <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ee:	f000 f8b7 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	233f      	movs	r3, #63	; 0x3f
 80003f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000402:	2340      	movs	r3, #64	; 0x40
 8000404:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000406:	2340      	movs	r3, #64	; 0x40
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800040a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000410:	2340      	movs	r3, #64	; 0x40
 8000412:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2101      	movs	r1, #1
 8000418:	4618      	mov	r0, r3
 800041a:	f001 fe69 	bl	80020f0 <HAL_RCC_ClockConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000424:	f000 f89c 	bl	8000560 <Error_Handler>
  }
}
 8000428:	bf00      	nop
 800042a:	3770      	adds	r7, #112	; 0x70
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	58024800 	.word	0x58024800

08000434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_I2C1_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <MX_I2C1_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <MX_I2C1_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_I2C1_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_I2C1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000470:	f000 fd64 	bl	8000f3c <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 f871 	bl	8000560 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000482:	f001 f969 	bl	8001758 <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 f868 	bl	8000560 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000494:	f001 f9ab 	bl	80017ee <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f85f 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2400002c 	.word	0x2400002c
 80004ac:	40005400 	.word	0x40005400
 80004b0:	00707cbb 	.word	0x00707cbb

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_GPIO_Init+0x50>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	4a10      	ldr	r2, [pc, #64]	; (8000504 <MX_GPIO_Init+0x50>)
 80004c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_GPIO_Init+0x50>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <MX_GPIO_Init+0x50>)
 80004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004de:	4a09      	ldr	r2, [pc, #36]	; (8000504 <MX_GPIO_Init+0x50>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_GPIO_Init+0x50>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	58024400 	.word	0x58024400

08000508 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800051a:	f000 faeb 	bl	8000af4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800051e:	2301      	movs	r3, #1
 8000520:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000522:	2300      	movs	r3, #0
 8000524:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800052a:	231f      	movs	r3, #31
 800052c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800052e:	2387      	movs	r3, #135	; 0x87
 8000530:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000532:	2300      	movs	r3, #0
 8000534:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000536:	2300      	movs	r3, #0
 8000538:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800053a:	2301      	movs	r3, #1
 800053c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800053e:	2301      	movs	r3, #1
 8000540:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800054a:	463b      	mov	r3, r7
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fb09 	bl	8000b64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000552:	2004      	movs	r0, #4
 8000554:	f000 fae6 	bl	8000b24 <HAL_MPU_Enable>

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	e7fe      	b.n	8000568 <Error_Handler+0x8>
	...

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <HAL_MspInit+0x30>)
 8000574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <HAL_MspInit+0x30>)
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_MspInit+0x30>)
 8000584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	58024400 	.word	0x58024400

080005a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0b8      	sub	sp, #224	; 0xe0
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	22b8      	movs	r2, #184	; 0xb8
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fbed 	bl	8003da0 <memset>
  if(hi2c->Instance==I2C1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a26      	ldr	r2, [pc, #152]	; (8000664 <HAL_I2C_MspInit+0xc4>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d145      	bne.n	800065c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005d0:	f04f 0208 	mov.w	r2, #8
 80005d4:	f04f 0300 	mov.w	r3, #0
 80005d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f8b2 	bl	8002750 <HAL_RCCEx_PeriphCLKConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80005f2:	f7ff ffb5 	bl	8000560 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <HAL_I2C_MspInit+0xc8>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <HAL_I2C_MspInit+0xc8>)
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_I2C_MspInit+0xc8>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000614:	23c0      	movs	r3, #192	; 0xc0
 8000616:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	2312      	movs	r3, #18
 800061c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800062c:	2304      	movs	r3, #4
 800062e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000636:	4619      	mov	r1, r3
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <HAL_I2C_MspInit+0xcc>)
 800063a:	f000 fad7 	bl	8000bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_I2C_MspInit+0xc8>)
 8000640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_I2C_MspInit+0xc8>)
 8000646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800064a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_I2C_MspInit+0xc8>)
 8000650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800065c:	bf00      	nop
 800065e:	37e0      	adds	r7, #224	; 0xe0
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40005400 	.word	0x40005400
 8000668:	58024400 	.word	0x58024400
 800066c:	58020400 	.word	0x58020400

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler+0x4>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>

0800068e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f000 f916 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c8:	4b32      	ldr	r3, [pc, #200]	; (8000794 <SystemInit+0xd0>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ce:	4a31      	ldr	r2, [pc, #196]	; (8000794 <SystemInit+0xd0>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <SystemInit+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d807      	bhi.n	80006f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <SystemInit+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 030f 	bic.w	r3, r3, #15
 80006ec:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <SystemInit+0xd4>)
 80006ee:	f043 0307 	orr.w	r3, r3, #7
 80006f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <SystemInit+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a28      	ldr	r2, [pc, #160]	; (800079c <SystemInit+0xd8>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <SystemInit+0xd8>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0xd8>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4924      	ldr	r1, [pc, #144]	; (800079c <SystemInit+0xd8>)
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <SystemInit+0xdc>)
 800070e:	4013      	ands	r3, r2
 8000710:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0xd4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d007      	beq.n	800072e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0xd4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f023 030f 	bic.w	r3, r3, #15
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0xd4>)
 8000728:	f043 0307 	orr.w	r3, r3, #7
 800072c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <SystemInit+0xd8>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0xd8>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <SystemInit+0xd8>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0xd8>)
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <SystemInit+0xe0>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <SystemInit+0xd8>)
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <SystemInit+0xe4>)
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0xd8>)
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <SystemInit+0xe8>)
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <SystemInit+0xd8>)
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <SystemInit+0xd8>)
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <SystemInit+0xe8>)
 800075c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <SystemInit+0xd8>)
 8000760:	2200      	movs	r2, #0
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <SystemInit+0xd8>)
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <SystemInit+0xe8>)
 8000768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <SystemInit+0xd8>)
 800076c:	2200      	movs	r2, #0
 800076e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <SystemInit+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <SystemInit+0xd8>)
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <SystemInit+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <SystemInit+0xec>)
 8000784:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000788:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	52004000 	.word	0x52004000

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b8:	f7ff ff84 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	; (8000800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f003 fab9 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff fd91 	bl	800030c <main>
  bx  lr
 80007ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007ec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80007f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007f4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007f8:	08003de0 	.word	0x08003de0
  ldr r2, =_sbss
 80007fc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000800:	24000088 	.word	0x24000088

08000804 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC3_IRQHandler>
	...

08000808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080e:	2003      	movs	r0, #3
 8000810:	f000 f93e 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000814:	f001 fe22 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8000818:	4602      	mov	r2, r0
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_Init+0x68>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	f003 030f 	and.w	r3, r3, #15
 8000824:	4913      	ldr	r1, [pc, #76]	; (8000874 <HAL_Init+0x6c>)
 8000826:	5ccb      	ldrb	r3, [r1, r3]
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	fa22 f303 	lsr.w	r3, r2, r3
 8000830:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_Init+0x68>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_Init+0x6c>)
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	f003 031f 	and.w	r3, r3, #31
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	fa22 f303 	lsr.w	r3, r2, r3
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_Init+0x70>)
 800084a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <HAL_Init+0x74>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000852:	200f      	movs	r0, #15
 8000854:	f000 f814 	bl	8000880 <HAL_InitTick>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e002      	b.n	8000868 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000862:	f7ff fe83 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	58024400 	.word	0x58024400
 8000874:	08003dc8 	.word	0x08003dc8
 8000878:	24000004 	.word	0x24000004
 800087c:	24000000 	.word	0x24000000

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_InitTick+0x60>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e021      	b.n	80008d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <HAL_InitTick+0x64>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_InitTick+0x60>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f915 	bl	8000ada <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f8ed 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x68>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2400000c 	.word	0x2400000c
 80008e4:	24000000 	.word	0x24000000
 80008e8:	24000008 	.word	0x24000008

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	2400000c 	.word	0x2400000c
 8000910:	24000084 	.word	0x24000084

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	24000084 	.word	0x24000084

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	4313      	orrs	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x40>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	05fa0000 	.word	0x05fa0000

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff47 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff5e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff90 	bl	80009e4 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5f 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffb2 	bl	8000a4c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000af8:	f3bf 8f5f 	dmb	sy
}
 8000afc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_MPU_Disable+0x28>)
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_MPU_Disable+0x28>)
 8000b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_MPU_Disable+0x2c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	e000ed90 	.word	0xe000ed90

08000b24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_MPU_Enable+0x38>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_MPU_Enable+0x3c>)
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <HAL_MPU_Enable+0x3c>)
 8000b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b40:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b42:	f3bf 8f4f 	dsb	sy
}
 8000b46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b48:	f3bf 8f6f 	isb	sy
}
 8000b4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed90 	.word	0xe000ed90
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	785a      	ldrb	r2, [r3, #1]
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000b72:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d029      	beq.n	8000bd0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7b1b      	ldrb	r3, [r3, #12]
 8000b88:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7adb      	ldrb	r3, [r3, #11]
 8000b8e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7a9b      	ldrb	r3, [r3, #10]
 8000b96:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7b5b      	ldrb	r3, [r3, #13]
 8000b9e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ba0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7b9b      	ldrb	r3, [r3, #14]
 8000ba6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ba8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7bdb      	ldrb	r3, [r3, #15]
 8000bae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7a5b      	ldrb	r3, [r3, #9]
 8000bb6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7a1b      	ldrb	r3, [r3, #8]
 8000bbe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bc0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bcc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000bce:	e005      	b.n	8000bdc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed90 	.word	0xe000ed90

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bfa:	4b86      	ldr	r3, [pc, #536]	; (8000e14 <HAL_GPIO_Init+0x228>)
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bfe:	e18c      	b.n	8000f1a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 817e 	beq.w	8000f14 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x44>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	f003 0201 	and.w	r2, r3, #1
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	69b9      	ldr	r1, [r7, #24]
 8000d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0203 	and.w	r2, r3, #3
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 80d8 	beq.w	8000f14 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <HAL_GPIO_Init+0x22c>)
 8000d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6a:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <HAL_GPIO_Init+0x22c>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <HAL_GPIO_Init+0x22c>)
 8000d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a26      	ldr	r2, [pc, #152]	; (8000e1c <HAL_GPIO_Init+0x230>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_GPIO_Init+0x234>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d04a      	beq.n	8000e44 <HAL_GPIO_Init+0x258>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_GPIO_Init+0x238>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02b      	beq.n	8000e0e <HAL_GPIO_Init+0x222>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_GPIO_Init+0x23c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d025      	beq.n	8000e0a <HAL_GPIO_Init+0x21e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_GPIO_Init+0x240>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01f      	beq.n	8000e06 <HAL_GPIO_Init+0x21a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_GPIO_Init+0x244>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x216>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x248>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x212>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_GPIO_Init+0x24c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x20e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_GPIO_Init+0x250>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x20a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <HAL_GPIO_Init+0x254>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x206>
 8000dee:	2309      	movs	r3, #9
 8000df0:	e029      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000df2:	230a      	movs	r3, #10
 8000df4:	e027      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e025      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e023      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e021      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e01f      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e01d      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e01b      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e019      	b.n	8000e46 <HAL_GPIO_Init+0x25a>
 8000e12:	bf00      	nop
 8000e14:	58000080 	.word	0x58000080
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58000400 	.word	0x58000400
 8000e20:	58020000 	.word	0x58020000
 8000e24:	58020400 	.word	0x58020400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020c00 	.word	0x58020c00
 8000e30:	58021000 	.word	0x58021000
 8000e34:	58021400 	.word	0x58021400
 8000e38:	58021800 	.word	0x58021800
 8000e3c:	58021c00 	.word	0x58021c00
 8000e40:	58022400 	.word	0x58022400
 8000e44:	2300      	movs	r3, #0
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e56:	4938      	ldr	r1, [pc, #224]	; (8000f38 <HAL_GPIO_Init+0x34c>)
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa22 f303 	lsr.w	r3, r2, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f47f ae6b 	bne.w	8000c00 <HAL_GPIO_Init+0x14>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3724      	adds	r7, #36	; 0x24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58000400 	.word	0x58000400

08000f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e07f      	b.n	800104e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fb1c 	bl	80005a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2224      	movs	r2, #36	; 0x24
 8000f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d107      	bne.n	8000fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	e006      	b.n	8000fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d104      	bne.n	8000fd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6859      	ldr	r1, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_I2C_Init+0x11c>)
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ff4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69d9      	ldr	r1, [r3, #28]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1a      	ldr	r2, [r3, #32]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2220      	movs	r2, #32
 800103a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	02008000 	.word	0x02008000

0800105c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af02      	add	r7, sp, #8
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4603      	mov	r3, r0
 800106c:	817b      	strh	r3, [r7, #10]
 800106e:	460b      	mov	r3, r1
 8001070:	813b      	strh	r3, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b20      	cmp	r3, #32
 8001080:	f040 80fd 	bne.w	800127e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <HAL_I2C_Mem_Read+0x34>
 800108a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800108c:	2b00      	cmp	r3, #0
 800108e:	d105      	bne.n	800109c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0f1      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_I2C_Mem_Read+0x4e>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e0ea      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010b2:	f7ff fc2f 	bl	8000914 <HAL_GetTick>
 80010b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2319      	movs	r3, #25
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 f95b 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0d5      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2222      	movs	r2, #34	; 0x22
 80010d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010fc:	88f8      	ldrh	r0, [r7, #6]
 80010fe:	893a      	ldrh	r2, [r7, #8]
 8001100:	8979      	ldrh	r1, [r7, #10]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4603      	mov	r3, r0
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f8bf 	bl	8001290 <I2C_RequestMemoryRead>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0ad      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001128:	b29b      	uxth	r3, r3
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d90e      	bls.n	800114c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001138:	b2da      	uxtb	r2, r3
 800113a:	8979      	ldrh	r1, [r7, #10]
 800113c:	4b52      	ldr	r3, [pc, #328]	; (8001288 <HAL_I2C_Mem_Read+0x22c>)
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 fad5 	bl	80016f4 <I2C_TransferConfig>
 800114a:	e00f      	b.n	800116c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	8979      	ldrh	r1, [r7, #10]
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <HAL_I2C_Mem_Read+0x22c>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 fac4 	bl	80016f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2200      	movs	r2, #0
 8001174:	2104      	movs	r1, #4
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 f902 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07c      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011bc:	b29b      	uxth	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d034      	beq.n	800122c <HAL_I2C_Mem_Read+0x1d0>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d130      	bne.n	800122c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	2200      	movs	r2, #0
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f8d3 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e04d      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2bff      	cmp	r3, #255	; 0xff
 80011ec:	d90e      	bls.n	800120c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	22ff      	movs	r2, #255	; 0xff
 80011f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	8979      	ldrh	r1, [r7, #10]
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 fa75 	bl	80016f4 <I2C_TransferConfig>
 800120a:	e00f      	b.n	800122c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121a:	b2da      	uxtb	r2, r3
 800121c:	8979      	ldrh	r1, [r7, #10]
 800121e:	2300      	movs	r3, #0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 fa64 	bl	80016f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001230:	b29b      	uxth	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d19a      	bne.n	800116c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f936 	bl	80014ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e01a      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2220      	movs	r2, #32
 8001250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_I2C_Mem_Read+0x230>)
 800125e:	400b      	ands	r3, r1
 8001260:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2220      	movs	r2, #32
 8001266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800127e:	2302      	movs	r3, #2
  }
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	80002400 	.word	0x80002400
 800128c:	fe00e800 	.word	0xfe00e800

08001290 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	4608      	mov	r0, r1
 800129a:	4611      	mov	r1, r2
 800129c:	461a      	mov	r2, r3
 800129e:	4603      	mov	r3, r0
 80012a0:	817b      	strh	r3, [r7, #10]
 80012a2:	460b      	mov	r3, r1
 80012a4:	813b      	strh	r3, [r7, #8]
 80012a6:	4613      	mov	r3, r2
 80012a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	8979      	ldrh	r1, [r7, #10]
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <I2C_RequestMemoryRead+0xa4>)
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fa1c 	bl	80016f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f8ac 	bl	800141e <I2C_WaitOnTXISFlagUntilTimeout>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e02c      	b.n	800132a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d105      	bne.n	80012e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012d6:	893b      	ldrh	r3, [r7, #8]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
 80012e0:	e015      	b.n	800130e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012e2:	893b      	ldrh	r3, [r7, #8]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f892 	bl	800141e <I2C_WaitOnTXISFlagUntilTimeout>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e012      	b.n	800132a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001304:	893b      	ldrh	r3, [r7, #8]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	; 0x40
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f831 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	80002000 	.word	0x80002000

08001338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b02      	cmp	r3, #2
 800134c:	d103      	bne.n	8001356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d007      	beq.n	8001374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	619a      	str	r2, [r3, #24]
  }
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001390:	e031      	b.n	80013f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d02d      	beq.n	80013f6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139a:	f7ff fabb 	bl	8000914 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d302      	bcc.n	80013b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d122      	bne.n	80013f6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4013      	ands	r3, r2
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	429a      	cmp	r2, r3
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d113      	bne.n	80013f6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f043 0220 	orr.w	r2, r3, #32
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2220      	movs	r2, #32
 80013de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4013      	ands	r3, r2
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	429a      	cmp	r2, r3
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	429a      	cmp	r2, r3
 8001412:	d0be      	beq.n	8001392 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800142a:	e033      	b.n	8001494 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f87f 	bl	8001534 <I2C_IsErrorOccurred>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e031      	b.n	80014a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001446:	d025      	beq.n	8001494 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001448:	f7ff fa64 	bl	8000914 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	429a      	cmp	r2, r3
 8001456:	d302      	bcc.n	800145e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d11a      	bne.n	8001494 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b02      	cmp	r3, #2
 800146a:	d013      	beq.n	8001494 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2220      	movs	r2, #32
 800147c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e007      	b.n	80014a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d1c4      	bne.n	800142c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014b8:	e02f      	b.n	800151a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f838 	bl	8001534 <I2C_IsErrorOccurred>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e02d      	b.n	800152a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ce:	f7ff fa21 	bl	8000914 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d302      	bcc.n	80014e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d11a      	bne.n	800151a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d013      	beq.n	800151a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f043 0220 	orr.w	r2, r3, #32
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e007      	b.n	800152a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b20      	cmp	r3, #32
 8001526:	d1c8      	bne.n	80014ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	d068      	beq.n	8001632 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2210      	movs	r2, #16
 8001566:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001568:	e049      	b.n	80015fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d045      	beq.n	80015fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001572:	f7ff f9cf 	bl	8000914 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	429a      	cmp	r2, r3
 8001580:	d302      	bcc.n	8001588 <I2C_IsErrorOccurred+0x54>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d13a      	bne.n	80015fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800159a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015aa:	d121      	bne.n	80015f0 <I2C_IsErrorOccurred+0xbc>
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015b2:	d01d      	beq.n	80015f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80015b4:	7cfb      	ldrb	r3, [r7, #19]
 80015b6:	2b20      	cmp	r3, #32
 80015b8:	d01a      	beq.n	80015f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015ca:	f7ff f9a3 	bl	8000914 <HAL_GetTick>
 80015ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015d0:	e00e      	b.n	80015f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015d2:	f7ff f99f 	bl	8000914 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b19      	cmp	r3, #25
 80015de:	d907      	bls.n	80015f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80015ee:	e006      	b.n	80015fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d1e9      	bne.n	80015d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	2b20      	cmp	r3, #32
 800160a:	d003      	beq.n	8001614 <I2C_IsErrorOccurred+0xe0>
 800160c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0aa      	beq.n	800156a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001618:	2b00      	cmp	r3, #0
 800161a:	d103      	bne.n	8001624 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2220      	movs	r2, #32
 8001622:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00b      	beq.n	800165c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001676:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001698:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80016a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01c      	beq.n	80016e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fe45 	bl	8001338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <I2C_IsErrorOccurred+0x1bc>)
 80016ba:	400b      	ands	r3, r1
 80016bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80016e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	fe00e800 	.word	0xfe00e800

080016f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	817b      	strh	r3, [r7, #10]
 8001702:	4613      	mov	r3, r2
 8001704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800170c:	7a7b      	ldrb	r3, [r7, #9]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001714:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	4313      	orrs	r3, r2
 800171e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001722:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	0d5b      	lsrs	r3, r3, #21
 800172e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <I2C_TransferConfig+0x60>)
 8001734:	430b      	orrs	r3, r1
 8001736:	43db      	mvns	r3, r3
 8001738:	ea02 0103 	and.w	r1, r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	03ff63ff 	.word	0x03ff63ff

08001758 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	d138      	bne.n	80017e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001778:	2302      	movs	r3, #2
 800177a:	e032      	b.n	80017e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2224      	movs	r2, #36	; 0x24
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
  }
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b085      	sub	sp, #20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b20      	cmp	r3, #32
 8001802:	d139      	bne.n	8001878 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800180e:	2302      	movs	r3, #2
 8001810:	e033      	b.n	800187a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2224      	movs	r2, #36	; 0x24
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001840:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2220      	movs	r2, #32
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e000      	b.n	800187a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
  }
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	2b06      	cmp	r3, #6
 800189a:	d00a      	beq.n	80018b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e03f      	b.n	800192e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e03d      	b.n	800192e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018ba:	491f      	ldr	r1, [pc, #124]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4313      	orrs	r3, r2
 80018c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018c2:	f7ff f827 	bl	8000914 <HAL_GetTick>
 80018c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018c8:	e009      	b.n	80018de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018ca:	f7ff f823 	bl	8000914 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018d8:	d901      	bls.n	80018de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e027      	b.n	800192e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ea:	d1ee      	bne.n	80018ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b1e      	cmp	r3, #30
 80018f0:	d008      	beq.n	8001904 <HAL_PWREx_ConfigSupply+0x7c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b2e      	cmp	r3, #46	; 0x2e
 80018f6:	d005      	beq.n	8001904 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b1d      	cmp	r3, #29
 80018fc:	d002      	beq.n	8001904 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b2d      	cmp	r3, #45	; 0x2d
 8001902:	d113      	bne.n	800192c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001904:	f7ff f806 	bl	8000914 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800190a:	e009      	b.n	8001920 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800190c:	f7ff f802 	bl	8000914 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800191a:	d901      	bls.n	8001920 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e006      	b.n	800192e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0311 	and.w	r3, r3, #17
 8001928:	2b11      	cmp	r3, #17
 800192a:	d1ef      	bne.n	800190c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	58024800 	.word	0x58024800

0800193c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e3c8      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8087 	beq.w	8001a6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195c:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001966:	4b86      	ldr	r3, [pc, #536]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	2b10      	cmp	r3, #16
 8001970:	d007      	beq.n	8001982 <HAL_RCC_OscConfig+0x46>
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	2b18      	cmp	r3, #24
 8001976:	d110      	bne.n	800199a <HAL_RCC_OscConfig+0x5e>
 8001978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d10b      	bne.n	800199a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001982:	4b7f      	ldr	r3, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d06c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x12c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d168      	bne.n	8001a68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e3a2      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x76>
 80019a4:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e02e      	b.n	8001a10 <HAL_RCC_OscConfig+0xd4>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x98>
 80019ba:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a70      	ldr	r2, [pc, #448]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6d      	ldr	r2, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xd4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0xbc>
 80019de:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a64      	ldr	r2, [pc, #400]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xd4>
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a60      	ldr	r2, [pc, #384]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a5d      	ldr	r2, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7fe ff7c 	bl	8000914 <HAL_GetTick>
 8001a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7fe ff78 	bl	8000914 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e356      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xe4>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7fe ff68 	bl	8000914 <HAL_GetTick>
 8001a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7fe ff64 	bl	8000914 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e342      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x10c>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 808c 	beq.w	8001b90 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_RCC_OscConfig+0x162>
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	2b18      	cmp	r3, #24
 8001a92:	d137      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1c8>
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d132      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x17a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e314      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0219 	bic.w	r2, r3, #25
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	492f      	ldr	r1, [pc, #188]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7fe ff24 	bl	8000914 <HAL_GetTick>
 8001acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7fe ff20 	bl	8000914 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e2fe      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	061b      	lsls	r3, r3, #24
 8001afc:	4920      	ldr	r1, [pc, #128]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b02:	e045      	b.n	8001b90 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d026      	beq.n	8001b5a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 0219 	bic.w	r2, r3, #25
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4919      	ldr	r1, [pc, #100]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fef9 	bl	8000914 <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7fe fef5 	bl	8000914 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e2d3      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	490b      	ldr	r1, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	e01a      	b.n	8001b90 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_RCC_OscConfig+0x244>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7fe fed5 	bl	8000914 <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7fe fed1 	bl	8000914 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d903      	bls.n	8001b84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e2af      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
 8001b80:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b84:	4b96      	ldr	r3, [pc, #600]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ee      	bne.n	8001b6e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d06a      	beq.n	8001c72 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9c:	4b90      	ldr	r3, [pc, #576]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ba6:	4b8e      	ldr	r3, [pc, #568]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d007      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x286>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b18      	cmp	r3, #24
 8001bb6:	d11b      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2b4>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bc2:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x29e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b80      	cmp	r3, #128	; 0x80
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e282      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bda:	4b81      	ldr	r3, [pc, #516]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	061b      	lsls	r3, r3, #24
 8001be8:	497d      	ldr	r1, [pc, #500]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bee:	e040      	b.n	8001c72 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bf8:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a78      	ldr	r2, [pc, #480]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7fe fe86 	bl	8000914 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fe82 	bl	8000914 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e260      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c1e:	4b70      	ldr	r3, [pc, #448]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c2a:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	4969      	ldr	r1, [pc, #420]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60cb      	str	r3, [r1, #12]
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c40:	4b67      	ldr	r3, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a66      	ldr	r2, [pc, #408]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7fe fe62 	bl	8000914 <HAL_GetTick>
 8001c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c54:	f7fe fe5e 	bl	8000914 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e23c      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c66:	4b5e      	ldr	r3, [pc, #376]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d036      	beq.n	8001cec <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	4a55      	ldr	r2, [pc, #340]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7fe fe3f 	bl	8000914 <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7fe fe3b 	bl	8000914 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e219      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x35e>
 8001cb8:	e018      	b.n	8001cec <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	4a48      	ldr	r2, [pc, #288]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7fe fe25 	bl	8000914 <HAL_GetTick>
 8001cca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7fe fe21 	bl	8000914 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1ff      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d036      	beq.n	8001d66 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d019      	beq.n	8001d34 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001d06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d0c:	f7fe fe02 	bl	8000914 <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d14:	f7fe fdfe 	bl	8000914 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1dc      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x3d8>
 8001d32:	e018      	b.n	8001d66 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d40:	f7fe fde8 	bl	8000914 <HAL_GetTick>
 8001d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d48:	f7fe fde4 	bl	8000914 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1c2      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8086 	beq.w	8001e80 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4a8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_RCC_OscConfig+0x4a8>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d80:	f7fe fdc8 	bl	8000914 <HAL_GetTick>
 8001d84:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d88:	f7fe fdc4 	bl	8000914 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1a2      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x4a8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0x480>
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dba:	e032      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4ac>
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a02      	ldr	r2, [pc, #8]	; (8001de0 <HAL_RCC_OscConfig+0x4a4>)
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	e021      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
 8001dde:	bf00      	nop
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58024800 	.word	0x58024800
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d10c      	bne.n	8001e0a <HAL_RCC_OscConfig+0x4ce>
 8001df0:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a82      	ldr	r2, [pc, #520]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfc:	4b80      	ldr	r3, [pc, #512]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a7f      	ldr	r2, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
 8001e0a:	4b7d      	ldr	r3, [pc, #500]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a7c      	ldr	r2, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70
 8001e16:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a79      	ldr	r2, [pc, #484]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d015      	beq.n	8001e56 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2a:	f7fe fd73 	bl	8000914 <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fd6f 	bl	8000914 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e14b      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ee      	beq.n	8001e32 <HAL_RCC_OscConfig+0x4f6>
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7fe fd5d 	bl	8000914 <HAL_GetTick>
 8001e5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fd59 	bl	8000914 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e135      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e74:	4b62      	ldr	r3, [pc, #392]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 812a 	beq.w	80020de <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e92:	2b18      	cmp	r3, #24
 8001e94:	f000 80ba 	beq.w	800200c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	f040 8095 	bne.w	8001fcc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe fd31 	bl	8000914 <HAL_GetTick>
 8001eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe fd2d 	bl	8000914 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e10b      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x6c8>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	4945      	ldr	r1, [pc, #276]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	628b      	str	r3, [r1, #40]	; 0x28
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	3b01      	subs	r3, #1
 8001efe:	025b      	lsls	r3, r3, #9
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	3b01      	subs	r3, #1
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f1e:	4938      	ldr	r1, [pc, #224]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f24:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	4a35      	ldr	r2, [pc, #212]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x6cc>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f3c:	00d2      	lsls	r2, r2, #3
 8001f3e:	4930      	ldr	r1, [pc, #192]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	f023 020c 	bic.w	r2, r3, #12
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	492b      	ldr	r1, [pc, #172]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f023 0202 	bic.w	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a18      	ldr	r2, [pc, #96]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fcb6 	bl	8000914 <HAL_GetTick>
 8001fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fcb2 	bl	8000914 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e090      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x670>
 8001fca:	e088      	b.n	80020de <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fc9c 	bl	8000914 <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7fe fc98 	bl	8000914 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e076      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff2:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCC_OscConfig+0x6c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x6a4>
 8001ffe:	e06e      	b.n	80020de <HAL_RCC_OscConfig+0x7a2>
 8002000:	58024400 	.word	0x58024400
 8002004:	fffffc0c 	.word	0xfffffc0c
 8002008:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b01      	cmp	r3, #1
 800201e:	d031      	beq.n	8002084 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0203 	and.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d12a      	bne.n	8002084 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d122      	bne.n	8002084 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d11a      	bne.n	8002084 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0a5b      	lsrs	r3, r3, #9
 8002052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d111      	bne.n	8002084 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d108      	bne.n	8002084 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0e1b      	lsrs	r3, r3, #24
 8002076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e02b      	b.n	80020e0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002092:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	d01f      	beq.n	80020de <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020aa:	f7fe fc33 	bl	8000914 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020b0:	bf00      	nop
 80020b2:	f7fe fc2f 	bl	8000914 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d0f9      	beq.n	80020b2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x7b0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ca:	00d2      	lsls	r2, r2, #3
 80020cc:	4906      	ldr	r1, [pc, #24]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_RCC_OscConfig+0x7ac>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3730      	adds	r7, #48	; 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	58024400 	.word	0x58024400
 80020ec:	ffff0007 	.word	0xffff0007

080020f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e19c      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d910      	bls.n	8002134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b87      	ldr	r3, [pc, #540]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	4985      	ldr	r1, [pc, #532]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e184      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800214c:	429a      	cmp	r2, r3
 800214e:	d908      	bls.n	8002162 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002150:	4b78      	ldr	r3, [pc, #480]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4975      	ldr	r1, [pc, #468]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 800215e:	4313      	orrs	r3, r2
 8002160:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800217a:	429a      	cmp	r2, r3
 800217c:	d908      	bls.n	8002190 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	496a      	ldr	r1, [pc, #424]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 800218c:	4313      	orrs	r3, r2
 800218e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d010      	beq.n	80021be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	4b64      	ldr	r3, [pc, #400]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d908      	bls.n	80021be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	495e      	ldr	r1, [pc, #376]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d010      	beq.n	80021ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d908      	bls.n	80021ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021da:	4b56      	ldr	r3, [pc, #344]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4953      	ldr	r1, [pc, #332]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	429a      	cmp	r2, r3
 8002206:	d908      	bls.n	800221a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f023 020f 	bic.w	r2, r3, #15
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4947      	ldr	r1, [pc, #284]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002216:	4313      	orrs	r3, r2
 8002218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d055      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4940      	ldr	r1, [pc, #256]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002234:	4313      	orrs	r3, r2
 8002236:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d107      	bne.n	8002250 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002240:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d121      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0f6      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d107      	bne.n	8002268 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d115      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0ea      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0de      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d6      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f023 0207 	bic.w	r2, r3, #7
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4925      	ldr	r1, [pc, #148]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a2:	f7fe fb37 	bl	8000914 <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe fb33 	bl	8000914 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0be      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d1eb      	bne.n	80022aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d208      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f023 020f 	bic.w	r2, r3, #15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d214      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	4906      	ldr	r1, [pc, #24]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_RCC_ClockConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e086      	b.n	800243e <HAL_RCC_ClockConfig+0x34e>
 8002330:	52002000 	.word	0x52002000
 8002334:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d010      	beq.n	8002366 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002350:	429a      	cmp	r2, r3
 8002352:	d208      	bcs.n	8002366 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4939      	ldr	r1, [pc, #228]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002362:	4313      	orrs	r3, r2
 8002364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800237e:	429a      	cmp	r2, r3
 8002380:	d208      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	492e      	ldr	r1, [pc, #184]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002390:	4313      	orrs	r3, r2
 8002392:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d208      	bcs.n	80023c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4922      	ldr	r1, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d010      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023da:	429a      	cmp	r2, r3
 80023dc:	d208      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4917      	ldr	r1, [pc, #92]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023f0:	f000 f834 	bl	800245c <HAL_RCC_GetSysClockFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4912      	ldr	r1, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x35c>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_RCC_ClockConfig+0x358>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_RCC_ClockConfig+0x35c>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x360>)
 8002426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_RCC_ClockConfig+0x364>)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x368>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fa24 	bl	8000880 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	58024400 	.word	0x58024400
 800244c:	08003dc8 	.word	0x08003dc8
 8002450:	24000004 	.word	0x24000004
 8002454:	24000000 	.word	0x24000000
 8002458:	24000008 	.word	0x24000008

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002462:	4bb3      	ldr	r3, [pc, #716]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800246a:	2b18      	cmp	r3, #24
 800246c:	f200 8155 	bhi.w	800271a <HAL_RCC_GetSysClockFreq+0x2be>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	080024dd 	.word	0x080024dd
 800247c:	0800271b 	.word	0x0800271b
 8002480:	0800271b 	.word	0x0800271b
 8002484:	0800271b 	.word	0x0800271b
 8002488:	0800271b 	.word	0x0800271b
 800248c:	0800271b 	.word	0x0800271b
 8002490:	0800271b 	.word	0x0800271b
 8002494:	0800271b 	.word	0x0800271b
 8002498:	08002503 	.word	0x08002503
 800249c:	0800271b 	.word	0x0800271b
 80024a0:	0800271b 	.word	0x0800271b
 80024a4:	0800271b 	.word	0x0800271b
 80024a8:	0800271b 	.word	0x0800271b
 80024ac:	0800271b 	.word	0x0800271b
 80024b0:	0800271b 	.word	0x0800271b
 80024b4:	0800271b 	.word	0x0800271b
 80024b8:	08002509 	.word	0x08002509
 80024bc:	0800271b 	.word	0x0800271b
 80024c0:	0800271b 	.word	0x0800271b
 80024c4:	0800271b 	.word	0x0800271b
 80024c8:	0800271b 	.word	0x0800271b
 80024cc:	0800271b 	.word	0x0800271b
 80024d0:	0800271b 	.word	0x0800271b
 80024d4:	0800271b 	.word	0x0800271b
 80024d8:	0800250f 	.word	0x0800250f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024dc:	4b94      	ldr	r3, [pc, #592]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024e8:	4b91      	ldr	r3, [pc, #580]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	08db      	lsrs	r3, r3, #3
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	4a90      	ldr	r2, [pc, #576]	; (8002734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024fa:	e111      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024fc:	4b8d      	ldr	r3, [pc, #564]	; (8002734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024fe:	61bb      	str	r3, [r7, #24]
      break;
 8002500:	e10e      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002504:	61bb      	str	r3, [r7, #24]
      break;
 8002506:	e10b      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002508:	4b8c      	ldr	r3, [pc, #560]	; (800273c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800250a:	61bb      	str	r3, [r7, #24]
      break;
 800250c:	e108      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002518:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002522:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002524:	4b82      	ldr	r3, [pc, #520]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800252e:	4b80      	ldr	r3, [pc, #512]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	08db      	lsrs	r3, r3, #3
 8002534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002546:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80e1 	beq.w	8002714 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f000 8083 	beq.w	8002660 <HAL_RCC_GetSysClockFreq+0x204>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b02      	cmp	r3, #2
 800255e:	f200 80a1 	bhi.w	80026a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x114>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d056      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x1c0>
 800256e:	e099      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02d      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800257c:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	08db      	lsrs	r3, r3, #3
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a6:	4b62      	ldr	r3, [pc, #392]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025d6:	e087      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002744 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ea:	4b51      	ldr	r3, [pc, #324]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800260e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800261a:	e065      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002626:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800262a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800262e:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800263e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002642:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800264a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800265e:	e043      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800274c <HAL_RCC_GetSysClockFreq+0x2f0>
 800266e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002682:	ed97 6a02 	vldr	s12, [r7, #8]
 8002686:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800268a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800268e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026a2:	e021      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002748 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	0a5b      	lsrs	r3, r3, #9
 80026ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f2:	3301      	adds	r3, #1
 80026f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002700:	edd7 6a07 	vldr	s13, [r7, #28]
 8002704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800270c:	ee17 3a90 	vmov	r3, s15
 8002710:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002712:	e005      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
      break;
 8002718:	e002      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800271c:	61bb      	str	r3, [r7, #24]
      break;
 800271e:	bf00      	nop
  }

  return sysclockfreq;
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	58024400 	.word	0x58024400
 8002734:	03d09000 	.word	0x03d09000
 8002738:	003d0900 	.word	0x003d0900
 800273c:	017d7840 	.word	0x017d7840
 8002740:	46000000 	.word	0x46000000
 8002744:	4c742400 	.word	0x4c742400
 8002748:	4a742400 	.word	0x4a742400
 800274c:	4bbebc20 	.word	0x4bbebc20

08002750 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002754:	b0c6      	sub	sp, #280	; 0x118
 8002756:	af00      	add	r7, sp, #0
 8002758:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002762:	2300      	movs	r3, #0
 8002764:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002774:	2500      	movs	r5, #0
 8002776:	ea54 0305 	orrs.w	r3, r4, r5
 800277a:	d049      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800277c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002786:	d02f      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002788:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800278c:	d828      	bhi.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800278e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002792:	d01a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002798:	d822      	bhi.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800279e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a2:	d007      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027a4:	e01c      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a6:	4bab      	ldr	r3, [pc, #684]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	4aaa      	ldr	r2, [pc, #680]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027b2:	e01a      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027b8:	3308      	adds	r3, #8
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 f967 	bl	8003a90 <RCCEx_PLL2_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027c8:	e00f      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027ce:	3328      	adds	r3, #40	; 0x28
 80027d0:	2102      	movs	r1, #2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fa0e 	bl	8003bf4 <RCCEx_PLL3_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027de:	e004      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80027e6:	e000      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027f2:	4b98      	ldr	r3, [pc, #608]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80027fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002800:	4a94      	ldr	r2, [pc, #592]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002802:	430b      	orrs	r3, r1
 8002804:	6513      	str	r3, [r2, #80]	; 0x50
 8002806:	e003      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002808:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800280c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800281c:	f04f 0900 	mov.w	r9, #0
 8002820:	ea58 0309 	orrs.w	r3, r8, r9
 8002824:	d047      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	2b04      	cmp	r3, #4
 800282e:	d82a      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800284d 	.word	0x0800284d
 800283c:	0800285b 	.word	0x0800285b
 8002840:	08002871 	.word	0x08002871
 8002844:	0800288f 	.word	0x0800288f
 8002848:	0800288f 	.word	0x0800288f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284c:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002858:	e01a      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800285a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800285e:	3308      	adds	r3, #8
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f914 	bl	8003a90 <RCCEx_PLL2_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800286e:	e00f      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002874:	3328      	adds	r3, #40	; 0x28
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f001 f9bb 	bl	8003bf4 <RCCEx_PLL3_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002884:	e004      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800288c:	e000      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800288e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002890:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002898:	4b6e      	ldr	r3, [pc, #440]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289c:	f023 0107 	bic.w	r1, r3, #7
 80028a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6513      	str	r3, [r2, #80]	; 0x50
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80028b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80028c2:	f04f 0b00 	mov.w	fp, #0
 80028c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80028ca:	d05b      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80028cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028d4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80028d8:	d03b      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80028da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80028de:	d834      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80028e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028e4:	d037      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80028e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ea:	d82e      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80028ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028f0:	d033      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80028f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028f6:	d828      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80028f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fc:	d01a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80028fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002902:	d822      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290c:	d007      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800290e:	e01c      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800291c:	e01e      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800291e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002922:	3308      	adds	r3, #8
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f001 f8b2 	bl	8003a90 <RCCEx_PLL2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002932:	e013      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002938:	3328      	adds	r3, #40	; 0x28
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f959 	bl	8003bf4 <RCCEx_PLL3_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002948:	e008      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002950:	e004      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002952:	bf00      	nop
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800295a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800296c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002970:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002974:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002976:	430b      	orrs	r3, r1
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
 800297a:	e003      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002980:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800299a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d05d      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80029a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80029b0:	d03b      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80029b2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80029b6:	d834      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029bc:	d037      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80029be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c2:	d82e      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029c8:	d033      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80029ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029ce:	d828      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029d4:	d01a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80029d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029da:	d822      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d007      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80029e6:	e01c      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029f4:	e01e      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029fa:	3308      	adds	r3, #8
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f846 	bl	8003a90 <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a0a:	e013      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a10:	3328      	adds	r3, #40	; 0x28
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f8ed 	bl	8003bf4 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a20:	e008      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002a28:	e004      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10d      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a4c:	4a01      	ldr	r2, [pc, #4]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	6593      	str	r3, [r2, #88]	; 0x58
 8002a52:	e005      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002a6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	d03a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	2b30      	cmp	r3, #48	; 0x30
 8002a88:	d01f      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002a8a:	2b30      	cmp	r3, #48	; 0x30
 8002a8c:	d819      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d00c      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d815      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d019      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d111      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9e:	4baa      	ldr	r3, [pc, #680]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	4aa9      	ldr	r2, [pc, #676]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002aaa:	e011      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 ffeb 	bl	8003a90 <RCCEx_PLL2_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002ac0:	e006      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ac8:	e002      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002aca:	bf00      	nop
 8002acc:	e000      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ad8:	4b9b      	ldr	r3, [pc, #620]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	4a98      	ldr	r2, [pc, #608]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aec:	e003      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002af2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002b10:	460b      	mov	r3, r1
 8002b12:	4313      	orrs	r3, r2
 8002b14:	d051      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b20:	d035      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b26:	d82e      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b2c:	d031      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002b2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b32:	d828      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b38:	d01a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	d822      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b48:	d007      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b4c:	4b7e      	ldr	r3, [pc, #504]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	4a7d      	ldr	r2, [pc, #500]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b58:	e01c      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b5e:	3308      	adds	r3, #8
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 ff94 	bl	8003a90 <RCCEx_PLL2_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b6e:	e011      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b74:	3328      	adds	r3, #40	; 0x28
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 f83b 	bl	8003bf4 <RCCEx_PLL3_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b84:	e006      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b8c:	e002      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002b8e:	bf00      	nop
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	4a67      	ldr	r2, [pc, #412]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6513      	str	r3, [r2, #80]	; 0x50
 8002bb0:	e003      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002bc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	d053      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d033      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bea:	d82c      	bhi.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf0:	d02f      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf6:	d826      	bhi.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002bf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bfc:	d02b      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002bfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c02:	d820      	bhi.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c08:	d012      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c0e:	d81a      	bhi.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d022      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	d115      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c1e:	3308      	adds	r3, #8
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 ff34 	bl	8003a90 <RCCEx_PLL2_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c2e:	e015      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c34:	3328      	adds	r3, #40	; 0x28
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 ffdb 	bl	8003bf4 <RCCEx_PLL3_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c44:	e00a      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c4c:	e006      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c4e:	bf00      	nop
 8002c50:	e004      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c52:	bf00      	nop
 8002c54:	e002      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6513      	str	r3, [r2, #80]	; 0x50
 8002c78:	e003      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	d058      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cae:	d033      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb4:	d82c      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cba:	d02f      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d826      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cc6:	d02b      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ccc:	d820      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd2:	d012      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd8:	d81a      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d022      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce2:	d115      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ce8:	3308      	adds	r3, #8
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fecf 	bl	8003a90 <RCCEx_PLL2_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cf8:	e015      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cfe:	3328      	adds	r3, #40	; 0x28
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 ff76 	bl	8003bf4 <RCCEx_PLL3_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d16:	e006      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d18:	bf00      	nop
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d1c:	bf00      	nop
 8002d1e:	e002      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d3e:	4a02      	ldr	r2, [pc, #8]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
 8002d44:	e006      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4313      	orrs	r3, r2
 8002d72:	d037      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d7e:	d00e      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d84:	d816      	bhi.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d8e:	d111      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d90:	4bc4      	ldr	r3, [pc, #784]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4ac3      	ldr	r2, [pc, #780]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d9c:	e00f      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002da2:	3308      	adds	r3, #8
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fe72 	bl	8003a90 <RCCEx_PLL2_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002db2:	e004      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002dba:	e000      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dc6:	4bb7      	ldr	r3, [pc, #732]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd4:	4ab3      	ldr	r2, [pc, #716]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	6513      	str	r3, [r2, #80]	; 0x50
 8002dda:	e003      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002de0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4313      	orrs	r3, r2
 8002e02:	d039      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d81c      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e51 	.word	0x08002e51
 8002e18:	08002e25 	.word	0x08002e25
 8002e1c:	08002e33 	.word	0x08002e33
 8002e20:	08002e51 	.word	0x08002e51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e24:	4b9f      	ldr	r3, [pc, #636]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4a9e      	ldr	r2, [pc, #632]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e30:	e00f      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e36:	3308      	adds	r3, #8
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fe28 	bl	8003a90 <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e46:	e004      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e4e:	e000      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e5a:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	f023 0103 	bic.w	r1, r3, #3
 8002e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e68:	4a8e      	ldr	r2, [pc, #568]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f000 8099 	beq.w	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9a:	4b83      	ldr	r3, [pc, #524]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a82      	ldr	r2, [pc, #520]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea6:	f7fd fd35 	bl	8000914 <HAL_GetTick>
 8002eaa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fd fd30 	bl	8000914 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d903      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ec6:	e005      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ec8:	4b77      	ldr	r3, [pc, #476]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ed      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d173      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002edc:	4b71      	ldr	r3, [pc, #452]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ee8:	4053      	eors	r3, r2
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef2:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002efe:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a68      	ldr	r2, [pc, #416]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0a:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a65      	ldr	r2, [pc, #404]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f16:	4a63      	ldr	r2, [pc, #396]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2a:	d118      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fd fcf2 	bl	8000914 <HAL_GetTick>
 8002f30:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f34:	e00d      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fced 	bl	8000914 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f40:	1ad2      	subs	r2, r2, r3
 8002f42:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d903      	bls.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8002f50:	e005      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f52:	4b54      	ldr	r3, [pc, #336]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0eb      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d129      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f76:	d10e      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002f78:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f88:	091a      	lsrs	r2, r3, #4
 8002f8a:	4b48      	ldr	r3, [pc, #288]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	4a45      	ldr	r2, [pc, #276]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6113      	str	r3, [r2, #16]
 8002f94:	e005      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002f96:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	4a42      	ldr	r2, [pc, #264]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fa0:	6113      	str	r3, [r2, #16]
 8002fa2:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	e008      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002fbe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002fc2:	e003      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002fc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f002 0301 	and.w	r3, r2, #1
 8002fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002fe2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f000 808f 	beq.w	800310c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff4:	2b28      	cmp	r3, #40	; 0x28
 8002ff6:	d871      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002ff8:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	080030e5 	.word	0x080030e5
 8003004:	080030dd 	.word	0x080030dd
 8003008:	080030dd 	.word	0x080030dd
 800300c:	080030dd 	.word	0x080030dd
 8003010:	080030dd 	.word	0x080030dd
 8003014:	080030dd 	.word	0x080030dd
 8003018:	080030dd 	.word	0x080030dd
 800301c:	080030dd 	.word	0x080030dd
 8003020:	080030b1 	.word	0x080030b1
 8003024:	080030dd 	.word	0x080030dd
 8003028:	080030dd 	.word	0x080030dd
 800302c:	080030dd 	.word	0x080030dd
 8003030:	080030dd 	.word	0x080030dd
 8003034:	080030dd 	.word	0x080030dd
 8003038:	080030dd 	.word	0x080030dd
 800303c:	080030dd 	.word	0x080030dd
 8003040:	080030c7 	.word	0x080030c7
 8003044:	080030dd 	.word	0x080030dd
 8003048:	080030dd 	.word	0x080030dd
 800304c:	080030dd 	.word	0x080030dd
 8003050:	080030dd 	.word	0x080030dd
 8003054:	080030dd 	.word	0x080030dd
 8003058:	080030dd 	.word	0x080030dd
 800305c:	080030dd 	.word	0x080030dd
 8003060:	080030e5 	.word	0x080030e5
 8003064:	080030dd 	.word	0x080030dd
 8003068:	080030dd 	.word	0x080030dd
 800306c:	080030dd 	.word	0x080030dd
 8003070:	080030dd 	.word	0x080030dd
 8003074:	080030dd 	.word	0x080030dd
 8003078:	080030dd 	.word	0x080030dd
 800307c:	080030dd 	.word	0x080030dd
 8003080:	080030e5 	.word	0x080030e5
 8003084:	080030dd 	.word	0x080030dd
 8003088:	080030dd 	.word	0x080030dd
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080030dd 	.word	0x080030dd
 8003094:	080030dd 	.word	0x080030dd
 8003098:	080030dd 	.word	0x080030dd
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030e5 	.word	0x080030e5
 80030a4:	58024400 	.word	0x58024400
 80030a8:	58024800 	.word	0x58024800
 80030ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030b4:	3308      	adds	r3, #8
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fce9 	bl	8003a90 <RCCEx_PLL2_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030c4:	e00f      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030ca:	3328      	adds	r3, #40	; 0x28
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd90 	bl	8003bf4 <RCCEx_PLL3_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030da:	e004      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80030e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030ee:	4bbf      	ldr	r3, [pc, #764]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80030f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fc:	4abb      	ldr	r2, [pc, #748]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030fe:	430b      	orrs	r3, r1
 8003100:	6553      	str	r3, [r2, #84]	; 0x54
 8003102:	e003      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003108:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800310c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f002 0302 	and.w	r3, r2, #2
 8003118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003122:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003126:	460b      	mov	r3, r1
 8003128:	4313      	orrs	r3, r2
 800312a:	d041      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800312c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	2b05      	cmp	r3, #5
 8003134:	d824      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003189 	.word	0x08003189
 8003140:	08003155 	.word	0x08003155
 8003144:	0800316b 	.word	0x0800316b
 8003148:	08003189 	.word	0x08003189
 800314c:	08003189 	.word	0x08003189
 8003150:	08003189 	.word	0x08003189
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003158:	3308      	adds	r3, #8
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fc97 	bl	8003a90 <RCCEx_PLL2_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003168:	e00f      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800316a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800316e:	3328      	adds	r3, #40	; 0x28
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fd3e 	bl	8003bf4 <RCCEx_PLL3_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800317e:	e004      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003186:	e000      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003192:	4b96      	ldr	r3, [pc, #600]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f023 0107 	bic.w	r1, r3, #7
 800319a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800319e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a0:	4a92      	ldr	r2, [pc, #584]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031a2:	430b      	orrs	r3, r1
 80031a4:	6553      	str	r3, [r2, #84]	; 0x54
 80031a6:	e003      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f002 0304 	and.w	r3, r2, #4
 80031bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031ca:	460b      	mov	r3, r1
 80031cc:	4313      	orrs	r3, r2
 80031ce:	d044      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d825      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003231 	.word	0x08003231
 80031e8:	080031fd 	.word	0x080031fd
 80031ec:	08003213 	.word	0x08003213
 80031f0:	08003231 	.word	0x08003231
 80031f4:	08003231 	.word	0x08003231
 80031f8:	08003231 	.word	0x08003231
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003200:	3308      	adds	r3, #8
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fc43 	bl	8003a90 <RCCEx_PLL2_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003210:	e00f      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003216:	3328      	adds	r3, #40	; 0x28
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fcea 	bl	8003bf4 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003226:	e004      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800323a:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	f023 0107 	bic.w	r1, r3, #7
 8003242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800324c:	430b      	orrs	r3, r1
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003252:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003256:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800325a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003262:	f002 0320 	and.w	r3, r2, #32
 8003266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003270:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003274:	460b      	mov	r3, r1
 8003276:	4313      	orrs	r3, r2
 8003278:	d055      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800327a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800327e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003286:	d033      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328c:	d82c      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d02f      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d826      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800329a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800329e:	d02b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80032a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032a4:	d820      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032aa:	d012      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80032ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b0:	d81a      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d022      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80032b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ba:	d115      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032c0:	3308      	adds	r3, #8
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fbe3 	bl	8003a90 <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032d0:	e015      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032d6:	3328      	adds	r3, #40	; 0x28
 80032d8:	2102      	movs	r1, #2
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fc8a 	bl	8003bf4 <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032e6:	e00a      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80032ee:	e006      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80032f0:	bf00      	nop
 80032f2:	e004      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80032f4:	bf00      	nop
 80032f6:	e002      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80032fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800330e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003316:	4a35      	ldr	r2, [pc, #212]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003318:	430b      	orrs	r3, r1
 800331a:	6553      	str	r3, [r2, #84]	; 0x54
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003322:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003332:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800333c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003340:	460b      	mov	r3, r1
 8003342:	4313      	orrs	r3, r2
 8003344:	d058      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800334a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003352:	d033      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003354:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003358:	d82c      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d02f      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003364:	d826      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003366:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800336a:	d02b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800336c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003370:	d820      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003376:	d012      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337c:	d81a      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d022      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d115      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800338c:	3308      	adds	r3, #8
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fb7d 	bl	8003a90 <RCCEx_PLL2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800339c:	e015      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033a2:	3328      	adds	r3, #40	; 0x28
 80033a4:	2102      	movs	r1, #2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fc24 	bl	8003bf4 <RCCEx_PLL3_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033b2:	e00a      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033ba:	e006      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033bc:	bf00      	nop
 80033be:	e004      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033c0:	bf00      	nop
 80033c2:	e002      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80033c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10e      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80033da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e2:	4a02      	ldr	r2, [pc, #8]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6593      	str	r3, [r2, #88]	; 0x58
 80033e8:	e006      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800340e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d055      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800341c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003420:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003424:	d033      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003426:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800342a:	d82c      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800342c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003430:	d02f      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d826      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003438:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800343c:	d02b      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800343e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003442:	d820      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003448:	d012      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344e:	d81a      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d022      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003458:	d115      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800345a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800345e:	3308      	adds	r3, #8
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fb14 	bl	8003a90 <RCCEx_PLL2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800346e:	e015      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003474:	3328      	adds	r3, #40	; 0x28
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fbbb 	bl	8003bf4 <RCCEx_PLL3_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003484:	e00a      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800348e:	bf00      	nop
 8003490:	e004      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800349a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034a4:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80034ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034b4:	4a9c      	ldr	r2, [pc, #624]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034b6:	430b      	orrs	r3, r1
 80034b8:	6593      	str	r3, [r2, #88]	; 0x58
 80034ba:	e003      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80034c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f002 0308 	and.w	r3, r2, #8
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80034da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d01e      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80034e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034f6:	3328      	adds	r3, #40	; 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fb7a 	bl	8003bf4 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800350c:	4b86      	ldr	r3, [pc, #536]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800351c:	4a82      	ldr	r2, [pc, #520]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800351e:	430b      	orrs	r3, r1
 8003520:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f002 0310 	and.w	r3, r2, #16
 800352e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003538:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800353c:	460b      	mov	r3, r1
 800353e:	4313      	orrs	r3, r2
 8003540:	d01e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d10c      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003554:	3328      	adds	r3, #40	; 0x28
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fb4b 	bl	8003bf4 <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800356a:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	4a6b      	ldr	r2, [pc, #428]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800357c:	430b      	orrs	r3, r1
 800357e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800358c:	67bb      	str	r3, [r7, #120]	; 0x78
 800358e:	2300      	movs	r3, #0
 8003590:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003592:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	d03e      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a8:	d022      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80035aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ae:	d81b      	bhi.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80035ba:	e015      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c0:	3308      	adds	r3, #8
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa63 	bl	8003a90 <RCCEx_PLL2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035d0:	e00f      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d6:	3328      	adds	r3, #40	; 0x28
 80035d8:	2102      	movs	r1, #2
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fb0a 	bl	8003bf4 <RCCEx_PLL3_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035fa:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800360a:	4a47      	ldr	r2, [pc, #284]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800360c:	430b      	orrs	r3, r1
 800360e:	6593      	str	r3, [r2, #88]	; 0x58
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003612:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003616:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800361a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003626:	673b      	str	r3, [r7, #112]	; 0x70
 8003628:	2300      	movs	r3, #0
 800362a:	677b      	str	r3, [r7, #116]	; 0x74
 800362c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003630:	460b      	mov	r3, r1
 8003632:	4313      	orrs	r3, r2
 8003634:	d03b      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003642:	d01f      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003644:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003648:	d818      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800364a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364e:	d003      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003654:	d007      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003656:	e011      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4a32      	ldr	r2, [pc, #200]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003664:	e00f      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800366a:	3328      	adds	r3, #40	; 0x28
 800366c:	2101      	movs	r1, #1
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fac0 	bl	8003bf4 <RCCEx_PLL3_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800367a:	e004      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003686:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800369a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369e:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6553      	str	r3, [r2, #84]	; 0x54
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80036ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80036bc:	2300      	movs	r3, #0
 80036be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d034      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d007      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	4a11      	ldr	r2, [pc, #68]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036e8:	e00e      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ee:	3308      	adds	r3, #8
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f9cc 	bl	8003a90 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036fe:	e003      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371e:	4a02      	ldr	r2, [pc, #8]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003720:	430b      	orrs	r3, r1
 8003722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003724:	e006      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003726:	bf00      	nop
 8003728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003730:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003740:	663b      	str	r3, [r7, #96]	; 0x60
 8003742:	2300      	movs	r3, #0
 8003744:	667b      	str	r3, [r7, #100]	; 0x64
 8003746:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d00c      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003754:	3328      	adds	r3, #40	; 0x28
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fa4b 	bl	8003bf4 <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800376a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003776:	65bb      	str	r3, [r7, #88]	; 0x58
 8003778:	2300      	movs	r3, #0
 800377a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d036      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800378a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800378c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003790:	d018      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003796:	d811      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379c:	d014      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800379e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a2:	d80b      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d011      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80037a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ac:	d106      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ae:	4bb7      	ldr	r3, [pc, #732]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	4ab6      	ldr	r2, [pc, #728]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037ba:	e008      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80037c4:	bf00      	nop
 80037c6:	e002      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80037c8:	bf00      	nop
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d6:	4bad      	ldr	r3, [pc, #692]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e4:	4aa9      	ldr	r2, [pc, #676]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6553      	str	r3, [r2, #84]	; 0x54
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003800:	653b      	str	r3, [r7, #80]	; 0x50
 8003802:	2300      	movs	r3, #0
 8003804:	657b      	str	r3, [r7, #84]	; 0x54
 8003806:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003810:	4b9e      	ldr	r3, [pc, #632]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a9b      	ldr	r2, [pc, #620]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003830:	64bb      	str	r3, [r7, #72]	; 0x48
 8003832:	2300      	movs	r3, #0
 8003834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003836:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003840:	4b92      	ldr	r3, [pc, #584]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003844:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384e:	4a8f      	ldr	r2, [pc, #572]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003850:	430b      	orrs	r3, r1
 8003852:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003860:	643b      	str	r3, [r7, #64]	; 0x40
 8003862:	2300      	movs	r3, #0
 8003864:	647b      	str	r3, [r7, #68]	; 0x44
 8003866:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003870:	4b86      	ldr	r3, [pc, #536]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4a85      	ldr	r2, [pc, #532]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800387a:	6113      	str	r3, [r2, #16]
 800387c:	4b83      	ldr	r3, [pc, #524]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800387e:	6919      	ldr	r1, [r3, #16]
 8003880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003884:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003888:	4a80      	ldr	r2, [pc, #512]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800388a:	430b      	orrs	r3, r1
 800388c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800388e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
 800389c:	2300      	movs	r3, #0
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038a4:	460b      	mov	r3, r1
 80038a6:	4313      	orrs	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038aa:	4b78      	ldr	r3, [pc, #480]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80038b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	4a74      	ldr	r2, [pc, #464]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038ba:	430b      	orrs	r3, r1
 80038bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
 80038cc:	2300      	movs	r3, #0
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
 80038d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038da:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80038e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	4a68      	ldr	r2, [pc, #416]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	2100      	movs	r1, #0
 80038fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d011      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800390c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003910:	3308      	adds	r3, #8
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f8bb 	bl	8003a90 <RCCEx_PLL2_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003920:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800392c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	2100      	movs	r1, #0
 800393a:	6239      	str	r1, [r7, #32]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003946:	460b      	mov	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	d011      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003950:	3308      	adds	r3, #8
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f89b 	bl	8003a90 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003960:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800396c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	2100      	movs	r1, #0
 800397a:	61b9      	str	r1, [r7, #24]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003986:	460b      	mov	r3, r1
 8003988:	4313      	orrs	r3, r2
 800398a:	d011      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003990:	3308      	adds	r3, #8
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f87b 	bl	8003a90 <RCCEx_PLL2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80039a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	2100      	movs	r1, #0
 80039ba:	6139      	str	r1, [r7, #16]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d011      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d0:	3328      	adds	r3, #40	; 0x28
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f90d 	bl	8003bf4 <RCCEx_PLL3_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80039e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80039f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	2100      	movs	r1, #0
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d011      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a10:	3328      	adds	r3, #40	; 0x28
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f8ed 	bl	8003bf4 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003a20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	6039      	str	r1, [r7, #0]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a46:	460b      	mov	r3, r1
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	d011      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a50:	3328      	adds	r3, #40	; 0x28
 8003a52:	2102      	movs	r1, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f8cd 	bl	8003bf4 <RCCEx_PLL3_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003a60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003a70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003a84:	46bd      	mov	sp, r7
 8003a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400

08003a90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a9e:	4b53      	ldr	r3, [pc, #332]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d101      	bne.n	8003aae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e099      	b.n	8003be2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003aae:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a4e      	ldr	r2, [pc, #312]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003ab4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aba:	f7fc ff2b 	bl	8000914 <HAL_GetTick>
 8003abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ac2:	f7fc ff27 	bl	8000914 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e086      	b.n	8003be2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ad4:	4b45      	ldr	r3, [pc, #276]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	031b      	lsls	r3, r3, #12
 8003aee:	493f      	ldr	r1, [pc, #252]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	628b      	str	r3, [r1, #40]	; 0x28
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	025b      	lsls	r3, r3, #9
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b24:	4931      	ldr	r1, [pc, #196]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	492d      	ldr	r1, [pc, #180]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	f023 0220 	bic.w	r2, r3, #32
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	4928      	ldr	r1, [pc, #160]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b54:	f023 0310 	bic.w	r3, r3, #16
 8003b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <RCCEx_PLL2_Config+0x160>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	69d2      	ldr	r2, [r2, #28]
 8003b66:	00d2      	lsls	r2, r2, #3
 8003b68:	4920      	ldr	r1, [pc, #128]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b74:	f043 0310 	orr.w	r3, r3, #16
 8003b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4a19      	ldr	r2, [pc, #100]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b8c:	e00f      	b.n	8003bae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b94:	4b15      	ldr	r3, [pc, #84]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ba0:	e005      	b.n	8003bae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003bb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bba:	f7fc feab 	bl	8000914 <HAL_GetTick>
 8003bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bc0:	e008      	b.n	8003bd4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bc2:	f7fc fea7 	bl	8000914 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e006      	b.n	8003be2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <RCCEx_PLL2_Config+0x15c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	ffff0007 	.word	0xffff0007

08003bf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c02:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d101      	bne.n	8003c12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e099      	b.n	8003d46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c12:	4b4f      	ldr	r3, [pc, #316]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a4e      	ldr	r2, [pc, #312]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1e:	f7fc fe79 	bl	8000914 <HAL_GetTick>
 8003c22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c26:	f7fc fe75 	bl	8000914 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e086      	b.n	8003d46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c38:	4b45      	ldr	r3, [pc, #276]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	051b      	lsls	r3, r3, #20
 8003c52:	493f      	ldr	r1, [pc, #252]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	628b      	str	r3, [r1, #40]	; 0x28
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	025b      	lsls	r3, r3, #9
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	061b      	lsls	r3, r3, #24
 8003c84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c88:	4931      	ldr	r1, [pc, #196]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c8e:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	492d      	ldr	r1, [pc, #180]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4928      	ldr	r1, [pc, #160]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <RCCEx_PLL3_Config+0x160>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	69d2      	ldr	r2, [r2, #28]
 8003cca:	00d2      	lsls	r2, r2, #3
 8003ccc:	4920      	ldr	r1, [pc, #128]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003cd2:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cf0:	e00f      	b.n	8003d12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d106      	bne.n	8003d06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003cf8:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d04:	e005      	b.n	8003d12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1e:	f7fc fdf9 	bl	8000914 <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d24:	e008      	b.n	8003d38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003d26:	f7fc fdf5 	bl	8000914 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e006      	b.n	8003d46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <RCCEx_PLL3_Config+0x15c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	58024400 	.word	0x58024400
 8003d54:	ffff0007 	.word	0xffff0007

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	4d0d      	ldr	r5, [pc, #52]	; (8003d90 <__libc_init_array+0x38>)
 8003d5c:	4c0d      	ldr	r4, [pc, #52]	; (8003d94 <__libc_init_array+0x3c>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	2600      	movs	r6, #0
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	4d0b      	ldr	r5, [pc, #44]	; (8003d98 <__libc_init_array+0x40>)
 8003d6a:	4c0c      	ldr	r4, [pc, #48]	; (8003d9c <__libc_init_array+0x44>)
 8003d6c:	f000 f820 	bl	8003db0 <_init>
 8003d70:	1b64      	subs	r4, r4, r5
 8003d72:	10a4      	asrs	r4, r4, #2
 8003d74:	2600      	movs	r6, #0
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	08003dd8 	.word	0x08003dd8
 8003d94:	08003dd8 	.word	0x08003dd8
 8003d98:	08003dd8 	.word	0x08003dd8
 8003d9c:	08003ddc 	.word	0x08003ddc

08003da0 <memset>:
 8003da0:	4402      	add	r2, r0
 8003da2:	4603      	mov	r3, r0
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d100      	bne.n	8003daa <memset+0xa>
 8003da8:	4770      	bx	lr
 8003daa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dae:	e7f9      	b.n	8003da4 <memset+0x4>

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
