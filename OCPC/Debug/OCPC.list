
OCPC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c98  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f64  08001f64  00011f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f78  08001f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  24000010  08001f8c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000034  08001f8c  00020034  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000086c6  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001503  00000000  00000000  00028704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000708  00000000  00000000  00029c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000650  00000000  00000000  0002a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003042d  00000000  00000000  0002a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000080b3  00000000  00000000  0005ad8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00136904  00000000  00000000  00062e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00199744  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a48  00000000  00000000  00199794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08001f4c 	.word	0x08001f4c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08001f4c 	.word	0x08001f4c

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fa34 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f868 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f8c4 	bl	80004a4 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* BSP inits */
	  BSP_OCPC_Init();
 800031c:	f001 fd66 	bl	8001dec <BSP_OCPC_Init>

	  BSP_OCPC_SetOutputStatus(BSP_OCPC_MAG, ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	2000      	movs	r0, #0
 8000324:	f001 fd6e 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= MAG_OCPC_SET;
 8000328:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <main+0xd8>)
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	b29b      	uxth	r3, r3
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <main+0xd8>)
 8000336:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_SetOutputStatus(BSP_OCPC_GYRO, ENABLE);
 8000338:	2101      	movs	r1, #1
 800033a:	2001      	movs	r0, #1
 800033c:	f001 fd62 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= GYRO_OCPC_SET;
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <main+0xd8>)
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	b29b      	uxth	r3, r3
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	b29a      	uxth	r2, r3
 800034c:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <main+0xd8>)
 800034e:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_SetOutputStatus(BSP_OCPC_SUN, ENABLE);
 8000350:	2101      	movs	r1, #1
 8000352:	2002      	movs	r0, #2
 8000354:	f001 fd56 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= SUN_OCPC_SET;
 8000358:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <main+0xd8>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29b      	uxth	r3, r3
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	b29a      	uxth	r2, r3
 8000364:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <main+0xd8>)
 8000366:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_SetOutputStatus(BSP_OCPC_HB, ENABLE);
 8000368:	2101      	movs	r1, #1
 800036a:	2003      	movs	r0, #3
 800036c:	f001 fd4a 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= HB_OCPC_SET;
 8000370:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <main+0xd8>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	b29b      	uxth	r3, r3
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <main+0xd8>)
 800037e:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_SetOutputStatus(BSP_OCPC_CVS, ENABLE);
 8000380:	2101      	movs	r1, #1
 8000382:	2004      	movs	r0, #4
 8000384:	f001 fd3e 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= CVS_OCPC_SET;
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <main+0xd8>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b29b      	uxth	r3, r3
 800038e:	f043 0310 	orr.w	r3, r3, #16
 8000392:	b29a      	uxth	r2, r3
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <main+0xd8>)
 8000396:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_SetOutputStatus(BSP_OCPC_MD, ENABLE);
 8000398:	2101      	movs	r1, #1
 800039a:	2005      	movs	r0, #5
 800039c:	f001 fd32 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= MD_OCPC_SET;
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <main+0xd8>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <main+0xd8>)
 80003ae:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_SetOutputStatus(BSP_OCPC_WDT, ENABLE);
 80003b0:	2101      	movs	r1, #1
 80003b2:	2006      	movs	r0, #6
 80003b4:	f001 fd26 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= WDT_OCPC_SET;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <main+0xd8>)
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	b29b      	uxth	r3, r3
 80003be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <main+0xd8>)
 80003c6:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_SetOutputStatus(BSP_OCPC_TS, ENABLE);
 80003c8:	2101      	movs	r1, #1
 80003ca:	2007      	movs	r0, #7
 80003cc:	f001 fd1a 	bl	8001e04 <BSP_OCPC_SetOutputStatus>
	  OCPC_Status |= TS_OCPC_SET;
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <main+0xd8>)
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b01      	ldr	r3, [pc, #4]	; (80003e4 <main+0xd8>)
 80003de:	801a      	strh	r2, [r3, #0]
	  BSP_OCPC_Init();
 80003e0:	e79c      	b.n	800031c <main+0x10>
 80003e2:	bf00      	nop
 80003e4:	2400002c 	.word	0x2400002c

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b09c      	sub	sp, #112	; 0x70
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	224c      	movs	r2, #76	; 0x4c
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fda0 	bl	8001f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2220      	movs	r2, #32
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fd9a 	bl	8001f3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000408:	2004      	movs	r0, #4
 800040a:	f000 fd47 	bl	8000e9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800040e:	2300      	movs	r3, #0
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <SystemClock_Config+0xb8>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800041a:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <SystemClock_Config+0xb8>)
 800041c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <SystemClock_Config+0xb8>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800042e:	bf00      	nop
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <SystemClock_Config+0xb8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043c:	d1f8      	bne.n	8000430 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043e:	2302      	movs	r3, #2
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000442:	2301      	movs	r3, #1
 8000444:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000446:	2340      	movs	r3, #64	; 0x40
 8000448:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044a:	2300      	movs	r3, #0
 800044c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fdc0 	bl	8000fd8 <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800045e:	f000 f88d 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	233f      	movs	r3, #63	; 0x3f
 8000464:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f001 f980 	bl	800178c <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000492:	f000 f873 	bl	800057c <Error_Handler>
  }
}
 8000496:	bf00      	nop
 8000498:	3770      	adds	r7, #112	; 0x70
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	58024800 	.word	0x58024800

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ca:	4b29      	ldr	r3, [pc, #164]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004de:	4a24      	ldr	r2, [pc, #144]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fc:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004fe:	f043 0310 	orr.w	r3, r3, #16
 8000502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_GPIO_Init+0xcc>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <MX_GPIO_Init+0xd0>)
 800051c:	f000 fc78 	bl	8000e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000520:	2304      	movs	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000524:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <MX_GPIO_Init+0xd4>)
 8000536:	f000 fac3 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800053a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <MX_GPIO_Init+0xd0>)
 8000554:	f000 fab4 	bl	8000ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2008      	movs	r0, #8
 800055e:	f000 fa7a 	bl	8000a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000562:	2008      	movs	r0, #8
 8000564:	f000 fa91 	bl	8000a8a <HAL_NVIC_EnableIRQ>

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	58024400 	.word	0x58024400
 8000574:	58021000 	.word	0x58021000
 8000578:	58020800 	.word	0x58020800

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_MspInit+0x3c>)
 8000590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_MspInit+0x3c>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x3c>)
 80005a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 fa50 	bl	8000a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fa67 	bl	8000a8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	58024400 	.word	0x58024400

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <NMI_Handler+0x4>

080005ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <MemManage_Handler+0x4>

080005da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <BusFault_Handler+0x4>

080005e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <UsageFault_Handler+0x4>

080005e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000614:	f000 f924 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD/AVD through EXTI Line detection Interrupt.
  */
void PVD_AVD_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8000620:	f000 fc96 	bl	8000f50 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800062c:	2004      	movs	r0, #4
 800062e:	f000 fc08 	bl	8000e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800063c:	4b32      	ldr	r3, [pc, #200]	; (8000708 <SystemInit+0xd0>)
 800063e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000642:	4a31      	ldr	r2, [pc, #196]	; (8000708 <SystemInit+0xd0>)
 8000644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <SystemInit+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	2b06      	cmp	r3, #6
 8000656:	d807      	bhi.n	8000668 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <SystemInit+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f023 030f 	bic.w	r3, r3, #15
 8000660:	4a2a      	ldr	r2, [pc, #168]	; (800070c <SystemInit+0xd4>)
 8000662:	f043 0307 	orr.w	r3, r3, #7
 8000666:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemInit+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a28      	ldr	r2, [pc, #160]	; (8000710 <SystemInit+0xd8>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemInit+0xd8>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemInit+0xd8>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4924      	ldr	r1, [pc, #144]	; (8000710 <SystemInit+0xd8>)
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemInit+0xdc>)
 8000682:	4013      	ands	r3, r2
 8000684:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <SystemInit+0xd4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	2b00      	cmp	r3, #0
 8000690:	d007      	beq.n	80006a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <SystemInit+0xd4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f023 030f 	bic.w	r3, r3, #15
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <SystemInit+0xd4>)
 800069c:	f043 0307 	orr.w	r3, r3, #7
 80006a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <SystemInit+0xd8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <SystemInit+0xd8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <SystemInit+0xd8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <SystemInit+0xd8>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <SystemInit+0xe0>)
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <SystemInit+0xd8>)
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <SystemInit+0xe4>)
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <SystemInit+0xd8>)
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <SystemInit+0xe8>)
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <SystemInit+0xd8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <SystemInit+0xd8>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <SystemInit+0xe8>)
 80006d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0xd8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <SystemInit+0xd8>)
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <SystemInit+0xe8>)
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <SystemInit+0xd8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <SystemInit+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a09      	ldr	r2, [pc, #36]	; (8000710 <SystemInit+0xd8>)
 80006ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <SystemInit+0xd8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <SystemInit+0xec>)
 80006f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	52002000 	.word	0x52002000
 8000710:	58024400 	.word	0x58024400
 8000714:	eaf6ed7f 	.word	0xeaf6ed7f
 8000718:	02020200 	.word	0x02020200
 800071c:	01ff0000 	.word	0x01ff0000
 8000720:	01010280 	.word	0x01010280
 8000724:	52004000 	.word	0x52004000

08000728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800072c:	f7ff ff84 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000748:	4c0a      	ldr	r4, [pc, #40]	; (8000774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000756:	f001 fbcd 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800075a:	f7ff fdd7 	bl	800030c <main>
  bx  lr
 800075e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000760:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000764:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000768:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800076c:	08001f7c 	.word	0x08001f7c
  ldr r2, =_sbss
 8000770:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000774:	24000034 	.word	0x24000034

08000778 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC3_IRQHandler>
	...

0800077c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000782:	2003      	movs	r0, #3
 8000784:	f000 f95c 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000788:	f001 f9b6 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 800078c:	4602      	mov	r2, r0
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_Init+0x68>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	f003 030f 	and.w	r3, r3, #15
 8000798:	4913      	ldr	r1, [pc, #76]	; (80007e8 <HAL_Init+0x6c>)
 800079a:	5ccb      	ldrb	r3, [r1, r3]
 800079c:	f003 031f 	and.w	r3, r3, #31
 80007a0:	fa22 f303 	lsr.w	r3, r2, r3
 80007a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_Init+0x68>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_Init+0x6c>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	f003 031f 	and.w	r3, r3, #31
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	fa22 f303 	lsr.w	r3, r2, r3
 80007bc:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <HAL_Init+0x70>)
 80007be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <HAL_Init+0x74>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007c6:	200f      	movs	r0, #15
 80007c8:	f000 f814 	bl	80007f4 <HAL_InitTick>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e002      	b.n	80007dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007d6:	f7ff fed7 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58024400 	.word	0x58024400
 80007e8:	08001f64 	.word	0x08001f64
 80007ec:	24000004 	.word	0x24000004
 80007f0:	24000000 	.word	0x24000000

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_InitTick+0x60>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	e021      	b.n	800084c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_InitTick+0x64>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_InitTick+0x60>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f941 	bl	8000aa6 <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f000 f90b 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_InitTick+0x68>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2400000c 	.word	0x2400000c
 8000858:	24000000 	.word	0x24000000
 800085c:	24000008 	.word	0x24000008

08000860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2400000c 	.word	0x2400000c
 8000884:	24000030 	.word	0x24000030

08000888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_GetTick+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	24000030 	.word	0x24000030

080008a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <__NVIC_SetPriorityGrouping+0x40>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	4313      	orrs	r3, r2
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <__NVIC_SetPriorityGrouping+0x40>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00
 80008e4:	05fa0000 	.word	0x05fa0000

080008e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800090e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db0b      	blt.n	800092e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	f003 021f 	and.w	r2, r3, #31
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <__NVIC_EnableIRQ+0x38>)
 800091e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	2001      	movs	r0, #1
 8000926:	fa00 f202 	lsl.w	r2, r0, r2
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff8e 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff29 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff40 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff90 	bl	8000994 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5f 	bl	8000940 <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff33 	bl	8000904 <__NVIC_EnableIRQ>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa4 	bl	80009fc <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ace:	4b86      	ldr	r3, [pc, #536]	; (8000ce8 <HAL_GPIO_Init+0x228>)
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ad2:	e18c      	b.n	8000dee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 817e 	beq.w	8000de8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x44>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	69b9      	ldr	r1, [r7, #24]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80d8 	beq.w	8000de8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <HAL_GPIO_Init+0x22c>)
 8000c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3e:	4a2b      	ldr	r2, [pc, #172]	; (8000cec <HAL_GPIO_Init+0x22c>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <HAL_GPIO_Init+0x22c>)
 8000c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c56:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_GPIO_Init+0x230>)
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_GPIO_Init+0x234>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d04a      	beq.n	8000d18 <HAL_GPIO_Init+0x258>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_GPIO_Init+0x238>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d02b      	beq.n	8000ce2 <HAL_GPIO_Init+0x222>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <HAL_GPIO_Init+0x23c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d025      	beq.n	8000cde <HAL_GPIO_Init+0x21e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <HAL_GPIO_Init+0x240>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d01f      	beq.n	8000cda <HAL_GPIO_Init+0x21a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_GPIO_Init+0x244>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d019      	beq.n	8000cd6 <HAL_GPIO_Init+0x216>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_GPIO_Init+0x248>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0x212>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_GPIO_Init+0x24c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00d      	beq.n	8000cce <HAL_GPIO_Init+0x20e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_GPIO_Init+0x250>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x20a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <HAL_GPIO_Init+0x254>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_GPIO_Init+0x206>
 8000cc2:	2309      	movs	r3, #9
 8000cc4:	e029      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	e027      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000cca:	2307      	movs	r3, #7
 8000ccc:	e025      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000cce:	2306      	movs	r3, #6
 8000cd0:	e023      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	e021      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	e01f      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e01d      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e01b      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e019      	b.n	8000d1a <HAL_GPIO_Init+0x25a>
 8000ce6:	bf00      	nop
 8000ce8:	58000080 	.word	0x58000080
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58000400 	.word	0x58000400
 8000cf4:	58020000 	.word	0x58020000
 8000cf8:	58020400 	.word	0x58020400
 8000cfc:	58020800 	.word	0x58020800
 8000d00:	58020c00 	.word	0x58020c00
 8000d04:	58021000 	.word	0x58021000
 8000d08:	58021400 	.word	0x58021400
 8000d0c:	58021800 	.word	0x58021800
 8000d10:	58021c00 	.word	0x58021c00
 8000d14:	58022400 	.word	0x58022400
 8000d18:	2300      	movs	r3, #0
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	f002 0203 	and.w	r2, r2, #3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d2a:	4938      	ldr	r1, [pc, #224]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	3301      	adds	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa22 f303 	lsr.w	r3, r2, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f47f ae6b 	bne.w	8000ad4 <HAL_GPIO_Init+0x14>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3724      	adds	r7, #36	; 0x24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	58000400 	.word	0x58000400

08000e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e20:	787b      	ldrb	r3, [r7, #1]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000e2c:	e003      	b.n	8000e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	041a      	lsls	r2, r3, #16
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	619a      	str	r2, [r3, #24]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d008      	beq.n	8000e6e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f804 	bl	8000e76 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d00a      	beq.n	8000ec6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <HAL_PWREx_ConfigSupply+0xb0>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d001      	beq.n	8000ec2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e03f      	b.n	8000f42 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e03d      	b.n	8000f42 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000ece:	491f      	ldr	r1, [pc, #124]	; (8000f4c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000ed6:	f7ff fcd7 	bl	8000888 <HAL_GetTick>
 8000eda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000edc:	e009      	b.n	8000ef2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ede:	f7ff fcd3 	bl	8000888 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eec:	d901      	bls.n	8000ef2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e027      	b.n	8000f42 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000efe:	d1ee      	bne.n	8000ede <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b1e      	cmp	r3, #30
 8000f04:	d008      	beq.n	8000f18 <HAL_PWREx_ConfigSupply+0x7c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b2e      	cmp	r3, #46	; 0x2e
 8000f0a:	d005      	beq.n	8000f18 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b1d      	cmp	r3, #29
 8000f10:	d002      	beq.n	8000f18 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b2d      	cmp	r3, #45	; 0x2d
 8000f16:	d113      	bne.n	8000f40 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000f18:	f7ff fcb6 	bl	8000888 <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f1e:	e009      	b.n	8000f34 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f20:	f7ff fcb2 	bl	8000888 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f2e:	d901      	bls.n	8000f34 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e006      	b.n	8000f42 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	f003 0311 	and.w	r3, r3, #17
 8000f3c:	2b11      	cmp	r3, #17
 8000f3e:	d1ef      	bne.n	8000f20 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	58024800 	.word	0x58024800

08000f50 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d014      	beq.n	8000f8a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d10b      	bne.n	8000f8a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8000f72:	f7ff ff8b 	bl	8000e8c <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d014      	beq.n	8000fc0 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8000f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8000fa8:	f000 f80e 	bl	8000fc8 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58024800 	.word	0x58024800

08000fc8 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e3c8      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8087 	beq.w	8001106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff8:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001002:	4b86      	ldr	r3, [pc, #536]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	2b10      	cmp	r3, #16
 800100c:	d007      	beq.n	800101e <HAL_RCC_OscConfig+0x46>
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	2b18      	cmp	r3, #24
 8001012:	d110      	bne.n	8001036 <HAL_RCC_OscConfig+0x5e>
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d10b      	bne.n	8001036 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d06c      	beq.n	8001104 <HAL_RCC_OscConfig+0x12c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d168      	bne.n	8001104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e3a2      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x76>
 8001040:	4b76      	ldr	r3, [pc, #472]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a75      	ldr	r2, [pc, #468]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e02e      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x98>
 8001056:	4b71      	ldr	r3, [pc, #452]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a70      	ldr	r2, [pc, #448]	; (800121c <HAL_RCC_OscConfig+0x244>)
 800105c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b6e      	ldr	r3, [pc, #440]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a6d      	ldr	r2, [pc, #436]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e01d      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0xbc>
 800107a:	4b68      	ldr	r3, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x244>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a67      	ldr	r2, [pc, #412]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b65      	ldr	r3, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a64      	ldr	r2, [pc, #400]	; (800121c <HAL_RCC_OscConfig+0x244>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e00b      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 8001094:	4b61      	ldr	r3, [pc, #388]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a60      	ldr	r2, [pc, #384]	; (800121c <HAL_RCC_OscConfig+0x244>)
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b5e      	ldr	r3, [pc, #376]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a5d      	ldr	r2, [pc, #372]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b4:	f7ff fbe8 	bl	8000888 <HAL_GetTick>
 80010b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fbe4 	bl	8000888 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e356      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0xe4>
 80010da:	e014      	b.n	8001106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbd4 	bl	8000888 <HAL_GetTick>
 80010e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fbd0 	bl	8000888 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e342      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010f6:	4b49      	ldr	r3, [pc, #292]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x10c>
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 808c 	beq.w	800122c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001114:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800111c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_RCC_OscConfig+0x162>
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	2b18      	cmp	r3, #24
 800112e:	d137      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1c8>
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d132      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <HAL_RCC_OscConfig+0x244>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <HAL_RCC_OscConfig+0x17a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e314      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 0219 	bic.w	r2, r3, #25
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	492f      	ldr	r1, [pc, #188]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fb90 	bl	8000888 <HAL_GetTick>
 8001168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff fb8c 	bl	8000888 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e2fe      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_RCC_OscConfig+0x244>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_RCC_OscConfig+0x244>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	061b      	lsls	r3, r3, #24
 8001198:	4920      	ldr	r1, [pc, #128]	; (800121c <HAL_RCC_OscConfig+0x244>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800119e:	e045      	b.n	800122c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d026      	beq.n	80011f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 0219 	bic.w	r2, r3, #25
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4919      	ldr	r1, [pc, #100]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb65 	bl	8000888 <HAL_GetTick>
 80011be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fb61 	bl	8000888 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e2d3      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	490b      	ldr	r1, [pc, #44]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
 80011f4:	e01a      	b.n	800122c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_RCC_OscConfig+0x244>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff fb41 	bl	8000888 <HAL_GetTick>
 8001206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120a:	f7ff fb3d 	bl	8000888 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d903      	bls.n	8001220 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e2af      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
 800121c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001220:	4b96      	ldr	r3, [pc, #600]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ee      	bne.n	800120a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d06a      	beq.n	800130e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001238:	4b90      	ldr	r3, [pc, #576]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001240:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001242:	4b8e      	ldr	r3, [pc, #568]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d007      	beq.n	800125e <HAL_RCC_OscConfig+0x286>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b18      	cmp	r3, #24
 8001252:	d11b      	bne.n	800128c <HAL_RCC_OscConfig+0x2b4>
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800125e:	4b87      	ldr	r3, [pc, #540]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x29e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b80      	cmp	r3, #128	; 0x80
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e282      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	061b      	lsls	r3, r3, #24
 8001284:	497d      	ldr	r1, [pc, #500]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001286:	4313      	orrs	r3, r2
 8001288:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800128a:	e040      	b.n	800130e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001294:	4b79      	ldr	r3, [pc, #484]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a78      	ldr	r2, [pc, #480]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800129a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff faf2 	bl	8000888 <HAL_GetTick>
 80012a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80012a8:	f7ff faee 	bl	8000888 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e260      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012ba:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012c6:	4b6d      	ldr	r3, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	061b      	lsls	r3, r3, #24
 80012d4:	4969      	ldr	r1, [pc, #420]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60cb      	str	r3, [r1, #12]
 80012da:	e018      	b.n	800130e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80012dc:	4b67      	ldr	r3, [pc, #412]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a66      	ldr	r2, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80012e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff face 	bl	8000888 <HAL_GetTick>
 80012ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80012f0:	f7ff faca 	bl	8000888 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e23c      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001302:	4b5e      	ldr	r3, [pc, #376]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d036      	beq.n	8001388 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d019      	beq.n	8001356 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001326:	4a55      	ldr	r2, [pc, #340]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132e:	f7ff faab 	bl	8000888 <HAL_GetTick>
 8001332:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff faa7 	bl	8000888 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e219      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x35e>
 8001354:	e018      	b.n	8001388 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	4b49      	ldr	r3, [pc, #292]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800135a:	4a48      	ldr	r2, [pc, #288]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001362:	f7ff fa91 	bl	8000888 <HAL_GetTick>
 8001366:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff fa8d 	bl	8000888 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e1ff      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800137e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0320 	and.w	r3, r3, #32
 8001390:	2b00      	cmp	r3, #0
 8001392:	d036      	beq.n	8001402 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d019      	beq.n	80013d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a36      	ldr	r2, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80013a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fa6e 	bl	8000888 <HAL_GetTick>
 80013ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013b0:	f7ff fa6a 	bl	8000888 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1dc      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x3d8>
 80013ce:	e018      	b.n	8001402 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a29      	ldr	r2, [pc, #164]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80013d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fa54 	bl	8000888 <HAL_GetTick>
 80013e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e4:	f7ff fa50 	bl	8000888 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1c2      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8086 	beq.w	800151c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x4a8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <HAL_RCC_OscConfig+0x4a8>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800141c:	f7ff fa34 	bl	8000888 <HAL_GetTick>
 8001420:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001424:	f7ff fa30 	bl	8000888 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1a2      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_RCC_OscConfig+0x4a8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <HAL_RCC_OscConfig+0x480>
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	e032      	b.n	80014be <HAL_RCC_OscConfig+0x4e6>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_RCC_OscConfig+0x4ac>
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a02      	ldr	r2, [pc, #8]	; (800147c <HAL_RCC_OscConfig+0x4a4>)
 8001472:	f023 0304 	bic.w	r3, r3, #4
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	e021      	b.n	80014be <HAL_RCC_OscConfig+0x4e6>
 800147a:	bf00      	nop
 800147c:	58024400 	.word	0x58024400
 8001480:	58024800 	.word	0x58024800
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b05      	cmp	r3, #5
 800148a:	d10c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x4ce>
 800148c:	4b83      	ldr	r3, [pc, #524]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a82      	ldr	r2, [pc, #520]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	4b80      	ldr	r3, [pc, #512]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a7f      	ldr	r2, [pc, #508]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	e00b      	b.n	80014be <HAL_RCC_OscConfig+0x4e6>
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a7c      	ldr	r2, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a79      	ldr	r2, [pc, #484]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80014b8:	f023 0304 	bic.w	r3, r3, #4
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d015      	beq.n	80014f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff f9df 	bl	8000888 <HAL_GetTick>
 80014ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f9db 	bl	8000888 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e14b      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014e4:	4b6d      	ldr	r3, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0ee      	beq.n	80014ce <HAL_RCC_OscConfig+0x4f6>
 80014f0:	e014      	b.n	800151c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f2:	f7ff f9c9 	bl	8000888 <HAL_GetTick>
 80014f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff f9c5 	bl	8000888 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e135      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001510:	4b62      	ldr	r3, [pc, #392]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ee      	bne.n	80014fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 812a 	beq.w	800177a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800152e:	2b18      	cmp	r3, #24
 8001530:	f000 80ba 	beq.w	80016a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	2b02      	cmp	r3, #2
 800153a:	f040 8095 	bne.w	8001668 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a56      	ldr	r2, [pc, #344]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff f99d 	bl	8000888 <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff f999 	bl	8000888 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e10b      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001570:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_RCC_OscConfig+0x6c8>)
 8001576:	4013      	ands	r3, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	430a      	orrs	r2, r1
 8001584:	4945      	ldr	r1, [pc, #276]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	628b      	str	r3, [r1, #40]	; 0x28
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	3b01      	subs	r3, #1
 8001590:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	3b01      	subs	r3, #1
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	b29b      	uxth	r3, r3
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	3b01      	subs	r3, #1
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	3b01      	subs	r3, #1
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80015ba:	4938      	ldr	r1, [pc, #224]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	4a35      	ldr	r2, [pc, #212]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x6cc>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	4930      	ldr	r1, [pc, #192]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f023 020c 	bic.w	r2, r3, #12
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	492b      	ldr	r1, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	f023 0202 	bic.w	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4927      	ldr	r1, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff f922 	bl	8000888 <HAL_GetTick>
 8001644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff f91e 	bl	8000888 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e090      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x670>
 8001666:	e088      	b.n	800177a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff f908 	bl	8000888 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f904 	bl	8000888 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e076      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800168e:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_RCC_OscConfig+0x6c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x6a4>
 800169a:	e06e      	b.n	800177a <HAL_RCC_OscConfig+0x7a2>
 800169c:	58024400 	.word	0x58024400
 80016a0:	fffffc0c 	.word	0xfffffc0c
 80016a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80016a8:	4b36      	ldr	r3, [pc, #216]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d031      	beq.n	8001720 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0203 	and.w	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d12a      	bne.n	8001720 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d122      	bne.n	8001720 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0a5b      	lsrs	r3, r3, #9
 80016ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0e1b      	lsrs	r3, r3, #24
 8001712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e02b      	b.n	800177c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800172e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	429a      	cmp	r2, r3
 8001738:	d01f      	beq.n	800177a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001746:	f7ff f89f 	bl	8000888 <HAL_GetTick>
 800174a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800174c:	bf00      	nop
 800174e:	f7ff f89b 	bl	8000888 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	4293      	cmp	r3, r2
 8001758:	d0f9      	beq.n	800174e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 800175c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_RCC_OscConfig+0x7b0>)
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001766:	00d2      	lsls	r2, r2, #3
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 800176a:	4313      	orrs	r3, r2
 800176c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_RCC_OscConfig+0x7ac>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3730      	adds	r7, #48	; 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58024400 	.word	0x58024400
 8001788:	ffff0007 	.word	0xffff0007

0800178c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e19c      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b8a      	ldr	r3, [pc, #552]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d910      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b87      	ldr	r3, [pc, #540]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 020f 	bic.w	r2, r3, #15
 80017b6:	4985      	ldr	r1, [pc, #532]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b83      	ldr	r3, [pc, #524]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e184      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d010      	beq.n	80017fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d908      	bls.n	80017fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017ec:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4975      	ldr	r1, [pc, #468]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d010      	beq.n	800182c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	4b70      	ldr	r3, [pc, #448]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001816:	429a      	cmp	r2, r3
 8001818:	d908      	bls.n	800182c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800181a:	4b6d      	ldr	r3, [pc, #436]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	496a      	ldr	r1, [pc, #424]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 8001828:	4313      	orrs	r3, r2
 800182a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d010      	beq.n	800185a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699a      	ldr	r2, [r3, #24]
 800183c:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001844:	429a      	cmp	r2, r3
 8001846:	d908      	bls.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001848:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	495e      	ldr	r1, [pc, #376]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 8001856:	4313      	orrs	r3, r2
 8001858:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001872:	429a      	cmp	r2, r3
 8001874:	d908      	bls.n	8001888 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001876:	4b56      	ldr	r3, [pc, #344]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4953      	ldr	r1, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 8001884:	4313      	orrs	r3, r2
 8001886:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d010      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d908      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f023 020f 	bic.w	r2, r3, #15
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4947      	ldr	r1, [pc, #284]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d055      	beq.n	800196e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018c2:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4940      	ldr	r1, [pc, #256]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d107      	bne.n	80018ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018dc:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d121      	bne.n	800192c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0f6      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d115      	bne.n	800192c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0ea      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0de      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d6      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f023 0207 	bic.w	r2, r3, #7
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4925      	ldr	r1, [pc, #148]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800193a:	4313      	orrs	r3, r2
 800193c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193e:	f7fe ffa3 	bl	8000888 <HAL_GetTick>
 8001942:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001944:	e00a      	b.n	800195c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001946:	f7fe ff9f 	bl	8000888 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0be      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	429a      	cmp	r2, r3
 800196c:	d1eb      	bne.n	8001946 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d010      	beq.n	800199c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	429a      	cmp	r2, r3
 8001988:	d208      	bcs.n	800199c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f023 020f 	bic.w	r2, r3, #15
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x244>)
 8001998:	4313      	orrs	r3, r2
 800199a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d214      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 020f 	bic.w	r2, r3, #15
 80019b2:	4906      	ldr	r1, [pc, #24]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_RCC_ClockConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e086      	b.n	8001ada <HAL_RCC_ClockConfig+0x34e>
 80019cc:	52002000 	.word	0x52002000
 80019d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d010      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d208      	bcs.n	8001a02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	4939      	ldr	r1, [pc, #228]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d010      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d208      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	492e      	ldr	r1, [pc, #184]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d208      	bcs.n	8001a5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d208      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4917      	ldr	r1, [pc, #92]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a8c:	f000 f834 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <HAL_RCC_ClockConfig+0x35c>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_RCC_ClockConfig+0x358>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_RCC_ClockConfig+0x35c>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x360>)
 8001ac2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x364>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x368>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fe90 	bl	80007f4 <HAL_InitTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	08001f64 	.word	0x08001f64
 8001aec:	24000004 	.word	0x24000004
 8001af0:	24000000 	.word	0x24000000
 8001af4:	24000008 	.word	0x24000008

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afe:	4bb3      	ldr	r3, [pc, #716]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b06:	2b18      	cmp	r3, #24
 8001b08:	f200 8155 	bhi.w	8001db6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001b0c:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001b79 	.word	0x08001b79
 8001b18:	08001db7 	.word	0x08001db7
 8001b1c:	08001db7 	.word	0x08001db7
 8001b20:	08001db7 	.word	0x08001db7
 8001b24:	08001db7 	.word	0x08001db7
 8001b28:	08001db7 	.word	0x08001db7
 8001b2c:	08001db7 	.word	0x08001db7
 8001b30:	08001db7 	.word	0x08001db7
 8001b34:	08001b9f 	.word	0x08001b9f
 8001b38:	08001db7 	.word	0x08001db7
 8001b3c:	08001db7 	.word	0x08001db7
 8001b40:	08001db7 	.word	0x08001db7
 8001b44:	08001db7 	.word	0x08001db7
 8001b48:	08001db7 	.word	0x08001db7
 8001b4c:	08001db7 	.word	0x08001db7
 8001b50:	08001db7 	.word	0x08001db7
 8001b54:	08001ba5 	.word	0x08001ba5
 8001b58:	08001db7 	.word	0x08001db7
 8001b5c:	08001db7 	.word	0x08001db7
 8001b60:	08001db7 	.word	0x08001db7
 8001b64:	08001db7 	.word	0x08001db7
 8001b68:	08001db7 	.word	0x08001db7
 8001b6c:	08001db7 	.word	0x08001db7
 8001b70:	08001db7 	.word	0x08001db7
 8001b74:	08001bab 	.word	0x08001bab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b78:	4b94      	ldr	r3, [pc, #592]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b84:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	4a90      	ldr	r2, [pc, #576]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001b96:	e111      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001b98:	4b8d      	ldr	r3, [pc, #564]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b9a:	61bb      	str	r3, [r7, #24]
      break;
 8001b9c:	e10e      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001b9e:	4b8d      	ldr	r3, [pc, #564]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ba0:	61bb      	str	r3, [r7, #24]
      break;
 8001ba2:	e10b      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ba6:	61bb      	str	r3, [r7, #24]
      break;
 8001ba8:	e108      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001bb4:	4b85      	ldr	r3, [pc, #532]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001bc0:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001bca:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	08db      	lsrs	r3, r3, #3
 8001bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80e1 	beq.w	8001db0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f000 8083 	beq.w	8001cfc <HAL_RCC_GetSysClockFreq+0x204>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f200 80a1 	bhi.w	8001d40 <HAL_RCC_GetSysClockFreq+0x248>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x114>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d056      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001c0a:	e099      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d02d      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c18:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	4a6b      	ldr	r2, [pc, #428]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c42:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001c72:	e087      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001de0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c86:	4b51      	ldr	r3, [pc, #324]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cb6:	e065      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cca:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cfa:	e043      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001de8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d3e:	e021      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001ddc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	0a5b      	lsrs	r3, r3, #9
 8001d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8e:	3301      	adds	r3, #1
 8001d90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	ee07 3a90 	vmov	s15, r3
 8001d98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da8:	ee17 3a90 	vmov	r3, s15
 8001dac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001dae:	e005      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
      break;
 8001db4:	e002      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001db8:	61bb      	str	r3, [r7, #24]
      break;
 8001dba:	bf00      	nop
  }

  return sysclockfreq;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	03d09000 	.word	0x03d09000
 8001dd4:	003d0900 	.word	0x003d0900
 8001dd8:	017d7840 	.word	0x017d7840
 8001ddc:	46000000 	.word	0x46000000
 8001de0:	4c742400 	.word	0x4c742400
 8001de4:	4a742400 	.word	0x4a742400
 8001de8:	4bbebc20 	.word	0x4bbebc20

08001dec <BSP_OCPC_Init>:
 *
 * Returns: Nothing
 */

void BSP_OCPC_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
 8001df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df6:	4802      	ldr	r0, [pc, #8]	; (8001e00 <BSP_OCPC_Init+0x14>)
 8001df8:	f7ff f80a 	bl	8000e10 <HAL_GPIO_WritePin>
	//HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    //have to replicate for more pins

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	58021000 	.word	0x58021000

08001e04 <BSP_OCPC_SetOutputStatus>:
 *
 * Returns: 1. SUCCESS on successful setting
 *          2. ERROR if uninitialised or invalid device
 */
uint8_t BSP_OCPC_SetOutputStatus(BSP_OCPC_Device OCPC_Device, FunctionalState NewState)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
	int PinState = ((uint8_t)NewState) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001e14:	79bb      	ldrb	r3, [r7, #6]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf0c      	ite	eq
 8001e1a:	2301      	moveq	r3, #1
 8001e1c:	2300      	movne	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	60fb      	str	r3, [r7, #12]
	switch(OCPC_Device)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b07      	cmp	r3, #7
 8001e26:	d85b      	bhi.n	8001ee0 <BSP_OCPC_SetOutputStatus+0xdc>
 8001e28:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <BSP_OCPC_SetOutputStatus+0x2c>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001e51 	.word	0x08001e51
 8001e34:	08001e63 	.word	0x08001e63
 8001e38:	08001e75 	.word	0x08001e75
 8001e3c:	08001e87 	.word	0x08001e87
 8001e40:	08001e99 	.word	0x08001e99
 8001e44:	08001eab 	.word	0x08001eab
 8001e48:	08001ebd 	.word	0x08001ebd
 8001e4c:	08001ecf 	.word	0x08001ecf
			  	{
			  	case BSP_OCPC_MAG:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e5a:	4825      	ldr	r0, [pc, #148]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001e5c:	f7fe ffd8 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001e60:	e040      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	case BSP_OCPC_GYRO:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6c:	4820      	ldr	r0, [pc, #128]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001e6e:	f7fe ffcf 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001e72:	e037      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	case BSP_OCPC_SUN:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7e:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001e80:	f7fe ffc6 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001e84:	e02e      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	case BSP_OCPC_HB:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e90:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001e92:	f7fe ffbd 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001e96:	e025      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	case BSP_OCPC_CVS:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea2:	4813      	ldr	r0, [pc, #76]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001ea4:	f7fe ffb4 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001ea8:	e01c      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	case BSP_OCPC_MD:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb4:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001eb6:	f7fe ffab 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001eba:	e013      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	case BSP_OCPC_WDT:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001ec8:	f7fe ffa2 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001ecc:	e00a      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	case BSP_OCPC_TS:
			  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, PinState);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <BSP_OCPC_SetOutputStatus+0xec>)
 8001eda:	f7fe ff99 	bl	8000e10 <HAL_GPIO_WritePin>
			  		break;
 8001ede:	e001      	b.n	8001ee4 <BSP_OCPC_SetOutputStatus+0xe0>
			  	default:
			  		return ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <BSP_OCPC_SetOutputStatus+0xe2>
			  	}
			  	return SUCCESS;
 8001ee4:	2300      	movs	r3, #0
 }
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	58021000 	.word	0x58021000

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	4d0d      	ldr	r5, [pc, #52]	; (8001f2c <__libc_init_array+0x38>)
 8001ef8:	4c0d      	ldr	r4, [pc, #52]	; (8001f30 <__libc_init_array+0x3c>)
 8001efa:	1b64      	subs	r4, r4, r5
 8001efc:	10a4      	asrs	r4, r4, #2
 8001efe:	2600      	movs	r6, #0
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	4d0b      	ldr	r5, [pc, #44]	; (8001f34 <__libc_init_array+0x40>)
 8001f06:	4c0c      	ldr	r4, [pc, #48]	; (8001f38 <__libc_init_array+0x44>)
 8001f08:	f000 f820 	bl	8001f4c <_init>
 8001f0c:	1b64      	subs	r4, r4, r5
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	2600      	movs	r6, #0
 8001f12:	42a6      	cmp	r6, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1c:	4798      	blx	r3
 8001f1e:	3601      	adds	r6, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f26:	4798      	blx	r3
 8001f28:	3601      	adds	r6, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	08001f74 	.word	0x08001f74
 8001f30:	08001f74 	.word	0x08001f74
 8001f34:	08001f74 	.word	0x08001f74
 8001f38:	08001f78 	.word	0x08001f78

08001f3c <memset>:
 8001f3c:	4402      	add	r2, r0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <memset+0xa>
 8001f44:	4770      	bx	lr
 8001f46:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4a:	e7f9      	b.n	8001f40 <memset+0x4>

08001f4c <_init>:
 8001f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4e:	bf00      	nop
 8001f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f52:	bc08      	pop	{r3}
 8001f54:	469e      	mov	lr, r3
 8001f56:	4770      	bx	lr

08001f58 <_fini>:
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5a:	bf00      	nop
 8001f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5e:	bc08      	pop	{r3}
 8001f60:	469e      	mov	lr, r3
 8001f62:	4770      	bx	lr
