
motordriver_DRV10970.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003974  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  24000010  08003c6c  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  240001b0  08003c6c  000201b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d0d3  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001b10  00000000  00000000  0002d154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c60  00000000  00000000  0002ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000098f  00000000  00000000  0002f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000315da  00000000  00000000  00030257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e2b2  00000000  00000000  00061831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014319c  00000000  00000000  0006fae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003384  00000000  00000000  001b2c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  001b6004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000010 	.word	0x24000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08003c2c 	.word	0x08003c2c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000014 	.word	0x24000014
 800030c:	08003c2c 	.word	0x08003c2c

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b5b0      	push	{r4, r5, r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fd4d 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f86d 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();  //motor initalize function will be called from here refer the MX_GPIO_Init function
 800031e:	f000 fa8b 	bl	8000838 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000322:	f000 f8c7 	bl	80004b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000326:	f000 f93b 	bl	80005a0 <MX_TIM3_Init>
  MX_TIM14_Init();
 800032a:	f000 f9af 	bl	800068c <MX_TIM14_Init>
  MX_TIM23_Init();
 800032e:	f000 f9f9 	bl	8000724 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  transfer(&htim2,&htim3,&htim14,&htim23,d_dutyx,d_dutyy,d_dutyz,f_dutyx,f_dutyy,f_dutyz);
 8000332:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <main+0xc0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <main+0xc4>)
 8000338:	6812      	ldr	r2, [r2, #0]
 800033a:	4927      	ldr	r1, [pc, #156]	; (80003d8 <main+0xc8>)
 800033c:	6809      	ldr	r1, [r1, #0]
 800033e:	4827      	ldr	r0, [pc, #156]	; (80003dc <main+0xcc>)
 8000340:	6800      	ldr	r0, [r0, #0]
 8000342:	4c27      	ldr	r4, [pc, #156]	; (80003e0 <main+0xd0>)
 8000344:	6824      	ldr	r4, [r4, #0]
 8000346:	4d27      	ldr	r5, [pc, #156]	; (80003e4 <main+0xd4>)
 8000348:	682d      	ldr	r5, [r5, #0]
 800034a:	9505      	str	r5, [sp, #20]
 800034c:	9404      	str	r4, [sp, #16]
 800034e:	9003      	str	r0, [sp, #12]
 8000350:	9102      	str	r1, [sp, #8]
 8000352:	9201      	str	r2, [sp, #4]
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <main+0xd8>)
 8000358:	4a24      	ldr	r2, [pc, #144]	; (80003ec <main+0xdc>)
 800035a:	4925      	ldr	r1, [pc, #148]	; (80003f0 <main+0xe0>)
 800035c:	4825      	ldr	r0, [pc, #148]	; (80003f4 <main+0xe4>)
 800035e:	f003 fad9 	bl	8003914 <transfer>

  set_desired_motorx(50,1);
 8000362:	2001      	movs	r0, #1
 8000364:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80003b0 <main+0xa0>
 8000368:	f003 fbe8 	bl	8003b3c <set_desired_motorx>
  set_desired_motory(25,0);
 800036c:	2000      	movs	r0, #0
 800036e:	eeb3 0b09 	vmov.f64	d0, #57	; 0x41c80000  25.0
 8000372:	f003 fc09 	bl	8003b88 <set_desired_motory>
  set_desired_motory(75,1);
 8000376:	2001      	movs	r0, #1
 8000378:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80003b8 <main+0xa8>
 800037c:	f003 fc04 	bl	8003b88 <set_desired_motory>
  HAL_Delay(20000);//check duty values during these 20s
 8000380:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000384:	f000 fda8 	bl	8000ed8 <HAL_Delay>

  set_desired_motorx(55,1);
 8000388:	2001      	movs	r0, #1
 800038a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80003c0 <main+0xb0>
 800038e:	f003 fbd5 	bl	8003b3c <set_desired_motorx>
  set_desired_motory(20,0);
 8000392:	2000      	movs	r0, #0
 8000394:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8000398:	f003 fbf6 	bl	8003b88 <set_desired_motory>
  set_desired_motory(90,0);
 800039c:	2000      	movs	r0, #0
 800039e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80003c8 <main+0xb8>
 80003a2:	f003 fbf1 	bl	8003b88 <set_desired_motory>
  HAL_Delay(20000);//check duty values during these 20s
 80003a6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80003aa:	f000 fd95 	bl	8000ed8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <main+0x9e>
 80003b0:	00000000 	.word	0x00000000
 80003b4:	40490000 	.word	0x40490000
 80003b8:	00000000 	.word	0x00000000
 80003bc:	4052c000 	.word	0x4052c000
 80003c0:	00000000 	.word	0x00000000
 80003c4:	404b8000 	.word	0x404b8000
 80003c8:	00000000 	.word	0x00000000
 80003cc:	40568000 	.word	0x40568000
 80003d0:	2400015c 	.word	0x2400015c
 80003d4:	24000160 	.word	0x24000160
 80003d8:	24000164 	.word	0x24000164
 80003dc:	24000168 	.word	0x24000168
 80003e0:	2400016c 	.word	0x2400016c
 80003e4:	24000170 	.word	0x24000170
 80003e8:	24000110 	.word	0x24000110
 80003ec:	240000c4 	.word	0x240000c4
 80003f0:	24000078 	.word	0x24000078
 80003f4:	2400002c 	.word	0x2400002c

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b09c      	sub	sp, #112	; 0x70
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000402:	224c      	movs	r2, #76	; 0x4c
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 fbe4 	bl	8003bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2220      	movs	r2, #32
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fbde 	bl	8003bd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000418:	2004      	movs	r0, #4
 800041a:	f001 f827 	bl	800146c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800041e:	2300      	movs	r3, #0
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <SystemClock_Config+0xb8>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800042a:	4a21      	ldr	r2, [pc, #132]	; (80004b0 <SystemClock_Config+0xb8>)
 800042c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <SystemClock_Config+0xb8>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800043e:	bf00      	nop
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <SystemClock_Config+0xb8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800044c:	d1f8      	bne.n	8000440 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	2302      	movs	r3, #2
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000452:	2301      	movs	r3, #1
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800045a:	2300      	movs	r3, #0
 800045c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000462:	4618      	mov	r0, r3
 8000464:	f001 f85c 	bl	8001520 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800046e:	f000 faa1 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	233f      	movs	r3, #63	; 0x3f
 8000474:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000482:	2340      	movs	r3, #64	; 0x40
 8000484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000486:	2340      	movs	r3, #64	; 0x40
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000490:	2340      	movs	r3, #64	; 0x40
 8000492:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2101      	movs	r1, #1
 8000498:	4618      	mov	r0, r3
 800049a:	f001 fc1b 	bl	8001cd4 <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004a4:	f000 fa86 	bl	80009b4 <Error_Handler>
  }
}
 80004a8:	bf00      	nop
 80004aa:	3770      	adds	r7, #112	; 0x70
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	58024800 	.word	0x58024800

080004b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08e      	sub	sp, #56	; 0x38
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d4:	463b      	mov	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_TIM2_Init+0xe8>)
 80004e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_TIM2_Init+0xe8>)
 80004f0:	223f      	movs	r2, #63	; 0x3f
 80004f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <MX_TIM2_Init+0xe8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_TIM2_Init+0xe8>)
 80004fc:	2263      	movs	r2, #99	; 0x63
 80004fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_TIM2_Init+0xe8>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_TIM2_Init+0xe8>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800050c:	4823      	ldr	r0, [pc, #140]	; (800059c <MX_TIM2_Init+0xe8>)
 800050e:	f001 ff11 	bl	8002334 <HAL_TIM_Base_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000518:	f000 fa4c 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	4619      	mov	r1, r3
 8000528:	481c      	ldr	r0, [pc, #112]	; (800059c <MX_TIM2_Init+0xe8>)
 800052a:	f002 fae9 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000534:	f000 fa3e 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000538:	4818      	ldr	r0, [pc, #96]	; (800059c <MX_TIM2_Init+0xe8>)
 800053a:	f001 ff52 	bl	80023e2 <HAL_TIM_PWM_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000544:	f000 fa36 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	4619      	mov	r1, r3
 8000556:	4811      	ldr	r0, [pc, #68]	; (800059c <MX_TIM2_Init+0xe8>)
 8000558:	f003 f940 	bl	80037dc <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000562:	f000 fa27 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000566:	2360      	movs	r3, #96	; 0x60
 8000568:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	4619      	mov	r1, r3
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <MX_TIM2_Init+0xe8>)
 800057e:	f002 f9ab 	bl	80028d8 <HAL_TIM_PWM_ConfigChannel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000588:	f000 fa14 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <MX_TIM2_Init+0xe8>)
 800058e:	f000 fabf 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 8000592:	bf00      	nop
 8000594:	3738      	adds	r7, #56	; 0x38
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2400002c 	.word	0x2400002c

080005a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <MX_TIM3_Init+0xe4>)
 80005d4:	4a2c      	ldr	r2, [pc, #176]	; (8000688 <MX_TIM3_Init+0xe8>)
 80005d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_TIM3_Init+0xe4>)
 80005da:	223f      	movs	r2, #63	; 0x3f
 80005dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <MX_TIM3_Init+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <MX_TIM3_Init+0xe4>)
 80005e6:	2263      	movs	r2, #99	; 0x63
 80005e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_TIM3_Init+0xe4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_TIM3_Init+0xe4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005f6:	4823      	ldr	r0, [pc, #140]	; (8000684 <MX_TIM3_Init+0xe4>)
 80005f8:	f001 fe9c 	bl	8002334 <HAL_TIM_Base_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000602:	f000 f9d7 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800060c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000610:	4619      	mov	r1, r3
 8000612:	481c      	ldr	r0, [pc, #112]	; (8000684 <MX_TIM3_Init+0xe4>)
 8000614:	f002 fa74 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800061e:	f000 f9c9 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000622:	4818      	ldr	r0, [pc, #96]	; (8000684 <MX_TIM3_Init+0xe4>)
 8000624:	f001 fedd 	bl	80023e2 <HAL_TIM_PWM_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800062e:	f000 f9c1 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4619      	mov	r1, r3
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <MX_TIM3_Init+0xe4>)
 8000642:	f003 f8cb 	bl	80037dc <HAL_TIMEx_MasterConfigSynchronization>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800064c:	f000 f9b2 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <MX_TIM3_Init+0xe4>)
 8000668:	f002 f936 	bl	80028d8 <HAL_TIM_PWM_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000672:	f000 f99f 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000676:	4803      	ldr	r0, [pc, #12]	; (8000684 <MX_TIM3_Init+0xe4>)
 8000678:	f000 fa4a 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 800067c:	bf00      	nop
 800067e:	3738      	adds	r7, #56	; 0x38
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	24000078 	.word	0x24000078
 8000688:	40000400 	.word	0x40000400

0800068c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_TIM14_Init+0x90>)
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MX_TIM14_Init+0x94>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_TIM14_Init+0x90>)
 80006ac:	223f      	movs	r2, #63	; 0x3f
 80006ae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_TIM14_Init+0x90>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_TIM14_Init+0x90>)
 80006b8:	2263      	movs	r2, #99	; 0x63
 80006ba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_TIM14_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_TIM14_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_TIM14_Init+0x90>)
 80006ca:	f001 fe33 	bl	8002334 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 f96e 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006d8:	4810      	ldr	r0, [pc, #64]	; (800071c <MX_TIM14_Init+0x90>)
 80006da:	f001 fe82 	bl	80023e2 <HAL_TIM_PWM_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 f966 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <MX_TIM14_Init+0x90>)
 8000700:	f002 f8ea 	bl	80028d8 <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800070a:	f000 f953 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <MX_TIM14_Init+0x90>)
 8000710:	f000 f9fe 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	240000c4 	.word	0x240000c4
 8000720:	40002000 	.word	0x40002000

08000724 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000750:	4b37      	ldr	r3, [pc, #220]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000752:	4a38      	ldr	r2, [pc, #224]	; (8000834 <MX_TIM23_Init+0x110>)
 8000754:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 64-1;
 8000756:	4b36      	ldr	r3, [pc, #216]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000758:	223f      	movs	r2, #63	; 0x3f
 800075a:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <MX_TIM23_Init+0x10c>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <MX_TIM23_Init+0x10c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000776:	482e      	ldr	r0, [pc, #184]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000778:	f001 fddc 	bl	8002334 <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM23_Init+0x62>
  {
    Error_Handler();
 8000782:	f000 f917 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4619      	mov	r1, r3
 8000792:	4827      	ldr	r0, [pc, #156]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000794:	f002 f9b4 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800079e:	f000 f909 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim23) != HAL_OK)
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <MX_TIM23_Init+0x10c>)
 80007a4:	f001 ff9a 	bl	80026dc <HAL_TIM_IC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80007ae:	f000 f901 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	481b      	ldr	r0, [pc, #108]	; (8000830 <MX_TIM23_Init+0x10c>)
 80007c2:	f003 f80b 	bl	80037dc <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM23_Init+0xac>
  {
    Error_Handler();
 80007cc:	f000 f8f2 	bl	80009b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80007d0:	230a      	movs	r3, #10
 80007d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007d4:	2301      	movs	r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_TIM23_Init+0x10c>)
 80007e8:	f001 ffd9 	bl	800279e <HAL_TIM_IC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM23_Init+0xd2>
  {
    Error_Handler();
 80007f2:	f000 f8df 	bl	80009b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2204      	movs	r2, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000802:	f001 ffcc 	bl	800279e <HAL_TIM_IC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM23_Init+0xec>
  {
    Error_Handler();
 800080c:	f000 f8d2 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2208      	movs	r2, #8
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_TIM23_Init+0x10c>)
 8000818:	f001 ffc1 	bl	800279e <HAL_TIM_IC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM23_Init+0x102>
  {
    Error_Handler();
 8000822:	f000 f8c7 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3730      	adds	r7, #48	; 0x30
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	24000110 	.word	0x24000110
 8000834:	4000e000 	.word	0x4000e000

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <MX_GPIO_Init+0x16c>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a53      	ldr	r2, [pc, #332]	; (80009a4 <MX_GPIO_Init+0x16c>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b51      	ldr	r3, [pc, #324]	; (80009a4 <MX_GPIO_Init+0x16c>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b4d      	ldr	r3, [pc, #308]	; (80009a4 <MX_GPIO_Init+0x16c>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a4c      	ldr	r2, [pc, #304]	; (80009a4 <MX_GPIO_Init+0x16c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <MX_GPIO_Init+0x16c>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	4b46      	ldr	r3, [pc, #280]	; (80009a4 <MX_GPIO_Init+0x16c>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <MX_GPIO_Init+0x16c>)
 8000892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <MX_GPIO_Init+0x16c>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b3a      	ldr	r3, [pc, #232]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a35      	ldr	r2, [pc, #212]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a2e      	ldr	r2, [pc, #184]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <MX_GPIO_Init+0x16c>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000902:	2200      	movs	r2, #0
 8000904:	217c      	movs	r1, #124	; 0x7c
 8000906:	4828      	ldr	r0, [pc, #160]	; (80009a8 <MX_GPIO_Init+0x170>)
 8000908:	f000 fd96 	bl	8001438 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4826      	ldr	r0, [pc, #152]	; (80009ac <MX_GPIO_Init+0x174>)
 8000914:	f000 fd90 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2107      	movs	r1, #7
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x178>)
 800091e:	f000 fd8b 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000922:	237c      	movs	r3, #124	; 0x7c
 8000924:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	481b      	ldr	r0, [pc, #108]	; (80009a8 <MX_GPIO_Init+0x170>)
 800093a:	f000 fbd5 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4815      	ldr	r0, [pc, #84]	; (80009ac <MX_GPIO_Init+0x174>)
 8000958:	f000 fbc6 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800095c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480e      	ldr	r0, [pc, #56]	; (80009ac <MX_GPIO_Init+0x174>)
 8000972:	f000 fbb9 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000976:	2307      	movs	r3, #7
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x178>)
 800098e:	f000 fbab 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  motor_initialize(&GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4618      	mov	r0, r3
 8000998:	f002 ffe2 	bl	8003960 <motor_initialize>
/* USER CODE END MX_GPIO_Init_2 */
}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58024400 	.word	0x58024400
 80009a8:	58021000 	.word	0x58021000
 80009ac:	58020800 	.word	0x58020800
 80009b0:	58020c00 	.word	0x58020c00

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_MspInit+0x30>)
 80009c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x30>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x30>)
 80009d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	58024400 	.word	0x58024400

080009f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a14:	d10f      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a16:	4b39      	ldr	r3, [pc, #228]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a1c:	4a37      	ldr	r2, [pc, #220]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8000a34:	e05d      	b.n	8000af2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a31      	ldr	r2, [pc, #196]	; (8000b00 <HAL_TIM_Base_MspInit+0x10c>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d10f      	bne.n	8000a60 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a40:	4b2e      	ldr	r3, [pc, #184]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a46:	4a2d      	ldr	r2, [pc, #180]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a50:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
}
 8000a5e:	e048      	b.n	8000af2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM14)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <HAL_TIM_Base_MspInit+0x110>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d10f      	bne.n	8000a8a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
}
 8000a88:	e033      	b.n	8000af2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM23)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <HAL_TIM_Base_MspInit+0x114>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d12e      	bne.n	8000af2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000aa6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_TIM_Base_MspInit+0x108>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000ad0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8000ae2:	230d      	movs	r3, #13
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <HAL_TIM_Base_MspInit+0x118>)
 8000aee:	f000 fafb 	bl	80010e8 <HAL_GPIO_Init>
}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	58024400 	.word	0x58024400
 8000b00:	40000400 	.word	0x40000400
 8000b04:	40002000 	.word	0x40002000
 8000b08:	4000e000 	.word	0x4000e000
 8000b0c:	58021800 	.word	0x58021800

08000b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b30:	d11f      	bne.n	8000b72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a34      	ldr	r2, [pc, #208]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b50:	2320      	movs	r3, #32
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b60:	2301      	movs	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4829      	ldr	r0, [pc, #164]	; (8000c10 <HAL_TIM_MspPostInit+0x100>)
 8000b6c:	f000 fabc 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000b70:	e048      	b.n	8000c04 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <HAL_TIM_MspPostInit+0x104>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d11f      	bne.n	8000bbc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000baa:	2302      	movs	r3, #2
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <HAL_TIM_MspPostInit+0x100>)
 8000bb6:	f000 fa97 	bl	80010e8 <HAL_GPIO_Init>
}
 8000bba:	e023      	b.n	8000c04 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM14)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <HAL_TIM_MspPostInit+0x108>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d11e      	bne.n	8000c04 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_TIM_MspPostInit+0xfc>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000bf4:	2309      	movs	r3, #9
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4804      	ldr	r0, [pc, #16]	; (8000c10 <HAL_TIM_MspPostInit+0x100>)
 8000c00:	f000 fa72 	bl	80010e8 <HAL_GPIO_Init>
}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58020000 	.word	0x58020000
 8000c14:	40000400 	.word	0x40000400
 8000c18:	40002000 	.word	0x40002000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f916 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <SystemInit+0xd0>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <SystemInit+0xd0>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <SystemInit+0xd4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	2b06      	cmp	r3, #6
 8000c8e:	d807      	bhi.n	8000ca0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <SystemInit+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 030f 	bic.w	r3, r3, #15
 8000c98:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <SystemInit+0xd4>)
 8000c9a:	f043 0307 	orr.w	r3, r3, #7
 8000c9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <SystemInit+0xd8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <SystemInit+0xd8>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <SystemInit+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <SystemInit+0xd8>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4924      	ldr	r1, [pc, #144]	; (8000d48 <SystemInit+0xd8>)
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemInit+0xdc>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <SystemInit+0xd4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <SystemInit+0xd4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 030f 	bic.w	r3, r3, #15
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <SystemInit+0xd4>)
 8000cd4:	f043 0307 	orr.w	r3, r3, #7
 8000cd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <SystemInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <SystemInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <SystemInit+0xd8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <SystemInit+0xd8>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <SystemInit+0xe0>)
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <SystemInit+0xd8>)
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <SystemInit+0xe4>)
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <SystemInit+0xd8>)
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <SystemInit+0xe8>)
 8000cfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <SystemInit+0xd8>)
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <SystemInit+0xe8>)
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <SystemInit+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <SystemInit+0xd8>)
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <SystemInit+0xe8>)
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <SystemInit+0xd8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <SystemInit+0xd8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <SystemInit+0xd8>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <SystemInit+0xd8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <SystemInit+0xec>)
 8000d30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	52002000 	.word	0x52002000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d50:	02020200 	.word	0x02020200
 8000d54:	01ff0000 	.word	0x01ff0000
 8000d58:	01010280 	.word	0x01010280
 8000d5c:	52004000 	.word	0x52004000

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d64:	f7ff ff84 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f002 ff29 	bl	8003be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fabd 	bl	8000310 <main>
  bx  lr
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000d9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000da0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000da4:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8000da8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dac:	240001b0 	.word	0x240001b0

08000db0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC3_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f000 f962 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dc0:	f001 f93e 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_Init+0x68>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	4913      	ldr	r1, [pc, #76]	; (8000e20 <HAL_Init+0x6c>)
 8000dd2:	5ccb      	ldrb	r3, [r1, r3]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ddc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_Init+0x68>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_Init+0x6c>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_Init+0x70>)
 8000df6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_Init+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f814 	bl	8000e2c <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e002      	b.n	8000e14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0e:	f7ff fdd7 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	08003c44 	.word	0x08003c44
 8000e24:	24000004 	.word	0x24000004
 8000e28:	24000000 	.word	0x24000000

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_InitTick+0x60>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e021      	b.n	8000e84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_InitTick+0x64>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_InitTick+0x60>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f939 	bl	80010ce <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f911 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x68>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2400000c 	.word	0x2400000c
 8000e90:	24000000 	.word	0x24000000
 8000e94:	24000008 	.word	0x24000008

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2400000c 	.word	0x2400000c
 8000ebc:	24000174 	.word	0x24000174

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	24000174 	.word	0x24000174

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2400000c 	.word	0x2400000c

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	05fa0000 	.word	0x05fa0000

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff47 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff5e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff90 	bl	8000fd8 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5f 	bl	8000f84 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffb2 	bl	8001040 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010f6:	4b86      	ldr	r3, [pc, #536]	; (8001310 <HAL_GPIO_Init+0x228>)
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010fa:	e18c      	b.n	8001416 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 817e 	beq.w	8001410 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d005      	beq.n	800112c <HAL_GPIO_Init+0x44>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d130      	bne.n	800118e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001162:	2201      	movs	r2, #1
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 0201 	and.w	r2, r3, #1
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d017      	beq.n	80011ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d123      	bne.n	800121e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	69b9      	ldr	r1, [r7, #24]
 800121a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0203 	and.w	r2, r3, #3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80d8 	beq.w	8001410 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <HAL_GPIO_Init+0x22c>)
 8001262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001266:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <HAL_GPIO_Init+0x22c>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_GPIO_Init+0x22c>)
 8001272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_GPIO_Init+0x230>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_GPIO_Init+0x234>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d04a      	beq.n	8001340 <HAL_GPIO_Init+0x258>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <HAL_GPIO_Init+0x238>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d02b      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <HAL_GPIO_Init+0x23c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d025      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_GPIO_Init+0x240>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01f      	beq.n	8001302 <HAL_GPIO_Init+0x21a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_GPIO_Init+0x244>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0x216>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_GPIO_Init+0x248>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0x212>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_GPIO_Init+0x24c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00d      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <HAL_GPIO_Init+0x250>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x20a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <HAL_GPIO_Init+0x254>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_GPIO_Init+0x206>
 80012ea:	2309      	movs	r3, #9
 80012ec:	e029      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012ee:	230a      	movs	r3, #10
 80012f0:	e027      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e025      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e023      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e021      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012fe:	2304      	movs	r3, #4
 8001300:	e01f      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 8001302:	2303      	movs	r3, #3
 8001304:	e01d      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 8001306:	2302      	movs	r3, #2
 8001308:	e01b      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 800130a:	2301      	movs	r3, #1
 800130c:	e019      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 800130e:	bf00      	nop
 8001310:	58000080 	.word	0x58000080
 8001314:	58024400 	.word	0x58024400
 8001318:	58000400 	.word	0x58000400
 800131c:	58020000 	.word	0x58020000
 8001320:	58020400 	.word	0x58020400
 8001324:	58020800 	.word	0x58020800
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021000 	.word	0x58021000
 8001330:	58021400 	.word	0x58021400
 8001334:	58021800 	.word	0x58021800
 8001338:	58021c00 	.word	0x58021c00
 800133c:	58022400 	.word	0x58022400
 8001340:	2300      	movs	r3, #0
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001352:	4938      	ldr	r1, [pc, #224]	; (8001434 <HAL_GPIO_Init+0x34c>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	3301      	adds	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f ae6b 	bne.w	80010fc <HAL_GPIO_Init+0x14>
  }
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3724      	adds	r7, #36	; 0x24
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	58000400 	.word	0x58000400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	2b06      	cmp	r3, #6
 800147e:	d00a      	beq.n	8001496 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e03f      	b.n	8001512 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e03d      	b.n	8001512 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800149e:	491f      	ldr	r1, [pc, #124]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014a6:	f7ff fd0b 	bl	8000ec0 <HAL_GetTick>
 80014aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014ac:	e009      	b.n	80014c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014ae:	f7ff fd07 	bl	8000ec0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014bc:	d901      	bls.n	80014c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e027      	b.n	8001512 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ce:	d1ee      	bne.n	80014ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b1e      	cmp	r3, #30
 80014d4:	d008      	beq.n	80014e8 <HAL_PWREx_ConfigSupply+0x7c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b2e      	cmp	r3, #46	; 0x2e
 80014da:	d005      	beq.n	80014e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b1d      	cmp	r3, #29
 80014e0:	d002      	beq.n	80014e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b2d      	cmp	r3, #45	; 0x2d
 80014e6:	d113      	bne.n	8001510 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014e8:	f7ff fcea 	bl	8000ec0 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014ee:	e009      	b.n	8001504 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014f0:	f7ff fce6 	bl	8000ec0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d901      	bls.n	8001504 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e006      	b.n	8001512 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_PWREx_ConfigSupply+0xb0>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0311 	and.w	r3, r3, #17
 800150c:	2b11      	cmp	r3, #17
 800150e:	d1ef      	bne.n	80014f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	58024800 	.word	0x58024800

08001520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e3c8      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8087 	beq.w	800164e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001540:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800154a:	4b86      	ldr	r3, [pc, #536]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	2b10      	cmp	r3, #16
 8001554:	d007      	beq.n	8001566 <HAL_RCC_OscConfig+0x46>
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	2b18      	cmp	r3, #24
 800155a:	d110      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d10b      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	4b7f      	ldr	r3, [pc, #508]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06c      	beq.n	800164c <HAL_RCC_OscConfig+0x12c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d168      	bne.n	800164c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e3a2      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x76>
 8001588:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a75      	ldr	r2, [pc, #468]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e02e      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x98>
 800159e:	4b71      	ldr	r3, [pc, #452]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a70      	ldr	r2, [pc, #448]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6e      	ldr	r3, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6d      	ldr	r2, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0xbc>
 80015c2:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a67      	ldr	r2, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a64      	ldr	r2, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015dc:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a60      	ldr	r2, [pc, #384]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc60 	bl	8000ec0 <HAL_GetTick>
 8001600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fc5c 	bl	8000ec0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e356      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001616:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0xe4>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fc4c 	bl	8000ec0 <HAL_GetTick>
 8001628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fc48 	bl	8000ec0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e342      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163e:	4b49      	ldr	r3, [pc, #292]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x10c>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 808c 	beq.w	8001774 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165c:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001664:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_RCC_OscConfig+0x162>
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	2b18      	cmp	r3, #24
 8001676:	d137      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1c8>
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d132      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x17a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e314      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0219 	bic.w	r2, r3, #25
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	492f      	ldr	r1, [pc, #188]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fc08 	bl	8000ec0 <HAL_GetTick>
 80016b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff fc04 	bl	8000ec0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e2fe      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	061b      	lsls	r3, r3, #24
 80016e0:	4920      	ldr	r1, [pc, #128]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e6:	e045      	b.n	8001774 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d026      	beq.n	800173e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 0219 	bic.w	r2, r3, #25
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4919      	ldr	r1, [pc, #100]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fbdd 	bl	8000ec0 <HAL_GetTick>
 8001706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fbd9 	bl	8000ec0 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e2d3      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	490b      	ldr	r1, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
 800173c:	e01a      	b.n	8001774 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fbb9 	bl	8000ec0 <HAL_GetTick>
 800174e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fbb5 	bl	8000ec0 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d903      	bls.n	8001768 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e2af      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
 8001764:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001768:	4b96      	ldr	r3, [pc, #600]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ee      	bne.n	8001752 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d06a      	beq.n	8001856 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001780:	4b90      	ldr	r3, [pc, #576]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001788:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800178a:	4b8e      	ldr	r3, [pc, #568]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d007      	beq.n	80017a6 <HAL_RCC_OscConfig+0x286>
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b18      	cmp	r3, #24
 800179a:	d11b      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017a6:	4b87      	ldr	r3, [pc, #540]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x29e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	2b80      	cmp	r3, #128	; 0x80
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e282      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017be:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	061b      	lsls	r3, r3, #24
 80017cc:	497d      	ldr	r1, [pc, #500]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017d2:	e040      	b.n	8001856 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d023      	beq.n	8001824 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a78      	ldr	r2, [pc, #480]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80017e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb6a 	bl	8000ec0 <HAL_GetTick>
 80017ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017f0:	f7ff fb66 	bl	8000ec0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e260      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001802:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800180e:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	061b      	lsls	r3, r3, #24
 800181c:	4969      	ldr	r1, [pc, #420]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	60cb      	str	r3, [r1, #12]
 8001822:	e018      	b.n	8001856 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001824:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a66      	ldr	r2, [pc, #408]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800182a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800182e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fb46 	bl	8000ec0 <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001838:	f7ff fb42 	bl	8000ec0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e23c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800184a:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d036      	beq.n	80018d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d019      	beq.n	800189e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800186c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186e:	4a55      	ldr	r2, [pc, #340]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff fb23 	bl	8000ec0 <HAL_GetTick>
 800187a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff fb1f 	bl	8000ec0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e219      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x35e>
 800189c:	e018      	b.n	80018d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189e:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80018a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a2:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb09 	bl	8000ec0 <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb05 	bl	8000ec0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1ff      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d036      	beq.n	800194a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d019      	beq.n	8001918 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018e4:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a36      	ldr	r2, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80018ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fae6 	bl	8000ec0 <HAL_GetTick>
 80018f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f8:	f7ff fae2 	bl	8000ec0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1dc      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3d8>
 8001916:	e018      	b.n	800194a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 800191e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001922:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001924:	f7ff facc 	bl	8000ec0 <HAL_GetTick>
 8001928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192c:	f7ff fac8 	bl	8000ec0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1c2      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8086 	beq.w	8001a64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x4a8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_RCC_OscConfig+0x4a8>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001964:	f7ff faac 	bl	8000ec0 <HAL_GetTick>
 8001968:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196c:	f7ff faa8 	bl	8000ec0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1a2      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_OscConfig+0x4a8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_OscConfig+0x480>
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	e032      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e6>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_RCC_OscConfig+0x4ac>
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6713      	str	r3, [r2, #112]	; 0x70
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a02      	ldr	r2, [pc, #8]	; (80019c4 <HAL_RCC_OscConfig+0x4a4>)
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	e021      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e6>
 80019c2:	bf00      	nop
 80019c4:	58024400 	.word	0x58024400
 80019c8:	58024800 	.word	0x58024800
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x4ce>
 80019d4:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a82      	ldr	r2, [pc, #520]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a7f      	ldr	r2, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e6>
 80019ee:	4b7d      	ldr	r3, [pc, #500]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a7c      	ldr	r2, [pc, #496]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a79      	ldr	r2, [pc, #484]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fa57 	bl	8000ec0 <HAL_GetTick>
 8001a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff fa53 	bl	8000ec0 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e14b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ee      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4f6>
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fa41 	bl	8000ec0 <HAL_GetTick>
 8001a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff fa3d 	bl	8000ec0 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e135      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a58:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ee      	bne.n	8001a42 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 812a 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a6e:	4b5d      	ldr	r3, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a76:	2b18      	cmp	r3, #24
 8001a78:	f000 80ba 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	f040 8095 	bne.w	8001bb0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa15 	bl	8000ec0 <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fa11 	bl	8000ec0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e10b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abc:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <HAL_RCC_OscConfig+0x6c8>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	430a      	orrs	r2, r1
 8001acc:	4945      	ldr	r1, [pc, #276]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	628b      	str	r3, [r1, #40]	; 0x28
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	3b01      	subs	r3, #1
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b02:	4938      	ldr	r1, [pc, #224]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	4a35      	ldr	r2, [pc, #212]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_OscConfig+0x6cc>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b20:	00d2      	lsls	r2, r2, #3
 8001b22:	4930      	ldr	r1, [pc, #192]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b28:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f023 020c 	bic.w	r2, r3, #12
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	492b      	ldr	r1, [pc, #172]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	f023 0202 	bic.w	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4927      	ldr	r1, [pc, #156]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f99a 	bl	8000ec0 <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f996 	bl	8000ec0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e090      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x670>
 8001bae:	e088      	b.n	8001cc2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f980 	bl	8000ec0 <HAL_GetTick>
 8001bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f97c 	bl	8000ec0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e076      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bd6:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_RCC_OscConfig+0x6c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x6a4>
 8001be2:	e06e      	b.n	8001cc2 <HAL_RCC_OscConfig+0x7a2>
 8001be4:	58024400 	.word	0x58024400
 8001be8:	fffffc0c 	.word	0xfffffc0c
 8001bec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bf6:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d031      	beq.n	8001c68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d12a      	bne.n	8001c68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d122      	bne.n	8001c68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d11a      	bne.n	8001c68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	0a5b      	lsrs	r3, r3, #9
 8001c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d111      	bne.n	8001c68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d108      	bne.n	8001c68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0e1b      	lsrs	r3, r3, #24
 8001c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e02b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d01f      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c8e:	f7ff f917 	bl	8000ec0 <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c94:	bf00      	nop
 8001c96:	f7ff f913 	bl	8000ec0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d0f9      	beq.n	8001c96 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCC_OscConfig+0x7b0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cae:	00d2      	lsls	r2, r2, #3
 8001cb0:	4906      	ldr	r1, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_RCC_OscConfig+0x7ac>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	ffff0007 	.word	0xffff0007

08001cd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e19c      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b8a      	ldr	r3, [pc, #552]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d910      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b87      	ldr	r3, [pc, #540]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 020f 	bic.w	r2, r3, #15
 8001cfe:	4985      	ldr	r1, [pc, #532]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b83      	ldr	r3, [pc, #524]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e184      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d010      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d908      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d34:	4b78      	ldr	r3, [pc, #480]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	4975      	ldr	r1, [pc, #468]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d908      	bls.n	8001d74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d62:	4b6d      	ldr	r3, [pc, #436]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	496a      	ldr	r1, [pc, #424]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d908      	bls.n	8001da2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d90:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	495e      	ldr	r1, [pc, #376]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d908      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4953      	ldr	r1, [pc, #332]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d010      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d908      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f023 020f 	bic.w	r2, r3, #15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4947      	ldr	r1, [pc, #284]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d055      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4940      	ldr	r1, [pc, #256]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e24:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d121      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0f6      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e3c:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d115      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0ea      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e54:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0de      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e64:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0d6      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4925      	ldr	r1, [pc, #148]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e86:	f7ff f81b 	bl	8000ec0 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7ff f817 	bl	8000ec0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0be      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d1eb      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d010      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d208      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f023 020f 	bic.w	r2, r3, #15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_RCC_ClockConfig+0x244>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d214      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	4906      	ldr	r1, [pc, #24]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_RCC_ClockConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e086      	b.n	8002022 <HAL_RCC_ClockConfig+0x34e>
 8001f14:	52002000 	.word	0x52002000
 8001f18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d208      	bcs.n	8001f4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f38:	4b3c      	ldr	r3, [pc, #240]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	4939      	ldr	r1, [pc, #228]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d010      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d208      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	492e      	ldr	r1, [pc, #184]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d208      	bcs.n	8001fa6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4922      	ldr	r1, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d010      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d208      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	4917      	ldr	r1, [pc, #92]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd4:	f000 f834 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	4912      	ldr	r1, [pc, #72]	; (8002030 <HAL_RCC_ClockConfig+0x35c>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <HAL_RCC_ClockConfig+0x35c>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x360>)
 800200a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x364>)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x368>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe ff08 	bl	8000e2c <HAL_InitTick>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	58024400 	.word	0x58024400
 8002030:	08003c44 	.word	0x08003c44
 8002034:	24000004 	.word	0x24000004
 8002038:	24000000 	.word	0x24000000
 800203c:	24000008 	.word	0x24000008

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002046:	4bb3      	ldr	r3, [pc, #716]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800204e:	2b18      	cmp	r3, #24
 8002050:	f200 8155 	bhi.w	80022fe <HAL_RCC_GetSysClockFreq+0x2be>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	080020c1 	.word	0x080020c1
 8002060:	080022ff 	.word	0x080022ff
 8002064:	080022ff 	.word	0x080022ff
 8002068:	080022ff 	.word	0x080022ff
 800206c:	080022ff 	.word	0x080022ff
 8002070:	080022ff 	.word	0x080022ff
 8002074:	080022ff 	.word	0x080022ff
 8002078:	080022ff 	.word	0x080022ff
 800207c:	080020e7 	.word	0x080020e7
 8002080:	080022ff 	.word	0x080022ff
 8002084:	080022ff 	.word	0x080022ff
 8002088:	080022ff 	.word	0x080022ff
 800208c:	080022ff 	.word	0x080022ff
 8002090:	080022ff 	.word	0x080022ff
 8002094:	080022ff 	.word	0x080022ff
 8002098:	080022ff 	.word	0x080022ff
 800209c:	080020ed 	.word	0x080020ed
 80020a0:	080022ff 	.word	0x080022ff
 80020a4:	080022ff 	.word	0x080022ff
 80020a8:	080022ff 	.word	0x080022ff
 80020ac:	080022ff 	.word	0x080022ff
 80020b0:	080022ff 	.word	0x080022ff
 80020b4:	080022ff 	.word	0x080022ff
 80020b8:	080022ff 	.word	0x080022ff
 80020bc:	080020f3 	.word	0x080020f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020c0:	4b94      	ldr	r3, [pc, #592]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020cc:	4b91      	ldr	r3, [pc, #580]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	08db      	lsrs	r3, r3, #3
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	4a90      	ldr	r2, [pc, #576]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80020de:	e111      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020e0:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020e2:	61bb      	str	r3, [r7, #24]
      break;
 80020e4:	e10e      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80020e6:	4b8d      	ldr	r3, [pc, #564]	; (800231c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020e8:	61bb      	str	r3, [r7, #24]
      break;
 80020ea:	e10b      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020ee:	61bb      	str	r3, [r7, #24]
      break;
 80020f0:	e108      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020f2:	4b88      	ldr	r3, [pc, #544]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020fc:	4b85      	ldr	r3, [pc, #532]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002106:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002108:	4b82      	ldr	r3, [pc, #520]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002112:	4b80      	ldr	r3, [pc, #512]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	08db      	lsrs	r3, r3, #3
 8002118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80e1 	beq.w	80022f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b02      	cmp	r3, #2
 800213a:	f000 8083 	beq.w	8002244 <HAL_RCC_GetSysClockFreq+0x204>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b02      	cmp	r3, #2
 8002142:	f200 80a1 	bhi.w	8002288 <HAL_RCC_GetSysClockFreq+0x248>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x114>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d056      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002152:	e099      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d02d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002160:	4b6c      	ldr	r3, [pc, #432]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	08db      	lsrs	r3, r3, #3
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	4a6b      	ldr	r2, [pc, #428]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218a:	4b62      	ldr	r3, [pc, #392]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219a:	ed97 6a02 	vldr	s12, [r7, #8]
 800219e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002324 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021ba:	e087      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002328 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ce:	4b51      	ldr	r3, [pc, #324]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021de:	ed97 6a02 	vldr	s12, [r7, #8]
 80021e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002324 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021fe:	e065      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800232c <HAL_RCC_GetSysClockFreq+0x2ec>
 800220e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002222:	ed97 6a02 	vldr	s12, [r7, #8]
 8002226:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800222a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800222e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002242:	e043      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002330 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002266:	ed97 6a02 	vldr	s12, [r7, #8]
 800226a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800226e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800227a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002286:	e021      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002292:	eddf 6a26 	vldr	s13, [pc, #152]	; 800232c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002324 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	0a5b      	lsrs	r3, r3, #9
 80022d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d6:	3301      	adds	r3, #1
 80022d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80022e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f0:	ee17 3a90 	vmov	r3, s15
 80022f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022f6:	e005      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
      break;
 80022fc:	e002      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002300:	61bb      	str	r3, [r7, #24]
      break;
 8002302:	bf00      	nop
  }

  return sysclockfreq;
 8002304:	69bb      	ldr	r3, [r7, #24]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	58024400 	.word	0x58024400
 8002318:	03d09000 	.word	0x03d09000
 800231c:	003d0900 	.word	0x003d0900
 8002320:	017d7840 	.word	0x017d7840
 8002324:	46000000 	.word	0x46000000
 8002328:	4c742400 	.word	0x4c742400
 800232c:	4a742400 	.word	0x4a742400
 8002330:	4bbebc20 	.word	0x4bbebc20

08002334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e049      	b.n	80023da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fb4a 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4610      	mov	r0, r2
 8002374:	f000 fcbc 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e049      	b.n	8002488 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d106      	bne.n	800240e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f841 	bl	8002490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f000 fc65 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_TIM_PWM_Start+0x24>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e03c      	b.n	8002542 <HAL_TIM_PWM_Start+0x9e>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d109      	bne.n	80024e2 <HAL_TIM_PWM_Start+0x3e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e02f      	b.n	8002542 <HAL_TIM_PWM_Start+0x9e>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d109      	bne.n	80024fc <HAL_TIM_PWM_Start+0x58>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e022      	b.n	8002542 <HAL_TIM_PWM_Start+0x9e>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d109      	bne.n	8002516 <HAL_TIM_PWM_Start+0x72>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e015      	b.n	8002542 <HAL_TIM_PWM_Start+0x9e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b10      	cmp	r3, #16
 800251a:	d109      	bne.n	8002530 <HAL_TIM_PWM_Start+0x8c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e008      	b.n	8002542 <HAL_TIM_PWM_Start+0x9e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0ab      	b.n	80026a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d104      	bne.n	800255a <HAL_TIM_PWM_Start+0xb6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	e023      	b.n	80025a2 <HAL_TIM_PWM_Start+0xfe>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d104      	bne.n	800256a <HAL_TIM_PWM_Start+0xc6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002568:	e01b      	b.n	80025a2 <HAL_TIM_PWM_Start+0xfe>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d104      	bne.n	800257a <HAL_TIM_PWM_Start+0xd6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002578:	e013      	b.n	80025a2 <HAL_TIM_PWM_Start+0xfe>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d104      	bne.n	800258a <HAL_TIM_PWM_Start+0xe6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002588:	e00b      	b.n	80025a2 <HAL_TIM_PWM_Start+0xfe>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d104      	bne.n	800259a <HAL_TIM_PWM_Start+0xf6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002598:	e003      	b.n	80025a2 <HAL_TIM_PWM_Start+0xfe>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2201      	movs	r2, #1
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 f8f0 	bl	8003790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3d      	ldr	r2, [pc, #244]	; (80026ac <HAL_TIM_PWM_Start+0x208>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_TIM_PWM_Start+0x13e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3c      	ldr	r2, [pc, #240]	; (80026b0 <HAL_TIM_PWM_Start+0x20c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00e      	beq.n	80025e2 <HAL_TIM_PWM_Start+0x13e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <HAL_TIM_PWM_Start+0x210>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_TIM_PWM_Start+0x13e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a39      	ldr	r2, [pc, #228]	; (80026b8 <HAL_TIM_PWM_Start+0x214>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_TIM_PWM_Start+0x13e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a37      	ldr	r2, [pc, #220]	; (80026bc <HAL_TIM_PWM_Start+0x218>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PWM_Start+0x142>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_TIM_PWM_Start+0x144>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_TIM_PWM_Start+0x208>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02c      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d027      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <HAL_TIM_PWM_Start+0x21c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d022      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_TIM_PWM_Start+0x220>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d01d      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_TIM_PWM_Start+0x224>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d018      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_TIM_PWM_Start+0x20c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_TIM_PWM_Start+0x228>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00e      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <HAL_TIM_PWM_Start+0x210>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <HAL_TIM_PWM_Start+0x22c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_TIM_PWM_Start+0x1bc>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_TIM_PWM_Start+0x230>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d115      	bne.n	800268c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_TIM_PWM_Start+0x234>)
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b06      	cmp	r3, #6
 8002670:	d015      	beq.n	800269e <HAL_TIM_PWM_Start+0x1fa>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d011      	beq.n	800269e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	e008      	b.n	800269e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e000      	b.n	80026a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40010400 	.word	0x40010400
 80026b4:	40014000 	.word	0x40014000
 80026b8:	40014400 	.word	0x40014400
 80026bc:	40014800 	.word	0x40014800
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40000800 	.word	0x40000800
 80026c8:	40000c00 	.word	0x40000c00
 80026cc:	40001800 	.word	0x40001800
 80026d0:	4000e000 	.word	0x4000e000
 80026d4:	4000e400 	.word	0x4000e400
 80026d8:	00010007 	.word	0x00010007

080026dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e049      	b.n	8002782 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f841 	bl	800278a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 fae8 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_TIM_IC_ConfigChannel+0x1e>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e088      	b.n	80028ce <HAL_TIM_IC_ConfigChannel+0x130>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11b      	bne.n	8002802 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80027da:	f000 fe05 	bl	80033e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 020c 	bic.w	r2, r2, #12
 80027ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6999      	ldr	r1, [r3, #24]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	619a      	str	r2, [r3, #24]
 8002800:	e060      	b.n	80028c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d11c      	bne.n	8002842 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002818:	f000 fe95 	bl	8003546 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800282a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6999      	ldr	r1, [r3, #24]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	619a      	str	r2, [r3, #24]
 8002840:	e040      	b.n	80028c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d11b      	bne.n	8002880 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002858:	f000 fee2 	bl	8003620 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 020c 	bic.w	r2, r2, #12
 800286a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69d9      	ldr	r1, [r3, #28]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	61da      	str	r2, [r3, #28]
 800287e:	e021      	b.n	80028c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d11c      	bne.n	80028c0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002896:	f000 feff 	bl	8003698 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69d9      	ldr	r1, [r3, #28]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	61da      	str	r2, [r3, #28]
 80028be:	e001      	b.n	80028c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0ff      	b.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b14      	cmp	r3, #20
 8002902:	f200 80f0 	bhi.w	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	08002961 	.word	0x08002961
 8002910:	08002ae7 	.word	0x08002ae7
 8002914:	08002ae7 	.word	0x08002ae7
 8002918:	08002ae7 	.word	0x08002ae7
 800291c:	080029a1 	.word	0x080029a1
 8002920:	08002ae7 	.word	0x08002ae7
 8002924:	08002ae7 	.word	0x08002ae7
 8002928:	08002ae7 	.word	0x08002ae7
 800292c:	080029e3 	.word	0x080029e3
 8002930:	08002ae7 	.word	0x08002ae7
 8002934:	08002ae7 	.word	0x08002ae7
 8002938:	08002ae7 	.word	0x08002ae7
 800293c:	08002a23 	.word	0x08002a23
 8002940:	08002ae7 	.word	0x08002ae7
 8002944:	08002ae7 	.word	0x08002ae7
 8002948:	08002ae7 	.word	0x08002ae7
 800294c:	08002a65 	.word	0x08002a65
 8002950:	08002ae7 	.word	0x08002ae7
 8002954:	08002ae7 	.word	0x08002ae7
 8002958:	08002ae7 	.word	0x08002ae7
 800295c:	08002aa5 	.word	0x08002aa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fa68 	bl	8002e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0208 	orr.w	r2, r2, #8
 800297a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6999      	ldr	r1, [r3, #24]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	619a      	str	r2, [r3, #24]
      break;
 800299e:	e0a5      	b.n	8002aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fad8 	bl	8002f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6999      	ldr	r1, [r3, #24]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	021a      	lsls	r2, r3, #8
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	619a      	str	r2, [r3, #24]
      break;
 80029e0:	e084      	b.n	8002aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fb41 	bl	8003070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0208 	orr.w	r2, r2, #8
 80029fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0204 	bic.w	r2, r2, #4
 8002a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69d9      	ldr	r1, [r3, #28]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	61da      	str	r2, [r3, #28]
      break;
 8002a20:	e064      	b.n	8002aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fba9 	bl	8003180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69d9      	ldr	r1, [r3, #28]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	61da      	str	r2, [r3, #28]
      break;
 8002a62:	e043      	b.n	8002aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fbf2 	bl	8003254 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0208 	orr.w	r2, r2, #8
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002aa2:	e023      	b.n	8002aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fc36 	bl	800331c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	021a      	lsls	r2, r3, #8
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ae4:	e002      	b.n	8002aec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop

08002b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_ConfigClockSource+0x1c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0dc      	b.n	8002cd6 <HAL_TIM_ConfigClockSource+0x1d6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a64      	ldr	r2, [pc, #400]	; (8002ce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	f000 80a9 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002b58:	4a62      	ldr	r2, [pc, #392]	; (8002ce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f200 80ae 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002b60:	4a61      	ldr	r2, [pc, #388]	; (8002ce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	f000 80a1 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002b68:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	f200 80a6 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002b70:	4a5e      	ldr	r2, [pc, #376]	; (8002cec <HAL_TIM_ConfigClockSource+0x1ec>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	f000 8099 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002b78:	4a5c      	ldr	r2, [pc, #368]	; (8002cec <HAL_TIM_ConfigClockSource+0x1ec>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f200 809e 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002b80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002b84:	f000 8091 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002b88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002b8c:	f200 8096 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b94:	f000 8089 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9c:	f200 808e 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d03e      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0x124>
 8002ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002baa:	f200 8087 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	f000 8086 	beq.w	8002cc2 <HAL_TIM_ConfigClockSource+0x1c2>
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d87f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002bbc:	2b70      	cmp	r3, #112	; 0x70
 8002bbe:	d01a      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xf6>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d87b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002bc4:	2b60      	cmp	r3, #96	; 0x60
 8002bc6:	d050      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x16a>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d877      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002bcc:	2b50      	cmp	r3, #80	; 0x50
 8002bce:	d03c      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x14a>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d873      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d058      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x18a>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d86f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002bdc:	2b30      	cmp	r3, #48	; 0x30
 8002bde:	d064      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d86b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d060      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d867      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d05a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x1aa>
 8002bf4:	e062      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	f000 fda3 	bl	8003750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	609a      	str	r2, [r3, #8]
      break;
 8002c22:	e04f      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c34:	f000 fd8c 	bl	8003750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c46:	609a      	str	r2, [r3, #8]
      break;
 8002c48:	e03c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 fc46 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2150      	movs	r1, #80	; 0x50
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fd56 	bl	8003714 <TIM_ITRx_SetConfig>
      break;
 8002c68:	e02c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 fca2 	bl	80035c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2160      	movs	r1, #96	; 0x60
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fd46 	bl	8003714 <TIM_ITRx_SetConfig>
      break;
 8002c88:	e01c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	461a      	mov	r2, r3
 8002c98:	f000 fc26 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fd36 	bl	8003714 <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 fd2d 	bl	8003714 <TIM_ITRx_SetConfig>
      break;
 8002cba:	e003      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	ffceff88 	.word	0xffceff88
 8002ce4:	00100040 	.word	0x00100040
 8002ce8:	00100030 	.word	0x00100030
 8002cec:	00100020 	.word	0x00100020

08002cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a44      	ldr	r2, [pc, #272]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d00f      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a41      	ldr	r2, [pc, #260]	; (8002e18 <TIM_Base_SetConfig+0x128>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00b      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a40      	ldr	r2, [pc, #256]	; (8002e1c <TIM_Base_SetConfig+0x12c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3f      	ldr	r2, [pc, #252]	; (8002e20 <TIM_Base_SetConfig+0x130>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3e      	ldr	r2, [pc, #248]	; (8002e24 <TIM_Base_SetConfig+0x134>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a33      	ldr	r2, [pc, #204]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d023      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a30      	ldr	r2, [pc, #192]	; (8002e18 <TIM_Base_SetConfig+0x128>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01f      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <TIM_Base_SetConfig+0x12c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01b      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <TIM_Base_SetConfig+0x130>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d017      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <TIM_Base_SetConfig+0x134>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	; (8002e28 <TIM_Base_SetConfig+0x138>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00f      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	; (8002e2c <TIM_Base_SetConfig+0x13c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <TIM_Base_SetConfig+0x140>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <TIM_Base_SetConfig+0x144>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0xaa>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <TIM_Base_SetConfig+0x148>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <TIM_Base_SetConfig+0x124>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00f      	beq.n	8002df8 <TIM_Base_SetConfig+0x108>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <TIM_Base_SetConfig+0x134>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x108>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <TIM_Base_SetConfig+0x138>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x108>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <TIM_Base_SetConfig+0x13c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x108>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <TIM_Base_SetConfig+0x140>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d103      	bne.n	8002e00 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	615a      	str	r2, [r3, #20]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40010400 	.word	0x40010400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	4000e000 	.word	0x4000e000
 8002e38:	4000e400 	.word	0x4000e400

08002e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <TIM_OC1_SetConfig+0x108>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <TIM_OC1_SetConfig+0x10c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00f      	beq.n	8002eb8 <TIM_OC1_SetConfig+0x7c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <TIM_OC1_SetConfig+0x110>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <TIM_OC1_SetConfig+0x7c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <TIM_OC1_SetConfig+0x114>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <TIM_OC1_SetConfig+0x7c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <TIM_OC1_SetConfig+0x118>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_OC1_SetConfig+0x7c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <TIM_OC1_SetConfig+0x11c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10c      	bne.n	8002ed2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0308 	bic.w	r3, r3, #8
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <TIM_OC1_SetConfig+0x10c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00f      	beq.n	8002efa <TIM_OC1_SetConfig+0xbe>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <TIM_OC1_SetConfig+0x110>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_OC1_SetConfig+0xbe>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <TIM_OC1_SetConfig+0x114>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_OC1_SetConfig+0xbe>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <TIM_OC1_SetConfig+0x118>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_OC1_SetConfig+0xbe>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <TIM_OC1_SetConfig+0x11c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d111      	bne.n	8002f1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	621a      	str	r2, [r3, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	fffeff8f 	.word	0xfffeff8f
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40010400 	.word	0x40010400
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800

08002f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0210 	bic.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4b34      	ldr	r3, [pc, #208]	; (8003058 <TIM_OC2_SetConfig+0xfc>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0320 	bic.w	r3, r3, #32
 8002fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a29      	ldr	r2, [pc, #164]	; (800305c <TIM_OC2_SetConfig+0x100>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <TIM_OC2_SetConfig+0x68>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a28      	ldr	r2, [pc, #160]	; (8003060 <TIM_OC2_SetConfig+0x104>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10d      	bne.n	8002fe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	; (800305c <TIM_OC2_SetConfig+0x100>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00f      	beq.n	8003008 <TIM_OC2_SetConfig+0xac>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <TIM_OC2_SetConfig+0x104>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00b      	beq.n	8003008 <TIM_OC2_SetConfig+0xac>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <TIM_OC2_SetConfig+0x108>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_OC2_SetConfig+0xac>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <TIM_OC2_SetConfig+0x10c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC2_SetConfig+0xac>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <TIM_OC2_SetConfig+0x110>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d113      	bne.n	8003030 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800300e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	feff8fff 	.word	0xfeff8fff
 800305c:	40010000 	.word	0x40010000
 8003060:	40010400 	.word	0x40010400
 8003064:	40014000 	.word	0x40014000
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800

08003070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4b33      	ldr	r3, [pc, #204]	; (8003168 <TIM_OC3_SetConfig+0xf8>)
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a28      	ldr	r2, [pc, #160]	; (800316c <TIM_OC3_SetConfig+0xfc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_OC3_SetConfig+0x66>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <TIM_OC3_SetConfig+0x100>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10d      	bne.n	80030f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <TIM_OC3_SetConfig+0xfc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00f      	beq.n	800311a <TIM_OC3_SetConfig+0xaa>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <TIM_OC3_SetConfig+0x100>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_OC3_SetConfig+0xaa>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <TIM_OC3_SetConfig+0x104>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_OC3_SetConfig+0xaa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <TIM_OC3_SetConfig+0x108>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_OC3_SetConfig+0xaa>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <TIM_OC3_SetConfig+0x10c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	fffeff8f 	.word	0xfffeff8f
 800316c:	40010000 	.word	0x40010000
 8003170:	40010400 	.word	0x40010400
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <TIM_OC4_SetConfig+0xbc>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	031b      	lsls	r3, r3, #12
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <TIM_OC4_SetConfig+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00f      	beq.n	8003200 <TIM_OC4_SetConfig+0x80>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <TIM_OC4_SetConfig+0xc4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00b      	beq.n	8003200 <TIM_OC4_SetConfig+0x80>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <TIM_OC4_SetConfig+0xc8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <TIM_OC4_SetConfig+0x80>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <TIM_OC4_SetConfig+0xcc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_OC4_SetConfig+0x80>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <TIM_OC4_SetConfig+0xd0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d109      	bne.n	8003214 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	019b      	lsls	r3, r3, #6
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	621a      	str	r2, [r3, #32]
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	feff8fff 	.word	0xfeff8fff
 8003240:	40010000 	.word	0x40010000
 8003244:	40010400 	.word	0x40010400
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800

08003254 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4b21      	ldr	r3, [pc, #132]	; (8003304 <TIM_OC5_SetConfig+0xb0>)
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <TIM_OC5_SetConfig+0xb4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00f      	beq.n	80032ca <TIM_OC5_SetConfig+0x76>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a17      	ldr	r2, [pc, #92]	; (800330c <TIM_OC5_SetConfig+0xb8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_OC5_SetConfig+0x76>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <TIM_OC5_SetConfig+0xbc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_OC5_SetConfig+0x76>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <TIM_OC5_SetConfig+0xc0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_OC5_SetConfig+0x76>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <TIM_OC5_SetConfig+0xc4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d109      	bne.n	80032de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	fffeff8f 	.word	0xfffeff8f
 8003308:	40010000 	.word	0x40010000
 800330c:	40010400 	.word	0x40010400
 8003310:	40014000 	.word	0x40014000
 8003314:	40014400 	.word	0x40014400
 8003318:	40014800 	.word	0x40014800

0800331c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <TIM_OC6_SetConfig+0xb4>)
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800335e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	051b      	lsls	r3, r3, #20
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <TIM_OC6_SetConfig+0xb8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00f      	beq.n	8003394 <TIM_OC6_SetConfig+0x78>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <TIM_OC6_SetConfig+0xbc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00b      	beq.n	8003394 <TIM_OC6_SetConfig+0x78>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <TIM_OC6_SetConfig+0xc0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <TIM_OC6_SetConfig+0x78>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <TIM_OC6_SetConfig+0xc4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_OC6_SetConfig+0x78>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <TIM_OC6_SetConfig+0xc8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d109      	bne.n	80033a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	029b      	lsls	r3, r3, #10
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	feff8fff 	.word	0xfeff8fff
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800

080033e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <TIM_TI1_SetConfig+0xdc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d023      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d01f      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <TIM_TI1_SetConfig+0xe0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01b      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <TIM_TI1_SetConfig+0xe4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d017      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <TIM_TI1_SetConfig+0xe8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <TIM_TI1_SetConfig+0xec>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00f      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <TIM_TI1_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00b      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <TIM_TI1_SetConfig+0xf4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <TIM_TI1_SetConfig+0xf8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_TI1_SetConfig+0x76>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <TIM_TI1_SetConfig+0xfc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <TIM_TI1_SetConfig+0x7a>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <TIM_TI1_SetConfig+0x7c>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e003      	b.n	8003482 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	b2db      	uxtb	r3, r3
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f023 030a 	bic.w	r3, r3, #10
 800349c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 030a 	and.w	r3, r3, #10
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40001800 	.word	0x40001800
 80034dc:	40014000 	.word	0x40014000
 80034e0:	4000e000 	.word	0x4000e000
 80034e4:	4000e400 	.word	0x4000e400

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003546:	b480      	push	{r7}
 8003548:	b087      	sub	sp, #28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f023 0210 	bic.w	r2, r3, #16
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	b29b      	uxth	r3, r3
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003598:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	621a      	str	r2, [r3, #32]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f023 0210 	bic.w	r2, r3, #16
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	031b      	lsls	r3, r3, #12
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 0303 	bic.w	r3, r3, #3
 800364c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	b2db      	uxtb	r3, r3
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003670:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	621a      	str	r2, [r3, #32]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	031b      	lsls	r3, r3, #12
 80036dc:	b29b      	uxth	r3, r3
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	031b      	lsls	r3, r3, #12
 80036f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <TIM_ITRx_SetConfig+0x38>)
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	f043 0307 	orr.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	ffcfff8f 	.word	0xffcfff8f

08003750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	431a      	orrs	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2201      	movs	r2, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e077      	b.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a35      	ldr	r2, [pc, #212]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a34      	ldr	r2, [pc, #208]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d108      	bne.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800382e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02c      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d027      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d022      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d01d      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1a      	ldr	r2, [pc, #104]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10c      	bne.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40001800 	.word	0x40001800
 8003908:	40014000 	.word	0x40014000
 800390c:	4000e000 	.word	0x4000e000
 8003910:	4000e400 	.word	0x4000e400

08003914 <transfer>:
 *        *tm23-pointer to timer 23 variable
 *        the remaining parameters are for testing purposes only
 * return type- void
 */
void transfer(TIM_HandleTypeDef *tm2,TIM_HandleTypeDef *tm3,TIM_HandleTypeDef *tm14,TIM_HandleTypeDef *tm23,double *d_dutyx,double *d_dutyy,double *d_dutyz,double *f_dutyx,double *f_dutyy,double *f_dutyz)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
//	tim2=tm2;
//	tim3=tm3;
//	tim14=tm14;
//	tim23=tm23;
	d_dutyx=&duty_dx;
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <transfer+0x34>)
 8003924:	61bb      	str	r3, [r7, #24]
	d_dutyy=&duty_dy;
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <transfer+0x38>)
 8003928:	61fb      	str	r3, [r7, #28]
	d_dutyz=&duty_dz;
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <transfer+0x3c>)
 800392c:	623b      	str	r3, [r7, #32]
	f_dutyx=&fbx_duty;
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <transfer+0x40>)
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
	f_dutyy=&fby_duty;
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <transfer+0x44>)
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
	f_dutyz=&fbz_duty;
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <transfer+0x48>)
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	24000180 	.word	0x24000180
 800394c:	24000188 	.word	0x24000188
 8003950:	24000190 	.word	0x24000190
 8003954:	24000198 	.word	0x24000198
 8003958:	240001a0 	.word	0x240001a0
 800395c:	240001a8 	.word	0x240001a8

08003960 <motor_initialize>:
                   FG1-125 PG12  FG pin. PWM input
                   FG2-126 PG13
                   FG3-127 PG14
 */
void motor_initialize(GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 /*Configure GPIO pins : PE2 PE3 PE4 PE5 PE6 */
  GPIO_InitStruct->Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	227c      	movs	r2, #124	; 0x7c
 800396c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->Mode = GPIO_MODE_OUTPUT_PP;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct->Pull = GPIO_NOPULL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct->Speed = GPIO_SPEED_FREQ_LOW;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	60da      	str	r2, [r3, #12]

  /*Configure GPIO pin : PC13 */
    GPIO_InitStruct->Pin = GPIO_PIN_13;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct->Mode = GPIO_MODE_OUTPUT_PP;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct->Pull = GPIO_NOPULL;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct->Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]

    /*Configure GPIO pins : PC10 PC11 PC12 */
    GPIO_InitStruct->Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80039a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct->Mode = GPIO_MODE_INPUT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct->Pull = GPIO_NOPULL;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]

    /*Configure GPIO pins : PD0 PD1 PD2 */
    GPIO_InitStruct->Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct->Mode = GPIO_MODE_OUTPUT_PP;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct->Pull = GPIO_NOPULL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct->Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]

    //Initializing CMTMOD to ground(sinusoidal mode)
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET); //CMT1
 80039c6:	2200      	movs	r2, #0
 80039c8:	2101      	movs	r1, #1
 80039ca:	4835      	ldr	r0, [pc, #212]	; (8003aa0 <motor_initialize+0x140>)
 80039cc:	f7fd fd34 	bl	8001438 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET); //CMT2
 80039d0:	2200      	movs	r2, #0
 80039d2:	2102      	movs	r1, #2
 80039d4:	4832      	ldr	r0, [pc, #200]	; (8003aa0 <motor_initialize+0x140>)
 80039d6:	f7fd fd2f 	bl	8001438 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //CMT3
 80039da:	2200      	movs	r2, #0
 80039dc:	2104      	movs	r1, #4
 80039de:	4830      	ldr	r0, [pc, #192]	; (8003aa0 <motor_initialize+0x140>)
 80039e0:	f7fd fd2a 	bl	8001438 <HAL_GPIO_WritePin>

    //Initializing BRKMOD to high(dynamic braking mode)
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET); //BRK1
 80039e4:	2201      	movs	r2, #1
 80039e6:	2120      	movs	r1, #32
 80039e8:	482e      	ldr	r0, [pc, #184]	; (8003aa4 <motor_initialize+0x144>)
 80039ea:	f7fd fd25 	bl	8001438 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET); //BRK2
 80039ee:	2201      	movs	r2, #1
 80039f0:	2140      	movs	r1, #64	; 0x40
 80039f2:	482c      	ldr	r0, [pc, #176]	; (8003aa4 <motor_initialize+0x144>)
 80039f4:	f7fd fd20 	bl	8001438 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); //BRK3
 80039f8:	2201      	movs	r2, #1
 80039fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039fe:	482a      	ldr	r0, [pc, #168]	; (8003aa8 <motor_initialize+0x148>)
 8003a00:	f7fd fd1a 	bl	8001438 <HAL_GPIO_WritePin>


    //Initializing timers

    htim2.Instance = TIM2;
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <motor_initialize+0x14c>)
 8003a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a0a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 64-1;
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <motor_initialize+0x14c>)
 8003a0e:	223f      	movs	r2, #63	; 0x3f
 8003a10:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <motor_initialize+0x14c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 100-1;
 8003a18:	4b24      	ldr	r3, [pc, #144]	; (8003aac <motor_initialize+0x14c>)
 8003a1a:	2263      	movs	r2, #99	; 0x63
 8003a1c:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <motor_initialize+0x14c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <motor_initialize+0x14c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	619a      	str	r2, [r3, #24]

    htim3.Instance = TIM3;
 8003a2a:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <motor_initialize+0x150>)
 8003a2c:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <motor_initialize+0x154>)
 8003a2e:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 64-1;
 8003a30:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <motor_initialize+0x150>)
 8003a32:	223f      	movs	r2, #63	; 0x3f
 8003a34:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <motor_initialize+0x150>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 100-1;
 8003a3c:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <motor_initialize+0x150>)
 8003a3e:	2263      	movs	r2, #99	; 0x63
 8003a40:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <motor_initialize+0x150>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <motor_initialize+0x150>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]

    htim14.Instance = TIM14;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <motor_initialize+0x158>)
 8003a50:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <motor_initialize+0x15c>)
 8003a52:	601a      	str	r2, [r3, #0]
    htim14.Init.Prescaler = 64-1;
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <motor_initialize+0x158>)
 8003a56:	223f      	movs	r2, #63	; 0x3f
 8003a58:	605a      	str	r2, [r3, #4]
    htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <motor_initialize+0x158>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	609a      	str	r2, [r3, #8]
    htim14.Init.Period = 100-1;
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <motor_initialize+0x158>)
 8003a62:	2263      	movs	r2, #99	; 0x63
 8003a64:	60da      	str	r2, [r3, #12]
    htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <motor_initialize+0x158>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	611a      	str	r2, [r3, #16]
    htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <motor_initialize+0x158>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]

    htim23.Instance = TIM23;
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <motor_initialize+0x160>)
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <motor_initialize+0x164>)
 8003a76:	601a      	str	r2, [r3, #0]
    htim23.Init.Prescaler = 64-1;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <motor_initialize+0x160>)
 8003a7a:	223f      	movs	r2, #63	; 0x3f
 8003a7c:	605a      	str	r2, [r3, #4]
    htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <motor_initialize+0x160>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
    htim23.Init.Period = 4294967295;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <motor_initialize+0x160>)
 8003a86:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8a:	60da      	str	r2, [r3, #12]
    htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <motor_initialize+0x160>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
    htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <motor_initialize+0x160>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]

    //note-the timer parameters will change so edit accordingly
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	58020c00 	.word	0x58020c00
 8003aa4:	58021000 	.word	0x58021000
 8003aa8:	58020800 	.word	0x58020800
 8003aac:	2400002c 	.word	0x2400002c
 8003ab0:	24000078 	.word	0x24000078
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	240000c4 	.word	0x240000c4
 8003abc:	40002000 	.word	0x40002000
 8003ac0:	24000110 	.word	0x24000110
 8003ac4:	4000e000 	.word	0x4000e000

08003ac8 <set_rpm_motorx>:
 */

//duty received is as a percentage and our max ARR is 100 so can apply directly

void set_rpm_motorx(double duty,int fr)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ad2:	6078      	str	r0, [r7, #4]
	//reaction wheel in x-direction
	TIM2->CCR1=duty;
 8003ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ad8:	ed97 7b02 	vldr	d7, [r7, #8]
 8003adc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ae0:	ee17 2a90 	vmov	r2, s15
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, fr);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	2104      	movs	r1, #4
 8003aee:	4803      	ldr	r0, [pc, #12]	; (8003afc <set_rpm_motorx+0x34>)
 8003af0:	f7fd fca2 	bl	8001438 <HAL_GPIO_WritePin>
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58021000 	.word	0x58021000

08003b00 <set_rpm_motory>:

void set_rpm_motory(double duty,int fr)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	ed87 0b02 	vstr	d0, [r7, #8]
 8003b0a:	6078      	str	r0, [r7, #4]
	//reaction wheel in y-direction
	TIM3->CCR1=duty;
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <set_rpm_motory+0x34>)
 8003b0e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003b16:	ee17 2a90 	vmov	r2, s15
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, fr);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	2108      	movs	r1, #8
 8003b24:	4804      	ldr	r0, [pc, #16]	; (8003b38 <set_rpm_motory+0x38>)
 8003b26:	f7fd fc87 	bl	8001438 <HAL_GPIO_WritePin>
}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40000400 	.word	0x40000400
 8003b38:	58021000 	.word	0x58021000

08003b3c <set_desired_motorx>:
 *        int fr: fr or the desired direction given by ADCS
 * return type- void
 */

void set_desired_motorx(double duty,int fr)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	ed87 0b02 	vstr	d0, [r7, #8]
 8003b46:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	480c      	ldr	r0, [pc, #48]	; (8003b7c <set_desired_motorx+0x40>)
 8003b4c:	f7fe fcaa 	bl	80024a4 <HAL_TIM_PWM_Start>
	duty_dx=duty;
 8003b50:	490b      	ldr	r1, [pc, #44]	; (8003b80 <set_desired_motorx+0x44>)
 8003b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b56:	e9c1 2300 	strd	r2, r3, [r1]
	frx=fr;
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <set_desired_motorx+0x48>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6013      	str	r3, [r2, #0]
	set_rpm_motorx(duty_dx,frx);
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <set_desired_motorx+0x44>)
 8003b62:	ed93 7b00 	vldr	d7, [r3]
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <set_desired_motorx+0x48>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	eeb0 0b47 	vmov.f64	d0, d7
 8003b70:	f7ff ffaa 	bl	8003ac8 <set_rpm_motorx>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2400002c 	.word	0x2400002c
 8003b80:	24000180 	.word	0x24000180
 8003b84:	24000178 	.word	0x24000178

08003b88 <set_desired_motory>:

void set_desired_motory(double duty,int fr)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003b92:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003b94:	2100      	movs	r1, #0
 8003b96:	480c      	ldr	r0, [pc, #48]	; (8003bc8 <set_desired_motory+0x40>)
 8003b98:	f7fe fc84 	bl	80024a4 <HAL_TIM_PWM_Start>
	duty_dy=duty;
 8003b9c:	490b      	ldr	r1, [pc, #44]	; (8003bcc <set_desired_motory+0x44>)
 8003b9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba2:	e9c1 2300 	strd	r2, r3, [r1]
	fry=fr;
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <set_desired_motory+0x48>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6013      	str	r3, [r2, #0]
	set_rpm_motory(duty_dy,fry);
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <set_desired_motory+0x44>)
 8003bae:	ed93 7b00 	vldr	d7, [r3]
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <set_desired_motory+0x48>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	eeb0 0b47 	vmov.f64	d0, d7
 8003bbc:	f7ff ffa0 	bl	8003b00 <set_rpm_motory>
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	24000078 	.word	0x24000078
 8003bcc:	24000188 	.word	0x24000188
 8003bd0:	2400017c 	.word	0x2400017c

08003bd4 <memset>:
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <memset+0xa>
 8003bdc:	4770      	bx	lr
 8003bde:	f803 1b01 	strb.w	r1, [r3], #1
 8003be2:	e7f9      	b.n	8003bd8 <memset+0x4>

08003be4 <__libc_init_array>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	4d0d      	ldr	r5, [pc, #52]	; (8003c1c <__libc_init_array+0x38>)
 8003be8:	4c0d      	ldr	r4, [pc, #52]	; (8003c20 <__libc_init_array+0x3c>)
 8003bea:	1b64      	subs	r4, r4, r5
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	2600      	movs	r6, #0
 8003bf0:	42a6      	cmp	r6, r4
 8003bf2:	d109      	bne.n	8003c08 <__libc_init_array+0x24>
 8003bf4:	4d0b      	ldr	r5, [pc, #44]	; (8003c24 <__libc_init_array+0x40>)
 8003bf6:	4c0c      	ldr	r4, [pc, #48]	; (8003c28 <__libc_init_array+0x44>)
 8003bf8:	f000 f818 	bl	8003c2c <_init>
 8003bfc:	1b64      	subs	r4, r4, r5
 8003bfe:	10a4      	asrs	r4, r4, #2
 8003c00:	2600      	movs	r6, #0
 8003c02:	42a6      	cmp	r6, r4
 8003c04:	d105      	bne.n	8003c12 <__libc_init_array+0x2e>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0c:	4798      	blx	r3
 8003c0e:	3601      	adds	r6, #1
 8003c10:	e7ee      	b.n	8003bf0 <__libc_init_array+0xc>
 8003c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c16:	4798      	blx	r3
 8003c18:	3601      	adds	r6, #1
 8003c1a:	e7f2      	b.n	8003c02 <__libc_init_array+0x1e>
 8003c1c:	08003c54 	.word	0x08003c54
 8003c20:	08003c54 	.word	0x08003c54
 8003c24:	08003c54 	.word	0x08003c54
 8003c28:	08003c58 	.word	0x08003c58

08003c2c <_init>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr

08003c38 <_fini>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr
