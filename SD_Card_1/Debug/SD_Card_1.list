
SD_Card_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e54  08006e54  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08006e54  08006e54  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e54  08006e54  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023a4  20000024  08006e80  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023c8  08006e80  000223c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7bd  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002068  00000000  00000000  0002b811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa1f  00000000  00000000  0002ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4de  00000000  00000000  00049807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3b2  00000000  00000000  00058ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d14  00000000  00000000  000f70e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006918 	.word	0x08006918

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08006918 	.word	0x08006918

080001cc <__aeabi_dmul>:
 80001cc:	b570      	push	{r4, r5, r6, lr}
 80001ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001da:	bf1d      	ittte	ne
 80001dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e0:	ea94 0f0c 	teqne	r4, ip
 80001e4:	ea95 0f0c 	teqne	r5, ip
 80001e8:	f000 f8de 	bleq	80003a8 <__aeabi_dmul+0x1dc>
 80001ec:	442c      	add	r4, r5
 80001ee:	ea81 0603 	eor.w	r6, r1, r3
 80001f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fe:	bf18      	it	ne
 8000200:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800020c:	d038      	beq.n	8000280 <__aeabi_dmul+0xb4>
 800020e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000212:	f04f 0500 	mov.w	r5, #0
 8000216:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000222:	f04f 0600 	mov.w	r6, #0
 8000226:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022a:	f09c 0f00 	teq	ip, #0
 800022e:	bf18      	it	ne
 8000230:	f04e 0e01 	orrne.w	lr, lr, #1
 8000234:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000238:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800023c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000240:	d204      	bcs.n	800024c <__aeabi_dmul+0x80>
 8000242:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000246:	416d      	adcs	r5, r5
 8000248:	eb46 0606 	adc.w	r6, r6, r6
 800024c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000250:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000254:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000258:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800025c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000260:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000264:	bf88      	it	hi
 8000266:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026a:	d81e      	bhi.n	80002aa <__aeabi_dmul+0xde>
 800026c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000270:	bf08      	it	eq
 8000272:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000276:	f150 0000 	adcs.w	r0, r0, #0
 800027a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000284:	ea46 0101 	orr.w	r1, r6, r1
 8000288:	ea40 0002 	orr.w	r0, r0, r2
 800028c:	ea81 0103 	eor.w	r1, r1, r3
 8000290:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000294:	bfc2      	ittt	gt
 8000296:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029e:	bd70      	popgt	{r4, r5, r6, pc}
 80002a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a4:	f04f 0e00 	mov.w	lr, #0
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f300 80ab 	bgt.w	8000404 <__aeabi_dmul+0x238>
 80002ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b2:	bfde      	ittt	le
 80002b4:	2000      	movle	r0, #0
 80002b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ba:	bd70      	pople	{r4, r5, r6, pc}
 80002bc:	f1c4 0400 	rsb	r4, r4, #0
 80002c0:	3c20      	subs	r4, #32
 80002c2:	da35      	bge.n	8000330 <__aeabi_dmul+0x164>
 80002c4:	340c      	adds	r4, #12
 80002c6:	dc1b      	bgt.n	8000300 <__aeabi_dmul+0x134>
 80002c8:	f104 0414 	add.w	r4, r4, #20
 80002cc:	f1c4 0520 	rsb	r5, r4, #32
 80002d0:	fa00 f305 	lsl.w	r3, r0, r5
 80002d4:	fa20 f004 	lsr.w	r0, r0, r4
 80002d8:	fa01 f205 	lsl.w	r2, r1, r5
 80002dc:	ea40 0002 	orr.w	r0, r0, r2
 80002e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002ec:	fa21 f604 	lsr.w	r6, r1, r4
 80002f0:	eb42 0106 	adc.w	r1, r2, r6
 80002f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f8:	bf08      	it	eq
 80002fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f1c4 040c 	rsb	r4, r4, #12
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f304 	lsl.w	r3, r0, r4
 800030c:	fa20 f005 	lsr.w	r0, r0, r5
 8000310:	fa01 f204 	lsl.w	r2, r1, r4
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000328:	bf08      	it	eq
 800032a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f205 	lsl.w	r2, r0, r5
 8000338:	ea4e 0e02 	orr.w	lr, lr, r2
 800033c:	fa20 f304 	lsr.w	r3, r0, r4
 8000340:	fa01 f205 	lsl.w	r2, r1, r5
 8000344:	ea43 0302 	orr.w	r3, r3, r2
 8000348:	fa21 f004 	lsr.w	r0, r1, r4
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	fa21 f204 	lsr.w	r2, r1, r4
 8000354:	ea20 0002 	bic.w	r0, r0, r2
 8000358:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f094 0f00 	teq	r4, #0
 800036c:	d10f      	bne.n	800038e <__aeabi_dmul+0x1c2>
 800036e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000372:	0040      	lsls	r0, r0, #1
 8000374:	eb41 0101 	adc.w	r1, r1, r1
 8000378:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037c:	bf08      	it	eq
 800037e:	3c01      	subeq	r4, #1
 8000380:	d0f7      	beq.n	8000372 <__aeabi_dmul+0x1a6>
 8000382:	ea41 0106 	orr.w	r1, r1, r6
 8000386:	f095 0f00 	teq	r5, #0
 800038a:	bf18      	it	ne
 800038c:	4770      	bxne	lr
 800038e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000392:	0052      	lsls	r2, r2, #1
 8000394:	eb43 0303 	adc.w	r3, r3, r3
 8000398:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3d01      	subeq	r5, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1c6>
 80003a2:	ea43 0306 	orr.w	r3, r3, r6
 80003a6:	4770      	bx	lr
 80003a8:	ea94 0f0c 	teq	r4, ip
 80003ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b0:	bf18      	it	ne
 80003b2:	ea95 0f0c 	teqne	r5, ip
 80003b6:	d00c      	beq.n	80003d2 <__aeabi_dmul+0x206>
 80003b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003bc:	bf18      	it	ne
 80003be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c2:	d1d1      	bne.n	8000368 <__aeabi_dmul+0x19c>
 80003c4:	ea81 0103 	eor.w	r1, r1, r3
 80003c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
 80003d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d6:	bf06      	itte	eq
 80003d8:	4610      	moveq	r0, r2
 80003da:	4619      	moveq	r1, r3
 80003dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e0:	d019      	beq.n	8000416 <__aeabi_dmul+0x24a>
 80003e2:	ea94 0f0c 	teq	r4, ip
 80003e6:	d102      	bne.n	80003ee <__aeabi_dmul+0x222>
 80003e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003ec:	d113      	bne.n	8000416 <__aeabi_dmul+0x24a>
 80003ee:	ea95 0f0c 	teq	r5, ip
 80003f2:	d105      	bne.n	8000400 <__aeabi_dmul+0x234>
 80003f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f8:	bf1c      	itt	ne
 80003fa:	4610      	movne	r0, r2
 80003fc:	4619      	movne	r1, r3
 80003fe:	d10a      	bne.n	8000416 <__aeabi_dmul+0x24a>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800040c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000410:	f04f 0000 	mov.w	r0, #0
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041e:	bd70      	pop	{r4, r5, r6, pc}

08000420 <__aeabi_drsub>:
 8000420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000424:	e002      	b.n	800042c <__adddf3>
 8000426:	bf00      	nop

08000428 <__aeabi_dsub>:
 8000428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800042c <__adddf3>:
 800042c:	b530      	push	{r4, r5, lr}
 800042e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000432:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	bf1f      	itttt	ne
 8000442:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000446:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000452:	f000 80e2 	beq.w	800061a <__adddf3+0x1ee>
 8000456:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045e:	bfb8      	it	lt
 8000460:	426d      	neglt	r5, r5
 8000462:	dd0c      	ble.n	800047e <__adddf3+0x52>
 8000464:	442c      	add	r4, r5
 8000466:	ea80 0202 	eor.w	r2, r0, r2
 800046a:	ea81 0303 	eor.w	r3, r1, r3
 800046e:	ea82 0000 	eor.w	r0, r2, r0
 8000472:	ea83 0101 	eor.w	r1, r3, r1
 8000476:	ea80 0202 	eor.w	r2, r0, r2
 800047a:	ea81 0303 	eor.w	r3, r1, r3
 800047e:	2d36      	cmp	r5, #54	; 0x36
 8000480:	bf88      	it	hi
 8000482:	bd30      	pophi	{r4, r5, pc}
 8000484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000488:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800048c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000494:	d002      	beq.n	800049c <__adddf3+0x70>
 8000496:	4240      	negs	r0, r0
 8000498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x84>
 80004aa:	4252      	negs	r2, r2
 80004ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b0:	ea94 0f05 	teq	r4, r5
 80004b4:	f000 80a7 	beq.w	8000606 <__adddf3+0x1da>
 80004b8:	f1a4 0401 	sub.w	r4, r4, #1
 80004bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c0:	db0d      	blt.n	80004de <__adddf3+0xb2>
 80004c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ca:	1880      	adds	r0, r0, r2
 80004cc:	f141 0100 	adc.w	r1, r1, #0
 80004d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d4:	1880      	adds	r0, r0, r2
 80004d6:	fa43 f305 	asr.w	r3, r3, r5
 80004da:	4159      	adcs	r1, r3
 80004dc:	e00e      	b.n	80004fc <__adddf3+0xd0>
 80004de:	f1a5 0520 	sub.w	r5, r5, #32
 80004e2:	f10e 0e20 	add.w	lr, lr, #32
 80004e6:	2a01      	cmp	r2, #1
 80004e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ec:	bf28      	it	cs
 80004ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	18c0      	adds	r0, r0, r3
 80004f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	d507      	bpl.n	8000512 <__adddf3+0xe6>
 8000502:	f04f 0e00 	mov.w	lr, #0
 8000506:	f1dc 0c00 	rsbs	ip, ip, #0
 800050a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000516:	d31b      	bcc.n	8000550 <__adddf3+0x124>
 8000518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800051c:	d30c      	bcc.n	8000538 <__adddf3+0x10c>
 800051e:	0849      	lsrs	r1, r1, #1
 8000520:	ea5f 0030 	movs.w	r0, r0, rrx
 8000524:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000528:	f104 0401 	add.w	r4, r4, #1
 800052c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000534:	f080 809a 	bcs.w	800066c <__adddf3+0x240>
 8000538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800053c:	bf08      	it	eq
 800053e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000542:	f150 0000 	adcs.w	r0, r0, #0
 8000546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054a:	ea41 0105 	orr.w	r1, r1, r5
 800054e:	bd30      	pop	{r4, r5, pc}
 8000550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000554:	4140      	adcs	r0, r0
 8000556:	eb41 0101 	adc.w	r1, r1, r1
 800055a:	3c01      	subs	r4, #1
 800055c:	bf28      	it	cs
 800055e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000562:	d2e9      	bcs.n	8000538 <__adddf3+0x10c>
 8000564:	f091 0f00 	teq	r1, #0
 8000568:	bf04      	itt	eq
 800056a:	4601      	moveq	r1, r0
 800056c:	2000      	moveq	r0, #0
 800056e:	fab1 f381 	clz	r3, r1
 8000572:	bf08      	it	eq
 8000574:	3320      	addeq	r3, #32
 8000576:	f1a3 030b 	sub.w	r3, r3, #11
 800057a:	f1b3 0220 	subs.w	r2, r3, #32
 800057e:	da0c      	bge.n	800059a <__adddf3+0x16e>
 8000580:	320c      	adds	r2, #12
 8000582:	dd08      	ble.n	8000596 <__adddf3+0x16a>
 8000584:	f102 0c14 	add.w	ip, r2, #20
 8000588:	f1c2 020c 	rsb	r2, r2, #12
 800058c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000590:	fa21 f102 	lsr.w	r1, r1, r2
 8000594:	e00c      	b.n	80005b0 <__adddf3+0x184>
 8000596:	f102 0214 	add.w	r2, r2, #20
 800059a:	bfd8      	it	le
 800059c:	f1c2 0c20 	rsble	ip, r2, #32
 80005a0:	fa01 f102 	lsl.w	r1, r1, r2
 80005a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a8:	bfdc      	itt	le
 80005aa:	ea41 010c 	orrle.w	r1, r1, ip
 80005ae:	4090      	lslle	r0, r2
 80005b0:	1ae4      	subs	r4, r4, r3
 80005b2:	bfa2      	ittt	ge
 80005b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b8:	4329      	orrge	r1, r5
 80005ba:	bd30      	popge	{r4, r5, pc}
 80005bc:	ea6f 0404 	mvn.w	r4, r4
 80005c0:	3c1f      	subs	r4, #31
 80005c2:	da1c      	bge.n	80005fe <__adddf3+0x1d2>
 80005c4:	340c      	adds	r4, #12
 80005c6:	dc0e      	bgt.n	80005e6 <__adddf3+0x1ba>
 80005c8:	f104 0414 	add.w	r4, r4, #20
 80005cc:	f1c4 0220 	rsb	r2, r4, #32
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f302 	lsl.w	r3, r1, r2
 80005d8:	ea40 0003 	orr.w	r0, r0, r3
 80005dc:	fa21 f304 	lsr.w	r3, r1, r4
 80005e0:	ea45 0103 	orr.w	r1, r5, r3
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	f1c4 040c 	rsb	r4, r4, #12
 80005ea:	f1c4 0220 	rsb	r2, r4, #32
 80005ee:	fa20 f002 	lsr.w	r0, r0, r2
 80005f2:	fa01 f304 	lsl.w	r3, r1, r4
 80005f6:	ea40 0003 	orr.w	r0, r0, r3
 80005fa:	4629      	mov	r1, r5
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f094 0f00 	teq	r4, #0
 800060a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060e:	bf06      	itte	eq
 8000610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000614:	3401      	addeq	r4, #1
 8000616:	3d01      	subne	r5, #1
 8000618:	e74e      	b.n	80004b8 <__adddf3+0x8c>
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf18      	it	ne
 8000620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000624:	d029      	beq.n	800067a <__adddf3+0x24e>
 8000626:	ea94 0f05 	teq	r4, r5
 800062a:	bf08      	it	eq
 800062c:	ea90 0f02 	teqeq	r0, r2
 8000630:	d005      	beq.n	800063e <__adddf3+0x212>
 8000632:	ea54 0c00 	orrs.w	ip, r4, r0
 8000636:	bf04      	itt	eq
 8000638:	4619      	moveq	r1, r3
 800063a:	4610      	moveq	r0, r2
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	ea91 0f03 	teq	r1, r3
 8000642:	bf1e      	ittt	ne
 8000644:	2100      	movne	r1, #0
 8000646:	2000      	movne	r0, #0
 8000648:	bd30      	popne	{r4, r5, pc}
 800064a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064e:	d105      	bne.n	800065c <__adddf3+0x230>
 8000650:	0040      	lsls	r0, r0, #1
 8000652:	4149      	adcs	r1, r1
 8000654:	bf28      	it	cs
 8000656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd30      	pop	{r4, r5, pc}
 800065c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000660:	bf3c      	itt	cc
 8000662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000666:	bd30      	popcc	{r4, r5, pc}
 8000668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800066c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000674:	f04f 0000 	mov.w	r0, #0
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067e:	bf1a      	itte	ne
 8000680:	4619      	movne	r1, r3
 8000682:	4610      	movne	r0, r2
 8000684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000688:	bf1c      	itt	ne
 800068a:	460b      	movne	r3, r1
 800068c:	4602      	movne	r2, r0
 800068e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000692:	bf06      	itte	eq
 8000694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000698:	ea91 0f03 	teqeq	r1, r3
 800069c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	bf00      	nop

080006a4 <__aeabi_ui2d>:
 80006a4:	f090 0f00 	teq	r0, #0
 80006a8:	bf04      	itt	eq
 80006aa:	2100      	moveq	r1, #0
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b8:	f04f 0500 	mov.w	r5, #0
 80006bc:	f04f 0100 	mov.w	r1, #0
 80006c0:	e750      	b.n	8000564 <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_i2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e73e      	b.n	8000564 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_f2d>:
 80006e8:	0042      	lsls	r2, r0, #1
 80006ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f6:	bf1f      	itttt	ne
 80006f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000704:	4770      	bxne	lr
 8000706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070a:	bf08      	it	eq
 800070c:	4770      	bxeq	lr
 800070e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000712:	bf04      	itt	eq
 8000714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	e71c      	b.n	8000564 <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_ul2d>:
 800072c:	ea50 0201 	orrs.w	r2, r0, r1
 8000730:	bf08      	it	eq
 8000732:	4770      	bxeq	lr
 8000734:	b530      	push	{r4, r5, lr}
 8000736:	f04f 0500 	mov.w	r5, #0
 800073a:	e00a      	b.n	8000752 <__aeabi_l2d+0x16>

0800073c <__aeabi_l2d>:
 800073c:	ea50 0201 	orrs.w	r2, r0, r1
 8000740:	bf08      	it	eq
 8000742:	4770      	bxeq	lr
 8000744:	b530      	push	{r4, r5, lr}
 8000746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074a:	d502      	bpl.n	8000752 <__aeabi_l2d+0x16>
 800074c:	4240      	negs	r0, r0
 800074e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000752:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000756:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075e:	f43f aed8 	beq.w	8000512 <__adddf3+0xe6>
 8000762:	f04f 0203 	mov.w	r2, #3
 8000766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076a:	bf18      	it	ne
 800076c:	3203      	addne	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077a:	f1c2 0320 	rsb	r3, r2, #32
 800077e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	fa01 fe03 	lsl.w	lr, r1, r3
 800078a:	ea40 000e 	orr.w	r0, r0, lr
 800078e:	fa21 f102 	lsr.w	r1, r1, r2
 8000792:	4414      	add	r4, r2
 8000794:	e6bd      	b.n	8000512 <__adddf3+0xe6>
 8000796:	bf00      	nop

08000798 <__aeabi_d2uiz>:
 8000798:	004a      	lsls	r2, r1, #1
 800079a:	d211      	bcs.n	80007c0 <__aeabi_d2uiz+0x28>
 800079c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a0:	d211      	bcs.n	80007c6 <__aeabi_d2uiz+0x2e>
 80007a2:	d50d      	bpl.n	80007c0 <__aeabi_d2uiz+0x28>
 80007a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007ac:	d40e      	bmi.n	80007cc <__aeabi_d2uiz+0x34>
 80007ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	4770      	bx	lr
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	4770      	bx	lr
 80007c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ca:	d102      	bne.n	80007d2 <__aeabi_d2uiz+0x3a>
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	4770      	bx	lr
 80007d2:	f04f 0000 	mov.w	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 faab 	bl	8000d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f8be 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 f948 	bl	8000a78 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007e8:	f000 f908 	bl	80009fc <MX_SPI1_Init>
  MX_FATFS_Init();
 80007ec:	f002 f9dc 	bl	8002ba8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK)
 80007f0:	2200      	movs	r2, #0
 80007f2:	494e      	ldr	r1, [pc, #312]	; (800092c <main+0x154>)
 80007f4:	484e      	ldr	r0, [pc, #312]	; (8000930 <main+0x158>)
 80007f6:	f004 fc2d 	bl	8005054 <f_mount>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <main+0x30>
      _Error_Handler(__FILE__, __LINE__);
 8000800:	2169      	movs	r1, #105	; 0x69
 8000802:	484c      	ldr	r0, [pc, #304]	; (8000934 <main+0x15c>)
 8000804:	f000 f982 	bl	8000b0c <_Error_Handler>

    /* Open file to write */
    if(f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8000808:	2213      	movs	r2, #19
 800080a:	494b      	ldr	r1, [pc, #300]	; (8000938 <main+0x160>)
 800080c:	484b      	ldr	r0, [pc, #300]	; (800093c <main+0x164>)
 800080e:	f004 fc67 	bl	80050e0 <f_open>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <main+0x48>
      _Error_Handler(__FILE__, __LINE__);
 8000818:	216d      	movs	r1, #109	; 0x6d
 800081a:	4846      	ldr	r0, [pc, #280]	; (8000934 <main+0x15c>)
 800081c:	f000 f976 	bl	8000b0c <_Error_Handler>

    /* Check free space */
    if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8000820:	4a47      	ldr	r2, [pc, #284]	; (8000940 <main+0x168>)
 8000822:	4948      	ldr	r1, [pc, #288]	; (8000944 <main+0x16c>)
 8000824:	4841      	ldr	r0, [pc, #260]	; (800092c <main+0x154>)
 8000826:	f005 f9c2 	bl	8005bae <f_getfree>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d003      	beq.n	8000838 <main+0x60>
      _Error_Handler(__FILE__, __LINE__);
 8000830:	2171      	movs	r1, #113	; 0x71
 8000832:	4840      	ldr	r0, [pc, #256]	; (8000934 <main+0x15c>)
 8000834:	f000 f96a 	bl	8000b0c <_Error_Handler>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000838:	4b41      	ldr	r3, [pc, #260]	; (8000940 <main+0x168>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	3b02      	subs	r3, #2
 8000840:	4a3f      	ldr	r2, [pc, #252]	; (8000940 <main+0x168>)
 8000842:	6812      	ldr	r2, [r2, #0]
 8000844:	8952      	ldrh	r2, [r2, #10]
 8000846:	fb02 f303 	mul.w	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff2a 	bl	80006a4 <__aeabi_ui2d>
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <main+0x170>)
 8000856:	f7ff fcb9 	bl	80001cc <__aeabi_dmul>
 800085a:	4602      	mov	r2, r0
 800085c:	460b      	mov	r3, r1
 800085e:	4610      	mov	r0, r2
 8000860:	4619      	mov	r1, r3
 8000862:	f7ff ff99 	bl	8000798 <__aeabi_d2uiz>
 8000866:	4603      	mov	r3, r0
 8000868:	4a38      	ldr	r2, [pc, #224]	; (800094c <main+0x174>)
 800086a:	6013      	str	r3, [r2, #0]
    available_space=(uint32_t)((fre_clust) * (pfs->csize) * 0.5);
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <main+0x168>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	895b      	ldrh	r3, [r3, #10]
 8000872:	461a      	mov	r2, r3
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <main+0x16c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	fb02 f303 	mul.w	r3, r2, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff11 	bl	80006a4 <__aeabi_ui2d>
 8000882:	f04f 0200 	mov.w	r2, #0
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <main+0x170>)
 8000888:	f7ff fca0 	bl	80001cc <__aeabi_dmul>
 800088c:	4602      	mov	r2, r0
 800088e:	460b      	mov	r3, r1
 8000890:	4610      	mov	r0, r2
 8000892:	4619      	mov	r1, r3
 8000894:	f7ff ff80 	bl	8000798 <__aeabi_d2uiz>
 8000898:	4603      	mov	r3, r0
 800089a:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <main+0x178>)
 800089c:	6013      	str	r3, [r2, #0]
    /* Free space is less than 1kb */
      if(available_space < 1)
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <main+0x178>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d103      	bne.n	80008ae <main+0xd6>
        _Error_Handler(__FILE__, __LINE__);
 80008a6:	2177      	movs	r1, #119	; 0x77
 80008a8:	4822      	ldr	r0, [pc, #136]	; (8000934 <main+0x15c>)
 80008aa:	f000 f92f 	bl	8000b0c <_Error_Handler>

      /* Writing text */
      f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 80008ae:	4923      	ldr	r1, [pc, #140]	; (800093c <main+0x164>)
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <main+0x17c>)
 80008b2:	f005 fae5 	bl	8005e80 <f_puts>
      f_puts("Save the world!!!", &fil);
 80008b6:	4921      	ldr	r1, [pc, #132]	; (800093c <main+0x164>)
 80008b8:	4827      	ldr	r0, [pc, #156]	; (8000958 <main+0x180>)
 80008ba:	f005 fae1 	bl	8005e80 <f_puts>

      /* Close file */
      if(f_close(&fil) != FR_OK)
 80008be:	481f      	ldr	r0, [pc, #124]	; (800093c <main+0x164>)
 80008c0:	f005 f94b 	bl	8005b5a <f_close>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <main+0xfa>
        _Error_Handler(__FILE__, __LINE__);
 80008ca:	217f      	movs	r1, #127	; 0x7f
 80008cc:	4819      	ldr	r0, [pc, #100]	; (8000934 <main+0x15c>)
 80008ce:	f000 f91d 	bl	8000b0c <_Error_Handler>

      /* Open file to read */
      if(f_open(&fil, "first.txt", FA_READ) != FR_OK)
 80008d2:	2201      	movs	r2, #1
 80008d4:	4918      	ldr	r1, [pc, #96]	; (8000938 <main+0x160>)
 80008d6:	4819      	ldr	r0, [pc, #100]	; (800093c <main+0x164>)
 80008d8:	f004 fc02 	bl	80050e0 <f_open>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <main+0x112>
        _Error_Handler(__FILE__, __LINE__);
 80008e2:	2183      	movs	r1, #131	; 0x83
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <main+0x15c>)
 80008e6:	f000 f911 	bl	8000b0c <_Error_Handler>

      while(f_gets(buffer, sizeof(buffer), &fil))
 80008ea:	bf00      	nop
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <main+0x164>)
 80008ee:	2164      	movs	r1, #100	; 0x64
 80008f0:	481a      	ldr	r0, [pc, #104]	; (800095c <main+0x184>)
 80008f2:	f005 fa11 	bl	8005d18 <f_gets>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f7      	bne.n	80008ec <main+0x114>
      {
        //printf("%s", buffer);
      }

        /* Close file */
        if(f_close(&fil) != FR_OK)
 80008fc:	480f      	ldr	r0, [pc, #60]	; (800093c <main+0x164>)
 80008fe:	f005 f92c 	bl	8005b5a <f_close>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <main+0x138>
          _Error_Handler(__FILE__, __LINE__);
 8000908:	218c      	movs	r1, #140	; 0x8c
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <main+0x15c>)
 800090c:	f000 f8fe 	bl	8000b0c <_Error_Handler>

        /* Unmount SDCARD */
        if(f_mount(NULL, "", 1) != FR_OK)
 8000910:	2201      	movs	r2, #1
 8000912:	4906      	ldr	r1, [pc, #24]	; (800092c <main+0x154>)
 8000914:	2000      	movs	r0, #0
 8000916:	f004 fb9d 	bl	8005054 <f_mount>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <main+0x150>
          _Error_Handler(__FILE__, __LINE__);
 8000920:	2190      	movs	r1, #144	; 0x90
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <main+0x15c>)
 8000924:	f000 f8f2 	bl	8000b0c <_Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	e7fe      	b.n	8000928 <main+0x150>
 800092a:	bf00      	nop
 800092c:	08006930 	.word	0x08006930
 8000930:	200000a4 	.word	0x200000a4
 8000934:	08006934 	.word	0x08006934
 8000938:	08006948 	.word	0x08006948
 800093c:	200010e0 	.word	0x200010e0
 8000940:	200010dc 	.word	0x200010dc
 8000944:	20002110 	.word	0x20002110
 8000948:	3fe00000 	.word	0x3fe00000
 800094c:	20002114 	.word	0x20002114
 8000950:	20002118 	.word	0x20002118
 8000954:	08006954 	.word	0x08006954
 8000958:	08006978 	.word	0x08006978
 800095c:	2000211c 	.word	0x2000211c

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b096      	sub	sp, #88	; 0x58
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2244      	movs	r2, #68	; 0x44
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f005 ffca 	bl	8006908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000982:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000986:	f000 fcd5 	bl	8001334 <HAL_PWREx_ControlVoltageScaling>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000990:	f000 f8c7 	bl	8000b22 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	2303      	movs	r3, #3
 80009a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009aa:	2308      	movs	r3, #8
 80009ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fd10 	bl	80013e0 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009c6:	f000 f8ac 	bl	8000b22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2303      	movs	r3, #3
 80009d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	2101      	movs	r1, #1
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f95e 	bl	8001ca4 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009ee:	f000 f898 	bl	8000b22 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3758      	adds	r7, #88	; 0x58
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_SPI1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a16:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a32:	2210      	movs	r2, #16
 8000a34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a56:	2208      	movs	r2, #8
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_SPI1_Init+0x74>)
 8000a5c:	f001 fb0e 	bl	800207c <HAL_SPI_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 f85c 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000040 	.word	0x20000040
 8000a74:	40013000 	.word	0x40013000

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_GPIO_Init+0x8c>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0x90>)
 8000adc:	f000 fc04 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_GPIO_Init+0x90>)
 8000af8:	f000 fa84 	bl	8001004 <HAL_GPIO_Init>

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000800 	.word	0x48000800

08000b0c <_Error_Handler>:

/* USER CODE BEGIN 4 */
void _Error_Handler(char *file, int line) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    // You can add more error-handling actions here if needed
    // For example, you might want to log the error to a file,
    // blink an LED, or reset the microcontroller.

    // Halt the program
    Error_Handler();
 8000b16:	f000 f804 	bl	8000b22 <Error_Handler>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b26:	b672      	cpsid	i
}
 8000b28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	; 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_SPI_MspInit+0x7c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d128      	bne.n	8000be8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9a:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_SPI_MspInit+0x80>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000bc6:	23c2      	movs	r3, #194	; 0xc2
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f000 fa0e 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40013000 	.word	0x40013000
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt =  0 ;
volatile uint8_t Timer1 , Timer2 ;

void  SDTimer_Handler ( void )
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  if ( Timer1 >  0 )
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <SDTimer_Handler+0x40>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d006      	beq.n	8000c14 <SDTimer_Handler+0x1c>
    Timer1 -- ;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <SDTimer_Handler+0x40>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <SDTimer_Handler+0x40>)
 8000c12:	701a      	strb	r2, [r3, #0]

  if ( Timer2 >  0 )
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <SDTimer_Handler+0x44>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <SDTimer_Handler+0x34>
    Timer2 -- ;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <SDTimer_Handler+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3b01      	subs	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SDTimer_Handler+0x44>)
 8000c2a:	701a      	strb	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20002181 	.word	0x20002181
 8000c3c:	20002182 	.word	0x20002182

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt ++ ;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <SysTick_Handler+0x34>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3301      	adds	r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <SysTick_Handler+0x34>)
 8000c98:	701a      	strb	r2, [r3, #0]
	  if ( FatFsCnt >=  10 )
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SysTick_Handler+0x34>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b09      	cmp	r3, #9
 8000ca2:	d904      	bls.n	8000cae <SysTick_Handler+0x26>
	  {
	    FatFsCnt =  0 ;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Handler+0x34>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler ( ) ;
 8000caa:	f7ff ffa5 	bl	8000bf8 <SDTimer_Handler>
	  }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f897 	bl	8000de0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler ( ) ;
 8000cb2:	f000 f99a 	bl	8000fea <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20002180 	.word	0x20002180

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f005 fdd5 	bl	80068c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fd5f 	bl	80007d8 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d28:	08006e5c 	.word	0x08006e5c
  ldr r2, =_sbss
 8000d2c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d30:	200023c8 	.word	0x200023c8

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>

08000d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f91f 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f80e 	bl	8000d68 <HAL_InitTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e001      	b.n	8000d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d58:	f7ff fee8 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d023      	beq.n	8000dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_InitTick+0x70>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f91d 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10f      	bne.n	8000dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d809      	bhi.n	8000db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f8f5 	bl	8000f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_InitTick+0x74>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e004      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e001      	b.n	8000dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20002184 	.word	0x20002184

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20002184 	.word	0x20002184

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff47 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff5c 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffb0 	bl	8000f40 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000fee:	f000 f802 	bl	8000ff6 <HAL_SYSTICK_Callback>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e14e      	b.n	80012b2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8140 	beq.w	80012ac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0201 	and.w	r2, r3, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	6939      	ldr	r1, [r7, #16]
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0203 	and.w	r2, r3, #3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 809a 	beq.w	80012ac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800117a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117c:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6613      	str	r3, [r2, #96]	; 0x60
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001190:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ba:	d013      	beq.n	80011e4 <HAL_GPIO_Init+0x1e0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a46      	ldr	r2, [pc, #280]	; (80012d8 <HAL_GPIO_Init+0x2d4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1dc>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a45      	ldr	r2, [pc, #276]	; (80012dc <HAL_GPIO_Init+0x2d8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1d8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1d4>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011d8:	2307      	movs	r3, #7
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011dc:	2302      	movs	r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011e4:	2300      	movs	r3, #0
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f6:	4937      	ldr	r1, [pc, #220]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001228:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001252:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f aea9 	bne.w	8001014 <HAL_GPIO_Init+0x10>
  }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001304:	e002      	b.n	800130c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_PWREx_GetVoltageRange+0x18>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40007000 	.word	0x40007000

08001334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001342:	d130      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001350:	d038      	beq.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001360:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2232      	movs	r2, #50	; 0x32
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001378:	e002      	b.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3b01      	subs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138c:	d102      	bne.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x60>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f2      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a0:	d110      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e00f      	b.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b2:	d007      	beq.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013bc:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40007000 	.word	0x40007000
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f000 bc4f 	b.w	8001c92 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f4:	4b97      	ldr	r3, [pc, #604]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fe:	4b95      	ldr	r3, [pc, #596]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80e6 	beq.w	80015e2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <HAL_RCC_OscConfig+0x4c>
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	f040 808d 	bne.w	800153e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b01      	cmp	r3, #1
 8001428:	f040 8089 	bne.w	800153e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142c:	4b89      	ldr	r3, [pc, #548]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_RCC_OscConfig+0x66>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	f000 bc26 	b.w	8001c92 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144a:	4b82      	ldr	r3, [pc, #520]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <HAL_RCC_OscConfig+0x80>
 8001456:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145e:	e005      	b.n	800146c <HAL_RCC_OscConfig+0x8c>
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800146c:	4293      	cmp	r3, r2
 800146e:	d224      	bcs.n	80014ba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fda1 	bl	8001fbc <RCC_SetFlashLatencyFromMSIRange>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f000 bc06 	b.w	8001c92 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001486:	4b73      	ldr	r3, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a72      	ldr	r2, [pc, #456]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b70      	ldr	r3, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	496d      	ldr	r1, [pc, #436]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a4:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	4968      	ldr	r1, [pc, #416]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e025      	b.n	8001506 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ba:	4b66      	ldr	r3, [pc, #408]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a65      	ldr	r2, [pc, #404]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	4960      	ldr	r1, [pc, #384]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d8:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	495b      	ldr	r1, [pc, #364]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fd60 	bl	8001fbc <RCC_SetFlashLatencyFromMSIRange>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e3c5      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001506:	f000 fccd 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b51      	ldr	r3, [pc, #324]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	4950      	ldr	r1, [pc, #320]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a4e      	ldr	r2, [pc, #312]	; (800165c <HAL_RCC_OscConfig+0x27c>)
 8001524:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001526:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc1c 	bl	8000d68 <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d052      	beq.n	80015e0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	e3a9      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d032      	beq.n	80015ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001546:	4b43      	ldr	r3, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a42      	ldr	r2, [pc, #264]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001552:	f7ff fc59 	bl	8000e08 <HAL_GetTick>
 8001556:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800155a:	f7ff fc55 	bl	8000e08 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e392      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800156c:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a35      	ldr	r2, [pc, #212]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	4930      	ldr	r1, [pc, #192]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	492b      	ldr	r1, [pc, #172]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
 80015aa:	e01a      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a28      	ldr	r2, [pc, #160]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc26 	bl	8000e08 <HAL_GetTick>
 80015bc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc22 	bl	8000e08 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e35f      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1e0>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d073      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x220>
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d10e      	bne.n	8001618 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d10b      	bne.n	8001618 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d063      	beq.n	80016d4 <HAL_RCC_OscConfig+0x2f4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d15f      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e33c      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x250>
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e025      	b.n	800167c <HAL_RCC_OscConfig+0x29c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d114      	bne.n	8001664 <HAL_RCC_OscConfig+0x284>
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a02      	ldr	r2, [pc, #8]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e013      	b.n	800167c <HAL_RCC_OscConfig+0x29c>
 8001654:	40021000 	.word	0x40021000
 8001658:	080069d4 	.word	0x080069d4
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004
 8001664:	4b8f      	ldr	r3, [pc, #572]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a8e      	ldr	r2, [pc, #568]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a8b      	ldr	r2, [pc, #556]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fbc0 	bl	8000e08 <HAL_GetTick>
 8001688:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fbbc 	bl	8000e08 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e2f9      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x2ac>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fbac 	bl	8000e08 <HAL_GetTick>
 80016b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fba8 	bl	8000e08 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e2e5      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c6:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2d4>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d060      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_OscConfig+0x314>
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d119      	bne.n	8001722 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d116      	bne.n	8001722 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f4:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_OscConfig+0x32c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e2c2      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	4962      	ldr	r1, [pc, #392]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001720:	e040      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d023      	beq.n	8001772 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172a:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5d      	ldr	r2, [pc, #372]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff fb67 	bl	8000e08 <HAL_GetTick>
 800173a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff fb63 	bl	8000e08 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e2a0      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	494e      	ldr	r1, [pc, #312]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e018      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fb43 	bl	8000e08 <HAL_GetTick>
 8001782:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff fb3f 	bl	8000e08 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e27c      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8082 	beq.w	80018b6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d05f      	beq.n	800187a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d037      	beq.n	8001840 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e254      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01b      	beq.n	800182a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f8:	4a2a      	ldr	r2, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001802:	f7ff fb01 	bl	8000e08 <HAL_GetTick>
 8001806:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff fafd 	bl	8000e08 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b11      	cmp	r3, #17
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e23a      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ef      	bne.n	800180a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001830:	f023 0210 	bic.w	r2, r3, #16
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	491a      	ldr	r1, [pc, #104]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fada 	bl	8000e08 <HAL_GetTick>
 8001854:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff fad6 	bl	8000e08 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b11      	cmp	r3, #17
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e213      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ef      	beq.n	8001858 <HAL_RCC_OscConfig+0x478>
 8001878:	e01d      	b.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff fabd 	bl	8000e08 <HAL_GetTick>
 800188e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001892:	f7ff fab9 	bl	8000e08 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b11      	cmp	r3, #17
 800189e:	d903      	bls.n	80018a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e1f6      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
 80018a4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a8:	4ba9      	ldr	r3, [pc, #676]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80018aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ed      	bne.n	8001892 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80bd 	beq.w	8001a3e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018ca:	4ba1      	ldr	r3, [pc, #644]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b9e      	ldr	r3, [pc, #632]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a9d      	ldr	r2, [pc, #628]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b9b      	ldr	r3, [pc, #620]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f4:	4b97      	ldr	r3, [pc, #604]	; (8001b54 <HAL_RCC_OscConfig+0x774>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d118      	bne.n	8001932 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001900:	4b94      	ldr	r3, [pc, #592]	; (8001b54 <HAL_RCC_OscConfig+0x774>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a93      	ldr	r2, [pc, #588]	; (8001b54 <HAL_RCC_OscConfig+0x774>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190c:	f7ff fa7c 	bl	8000e08 <HAL_GetTick>
 8001910:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001914:	f7ff fa78 	bl	8000e08 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1b5      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_RCC_OscConfig+0x774>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d02c      	beq.n	8001998 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800193e:	4b84      	ldr	r3, [pc, #528]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001950:	497f      	ldr	r1, [pc, #508]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001952:	4313      	orrs	r3, r2
 8001954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001964:	4b7a      	ldr	r3, [pc, #488]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196a:	4a79      	ldr	r2, [pc, #484]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	4a75      	ldr	r2, [pc, #468]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001984:	e018      	b.n	80019b8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001986:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	4a70      	ldr	r2, [pc, #448]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001998:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	4a6c      	ldr	r2, [pc, #432]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a8:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a68      	ldr	r2, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d016      	beq.n	80019ee <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa22 	bl	8000e08 <HAL_GetTick>
 80019c4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa1e 	bl	8000e08 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e159      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ed      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5e8>
 80019ec:	e01d      	b.n	8001a2a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa0b 	bl	8000e08 <HAL_GetTick>
 80019f2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff fa07 	bl	8000e08 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e142      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ed      	bne.n	80019f6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a20:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d03c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d01c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a58:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff f9d1 	bl	8000e08 <HAL_GetTick>
 8001a66:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6a:	f7ff f9cd 	bl	8000e08 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e10a      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0ef      	beq.n	8001a6a <HAL_RCC_OscConfig+0x68a>
 8001a8a:	e01b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a92:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f9b4 	bl	8000e08 <HAL_GetTick>
 8001aa0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa4:	f7ff f9b0 	bl	8000e08 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0ed      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ef      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80e1 	beq.w	8001c90 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	f040 80b5 	bne.w	8001c42 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d124      	bne.n	8001b36 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	3b01      	subs	r3, #1
 8001af8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d11b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d113      	bne.n	8001b36 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d05f      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d05a      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_OscConfig+0x770>)
 8001b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b48:	f7ff f95e 	bl	8000e08 <HAL_GetTick>
 8001b4c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4e:	e00c      	b.n	8001b6a <HAL_RCC_OscConfig+0x78a>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f956 	bl	8000e08 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e093      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_RCC_OscConfig+0x8c0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b86:	3a01      	subs	r2, #1
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b90:	0212      	lsls	r2, r2, #8
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b98:	0852      	lsrs	r2, r2, #1
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	0552      	lsls	r2, r2, #21
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ba4:	0852      	lsrs	r2, r2, #1
 8001ba6:	3a01      	subs	r2, #1
 8001ba8:	0652      	lsls	r2, r2, #25
 8001baa:	430a      	orrs	r2, r1
 8001bac:	493b      	ldr	r1, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bca:	f7ff f91d 	bl	8000e08 <HAL_GetTick>
 8001bce:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f919 	bl	8000e08 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e056      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf0:	e04e      	b.n	8001c90 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e04d      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d146      	bne.n	8001c90 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c18:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c1a:	f7ff f8f5 	bl	8000e08 <HAL_GetTick>
 8001c1e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff f8f1 	bl	8000e08 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e02e      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x842>
 8001c40:	e026      	b.n	8001c90 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d021      	beq.n	8001c8c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f8d8 	bl	8000e08 <HAL_GetTick>
 8001c58:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f8d4 	bl	8000e08 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e011      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_RCC_OscConfig+0x8bc>)
 8001c80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c84:	f023 0303 	bic.w	r3, r3, #3
 8001c88:	60d3      	str	r3, [r2, #12]
 8001c8a:	e001      	b.n	8001c90 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	f99f808c 	.word	0xf99f808c

08001ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0e7      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b75      	ldr	r3, [pc, #468]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4970      	ldr	r1, [pc, #448]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0cf      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d908      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4960      	ldr	r1, [pc, #384]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d04c      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d121      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0a6      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d115      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e09a      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e08e      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e086      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f023 0203 	bic.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4943      	ldr	r1, [pc, #268]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d8c:	f7ff f83c 	bl	8000e08 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7ff f838 	bl	8000e08 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e06e      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 020c 	and.w	r2, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1eb      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d208      	bcs.n	8001dea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	492b      	ldr	r1, [pc, #172]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dea:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d210      	bcs.n	8001e1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 0207 	bic.w	r2, r3, #7
 8001e00:	4923      	ldr	r1, [pc, #140]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e036      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4918      	ldr	r1, [pc, #96]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4910      	ldr	r1, [pc, #64]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e58:	f000 f824 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	490b      	ldr	r1, [pc, #44]	; (8001e98 <HAL_RCC_ClockConfig+0x1f4>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1f8>)
 8001e76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x1fc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ff73 	bl	8000d68 <HAL_InitTick>
 8001e82:	4603      	mov	r3, r0
 8001e84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e86:	7afb      	ldrb	r3, [r7, #11]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	080069d4 	.word	0x080069d4
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d121      	bne.n	8001f16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d11e      	bne.n	8001f16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e005      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10d      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d102      	bne.n	8001f22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	e004      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d134      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d003      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0xac>
 8001f48:	e005      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f4c:	617b      	str	r3, [r7, #20]
      break;
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f52:	617b      	str	r3, [r7, #20]
      break;
 8001f54:	e002      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	617b      	str	r3, [r7, #20]
      break;
 8001f5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	3301      	adds	r3, #1
 8001f68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	fb03 f202 	mul.w	r2, r3, r2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCC_GetSysClockFreq+0x108>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	0e5b      	lsrs	r3, r3, #25
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	080069e4 	.word	0x080069e4
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	007a1200 	.word	0x007a1200

08001fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd4:	f7ff f9a0 	bl	8001318 <HAL_PWREx_GetVoltageRange>
 8001fd8:	6178      	str	r0, [r7, #20]
 8001fda:	e014      	b.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	4a24      	ldr	r2, [pc, #144]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ff4:	f7ff f990 	bl	8001318 <HAL_PWREx_GetVoltageRange>
 8001ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800200c:	d10b      	bne.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d919      	bls.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2ba0      	cmp	r3, #160	; 0xa0
 8002018:	d902      	bls.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800201a:	2302      	movs	r3, #2
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e013      	b.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002020:	2301      	movs	r3, #1
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	e010      	b.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d902      	bls.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800202c:	2303      	movs	r3, #3
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	e00a      	b.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b80      	cmp	r3, #128	; 0x80
 8002036:	d102      	bne.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002038:	2302      	movs	r3, #2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e004      	b.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b70      	cmp	r3, #112	; 0x70
 8002042:	d101      	bne.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002044:	2301      	movs	r3, #1
 8002046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 0207 	bic.w	r2, r3, #7
 8002050:	4909      	ldr	r1, [pc, #36]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e095      	b.n	80021ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800209e:	d009      	beq.n	80020b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
 80020a6:	e005      	b.n	80020b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fd50 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020f4:	d902      	bls.n	80020fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e002      	b.n	8002102 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002100:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800210a:	d007      	beq.n	800211c <HAL_SPI_Init+0xa0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002114:	d002      	beq.n	800211c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	ea42 0103 	orr.w	r1, r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	f003 0204 	and.w	r2, r3, #4
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002198:	ea42 0103 	orr.w	r1, r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_SPI_Transmit+0x22>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e158      	b.n	8002496 <HAL_SPI_Transmit+0x2d4>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ec:	f7fe fe0c 	bl	8000e08 <HAL_GetTick>
 80021f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d002      	beq.n	8002208 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002202:	2302      	movs	r3, #2
 8002204:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002206:	e13d      	b.n	8002484 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_SPI_Transmit+0x52>
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002218:	e134      	b.n	8002484 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2203      	movs	r2, #3
 800221e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	88fa      	ldrh	r2, [r7, #6]
 8002238:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002264:	d10f      	bne.n	8002286 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002274:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002284:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d007      	beq.n	80022a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022ac:	d94b      	bls.n	8002346 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_Transmit+0xfa>
 80022b6:	8afb      	ldrh	r3, [r7, #22]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d13e      	bne.n	800233a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	1c9a      	adds	r2, r3, #2
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022e0:	e02b      	b.n	800233a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d112      	bne.n	8002316 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	1c9a      	adds	r2, r3, #2
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002314:	e011      	b.n	800233a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002316:	f7fe fd77 	bl	8000e08 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d803      	bhi.n	800232e <HAL_SPI_Transmit+0x16c>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d102      	bne.n	8002334 <HAL_SPI_Transmit+0x172>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002338:	e0a4      	b.n	8002484 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ce      	bne.n	80022e2 <HAL_SPI_Transmit+0x120>
 8002344:	e07c      	b.n	8002440 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_SPI_Transmit+0x192>
 800234e:	8afb      	ldrh	r3, [r7, #22]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d170      	bne.n	8002436 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d912      	bls.n	8002384 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	1c9a      	adds	r2, r3, #2
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b02      	subs	r3, #2
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002382:	e058      	b.n	8002436 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023aa:	e044      	b.n	8002436 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d12b      	bne.n	8002412 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d912      	bls.n	80023ea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	1c9a      	adds	r2, r3, #2
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b02      	subs	r3, #2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023e8:	e025      	b.n	8002436 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	330c      	adds	r3, #12
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002410:	e011      	b.n	8002436 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002412:	f7fe fcf9 	bl	8000e08 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d803      	bhi.n	800242a <HAL_SPI_Transmit+0x268>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d102      	bne.n	8002430 <HAL_SPI_Transmit+0x26e>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002434:	e026      	b.n	8002484 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1b5      	bne.n	80023ac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fb69 	bl	8002b1c <SPI_EndRxTxTransaction>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	77fb      	strb	r3, [r7, #31]
 8002480:	e000      	b.n	8002484 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002494:	7ffb      	ldrb	r3, [r7, #31]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b08a      	sub	sp, #40	; 0x28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024ac:	2301      	movs	r3, #1
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_SPI_TransmitReceive+0x26>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e1fb      	b.n	80028bc <HAL_SPI_TransmitReceive+0x41e>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024cc:	f7fe fc9c 	bl	8000e08 <HAL_GetTick>
 80024d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024e8:	7efb      	ldrb	r3, [r7, #27]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d00e      	beq.n	800250c <HAL_SPI_TransmitReceive+0x6e>
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f4:	d106      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x66>
 80024fe:	7efb      	ldrb	r3, [r7, #27]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d003      	beq.n	800250c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800250a:	e1cd      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_SPI_TransmitReceive+0x80>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_SPI_TransmitReceive+0x80>
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002524:	e1c0      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b04      	cmp	r3, #4
 8002530:	d003      	beq.n	800253a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2205      	movs	r2, #5
 8002536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	887a      	ldrh	r2, [r7, #2]
 800254a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800257c:	d802      	bhi.n	8002584 <HAL_SPI_TransmitReceive+0xe6>
 800257e:	8a3b      	ldrh	r3, [r7, #16]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d908      	bls.n	8002596 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	e007      	b.n	80025a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d007      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025cc:	d97c      	bls.n	80026c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x13e>
 80025d6:	8a7b      	ldrh	r3, [r7, #18]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d169      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	1c9a      	adds	r2, r3, #2
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002600:	e056      	b.n	80026b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d11b      	bne.n	8002648 <HAL_SPI_TransmitReceive+0x1aa>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_SPI_TransmitReceive+0x1aa>
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	2b01      	cmp	r3, #1
 800261e:	d113      	bne.n	8002648 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	1c9a      	adds	r2, r3, #2
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d11c      	bne.n	8002690 <HAL_SPI_TransmitReceive+0x1f2>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	b292      	uxth	r2, r2
 800266e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	1c9a      	adds	r2, r3, #2
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800268c:	2301      	movs	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002690:	f7fe fbba 	bl	8000e08 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269c:	429a      	cmp	r2, r3
 800269e:	d807      	bhi.n	80026b0 <HAL_SPI_TransmitReceive+0x212>
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d003      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80026ae:	e0fb      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1a3      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x164>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d19d      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x164>
 80026c6:	e0df      	b.n	8002888 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_SPI_TransmitReceive+0x23a>
 80026d0:	8a7b      	ldrh	r3, [r7, #18]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	f040 80cb 	bne.w	800286e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d912      	bls.n	8002708 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	1c9a      	adds	r2, r3, #2
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b02      	subs	r3, #2
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002706:	e0b2      	b.n	800286e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	7812      	ldrb	r2, [r2, #0]
 8002714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272e:	e09e      	b.n	800286e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b02      	cmp	r3, #2
 800273c:	d134      	bne.n	80027a8 <HAL_SPI_TransmitReceive+0x30a>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d02f      	beq.n	80027a8 <HAL_SPI_TransmitReceive+0x30a>
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	2b01      	cmp	r3, #1
 800274c:	d12c      	bne.n	80027a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d912      	bls.n	800277e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	1c9a      	adds	r2, r3, #2
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b02      	subs	r3, #2
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800277c:	e012      	b.n	80027a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d148      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x3aa>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d042      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d923      	bls.n	8002816 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	b292      	uxth	r2, r2
 80027da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	1c9a      	adds	r2, r3, #2
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b02      	subs	r3, #2
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d81f      	bhi.n	8002844 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e016      	b.n	8002844 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f103 020c 	add.w	r2, r3, #12
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002848:	f7fe fade 	bl	8000e08 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002854:	429a      	cmp	r2, r3
 8002856:	d803      	bhi.n	8002860 <HAL_SPI_TransmitReceive+0x3c2>
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d102      	bne.n	8002866 <HAL_SPI_TransmitReceive+0x3c8>
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800286c:	e01c      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af5b 	bne.w	8002730 <HAL_SPI_TransmitReceive+0x292>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	f47f af54 	bne.w	8002730 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f945 	bl	8002b1c <SPI_EndRxTxTransaction>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	661a      	str	r2, [r3, #96]	; 0x60
 80028a4:	e000      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80028a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80028b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028d2:	b2db      	uxtb	r3, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028f0:	f7fe fa8a 	bl	8000e08 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002900:	f7fe fa82 	bl	8000e08 <HAL_GetTick>
 8002904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	015b      	lsls	r3, r3, #5
 800290c:	0d1b      	lsrs	r3, r3, #20
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002916:	e054      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d050      	beq.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002920:	f7fe fa72 	bl	8000e08 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	429a      	cmp	r2, r3
 800292e:	d902      	bls.n	8002936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d13d      	bne.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294e:	d111      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002958:	d004      	beq.n	8002964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d107      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297c:	d10f      	bne.n	800299e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800299c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e017      	b.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3b01      	subs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4013      	ands	r3, r2
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d19b      	bne.n	8002918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000

080029f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a02:	f7fe fa01 	bl	8000e08 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002a12:	f7fe f9f9 	bl	8000e08 <HAL_GetTick>
 8002a16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00da      	lsls	r2, r3, #3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	0d1b      	lsrs	r3, r3, #20
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a38:	e060      	b.n	8002afc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a40:	d107      	bne.n	8002a52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d050      	beq.n	8002afc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a5a:	f7fe f9d5 	bl	8000e08 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d902      	bls.n	8002a70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d13d      	bne.n	8002aec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a88:	d111      	bne.n	8002aae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a92:	d004      	beq.n	8002a9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d107      	bne.n	8002aae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab6:	d10f      	bne.n	8002ad8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e010      	b.n	8002b0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d196      	bne.n	8002a3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000000 	.word	0x20000000

08002b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff ff5b 	bl	80029f0 <SPI_WaitFifoStateUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e027      	b.n	8002ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff fec0 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e014      	b.n	8002ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff ff34 	bl	80029f0 <SPI_WaitFifoStateUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e000      	b.n	8002ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002bac:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <MX_FATFS_Init+0x18>)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_FATFS_Init+0x1c>)
 8002bb0:	f003 f9d6 	bl	8005f60 <FATFS_LinkDriver>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <MX_FATFS_Init+0x20>)
 8002bba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	2000218c 	.word	0x2000218c
 8002bc4:	2000000c 	.word	0x2000000c
 8002bc8:	20002188 	.word	0x20002188

08002bcc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002bd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <USER_initialize+0x24>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <USER_initialize+0x24>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000009 	.word	0x20000009

08002c04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <USER_status+0x24>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <USER_status+0x24>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000009 	.word	0x20000009

08002c2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4603      	mov	r3, r0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8002c3c:	7bf8      	ldrb	r0, [r7, #15]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	f003 fc1c 	bl	8006480 <SD_disk_read>
 8002c48:	4603      	mov	r3, r0
	return RES_OK;
  /* USER CODE END READ */
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	4603      	mov	r3, r0
 8002c60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002c62:	7bf8      	ldrb	r0, [r7, #15]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	f003 fc73 	bl	8006554 <SD_disk_write>
 8002c6e:	4603      	mov	r3, r0

  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	603a      	str	r2, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
 8002c84:	460b      	mov	r3, r1
 8002c86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002c88:	79b9      	ldrb	r1, [r7, #6]
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fce4 	bl	800665c <SD_disk_ioctl>
 8002c94:	4603      	mov	r3, r0

    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <disk_status+0x30>)
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	4905      	ldr	r1, [pc, #20]	; (8002cd0 <disk_status+0x30>)
 8002cba:	440a      	add	r2, r1
 8002cbc:	7a12      	ldrb	r2, [r2, #8]
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4798      	blx	r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	200023b8 	.word	0x200023b8

08002cd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <disk_initialize+0x48>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d111      	bne.n	8002d10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <disk_initialize+0x48>)
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	4a09      	ldr	r2, [pc, #36]	; (8002d1c <disk_initialize+0x48>)
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	4906      	ldr	r1, [pc, #24]	; (8002d1c <disk_initialize+0x48>)
 8002d04:	440a      	add	r2, r1
 8002d06:	7a12      	ldrb	r2, [r2, #8]
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4798      	blx	r3
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200023b8 	.word	0x200023b8

08002d20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <disk_read+0x3c>)
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	689c      	ldr	r4, [r3, #8]
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <disk_read+0x3c>)
 8002d40:	4413      	add	r3, r2
 8002d42:	7a18      	ldrb	r0, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	47a0      	blx	r4
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200023b8 	.word	0x200023b8

08002d60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <disk_write+0x3c>)
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	68dc      	ldr	r4, [r3, #12]
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <disk_write+0x3c>)
 8002d80:	4413      	add	r3, r2
 8002d82:	7a18      	ldrb	r0, [r3, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	47a0      	blx	r4
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200023b8 	.word	0x200023b8

08002da0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	603a      	str	r2, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
 8002dac:	460b      	mov	r3, r1
 8002dae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <disk_ioctl+0x38>)
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	79fa      	ldrb	r2, [r7, #7]
 8002dbe:	4906      	ldr	r1, [pc, #24]	; (8002dd8 <disk_ioctl+0x38>)
 8002dc0:	440a      	add	r2, r1
 8002dc2:	7a10      	ldrb	r0, [r2, #8]
 8002dc4:	79b9      	ldrb	r1, [r7, #6]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	4798      	blx	r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]
  return res;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200023b8 	.word	0x200023b8

08002ddc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3301      	adds	r3, #1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002dfe:	89fb      	ldrh	r3, [r7, #14]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3303      	adds	r3, #3
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	3202      	adds	r2, #2
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	3201      	adds	r2, #1
 8002e32:	7812      	ldrb	r2, [r2, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
	return rv;
 8002e44:	68fb      	ldr	r3, [r7, #12]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	887a      	ldrh	r2, [r7, #2]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	1c53      	adds	r3, r2, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1c59      	adds	r1, r3, #1
 8002f04:	6179      	str	r1, [r7, #20]
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f1      	bne.n	8002efa <mem_cpy+0x1a>
	}
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002f22:	b480      	push	{r7}
 8002f24:	b087      	sub	sp, #28
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	617a      	str	r2, [r7, #20]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f3      	bne.n	8002f32 <mem_set+0x10>
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	61fa      	str	r2, [r7, #28]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	61ba      	str	r2, [r7, #24]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	1acb      	subs	r3, r1, r3
 8002f84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <mem_cmp+0x40>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0eb      	beq.n	8002f70 <mem_cmp+0x18>

	return r;
 8002f98:	697b      	ldr	r3, [r7, #20]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002fb0:	e002      	b.n	8002fb8 <chk_chr+0x12>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <chk_chr+0x26>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d1f2      	bne.n	8002fb2 <chk_chr+0xc>
	return *str;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	781b      	ldrb	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e029      	b.n	8003044 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002ff0:	4a27      	ldr	r2, [pc, #156]	; (8003090 <chk_lock+0xb4>)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	4413      	add	r3, r2
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01d      	beq.n	800303a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <chk_lock+0xb4>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	4413      	add	r3, r2
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d116      	bne.n	800303e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <chk_lock+0xb4>)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003020:	429a      	cmp	r2, r3
 8003022:	d10c      	bne.n	800303e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <chk_lock+0xb4>)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	3308      	adds	r3, #8
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003034:	429a      	cmp	r2, r3
 8003036:	d102      	bne.n	800303e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003038:	e007      	b.n	800304a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800303a:	2301      	movs	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d9d2      	bls.n	8002ff0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d109      	bne.n	8003064 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <chk_lock+0x80>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d101      	bne.n	8003060 <chk_lock+0x84>
 800305c:	2300      	movs	r3, #0
 800305e:	e010      	b.n	8003082 <chk_lock+0xa6>
 8003060:	2312      	movs	r3, #18
 8003062:	e00e      	b.n	8003082 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <chk_lock+0xa0>
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <chk_lock+0xb4>)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	4413      	add	r3, r2
 8003072:	330c      	adds	r3, #12
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d101      	bne.n	8003080 <chk_lock+0xa4>
 800307c:	2310      	movs	r3, #16
 800307e:	e000      	b.n	8003082 <chk_lock+0xa6>
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20002198 	.word	0x20002198

08003094 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e002      	b.n	80030a6 <enq_lock+0x12>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3301      	adds	r3, #1
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d806      	bhi.n	80030ba <enq_lock+0x26>
 80030ac:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <enq_lock+0x40>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	4413      	add	r3, r2
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f2      	bne.n	80030a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20002198 	.word	0x20002198

080030d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e01f      	b.n	8003128 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80030e8:	4a41      	ldr	r2, [pc, #260]	; (80031f0 <inc_lock+0x118>)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	4413      	add	r3, r2
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d113      	bne.n	8003122 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80030fa:	4a3d      	ldr	r2, [pc, #244]	; (80031f0 <inc_lock+0x118>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800310a:	429a      	cmp	r2, r3
 800310c:	d109      	bne.n	8003122 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800310e:	4a38      	ldr	r2, [pc, #224]	; (80031f0 <inc_lock+0x118>)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	4413      	add	r3, r2
 8003116:	3308      	adds	r3, #8
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800311e:	429a      	cmp	r2, r3
 8003120:	d006      	beq.n	8003130 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d9dc      	bls.n	80030e8 <inc_lock+0x10>
 800312e:	e000      	b.n	8003132 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003130:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d132      	bne.n	800319e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e002      	b.n	8003144 <inc_lock+0x6c>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3301      	adds	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d806      	bhi.n	8003158 <inc_lock+0x80>
 800314a:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <inc_lock+0x118>)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f2      	bne.n	800313e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d101      	bne.n	8003162 <inc_lock+0x8a>
 800315e:	2300      	movs	r3, #0
 8003160:	e040      	b.n	80031e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4922      	ldr	r1, [pc, #136]	; (80031f0 <inc_lock+0x118>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	440b      	add	r3, r1
 800316e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	491e      	ldr	r1, [pc, #120]	; (80031f0 <inc_lock+0x118>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	440b      	add	r3, r1
 800317c:	3304      	adds	r3, #4
 800317e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	491a      	ldr	r1, [pc, #104]	; (80031f0 <inc_lock+0x118>)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	440b      	add	r3, r1
 800318c:	3308      	adds	r3, #8
 800318e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003190:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <inc_lock+0x118>)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	4413      	add	r3, r2
 8003198:	330c      	adds	r3, #12
 800319a:	2200      	movs	r2, #0
 800319c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <inc_lock+0xe0>
 80031a4:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <inc_lock+0x118>)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	330c      	adds	r3, #12
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <inc_lock+0xe0>
 80031b4:	2300      	movs	r3, #0
 80031b6:	e015      	b.n	80031e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d108      	bne.n	80031d0 <inc_lock+0xf8>
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <inc_lock+0x118>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	4413      	add	r3, r2
 80031c6:	330c      	adds	r3, #12
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	e001      	b.n	80031d4 <inc_lock+0xfc>
 80031d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031d4:	4906      	ldr	r1, [pc, #24]	; (80031f0 <inc_lock+0x118>)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	440b      	add	r3, r1
 80031dc:	330c      	adds	r3, #12
 80031de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3301      	adds	r3, #1
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	20002198 	.word	0x20002198

080031f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d825      	bhi.n	8003254 <dec_lock+0x60>
		n = Files[i].ctr;
 8003208:	4a17      	ldr	r2, [pc, #92]	; (8003268 <dec_lock+0x74>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	4413      	add	r3, r2
 8003210:	330c      	adds	r3, #12
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003216:	89fb      	ldrh	r3, [r7, #14]
 8003218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321c:	d101      	bne.n	8003222 <dec_lock+0x2e>
 800321e:	2300      	movs	r3, #0
 8003220:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <dec_lock+0x3a>
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	3b01      	subs	r3, #1
 800322c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <dec_lock+0x74>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	330c      	adds	r3, #12
 8003238:	89fa      	ldrh	r2, [r7, #14]
 800323a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <dec_lock+0x5a>
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <dec_lock+0x74>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	4413      	add	r3, r2
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	737b      	strb	r3, [r7, #13]
 8003252:	e001      	b.n	8003258 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003254:	2302      	movs	r3, #2
 8003256:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003258:	7b7b      	ldrb	r3, [r7, #13]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20002198 	.word	0x20002198

0800326c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e010      	b.n	800329c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800327a:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <clear_lock+0x44>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d105      	bne.n	8003296 <clear_lock+0x2a>
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <clear_lock+0x44>)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3301      	adds	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d9eb      	bls.n	800327a <clear_lock+0xe>
	}
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	20002198 	.word	0x20002198

080032b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	78db      	ldrb	r3, [r3, #3]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d034      	beq.n	8003332 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7858      	ldrb	r0, [r3, #1]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80032d8:	2301      	movs	r3, #1
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	f7ff fd40 	bl	8002d60 <disk_write>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e022      	b.n	8003332 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	1ad2      	subs	r2, r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d217      	bcs.n	8003332 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	789b      	ldrb	r3, [r3, #2]
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	e010      	b.n	800332c <sync_window+0x78>
					wsect += fs->fsize;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4413      	add	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7858      	ldrb	r0, [r3, #1]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800331e:	2301      	movs	r3, #1
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	f7ff fd1d 	bl	8002d60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3b01      	subs	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d8eb      	bhi.n	800330a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d01b      	beq.n	800338c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ffad 	bl	80032b4 <sync_window>
 800335a:	4603      	mov	r3, r0
 800335c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d113      	bne.n	800338c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7858      	ldrb	r0, [r3, #1]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800336e:	2301      	movs	r3, #1
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	f7ff fcd5 	bl	8002d20 <disk_read>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
 8003380:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ff87 	bl	80032b4 <sync_window>
 80033a6:	4603      	mov	r3, r0
 80033a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d159      	bne.n	8003464 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d149      	bne.n	800344c <sync_fs+0xb4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	791b      	ldrb	r3, [r3, #4]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d145      	bne.n	800344c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	899b      	ldrh	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	2100      	movs	r1, #0
 80033ce:	f7ff fda8 	bl	8002f22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3338      	adds	r3, #56	; 0x38
 80033d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80033da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fd37 	bl	8002e52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3338      	adds	r3, #56	; 0x38
 80033e8:	4921      	ldr	r1, [pc, #132]	; (8003470 <sync_fs+0xd8>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fd4c 	bl	8002e88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3338      	adds	r3, #56	; 0x38
 80033f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80033f8:	491e      	ldr	r1, [pc, #120]	; (8003474 <sync_fs+0xdc>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fd44 	bl	8002e88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3338      	adds	r3, #56	; 0x38
 8003404:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f7ff fd3a 	bl	8002e88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3338      	adds	r3, #56	; 0x38
 8003418:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f7ff fd30 	bl	8002e88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7858      	ldrb	r0, [r3, #1]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003440:	2301      	movs	r3, #1
 8003442:	f7ff fc8d 	bl	8002d60 <disk_write>
			fs->fsi_flag = 0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fca3 	bl	8002da0 <disk_ioctl>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <sync_fs+0xcc>
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	41615252 	.word	0x41615252
 8003474:	61417272 	.word	0x61417272

08003478 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	3b02      	subs	r3, #2
 8003486:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	3b02      	subs	r3, #2
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d301      	bcc.n	8003498 <clust2sect+0x20>
 8003494:	2300      	movs	r3, #0
 8003496:	e008      	b.n	80034aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	895b      	ldrh	r3, [r3, #10]
 800349c:	461a      	mov	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	fb03 f202 	mul.w	r2, r3, r2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	4413      	add	r3, r2
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d904      	bls.n	80034d6 <get_fat+0x20>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e0bb      	b.n	8003654 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	f000 8083 	beq.w	80035f2 <get_fat+0x13c>
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	f300 80a7 	bgt.w	8003640 <get_fat+0x18a>
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d002      	beq.n	80034fc <get_fat+0x46>
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d056      	beq.n	80035a8 <get_fat+0xf2>
 80034fa:	e0a1      	b.n	8003640 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	899b      	ldrh	r3, [r3, #12]
 8003512:	4619      	mov	r1, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	fbb3 f3f1 	udiv	r3, r3, r1
 800351a:	4413      	add	r3, r2
 800351c:	4619      	mov	r1, r3
 800351e:	6938      	ldr	r0, [r7, #16]
 8003520:	f7ff ff0c 	bl	800333c <move_window>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 808d 	bne.w	8003646 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	60fa      	str	r2, [r7, #12]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	8992      	ldrh	r2, [r2, #12]
 8003536:	fbb3 f1f2 	udiv	r1, r3, r2
 800353a:	fb01 f202 	mul.w	r2, r1, r2
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003548:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	899b      	ldrh	r3, [r3, #12]
 8003552:	4619      	mov	r1, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	fbb3 f3f1 	udiv	r3, r3, r1
 800355a:	4413      	add	r3, r2
 800355c:	4619      	mov	r1, r3
 800355e:	6938      	ldr	r0, [r7, #16]
 8003560:	f7ff feec 	bl	800333c <move_window>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d16f      	bne.n	800364a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	899b      	ldrh	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	fbb3 f1f2 	udiv	r1, r3, r2
 8003576:	fb01 f202 	mul.w	r2, r1, r2
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <get_fat+0xe8>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	e002      	b.n	80035a4 <get_fat+0xee>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	617b      	str	r3, [r7, #20]
			break;
 80035a6:	e055      	b.n	8003654 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	899b      	ldrh	r3, [r3, #12]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4619      	mov	r1, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80035bc:	4413      	add	r3, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	6938      	ldr	r0, [r7, #16]
 80035c2:	f7ff febb 	bl	800333c <move_window>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d140      	bne.n	800364e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	8992      	ldrh	r2, [r2, #12]
 80035da:	fbb3 f0f2 	udiv	r0, r3, r2
 80035de:	fb00 f202 	mul.w	r2, r0, r2
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fbf8 	bl	8002ddc <ld_word>
 80035ec:	4603      	mov	r3, r0
 80035ee:	617b      	str	r3, [r7, #20]
			break;
 80035f0:	e030      	b.n	8003654 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	899b      	ldrh	r3, [r3, #12]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	4413      	add	r3, r2
 8003608:	4619      	mov	r1, r3
 800360a:	6938      	ldr	r0, [r7, #16]
 800360c:	f7ff fe96 	bl	800333c <move_window>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	8992      	ldrh	r2, [r2, #12]
 8003624:	fbb3 f0f2 	udiv	r0, r3, r2
 8003628:	fb00 f202 	mul.w	r2, r0, r2
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	440b      	add	r3, r1
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fbeb 	bl	8002e0c <ld_dword>
 8003636:	4603      	mov	r3, r0
 8003638:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800363c:	617b      	str	r3, [r7, #20]
			break;
 800363e:	e009      	b.n	8003654 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003640:	2301      	movs	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e006      	b.n	8003654 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003646:	bf00      	nop
 8003648:	e004      	b.n	8003654 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800364a:	bf00      	nop
 800364c:	e002      	b.n	8003654 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003652:	bf00      	nop
		}
	}

	return val;
 8003654:	697b      	ldr	r3, [r7, #20]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800365e:	b590      	push	{r4, r7, lr}
 8003660:	b089      	sub	sp, #36	; 0x24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800366a:	2302      	movs	r3, #2
 800366c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	f240 8102 	bls.w	800387a <put_fat+0x21c>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	f080 80fc 	bcs.w	800387a <put_fat+0x21c>
		switch (fs->fs_type) {
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b03      	cmp	r3, #3
 8003688:	f000 80b6 	beq.w	80037f8 <put_fat+0x19a>
 800368c:	2b03      	cmp	r3, #3
 800368e:	f300 80fd 	bgt.w	800388c <put_fat+0x22e>
 8003692:	2b01      	cmp	r3, #1
 8003694:	d003      	beq.n	800369e <put_fat+0x40>
 8003696:	2b02      	cmp	r3, #2
 8003698:	f000 8083 	beq.w	80037a2 <put_fat+0x144>
 800369c:	e0f6      	b.n	800388c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4413      	add	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	899b      	ldrh	r3, [r3, #12]
 80036b4:	4619      	mov	r1, r3
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80036bc:	4413      	add	r3, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fe3b 	bl	800333c <move_window>
 80036c6:	4603      	mov	r3, r0
 80036c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f040 80d6 	bne.w	800387e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	61ba      	str	r2, [r7, #24]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	8992      	ldrh	r2, [r2, #12]
 80036e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80036e6:	fb00 f202 	mul.w	r2, r0, r2
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	440b      	add	r3, r1
 80036ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <put_fat+0xb8>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	b25b      	sxtb	r3, r3
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	b25a      	sxtb	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	b25b      	sxtb	r3, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	b25b      	sxtb	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e001      	b.n	800371a <put_fat+0xbc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	899b      	ldrh	r3, [r3, #12]
 800372c:	4619      	mov	r1, r3
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	fbb3 f3f1 	udiv	r3, r3, r1
 8003734:	4413      	add	r3, r2
 8003736:	4619      	mov	r1, r3
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fdff 	bl	800333c <move_window>
 800373e:	4603      	mov	r3, r0
 8003740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003742:	7ffb      	ldrb	r3, [r7, #31]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 809c 	bne.w	8003882 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	899b      	ldrh	r3, [r3, #12]
 8003754:	461a      	mov	r2, r3
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	fbb3 f0f2 	udiv	r0, r3, r2
 800375c:	fb00 f202 	mul.w	r2, r0, r2
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	440b      	add	r3, r1
 8003764:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <put_fat+0x11a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e00e      	b.n	8003796 <put_fat+0x138>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b25b      	sxtb	r3, r3
 800377e:	f023 030f 	bic.w	r3, r3, #15
 8003782:	b25a      	sxtb	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	b25b      	sxtb	r3, r3
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	b25b      	sxtb	r3, r3
 8003790:	4313      	orrs	r3, r2
 8003792:	b25b      	sxtb	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	70da      	strb	r2, [r3, #3]
			break;
 80037a0:	e074      	b.n	800388c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	899b      	ldrh	r3, [r3, #12]
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b6:	4413      	add	r3, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff fdbe 	bl	800333c <move_window>
 80037c0:	4603      	mov	r3, r0
 80037c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80037c4:	7ffb      	ldrb	r3, [r7, #31]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d15d      	bne.n	8003886 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	8992      	ldrh	r2, [r2, #12]
 80037d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80037dc:	fb00 f202 	mul.w	r2, r0, r2
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	b292      	uxth	r2, r2
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fb31 	bl	8002e52 <st_word>
			fs->wflag = 1;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	70da      	strb	r2, [r3, #3]
			break;
 80037f6:	e049      	b.n	800388c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	899b      	ldrh	r3, [r3, #12]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	b29b      	uxth	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	fbb3 f3f1 	udiv	r3, r3, r1
 800380c:	4413      	add	r3, r2
 800380e:	4619      	mov	r1, r3
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fd93 	bl	800333c <move_window>
 8003816:	4603      	mov	r3, r0
 8003818:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800381a:	7ffb      	ldrb	r3, [r7, #31]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d134      	bne.n	800388a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	8992      	ldrh	r2, [r2, #12]
 8003834:	fbb3 f0f2 	udiv	r0, r3, r2
 8003838:	fb00 f202 	mul.w	r2, r0, r2
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	440b      	add	r3, r1
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fae3 	bl	8002e0c <ld_dword>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800384c:	4323      	orrs	r3, r4
 800384e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	8992      	ldrh	r2, [r2, #12]
 800385e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003862:	fb00 f202 	mul.w	r2, r0, r2
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	440b      	add	r3, r1
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fb0b 	bl	8002e88 <st_dword>
			fs->wflag = 1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	70da      	strb	r2, [r3, #3]
			break;
 8003878:	e008      	b.n	800388c <put_fat+0x22e>
		}
	}
 800387a:	bf00      	nop
 800387c:	e006      	b.n	800388c <put_fat+0x22e>
			if (res != FR_OK) break;
 800387e:	bf00      	nop
 8003880:	e004      	b.n	800388c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <put_fat+0x22e>
			if (res != FR_OK) break;
 800388a:	bf00      	nop
	return res;
 800388c:	7ffb      	ldrb	r3, [r7, #31]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd90      	pop	{r4, r7, pc}

08003896 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b088      	sub	sp, #32
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d904      	bls.n	80038bc <remove_chain+0x26>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d301      	bcc.n	80038c0 <remove_chain+0x2a>
 80038bc:	2302      	movs	r3, #2
 80038be:	e04b      	b.n	8003958 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	69b8      	ldr	r0, [r7, #24]
 80038ce:	f7ff fec6 	bl	800365e <put_fat>
 80038d2:	4603      	mov	r3, r0
 80038d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80038d6:	7ffb      	ldrb	r3, [r7, #31]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <remove_chain+0x4a>
 80038dc:	7ffb      	ldrb	r3, [r7, #31]
 80038de:	e03b      	b.n	8003958 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fde7 	bl	80034b6 <get_fat>
 80038e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d031      	beq.n	8003954 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <remove_chain+0x64>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e02e      	b.n	8003958 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d101      	bne.n	8003906 <remove_chain+0x70>
 8003902:	2301      	movs	r3, #1
 8003904:	e028      	b.n	8003958 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003906:	2200      	movs	r2, #0
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	69b8      	ldr	r0, [r7, #24]
 800390c:	f7ff fea7 	bl	800365e <put_fat>
 8003910:	4603      	mov	r3, r0
 8003912:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003914:	7ffb      	ldrb	r3, [r7, #31]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <remove_chain+0x88>
 800391a:	7ffb      	ldrb	r3, [r7, #31]
 800391c:	e01c      	b.n	8003958 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	3b02      	subs	r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d20b      	bcs.n	8003944 <remove_chain+0xae>
			fs->free_clst++;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	791b      	ldrb	r3, [r3, #4]
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	b2da      	uxtb	r2, r3
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d3c6      	bcc.n	80038e0 <remove_chain+0x4a>
 8003952:	e000      	b.n	8003956 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003954:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <create_chain+0x2c>
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	429a      	cmp	r2, r3
 800398a:	d31b      	bcc.n	80039c4 <create_chain+0x64>
 800398c:	2301      	movs	r3, #1
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	e018      	b.n	80039c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003992:	6839      	ldr	r1, [r7, #0]
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fd8e 	bl	80034b6 <get_fat>
 800399a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d801      	bhi.n	80039a6 <create_chain+0x46>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e070      	b.n	8003a88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d101      	bne.n	80039b2 <create_chain+0x52>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	e06a      	b.n	8003a88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d201      	bcs.n	80039c0 <create_chain+0x60>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	e063      	b.n	8003a88 <create_chain+0x128>
		scl = clst;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	3301      	adds	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d307      	bcc.n	80039e8 <create_chain+0x88>
				ncl = 2;
 80039d8:	2302      	movs	r3, #2
 80039da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d901      	bls.n	80039e8 <create_chain+0x88>
 80039e4:	2300      	movs	r3, #0
 80039e6:	e04f      	b.n	8003a88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fd63 	bl	80034b6 <get_fat>
 80039f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d003      	beq.n	8003a06 <create_chain+0xa6>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d101      	bne.n	8003a0a <create_chain+0xaa>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	e03e      	b.n	8003a88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d1da      	bne.n	80039c8 <create_chain+0x68>
 8003a12:	2300      	movs	r3, #0
 8003a14:	e038      	b.n	8003a88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003a16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	69f9      	ldr	r1, [r7, #28]
 8003a1e:	6938      	ldr	r0, [r7, #16]
 8003a20:	f7ff fe1d 	bl	800365e <put_fat>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <create_chain+0xe2>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	6839      	ldr	r1, [r7, #0]
 8003a38:	6938      	ldr	r0, [r7, #16]
 8003a3a:	f7ff fe10 	bl	800365e <put_fat>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d116      	bne.n	8003a76 <create_chain+0x116>
		fs->last_clst = ncl;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	3b02      	subs	r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d804      	bhi.n	8003a66 <create_chain+0x106>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	1e5a      	subs	r2, r3, #1
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	791b      	ldrb	r3, [r3, #4]
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	711a      	strb	r2, [r3, #4]
 8003a74:	e007      	b.n	8003a86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <create_chain+0x122>
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	e000      	b.n	8003a84 <create_chain+0x124>
 8003a82:	2301      	movs	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003a86:	69fb      	ldr	r3, [r7, #28]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	899b      	ldrh	r3, [r3, #12]
 8003aac:	461a      	mov	r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	8952      	ldrh	r2, [r2, #10]
 8003ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1d1a      	adds	r2, r3, #4
 8003ac2:	613a      	str	r2, [r7, #16]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <clmt_clust+0x42>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e010      	b.n	8003af4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d307      	bcc.n	8003aea <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003ae8:	e7e9      	b.n	8003abe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003aea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b16:	d204      	bcs.n	8003b22 <dir_sdi+0x22>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003b22:	2302      	movs	r3, #2
 8003b24:	e071      	b.n	8003c0a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <dir_sdi+0x46>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d902      	bls.n	8003b46 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10c      	bne.n	8003b66 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	8912      	ldrh	r2, [r2, #8]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d301      	bcc.n	8003b5c <dir_sdi+0x5c>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e056      	b.n	8003c0a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	61da      	str	r2, [r3, #28]
 8003b64:	e02d      	b.n	8003bc2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	895b      	ldrh	r3, [r3, #10]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	899b      	ldrh	r3, [r3, #12]
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003b76:	e019      	b.n	8003bac <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6979      	ldr	r1, [r7, #20]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fc9a 	bl	80034b6 <get_fat>
 8003b82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d101      	bne.n	8003b90 <dir_sdi+0x90>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e03c      	b.n	8003c0a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d904      	bls.n	8003ba0 <dir_sdi+0xa0>
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d301      	bcc.n	8003ba4 <dir_sdi+0xa4>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e032      	b.n	8003c0a <dir_sdi+0x10a>
			ofs -= csz;
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d2e1      	bcs.n	8003b78 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003bb4:	6979      	ldr	r1, [r7, #20]
 8003bb6:	6938      	ldr	r0, [r7, #16]
 8003bb8:	f7ff fc5e 	bl	8003478 <clust2sect>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <dir_sdi+0xd4>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e01a      	b.n	8003c0a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	899b      	ldrh	r3, [r3, #12]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	899b      	ldrh	r3, [r3, #12]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	fbb3 f0f2 	udiv	r0, r3, r2
 8003bfc:	fb00 f202 	mul.w	r2, r0, r2
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	18ca      	adds	r2, r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	3320      	adds	r3, #32
 8003c28:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <dir_next+0x28>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c38:	d301      	bcc.n	8003c3e <dir_next+0x2c>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e0bb      	b.n	8003db6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	899b      	ldrh	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c4a:	fb01 f202 	mul.w	r2, r1, r2
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 809d 	bne.w	8003d90 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	8912      	ldrh	r2, [r2, #8]
 8003c70:	4293      	cmp	r3, r2
 8003c72:	f0c0 808d 	bcc.w	8003d90 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61da      	str	r2, [r3, #28]
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	e09a      	b.n	8003db6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	899b      	ldrh	r3, [r3, #12]
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	8952      	ldrh	r2, [r2, #10]
 8003c90:	3a01      	subs	r2, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d17b      	bne.n	8003d90 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7ff fc08 	bl	80034b6 <get_fat>
 8003ca6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d801      	bhi.n	8003cb2 <dir_next+0xa0>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e081      	b.n	8003db6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d101      	bne.n	8003cbe <dir_next+0xac>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07b      	b.n	8003db6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d359      	bcc.n	8003d7c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	61da      	str	r2, [r3, #28]
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	e06e      	b.n	8003db6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7ff fe3d 	bl	8003960 <create_chain>
 8003ce6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <dir_next+0xe0>
 8003cee:	2307      	movs	r3, #7
 8003cf0:	e061      	b.n	8003db6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <dir_next+0xea>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e05c      	b.n	8003db6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d101      	bne.n	8003d08 <dir_next+0xf6>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e056      	b.n	8003db6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fad3 	bl	80032b4 <sync_window>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <dir_next+0x106>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e04e      	b.n	8003db6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	899b      	ldrh	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	2100      	movs	r1, #0
 8003d26:	f7ff f8fc 	bl	8002f22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fba1 	bl	8003478 <clust2sect>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3c:	e012      	b.n	8003d64 <dir_next+0x152>
						fs->wflag = 1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff fab5 	bl	80032b4 <sync_window>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <dir_next+0x142>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e030      	b.n	8003db6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	3301      	adds	r3, #1
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	635a      	str	r2, [r3, #52]	; 0x34
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	895b      	ldrh	r3, [r3, #10]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d3e6      	bcc.n	8003d3e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad2      	subs	r2, r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff fb77 	bl	8003478 <clust2sect>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	899b      	ldrh	r3, [r3, #12]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	fbb3 f0f2 	udiv	r0, r3, r2
 8003da8:	fb00 f202 	mul.w	r2, r0, r2
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	18ca      	adds	r2, r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b086      	sub	sp, #24
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fe95 	bl	8003b00 <dir_sdi>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d12b      	bne.n	8003e38 <dir_alloc+0x7a>
		n = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4619      	mov	r1, r3
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff faa6 	bl	800333c <move_window>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d11d      	bne.n	8003e36 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2be5      	cmp	r3, #229	; 0xe5
 8003e02:	d004      	beq.n	8003e0e <dir_alloc+0x50>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3301      	adds	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d102      	bne.n	8003e22 <dir_alloc+0x64>
 8003e1c:	e00c      	b.n	8003e38 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003e22:	2101      	movs	r1, #1
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fef4 	bl	8003c12 <dir_next>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0d7      	beq.n	8003de4 <dir_alloc+0x26>
 8003e34:	e000      	b.n	8003e38 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003e36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d101      	bne.n	8003e42 <dir_alloc+0x84>
 8003e3e:	2307      	movs	r3, #7
 8003e40:	75fb      	strb	r3, [r7, #23]
	return res;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	331a      	adds	r3, #26
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe ffbe 	bl	8002ddc <ld_word>
 8003e60:	4603      	mov	r3, r0
 8003e62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d109      	bne.n	8003e80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe ffb3 	bl	8002ddc <ld_word>
 8003e76:	4603      	mov	r3, r0
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003e80:	68fb      	ldr	r3, [r7, #12]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	331a      	adds	r3, #26
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	b292      	uxth	r2, r2
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe ffd6 	bl	8002e52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d109      	bne.n	8003ec2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f103 0214 	add.w	r2, r3, #20
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f7fe ffc8 	bl	8002e52 <st_word>
	}
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	331a      	adds	r3, #26
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe ff7e 	bl	8002ddc <ld_word>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <cmp_lfn+0x1e>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e059      	b.n	8003f9e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003f00:	2301      	movs	r3, #1
 8003f02:	81fb      	strh	r3, [r7, #14]
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e033      	b.n	8003f72 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003f0a:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <cmp_lfn+0xdc>)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe ff5f 	bl	8002ddc <ld_word>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2bfe      	cmp	r3, #254	; 0xfe
 8003f2c:	d812      	bhi.n	8003f54 <cmp_lfn+0x88>
 8003f2e:	89bb      	ldrh	r3, [r7, #12]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f002 f861 	bl	8005ff8 <ff_wtoupper>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461c      	mov	r4, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	617a      	str	r2, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f002 f855 	bl	8005ff8 <ff_wtoupper>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d001      	beq.n	8003f58 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003f54:	2300      	movs	r3, #0
 8003f56:	e022      	b.n	8003f9e <cmp_lfn+0xd2>
			}
			wc = uc;
 8003f58:	89bb      	ldrh	r3, [r7, #12]
 8003f5a:	81fb      	strh	r3, [r7, #14]
 8003f5c:	e006      	b.n	8003f6c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003f5e:	89bb      	ldrh	r3, [r7, #12]
 8003f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d001      	beq.n	8003f6c <cmp_lfn+0xa0>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e018      	b.n	8003f9e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	d9c8      	bls.n	8003f0a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00b      	beq.n	8003f9c <cmp_lfn+0xd0>
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <cmp_lfn+0xd0>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <cmp_lfn+0xd0>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003f9c:	2301      	movs	r3, #1
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08006a94 	.word	0x08006a94

08003fac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	460b      	mov	r3, r1
 8003fbc:	71fb      	strb	r3, [r7, #7]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	330d      	adds	r3, #13
 8003fc6:	79ba      	ldrb	r2, [r7, #6]
 8003fc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	330b      	adds	r3, #11
 8003fce:	220f      	movs	r2, #15
 8003fd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	331a      	adds	r3, #26
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe ff36 	bl	8002e52 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	82fb      	strh	r3, [r7, #22]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003ffe:	8afb      	ldrh	r3, [r7, #22]
 8004000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <put_lfn+0x6c>
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	61fa      	str	r2, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <put_lfn+0xcc>)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4413      	add	r3, r2
 8004026:	8afa      	ldrh	r2, [r7, #22]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe ff11 	bl	8002e52 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <put_lfn+0x90>
 8004036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800403a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	3301      	adds	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d9da      	bls.n	8003ffe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004048:	8afb      	ldrh	r3, [r7, #22]
 800404a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404e:	4293      	cmp	r3, r2
 8004050:	d006      	beq.n	8004060 <put_lfn+0xb4>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <put_lfn+0xbc>
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004066:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	79fa      	ldrb	r2, [r7, #7]
 800406c:	701a      	strb	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	08006a94 	.word	0x08006a94

0800407c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	; 0x30
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800408a:	220b      	movs	r2, #11
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7fe ff26 	bl	8002ee0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b05      	cmp	r3, #5
 8004098:	d92b      	bls.n	80040f2 <gen_numname+0x76>
		sr = seq;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800409e:	e022      	b.n	80040e6 <gen_numname+0x6a>
			wc = *lfn++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ae:	e017      	b.n	80040e0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005a      	lsls	r2, r3, #1
 80040b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80040be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <gen_numname+0x5e>
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80040d4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80040d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	3301      	adds	r3, #1
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	d9e4      	bls.n	80040b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1d8      	bne.n	80040a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80040f2:	2307      	movs	r3, #7
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3330      	adds	r3, #48	; 0x30
 8004102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800410a:	2b39      	cmp	r3, #57	; 0x39
 800410c:	d904      	bls.n	8004118 <gen_numname+0x9c>
 800410e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004112:	3307      	adds	r3, #7
 8004114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	1e5a      	subs	r2, r3, #1
 800411c:	62ba      	str	r2, [r7, #40]	; 0x28
 800411e:	3330      	adds	r3, #48	; 0x30
 8004120:	443b      	add	r3, r7
 8004122:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004126:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1df      	bne.n	80040f6 <gen_numname+0x7a>
	ns[i] = '~';
 8004136:	f107 0214 	add.w	r2, r7, #20
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	4413      	add	r3, r2
 800413e:	227e      	movs	r2, #126	; 0x7e
 8004140:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
 8004146:	e002      	b.n	800414e <gen_numname+0xd2>
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	3301      	adds	r3, #1
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	429a      	cmp	r2, r3
 8004154:	d205      	bcs.n	8004162 <gen_numname+0xe6>
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	4413      	add	r3, r2
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b20      	cmp	r3, #32
 8004160:	d1f2      	bne.n	8004148 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	2b07      	cmp	r3, #7
 8004166:	d807      	bhi.n	8004178 <gen_numname+0xfc>
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	62ba      	str	r2, [r7, #40]	; 0x28
 800416e:	3330      	adds	r3, #48	; 0x30
 8004170:	443b      	add	r3, r7
 8004172:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004176:	e000      	b.n	800417a <gen_numname+0xfe>
 8004178:	2120      	movs	r1, #32
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	627a      	str	r2, [r7, #36]	; 0x24
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	460a      	mov	r2, r1
 8004186:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	2b07      	cmp	r3, #7
 800418c:	d9e9      	bls.n	8004162 <gen_numname+0xe6>
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	3730      	adds	r7, #48	; 0x30
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80041a4:	230b      	movs	r3, #11
 80041a6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	0852      	lsrs	r2, r2, #1
 80041ae:	01db      	lsls	r3, r3, #7
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	1c59      	adds	r1, r3, #1
 80041b8:	6079      	str	r1, [r7, #4]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ed      	bne.n	80041a8 <sum_sfn+0x10>
	return sum;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80041e8:	2100      	movs	r1, #0
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fc88 	bl	8003b00 <dir_sdi>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <dir_find+0x24>
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	e0a9      	b.n	8004352 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80041fe:	23ff      	movs	r3, #255	; 0xff
 8004200:	753b      	strb	r3, [r7, #20]
 8004202:	7d3b      	ldrb	r3, [r7, #20]
 8004204:	757b      	strb	r3, [r7, #21]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f04f 32ff 	mov.w	r2, #4294967295
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4619      	mov	r1, r3
 8004214:	6938      	ldr	r0, [r7, #16]
 8004216:	f7ff f891 	bl	800333c <move_window>
 800421a:	4603      	mov	r3, r0
 800421c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f040 8090 	bne.w	8004346 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800422e:	7dbb      	ldrb	r3, [r7, #22]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <dir_find+0x60>
 8004234:	2304      	movs	r3, #4
 8004236:	75fb      	strb	r3, [r7, #23]
 8004238:	e08a      	b.n	8004350 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	330b      	adds	r3, #11
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7bfa      	ldrb	r2, [r7, #15]
 800424c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800424e:	7dbb      	ldrb	r3, [r7, #22]
 8004250:	2be5      	cmp	r3, #229	; 0xe5
 8004252:	d007      	beq.n	8004264 <dir_find+0x8a>
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <dir_find+0x98>
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d006      	beq.n	8004272 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004264:	23ff      	movs	r3, #255	; 0xff
 8004266:	757b      	strb	r3, [r7, #21]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
 8004270:	e05e      	b.n	8004330 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b0f      	cmp	r3, #15
 8004276:	d136      	bne.n	80042e6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d154      	bne.n	8004330 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004286:	7dbb      	ldrb	r3, [r7, #22]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	7b5b      	ldrb	r3, [r3, #13]
 8004296:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004298:	7dbb      	ldrb	r3, [r7, #22]
 800429a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429e:	75bb      	strb	r3, [r7, #22]
 80042a0:	7dbb      	ldrb	r3, [r7, #22]
 80042a2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80042ac:	7dba      	ldrb	r2, [r7, #22]
 80042ae:	7d7b      	ldrb	r3, [r7, #21]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d115      	bne.n	80042e0 <dir_find+0x106>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	330d      	adds	r3, #13
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	7d3a      	ldrb	r2, [r7, #20]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d10e      	bne.n	80042e0 <dir_find+0x106>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7ff fdfd 	bl	8003ecc <cmp_lfn>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <dir_find+0x106>
 80042d8:	7d7b      	ldrb	r3, [r7, #21]
 80042da:	3b01      	subs	r3, #1
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e000      	b.n	80042e2 <dir_find+0x108>
 80042e0:	23ff      	movs	r3, #255	; 0xff
 80042e2:	757b      	strb	r3, [r7, #21]
 80042e4:	e024      	b.n	8004330 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80042e6:	7d7b      	ldrb	r3, [r7, #21]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <dir_find+0x126>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff51 	bl	8004198 <sum_sfn>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	7d3b      	ldrb	r3, [r7, #20]
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d024      	beq.n	800434a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <dir_find+0x14a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a18      	ldr	r0, [r3, #32]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3324      	adds	r3, #36	; 0x24
 8004316:	220b      	movs	r2, #11
 8004318:	4619      	mov	r1, r3
 800431a:	f7fe fe1d 	bl	8002f58 <mem_cmp>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d014      	beq.n	800434e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004324:	23ff      	movs	r3, #255	; 0xff
 8004326:	757b      	strb	r3, [r7, #21]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f04f 32ff 	mov.w	r2, #4294967295
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004330:	2100      	movs	r1, #0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff fc6d 	bl	8003c12 <dir_next>
 8004338:	4603      	mov	r3, r0
 800433a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f43f af65 	beq.w	800420e <dir_find+0x34>
 8004344:	e004      	b.n	8004350 <dir_find+0x176>
		if (res != FR_OK) break;
 8004346:	bf00      	nop
 8004348:	e002      	b.n	8004350 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800434e:	bf00      	nop

	return res;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004370:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <dir_register+0x20>
 8004378:	2306      	movs	r3, #6
 800437a:	e0e0      	b.n	800453e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	e002      	b.n	8004388 <dir_register+0x2c>
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	3301      	adds	r3, #1
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f4      	bne.n	8004382 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800439e:	f107 030c 	add.w	r3, r7, #12
 80043a2:	220c      	movs	r2, #12
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fd9b 	bl	8002ee0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80043bc:	2301      	movs	r3, #1
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c0:	e016      	b.n	80043f0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	f107 010c 	add.w	r1, r7, #12
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	f7ff fe53 	bl	800407c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff feff 	bl	80041da <dir_find>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80043e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	3301      	adds	r3, #1
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	2b63      	cmp	r3, #99	; 0x63
 80043f4:	d9e5      	bls.n	80043c2 <dir_register+0x66>
 80043f6:	e000      	b.n	80043fa <dir_register+0x9e>
			if (res != FR_OK) break;
 80043f8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	2b64      	cmp	r3, #100	; 0x64
 80043fe:	d101      	bne.n	8004404 <dir_register+0xa8>
 8004400:	2307      	movs	r3, #7
 8004402:	e09c      	b.n	800453e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004408:	2b04      	cmp	r3, #4
 800440a:	d002      	beq.n	8004412 <dir_register+0xb6>
 800440c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004410:	e095      	b.n	800453e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004412:	7dfa      	ldrb	r2, [r7, #23]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <dir_register+0xd8>
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	330c      	adds	r3, #12
 8004428:	4a47      	ldr	r2, [pc, #284]	; (8004548 <dir_register+0x1ec>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	3301      	adds	r3, #1
 8004432:	e000      	b.n	8004436 <dir_register+0xda>
 8004434:	2301      	movs	r3, #1
 8004436:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004438:	6a39      	ldr	r1, [r7, #32]
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fcbf 	bl	8003dbe <dir_alloc>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800444a:	2b00      	cmp	r3, #0
 800444c:	d148      	bne.n	80044e0 <dir_register+0x184>
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	3b01      	subs	r3, #1
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d042      	beq.n	80044e0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	015b      	lsls	r3, r3, #5
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff fb4a 	bl	8003b00 <dir_sdi>
 800446c:	4603      	mov	r3, r0
 800446e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004476:	2b00      	cmp	r3, #0
 8004478:	d132      	bne.n	80044e0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3324      	adds	r3, #36	; 0x24
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fe8a 	bl	8004198 <sum_sfn>
 8004484:	4603      	mov	r3, r0
 8004486:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4619      	mov	r1, r3
 800448e:	69f8      	ldr	r0, [r7, #28]
 8004490:	f7fe ff54 	bl	800333c <move_window>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800449a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11d      	bne.n	80044de <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	6918      	ldr	r0, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a19      	ldr	r1, [r3, #32]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	7efb      	ldrb	r3, [r7, #27]
 80044b0:	f7ff fd7c 	bl	8003fac <put_lfn>
				fs->wflag = 1;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2201      	movs	r2, #1
 80044b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80044ba:	2100      	movs	r1, #0
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fba8 	bl	8003c12 <dir_next>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80044c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d107      	bne.n	80044e0 <dir_register+0x184>
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1d5      	bne.n	8004488 <dir_register+0x12c>
 80044dc:	e000      	b.n	80044e0 <dir_register+0x184>
				if (res != FR_OK) break;
 80044de:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80044e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d128      	bne.n	800453a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	4619      	mov	r1, r3
 80044ee:	69f8      	ldr	r0, [r7, #28]
 80044f0:	f7fe ff24 	bl	800333c <move_window>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80044fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11b      	bne.n	800453a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	2220      	movs	r2, #32
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fd09 	bl	8002f22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a18      	ldr	r0, [r3, #32]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3324      	adds	r3, #36	; 0x24
 8004518:	220b      	movs	r2, #11
 800451a:	4619      	mov	r1, r3
 800451c:	f7fe fce0 	bl	8002ee0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	330c      	adds	r3, #12
 800452c:	f002 0218 	and.w	r2, r2, #24
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2201      	movs	r2, #1
 8004538:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800453a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800453e:	4618      	mov	r0, r3
 8004540:	3730      	adds	r7, #48	; 0x30
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	4ec4ec4f 	.word	0x4ec4ec4f

0800454c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	61ba      	str	r2, [r7, #24]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4413      	add	r3, r2
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800457a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800457c:	2b1f      	cmp	r3, #31
 800457e:	d940      	bls.n	8004602 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004580:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004582:	2b2f      	cmp	r3, #47	; 0x2f
 8004584:	d006      	beq.n	8004594 <create_name+0x48>
 8004586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004588:	2b5c      	cmp	r3, #92	; 0x5c
 800458a:	d110      	bne.n	80045ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800458c:	e002      	b.n	8004594 <create_name+0x48>
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3301      	adds	r3, #1
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	4413      	add	r3, r2
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b2f      	cmp	r3, #47	; 0x2f
 800459e:	d0f6      	beq.n	800458e <create_name+0x42>
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4413      	add	r3, r2
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b5c      	cmp	r3, #92	; 0x5c
 80045aa:	d0f0      	beq.n	800458e <create_name+0x42>
			break;
 80045ac:	e02a      	b.n	8004604 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2bfe      	cmp	r3, #254	; 0xfe
 80045b2:	d901      	bls.n	80045b8 <create_name+0x6c>
 80045b4:	2306      	movs	r3, #6
 80045b6:	e17d      	b.n	80048b4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80045b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80045be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 fcdc 	bl	8005f80 <ff_convert>
 80045c8:	4603      	mov	r3, r0
 80045ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80045cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <create_name+0x8a>
 80045d2:	2306      	movs	r3, #6
 80045d4:	e16e      	b.n	80048b4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80045d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045d8:	2b7f      	cmp	r3, #127	; 0x7f
 80045da:	d809      	bhi.n	80045f0 <create_name+0xa4>
 80045dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045de:	4619      	mov	r1, r3
 80045e0:	488d      	ldr	r0, [pc, #564]	; (8004818 <create_name+0x2cc>)
 80045e2:	f7fe fce0 	bl	8002fa6 <chk_chr>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <create_name+0xa4>
 80045ec:	2306      	movs	r3, #6
 80045ee:	e161      	b.n	80048b4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	617a      	str	r2, [r7, #20]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004600:	e7b4      	b.n	800456c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004602:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	441a      	add	r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800460e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004610:	2b1f      	cmp	r3, #31
 8004612:	d801      	bhi.n	8004618 <create_name+0xcc>
 8004614:	2304      	movs	r3, #4
 8004616:	e000      	b.n	800461a <create_name+0xce>
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800461e:	e011      	b.n	8004644 <create_name+0xf8>
		w = lfn[di - 1];
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004626:	3b01      	subs	r3, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004634:	2b20      	cmp	r3, #32
 8004636:	d002      	beq.n	800463e <create_name+0xf2>
 8004638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800463a:	2b2e      	cmp	r3, #46	; 0x2e
 800463c:	d106      	bne.n	800464c <create_name+0x100>
		di--;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	3b01      	subs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ea      	bne.n	8004620 <create_name+0xd4>
 800464a:	e000      	b.n	800464e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800464c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4413      	add	r3, r2
 8004656:	2200      	movs	r2, #0
 8004658:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <create_name+0x118>
 8004660:	2306      	movs	r3, #6
 8004662:	e127      	b.n	80048b4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3324      	adds	r3, #36	; 0x24
 8004668:	220b      	movs	r2, #11
 800466a:	2120      	movs	r1, #32
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fc58 	bl	8002f22 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e002      	b.n	800467e <create_name+0x132>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	3301      	adds	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	2b20      	cmp	r3, #32
 800468a:	d0f5      	beq.n	8004678 <create_name+0x12c>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	2b2e      	cmp	r3, #46	; 0x2e
 8004698:	d0ee      	beq.n	8004678 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <create_name+0x168>
 80046a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a4:	f043 0303 	orr.w	r3, r3, #3
 80046a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80046ac:	e002      	b.n	80046b4 <create_name+0x168>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <create_name+0x182>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046c0:	3b01      	subs	r3, #1
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	2b2e      	cmp	r3, #46	; 0x2e
 80046cc:	d1ef      	bne.n	80046ae <create_name+0x162>

	i = b = 0; ni = 8;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	2308      	movs	r3, #8
 80046da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	61ba      	str	r2, [r7, #24]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80046ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8090 	beq.w	8004814 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80046f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d006      	beq.n	8004708 <create_name+0x1bc>
 80046fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046fc:	2b2e      	cmp	r3, #46	; 0x2e
 80046fe:	d10a      	bne.n	8004716 <create_name+0x1ca>
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	d006      	beq.n	8004716 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800470c:	f043 0303 	orr.w	r3, r3, #3
 8004710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004714:	e07d      	b.n	8004812 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004716:	6a3a      	ldr	r2, [r7, #32]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	429a      	cmp	r2, r3
 800471c:	d203      	bcs.n	8004726 <create_name+0x1da>
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d123      	bne.n	800476e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2b0b      	cmp	r3, #11
 800472a:	d106      	bne.n	800473a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800472c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004730:	f043 0303 	orr.w	r3, r3, #3
 8004734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004738:	e075      	b.n	8004826 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d005      	beq.n	800474e <create_name+0x202>
 8004742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004746:	f043 0303 	orr.w	r3, r3, #3
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	429a      	cmp	r2, r3
 8004754:	d866      	bhi.n	8004824 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	2308      	movs	r3, #8
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	230b      	movs	r3, #11
 8004760:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004762:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800476c:	e051      	b.n	8004812 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800476e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004770:	2b7f      	cmp	r3, #127	; 0x7f
 8004772:	d914      	bls.n	800479e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fc01 	bl	8005f80 <ff_convert>
 800477e:	4603      	mov	r3, r0
 8004780:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <create_name+0x246>
 8004788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800478a:	3b80      	subs	r3, #128	; 0x80
 800478c:	4a23      	ldr	r2, [pc, #140]	; (800481c <create_name+0x2d0>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004796:	f043 0302 	orr.w	r3, r3, #2
 800479a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800479e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <create_name+0x268>
 80047a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047a6:	4619      	mov	r1, r3
 80047a8:	481d      	ldr	r0, [pc, #116]	; (8004820 <create_name+0x2d4>)
 80047aa:	f7fe fbfc 	bl	8002fa6 <chk_chr>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80047b4:	235f      	movs	r3, #95	; 0x5f
 80047b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047bc:	f043 0303 	orr.w	r3, r3, #3
 80047c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047c4:	e01b      	b.n	80047fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80047c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d909      	bls.n	80047e0 <create_name+0x294>
 80047cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047ce:	2b5a      	cmp	r3, #90	; 0x5a
 80047d0:	d806      	bhi.n	80047e0 <create_name+0x294>
					b |= 2;
 80047d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80047de:	e00e      	b.n	80047fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80047e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047e2:	2b60      	cmp	r3, #96	; 0x60
 80047e4:	d90b      	bls.n	80047fe <create_name+0x2b2>
 80047e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047e8:	2b7a      	cmp	r3, #122	; 0x7a
 80047ea:	d808      	bhi.n	80047fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80047ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80047f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047fa:	3b20      	subs	r3, #32
 80047fc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	623a      	str	r2, [r7, #32]
 8004804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004806:	b2d1      	uxtb	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4413      	add	r3, r2
 800480c:	460a      	mov	r2, r1
 800480e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004812:	e763      	b.n	80046dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004814:	bf00      	nop
 8004816:	e006      	b.n	8004826 <create_name+0x2da>
 8004818:	0800698c 	.word	0x0800698c
 800481c:	08006a14 	.word	0x08006a14
 8004820:	08006998 	.word	0x08006998
			if (si > di) break;			/* No extension */
 8004824:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800482c:	2be5      	cmp	r3, #229	; 0xe5
 800482e:	d103      	bne.n	8004838 <create_name+0x2ec>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2205      	movs	r2, #5
 8004834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b08      	cmp	r3, #8
 800483c:	d104      	bne.n	8004848 <create_name+0x2fc>
 800483e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004848:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d005      	beq.n	8004860 <create_name+0x314>
 8004854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b03      	cmp	r3, #3
 800485e:	d105      	bne.n	800486c <create_name+0x320>
 8004860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004864:	f043 0302 	orr.w	r3, r3, #2
 8004868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800486c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d117      	bne.n	80048a8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d105      	bne.n	8004890 <create_name+0x344>
 8004884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004888:	f043 0310 	orr.w	r3, r3, #16
 800488c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004894:	f003 030c 	and.w	r3, r3, #12
 8004898:	2b04      	cmp	r3, #4
 800489a:	d105      	bne.n	80048a8 <create_name+0x35c>
 800489c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80048ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80048b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3728      	adds	r7, #40	; 0x28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80048d0:	e002      	b.n	80048d8 <follow_path+0x1c>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b2f      	cmp	r3, #47	; 0x2f
 80048de:	d0f8      	beq.n	80048d2 <follow_path+0x16>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b5c      	cmp	r3, #92	; 0x5c
 80048e6:	d0f4      	beq.n	80048d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b1f      	cmp	r3, #31
 80048f4:	d80a      	bhi.n	800490c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2280      	movs	r2, #128	; 0x80
 80048fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80048fe:	2100      	movs	r1, #0
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff f8fd 	bl	8003b00 <dir_sdi>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]
 800490a:	e048      	b.n	800499e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800490c:	463b      	mov	r3, r7
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fe1b 	bl	800454c <create_name>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d139      	bne.n	8004994 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fc5a 	bl	80041da <dir_find>
 8004926:	4603      	mov	r3, r0
 8004928:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004930:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b04      	cmp	r3, #4
 800493c:	d12c      	bne.n	8004998 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d127      	bne.n	8004998 <follow_path+0xdc>
 8004948:	2305      	movs	r3, #5
 800494a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800494c:	e024      	b.n	8004998 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800494e:	7afb      	ldrb	r3, [r7, #11]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d121      	bne.n	800499c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	799b      	ldrb	r3, [r3, #6]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004964:	2305      	movs	r3, #5
 8004966:	75fb      	strb	r3, [r7, #23]
 8004968:	e019      	b.n	800499e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	8992      	ldrh	r2, [r2, #12]
 8004978:	fbb3 f0f2 	udiv	r0, r3, r2
 800497c:	fb00 f202 	mul.w	r2, r0, r2
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	440b      	add	r3, r1
 8004984:	4619      	mov	r1, r3
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fa60 	bl	8003e4c <ld_clust>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004992:	e7bb      	b.n	800490c <follow_path+0x50>
			if (res != FR_OK) break;
 8004994:	bf00      	nop
 8004996:	e002      	b.n	800499e <follow_path+0xe2>
				break;
 8004998:	bf00      	nop
 800499a:	e000      	b.n	800499e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800499c:	bf00      	nop
			}
		}
	}

	return res;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d031      	beq.n	8004a22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e002      	b.n	80049cc <get_ldnumber+0x24>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3301      	adds	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b1f      	cmp	r3, #31
 80049d2:	d903      	bls.n	80049dc <get_ldnumber+0x34>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b3a      	cmp	r3, #58	; 0x3a
 80049da:	d1f4      	bne.n	80049c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b3a      	cmp	r3, #58	; 0x3a
 80049e2:	d11c      	bne.n	8004a1e <get_ldnumber+0x76>
			tp = *path;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	60fa      	str	r2, [r7, #12]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3b30      	subs	r3, #48	; 0x30
 80049f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b09      	cmp	r3, #9
 80049fa:	d80e      	bhi.n	8004a1a <get_ldnumber+0x72>
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d10a      	bne.n	8004a1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d107      	bne.n	8004a1a <get_ldnumber+0x72>
					vol = (int)i;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3301      	adds	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	e002      	b.n	8004a24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004a22:	693b      	ldr	r3, [r7, #16]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	70da      	strb	r2, [r3, #3]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f04f 32ff 	mov.w	r2, #4294967295
 8004a46:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fe fc76 	bl	800333c <move_window>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <check_fs+0x2a>
 8004a56:	2304      	movs	r3, #4
 8004a58:	e038      	b.n	8004acc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3338      	adds	r3, #56	; 0x38
 8004a5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe f9ba 	bl	8002ddc <ld_word>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <check_fs+0x48>
 8004a74:	2303      	movs	r3, #3
 8004a76:	e029      	b.n	8004acc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a7e:	2be9      	cmp	r3, #233	; 0xe9
 8004a80:	d009      	beq.n	8004a96 <check_fs+0x66>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a88:	2beb      	cmp	r3, #235	; 0xeb
 8004a8a:	d11e      	bne.n	8004aca <check_fs+0x9a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a92:	2b90      	cmp	r3, #144	; 0x90
 8004a94:	d119      	bne.n	8004aca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3338      	adds	r3, #56	; 0x38
 8004a9a:	3336      	adds	r3, #54	; 0x36
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe f9b5 	bl	8002e0c <ld_dword>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <check_fs+0xa4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <check_fs+0x82>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e00c      	b.n	8004acc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3338      	adds	r3, #56	; 0x38
 8004ab6:	3352      	adds	r3, #82	; 0x52
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe f9a7 	bl	8002e0c <ld_dword>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <check_fs+0xa8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <check_fs+0x9a>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004aca:	2302      	movs	r3, #2
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	00544146 	.word	0x00544146
 8004ad8:	33544146 	.word	0x33544146

08004adc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b096      	sub	sp, #88	; 0x58
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff ff59 	bl	80049a8 <get_ldnumber>
 8004af6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da01      	bge.n	8004b02 <find_volume+0x26>
 8004afe:	230b      	movs	r3, #11
 8004b00:	e265      	b.n	8004fce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004b02:	4a9f      	ldr	r2, [pc, #636]	; (8004d80 <find_volume+0x2a4>)
 8004b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <find_volume+0x3a>
 8004b12:	230c      	movs	r3, #12
 8004b14:	e25b      	b.n	8004fce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe f8b5 	bl	8002ca0 <disk_status>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10c      	bne.n	8004b62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <find_volume+0x82>
 8004b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004b5a:	230a      	movs	r3, #10
 8004b5c:	e237      	b.n	8004fce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e235      	b.n	8004fce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe f8ad 	bl	8002cd4 <disk_initialize>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004b80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e21e      	b.n	8004fce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <find_volume+0xca>
 8004b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004ba2:	230a      	movs	r3, #10
 8004ba4:	e213      	b.n	8004fce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	7858      	ldrb	r0, [r3, #1]
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	330c      	adds	r3, #12
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	f7fe f8f5 	bl	8002da0 <disk_ioctl>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <find_volume+0xe4>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e206      	b.n	8004fce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	899b      	ldrh	r3, [r3, #12]
 8004bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc8:	d80d      	bhi.n	8004be6 <find_volume+0x10a>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	899b      	ldrh	r3, [r3, #12]
 8004bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd2:	d308      	bcc.n	8004be6 <find_volume+0x10a>
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	899b      	ldrh	r3, [r3, #12]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	899b      	ldrh	r3, [r3, #12]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <find_volume+0x10e>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e1f1      	b.n	8004fce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004bee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bf2:	f7ff ff1d 	bl	8004a30 <check_fs>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d149      	bne.n	8004c98 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c04:	2300      	movs	r3, #0
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
 8004c08:	e01e      	b.n	8004c48 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004c18:	4413      	add	r3, r2
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	3304      	adds	r3, #4
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <find_volume+0x158>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	3308      	adds	r3, #8
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe f8ee 	bl	8002e0c <ld_dword>
 8004c30:	4602      	mov	r2, r0
 8004c32:	e000      	b.n	8004c36 <find_volume+0x15a>
 8004c34:	2200      	movs	r2, #0
 8004c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	3358      	adds	r3, #88	; 0x58
 8004c3c:	443b      	add	r3, r7
 8004c3e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c44:	3301      	adds	r3, #1
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
 8004c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d9dd      	bls.n	8004c0a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004c4e:	2300      	movs	r3, #0
 8004c50:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <find_volume+0x182>
 8004c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	3358      	adds	r3, #88	; 0x58
 8004c64:	443b      	add	r3, r7
 8004c66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004c6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <find_volume+0x1a2>
 8004c72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c76:	f7ff fedb 	bl	8004a30 <check_fs>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	e000      	b.n	8004c80 <find_volume+0x1a4>
 8004c7e:	2303      	movs	r3, #3
 8004c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004c84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d905      	bls.n	8004c98 <find_volume+0x1bc>
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	3301      	adds	r3, #1
 8004c90:	643b      	str	r3, [r7, #64]	; 0x40
 8004c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d9e2      	bls.n	8004c5e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d101      	bne.n	8004ca4 <find_volume+0x1c8>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e194      	b.n	8004fce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d901      	bls.n	8004cb0 <find_volume+0x1d4>
 8004cac:	230d      	movs	r3, #13
 8004cae:	e18e      	b.n	8004fce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	3338      	adds	r3, #56	; 0x38
 8004cb4:	330b      	adds	r3, #11
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe f890 	bl	8002ddc <ld_word>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	899b      	ldrh	r3, [r3, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <find_volume+0x1f0>
 8004cc8:	230d      	movs	r3, #13
 8004cca:	e180      	b.n	8004fce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	3338      	adds	r3, #56	; 0x38
 8004cd0:	3316      	adds	r3, #22
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe f882 	bl	8002ddc <ld_word>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <find_volume+0x214>
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	3338      	adds	r3, #56	; 0x38
 8004ce6:	3324      	adds	r3, #36	; 0x24
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe f88f 	bl	8002e0c <ld_dword>
 8004cee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cf4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	789b      	ldrb	r3, [r3, #2]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d005      	beq.n	8004d14 <find_volume+0x238>
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	789b      	ldrb	r3, [r3, #2]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d001      	beq.n	8004d14 <find_volume+0x238>
 8004d10:	230d      	movs	r3, #13
 8004d12:	e15c      	b.n	8004fce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	789b      	ldrb	r3, [r3, #2]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	fb02 f303 	mul.w	r3, r2, r3
 8004d20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	895b      	ldrh	r3, [r3, #10]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <find_volume+0x26c>
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	895b      	ldrh	r3, [r3, #10]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	895b      	ldrh	r3, [r3, #10]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <find_volume+0x270>
 8004d48:	230d      	movs	r3, #13
 8004d4a:	e140      	b.n	8004fce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	3338      	adds	r3, #56	; 0x38
 8004d50:	3311      	adds	r3, #17
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe f842 	bl	8002ddc <ld_word>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	891b      	ldrh	r3, [r3, #8]
 8004d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d66:	8992      	ldrh	r2, [r2, #12]
 8004d68:	0952      	lsrs	r2, r2, #5
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d70:	fb01 f202 	mul.w	r2, r1, r2
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <find_volume+0x2a8>
 8004d7c:	230d      	movs	r3, #13
 8004d7e:	e126      	b.n	8004fce <find_volume+0x4f2>
 8004d80:	20002190 	.word	0x20002190

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	3338      	adds	r3, #56	; 0x38
 8004d88:	3313      	adds	r3, #19
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe f826 	bl	8002ddc <ld_word>
 8004d90:	4603      	mov	r3, r0
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <find_volume+0x2cc>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	3338      	adds	r3, #56	; 0x38
 8004d9e:	3320      	adds	r3, #32
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe f833 	bl	8002e0c <ld_dword>
 8004da6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	3338      	adds	r3, #56	; 0x38
 8004dac:	330e      	adds	r3, #14
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe f814 	bl	8002ddc <ld_word>
 8004db4:	4603      	mov	r3, r0
 8004db6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004db8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <find_volume+0x2e6>
 8004dbe:	230d      	movs	r3, #13
 8004dc0:	e105      	b.n	8004fce <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004dc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc6:	4413      	add	r3, r2
 8004dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dca:	8911      	ldrh	r1, [r2, #8]
 8004dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dce:	8992      	ldrh	r2, [r2, #12]
 8004dd0:	0952      	lsrs	r2, r2, #5
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	fbb1 f2f2 	udiv	r2, r1, r2
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	4413      	add	r3, r2
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d201      	bcs.n	8004dea <find_volume+0x30e>
 8004de6:	230d      	movs	r3, #13
 8004de8:	e0f1      	b.n	8004fce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df2:	8952      	ldrh	r2, [r2, #10]
 8004df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <find_volume+0x328>
 8004e00:	230d      	movs	r3, #13
 8004e02:	e0e4      	b.n	8004fce <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004e04:	2303      	movs	r3, #3
 8004e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d802      	bhi.n	8004e1a <find_volume+0x33e>
 8004e14:	2302      	movs	r3, #2
 8004e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d802      	bhi.n	8004e2a <find_volume+0x34e>
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1c9a      	adds	r2, r3, #2
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004e38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3c:	441a      	add	r2, r3
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004e42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	441a      	add	r2, r3
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d11e      	bne.n	8004e92 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	3338      	adds	r3, #56	; 0x38
 8004e58:	332a      	adds	r3, #42	; 0x2a
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fd ffbe 	bl	8002ddc <ld_word>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <find_volume+0x38e>
 8004e66:	230d      	movs	r3, #13
 8004e68:	e0b1      	b.n	8004fce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	891b      	ldrh	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <find_volume+0x39a>
 8004e72:	230d      	movs	r3, #13
 8004e74:	e0ab      	b.n	8004fce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	3338      	adds	r3, #56	; 0x38
 8004e7a:	332c      	adds	r3, #44	; 0x2c
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fd ffc5 	bl	8002e0c <ld_dword>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e90:	e01f      	b.n	8004ed2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	891b      	ldrh	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <find_volume+0x3c2>
 8004e9a:	230d      	movs	r3, #13
 8004e9c:	e097      	b.n	8004fce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea4:	441a      	add	r2, r3
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004eaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d103      	bne.n	8004eba <find_volume+0x3de>
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	e00a      	b.n	8004ed0 <find_volume+0x3f4>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	085a      	lsrs	r2, r3, #1
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004ed0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	6a1a      	ldr	r2, [r3, #32]
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	899b      	ldrh	r3, [r3, #12]
 8004eda:	4619      	mov	r1, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	440b      	add	r3, r1
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ee4:	8989      	ldrh	r1, [r1, #12]
 8004ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d201      	bcs.n	8004ef2 <find_volume+0x416>
 8004eee:	230d      	movs	r3, #13
 8004ef0:	e06d      	b.n	8004fce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	619a      	str	r2, [r3, #24]
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2280      	movs	r2, #128	; 0x80
 8004f06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d149      	bne.n	8004fa4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	3338      	adds	r3, #56	; 0x38
 8004f14:	3330      	adds	r3, #48	; 0x30
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd ff60 	bl	8002ddc <ld_word>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d140      	bne.n	8004fa4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f24:	3301      	adds	r3, #1
 8004f26:	4619      	mov	r1, r3
 8004f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f2a:	f7fe fa07 	bl	800333c <move_window>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d137      	bne.n	8004fa4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	2200      	movs	r2, #0
 8004f38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	3338      	adds	r3, #56	; 0x38
 8004f3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fd ff4a 	bl	8002ddc <ld_word>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d127      	bne.n	8004fa4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	3338      	adds	r3, #56	; 0x38
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fd ff57 	bl	8002e0c <ld_dword>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <find_volume+0x4fc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d11e      	bne.n	8004fa4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	3338      	adds	r3, #56	; 0x38
 8004f6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd ff4c 	bl	8002e0c <ld_dword>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <find_volume+0x500>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d113      	bne.n	8004fa4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	3338      	adds	r3, #56	; 0x38
 8004f80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fd ff41 	bl	8002e0c <ld_dword>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	3338      	adds	r3, #56	; 0x38
 8004f94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fd ff37 	bl	8002e0c <ld_dword>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004faa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <find_volume+0x504>)
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <find_volume+0x504>)
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <find_volume+0x504>)
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <find_volume+0x508>)
 8004fc4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004fc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fc8:	f7fe f950 	bl	800326c <clear_lock>
#endif
	return FR_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3758      	adds	r7, #88	; 0x58
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	41615252 	.word	0x41615252
 8004fdc:	61417272 	.word	0x61417272
 8004fe0:	20002194 	.word	0x20002194
 8004fe4:	200021b8 	.word	0x200021b8

08004fe8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004ff2:	2309      	movs	r3, #9
 8004ff4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01c      	beq.n	8005036 <validate+0x4e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d018      	beq.n	8005036 <validate+0x4e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d013      	beq.n	8005036 <validate+0x4e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	889a      	ldrh	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	88db      	ldrh	r3, [r3, #6]
 8005018:	429a      	cmp	r2, r3
 800501a:	d10c      	bne.n	8005036 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd fe3c 	bl	8002ca0 <disk_status>
 8005028:	4603      	mov	r3, r0
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <validate+0x4e>
			res = FR_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <validate+0x5a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	e000      	b.n	8005044 <validate+0x5c>
 8005042:	2300      	movs	r3, #0
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6013      	str	r3, [r2, #0]
	return res;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005066:	f107 0310 	add.w	r3, r7, #16
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fc9c 	bl	80049a8 <get_ldnumber>
 8005070:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	da01      	bge.n	800507c <f_mount+0x28>
 8005078:	230b      	movs	r3, #11
 800507a:	e02b      	b.n	80050d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800507c:	4a17      	ldr	r2, [pc, #92]	; (80050dc <f_mount+0x88>)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005084:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800508c:	69b8      	ldr	r0, [r7, #24]
 800508e:	f7fe f8ed 	bl	800326c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	490d      	ldr	r1, [pc, #52]	; (80050dc <f_mount+0x88>)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <f_mount+0x66>
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <f_mount+0x6a>
 80050ba:	2300      	movs	r3, #0
 80050bc:	e00a      	b.n	80050d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80050be:	f107 010c 	add.w	r1, r7, #12
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	2200      	movs	r2, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fd07 	bl	8004adc <find_volume>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20002190 	.word	0x20002190

080050e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b09a      	sub	sp, #104	; 0x68
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <f_open+0x18>
 80050f4:	2309      	movs	r3, #9
 80050f6:	e1bb      	b.n	8005470 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005100:	79fa      	ldrb	r2, [r7, #7]
 8005102:	f107 0114 	add.w	r1, r7, #20
 8005106:	f107 0308 	add.w	r3, r7, #8
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fce6 	bl	8004adc <find_volume>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005116:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 819f 	bne.w	800545e <f_open+0x37e>
		dj.obj.fs = fs;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fbc5 	bl	80048bc <follow_path>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005138:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800513c:	2b00      	cmp	r3, #0
 800513e:	d11a      	bne.n	8005176 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005140:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005144:	b25b      	sxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	da03      	bge.n	8005152 <f_open+0x72>
				res = FR_INVALID_NAME;
 800514a:	2306      	movs	r3, #6
 800514c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005150:	e011      	b.n	8005176 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	f107 0318 	add.w	r3, r7, #24
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd ff36 	bl	8002fdc <chk_lock>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	f003 031c 	and.w	r3, r3, #28
 800517c:	2b00      	cmp	r3, #0
 800517e:	d07f      	beq.n	8005280 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005180:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005184:	2b00      	cmp	r3, #0
 8005186:	d017      	beq.n	80051b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005188:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800518c:	2b04      	cmp	r3, #4
 800518e:	d10e      	bne.n	80051ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005190:	f7fd ff80 	bl	8003094 <enq_lock>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <f_open+0xc8>
 800519a:	f107 0318 	add.w	r3, r7, #24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff f8dc 	bl	800435c <dir_register>
 80051a4:	4603      	mov	r3, r0
 80051a6:	e000      	b.n	80051aa <f_open+0xca>
 80051a8:	2312      	movs	r3, #18
 80051aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	f043 0308 	orr.w	r3, r3, #8
 80051b4:	71fb      	strb	r3, [r7, #7]
 80051b6:	e010      	b.n	80051da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80051b8:	7fbb      	ldrb	r3, [r7, #30]
 80051ba:	f003 0311 	and.w	r3, r3, #17
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <f_open+0xea>
					res = FR_DENIED;
 80051c2:	2307      	movs	r3, #7
 80051c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80051c8:	e007      	b.n	80051da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <f_open+0xfa>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80051da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d168      	bne.n	80052b4 <f_open+0x1d4>
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d063      	beq.n	80052b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80051ec:	f7fd fcee 	bl	8002bcc <get_fattime>
 80051f0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	330e      	adds	r3, #14
 80051f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd fe45 	bl	8002e88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	3316      	adds	r3, #22
 8005202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005204:	4618      	mov	r0, r3
 8005206:	f7fd fe3f 	bl	8002e88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	330b      	adds	r3, #11
 800520e:	2220      	movs	r2, #32
 8005210:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe fe17 	bl	8003e4c <ld_clust>
 800521e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005224:	2200      	movs	r2, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fe2f 	bl	8003e8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	331c      	adds	r3, #28
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd fe28 	bl	8002e88 <st_dword>
					fs->wflag = 1;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2201      	movs	r2, #1
 800523c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800523e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005240:	2b00      	cmp	r3, #0
 8005242:	d037      	beq.n	80052b4 <f_open+0x1d4>
						dw = fs->winsect;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800524a:	f107 0318 	add.w	r3, r7, #24
 800524e:	2200      	movs	r2, #0
 8005250:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fb1f 	bl	8003896 <remove_chain>
 8005258:	4603      	mov	r3, r0
 800525a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800525e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005262:	2b00      	cmp	r3, #0
 8005264:	d126      	bne.n	80052b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe f866 	bl	800333c <move_window>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800527a:	3a01      	subs	r2, #1
 800527c:	615a      	str	r2, [r3, #20]
 800527e:	e019      	b.n	80052b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005284:	2b00      	cmp	r3, #0
 8005286:	d115      	bne.n	80052b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005288:	7fbb      	ldrb	r3, [r7, #30]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <f_open+0x1ba>
					res = FR_NO_FILE;
 8005292:	2304      	movs	r3, #4
 8005294:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005298:	e00c      	b.n	80052b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <f_open+0x1d4>
 80052a4:	7fbb      	ldrb	r3, [r7, #30]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <f_open+0x1d4>
						res = FR_DENIED;
 80052ae:	2307      	movs	r3, #7
 80052b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80052b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d128      	bne.n	800530e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80052d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bf14      	ite	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	2300      	moveq	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	f107 0318 	add.w	r3, r7, #24
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fd feef 	bl	80030d8 <inc_lock>
 80052fa:	4602      	mov	r2, r0
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <f_open+0x22e>
 8005308:	2302      	movs	r3, #2
 800530a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800530e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005312:	2b00      	cmp	r3, #0
 8005314:	f040 80a3 	bne.w	800545e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fd94 	bl	8003e4c <ld_clust>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	331c      	adds	r3, #28
 800532e:	4618      	mov	r0, r3
 8005330:	f7fd fd6c 	bl	8002e0c <ld_dword>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	88da      	ldrh	r2, [r3, #6]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	79fa      	ldrb	r2, [r7, #7]
 8005352:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3330      	adds	r3, #48	; 0x30
 800536a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd fdd6 	bl	8002f22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d06e      	beq.n	800545e <f_open+0x37e>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d06a      	beq.n	800545e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	895b      	ldrh	r3, [r3, #10]
 8005394:	461a      	mov	r2, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	899b      	ldrh	r3, [r3, #12]
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	e016      	b.n	80053dc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe f87f 	bl	80034b6 <get_fat>
 80053b8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80053ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d802      	bhi.n	80053c6 <f_open+0x2e6>
 80053c0:	2302      	movs	r3, #2
 80053c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80053c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d102      	bne.n	80053d4 <f_open+0x2f4>
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80053d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <f_open+0x30c>
 80053e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d8e0      	bhi.n	80053ae <f_open+0x2ce>
				}
				fp->clust = clst;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80053f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d131      	bne.n	800545e <f_open+0x37e>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	899b      	ldrh	r3, [r3, #12]
 80053fe:	461a      	mov	r2, r3
 8005400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005402:	fbb3 f1f2 	udiv	r1, r3, r2
 8005406:	fb01 f202 	mul.w	r2, r1, r2
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d026      	beq.n	800545e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe f82f 	bl	8003478 <clust2sect>
 800541a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800541c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <f_open+0x34a>
						res = FR_INT_ERR;
 8005422:	2302      	movs	r3, #2
 8005424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005428:	e019      	b.n	800545e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	899b      	ldrh	r3, [r3, #12]
 800542e:	461a      	mov	r2, r3
 8005430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005432:	fbb3 f2f2 	udiv	r2, r3, r2
 8005436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005438:	441a      	add	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	7858      	ldrb	r0, [r3, #1]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	2301      	movs	r3, #1
 800544e:	f7fd fc67 	bl	8002d20 <disk_read>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <f_open+0x37e>
 8005458:	2301      	movs	r3, #1
 800545a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800545e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <f_open+0x38c>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800546c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005470:	4618      	mov	r0, r3
 8005472:	3768      	adds	r7, #104	; 0x68
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08e      	sub	sp, #56	; 0x38
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f107 0214 	add.w	r2, r7, #20
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff fda5 	bl	8004fe8 <validate>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80054a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d107      	bne.n	80054bc <f_read+0x44>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	7d5b      	ldrb	r3, [r3, #21]
 80054b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80054b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <f_read+0x4a>
 80054bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054c0:	e135      	b.n	800572e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	7d1b      	ldrb	r3, [r3, #20]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <f_read+0x5a>
 80054ce:	2307      	movs	r3, #7
 80054d0:	e12d      	b.n	800572e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	f240 811e 	bls.w	8005724 <f_read+0x2ac>
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80054ec:	e11a      	b.n	8005724 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	8992      	ldrh	r2, [r2, #12]
 80054f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80054fa:	fb01 f202 	mul.w	r2, r1, r2
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	f040 80d5 	bne.w	80056b0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	8992      	ldrh	r2, [r2, #12]
 800550e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	8952      	ldrh	r2, [r2, #10]
 8005516:	3a01      	subs	r2, #1
 8005518:	4013      	ands	r3, r2
 800551a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d12f      	bne.n	8005582 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	633b      	str	r3, [r7, #48]	; 0x30
 8005530:	e013      	b.n	800555a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	4619      	mov	r1, r3
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7fe faa5 	bl	8003a90 <clmt_clust>
 8005546:	6338      	str	r0, [r7, #48]	; 0x30
 8005548:	e007      	b.n	800555a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f7fd ffaf 	bl	80034b6 <get_fat>
 8005558:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2b01      	cmp	r3, #1
 800555e:	d804      	bhi.n	800556a <f_read+0xf2>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2202      	movs	r2, #2
 8005564:	755a      	strb	r2, [r3, #21]
 8005566:	2302      	movs	r3, #2
 8005568:	e0e1      	b.n	800572e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d104      	bne.n	800557c <f_read+0x104>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	755a      	strb	r2, [r3, #21]
 8005578:	2301      	movs	r3, #1
 800557a:	e0d8      	b.n	800572e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005580:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f7fd ff74 	bl	8003478 <clust2sect>
 8005590:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <f_read+0x12a>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2202      	movs	r2, #2
 800559c:	755a      	strb	r2, [r3, #21]
 800559e:	2302      	movs	r3, #2
 80055a0:	e0c5      	b.n	800572e <f_read+0x2b6>
			sect += csect;
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	899b      	ldrh	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d041      	beq.n	8005642 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	4413      	add	r3, r2
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	8952      	ldrh	r2, [r2, #10]
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d905      	bls.n	80055d8 <f_read+0x160>
					cc = fs->csize - csect;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	895b      	ldrh	r3, [r3, #10]
 80055d0:	461a      	mov	r2, r3
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	7858      	ldrb	r0, [r3, #1]
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e2:	f7fd fb9d 	bl	8002d20 <disk_read>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <f_read+0x17e>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	755a      	strb	r2, [r3, #21]
 80055f2:	2301      	movs	r3, #1
 80055f4:	e09b      	b.n	800572e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	7d1b      	ldrb	r3, [r3, #20]
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da18      	bge.n	8005632 <f_read+0x1ba>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1a      	ldr	r2, [r3, #32]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800560a:	429a      	cmp	r2, r3
 800560c:	d911      	bls.n	8005632 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	8992      	ldrh	r2, [r2, #12]
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	18d0      	adds	r0, r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	899b      	ldrh	r3, [r3, #12]
 800562c:	461a      	mov	r2, r3
 800562e:	f7fd fc57 	bl	8002ee0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	899b      	ldrh	r3, [r3, #12]
 8005636:	461a      	mov	r2, r3
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005640:	e05c      	b.n	80056fc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	429a      	cmp	r2, r3
 800564a:	d02e      	beq.n	80056aa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	7d1b      	ldrb	r3, [r3, #20]
 8005650:	b25b      	sxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	da18      	bge.n	8005688 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	7858      	ldrb	r0, [r3, #1]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	2301      	movs	r3, #1
 8005666:	f7fd fb7b 	bl	8002d60 <disk_write>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <f_read+0x202>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	755a      	strb	r2, [r3, #21]
 8005676:	2301      	movs	r3, #1
 8005678:	e059      	b.n	800572e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	7d1b      	ldrb	r3, [r3, #20]
 800567e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	7858      	ldrb	r0, [r3, #1]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005692:	2301      	movs	r3, #1
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	f7fd fb43 	bl	8002d20 <disk_read>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <f_read+0x232>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	755a      	strb	r2, [r3, #21]
 80056a6:	2301      	movs	r3, #1
 80056a8:	e041      	b.n	800572e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	899b      	ldrh	r3, [r3, #12]
 80056b4:	4618      	mov	r0, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	8992      	ldrh	r2, [r2, #12]
 80056be:	fbb3 f1f2 	udiv	r1, r3, r2
 80056c2:	fb01 f202 	mul.w	r2, r1, r2
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	1ac3      	subs	r3, r0, r3
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80056cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d901      	bls.n	80056d8 <f_read+0x260>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	8992      	ldrh	r2, [r2, #12]
 80056e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80056ea:	fb00 f202 	mul.w	r2, r0, r2
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	440b      	add	r3, r1
 80056f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f4:	4619      	mov	r1, r3
 80056f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056f8:	f7fd fbf2 	bl	8002ee0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	4413      	add	r3, r2
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	441a      	add	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	619a      	str	r2, [r3, #24]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	441a      	add	r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f47f aee1 	bne.w	80054ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3738      	adds	r7, #56	; 0x38
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b08c      	sub	sp, #48	; 0x30
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f107 0210 	add.w	r2, r7, #16
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fc46 	bl	8004fe8 <validate>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <f_write+0x44>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	7d5b      	ldrb	r3, [r3, #21]
 800576e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <f_write+0x4a>
 800577a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800577e:	e16a      	b.n	8005a56 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	7d1b      	ldrb	r3, [r3, #20]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <f_write+0x5a>
 800578c:	2307      	movs	r3, #7
 800578e:	e162      	b.n	8005a56 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	441a      	add	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	429a      	cmp	r2, r3
 800579e:	f080 814c 	bcs.w	8005a3a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80057aa:	e146      	b.n	8005a3a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	8992      	ldrh	r2, [r2, #12]
 80057b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80057b8:	fb01 f202 	mul.w	r2, r1, r2
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f040 80f1 	bne.w	80059a6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	8992      	ldrh	r2, [r2, #12]
 80057cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	8952      	ldrh	r2, [r2, #10]
 80057d4:	3a01      	subs	r2, #1
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d143      	bne.n	8005868 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10c      	bne.n	8005802 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11a      	bne.n	800582a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe f8b1 	bl	8003960 <create_chain>
 80057fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8005800:	e013      	b.n	800582a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	4619      	mov	r1, r3
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7fe f93d 	bl	8003a90 <clmt_clust>
 8005816:	62b8      	str	r0, [r7, #40]	; 0x28
 8005818:	e007      	b.n	800582a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7fe f89c 	bl	8003960 <create_chain>
 8005828:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8109 	beq.w	8005a44 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	2b01      	cmp	r3, #1
 8005836:	d104      	bne.n	8005842 <f_write+0x10c>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2202      	movs	r2, #2
 800583c:	755a      	strb	r2, [r3, #21]
 800583e:	2302      	movs	r3, #2
 8005840:	e109      	b.n	8005a56 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d104      	bne.n	8005854 <f_write+0x11e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	755a      	strb	r2, [r3, #21]
 8005850:	2301      	movs	r3, #1
 8005852:	e100      	b.n	8005a56 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005858:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <f_write+0x132>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005866:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	7d1b      	ldrb	r3, [r3, #20]
 800586c:	b25b      	sxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	da18      	bge.n	80058a4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	7858      	ldrb	r0, [r3, #1]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	2301      	movs	r3, #1
 8005882:	f7fd fa6d 	bl	8002d60 <disk_write>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <f_write+0x160>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	755a      	strb	r2, [r3, #21]
 8005892:	2301      	movs	r3, #1
 8005894:	e0df      	b.n	8005a56 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	7d1b      	ldrb	r3, [r3, #20]
 800589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fd fde3 	bl	8003478 <clust2sect>
 80058b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <f_write+0x18e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	755a      	strb	r2, [r3, #21]
 80058c0:	2302      	movs	r3, #2
 80058c2:	e0c8      	b.n	8005a56 <f_write+0x320>
			sect += csect;
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	4413      	add	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	899b      	ldrh	r3, [r3, #12]
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d043      	beq.n	8005968 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4413      	add	r3, r2
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	8952      	ldrh	r2, [r2, #10]
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d905      	bls.n	80058fa <f_write+0x1c4>
					cc = fs->csize - csect;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	895b      	ldrh	r3, [r3, #10]
 80058f2:	461a      	mov	r2, r3
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	7858      	ldrb	r0, [r3, #1]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	69f9      	ldr	r1, [r7, #28]
 8005904:	f7fd fa2c 	bl	8002d60 <disk_write>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <f_write+0x1e2>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	755a      	strb	r2, [r3, #21]
 8005914:	2301      	movs	r3, #1
 8005916:	e09e      	b.n	8005a56 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	429a      	cmp	r2, r3
 8005924:	d918      	bls.n	8005958 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	8992      	ldrh	r2, [r2, #12]
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	18d1      	adds	r1, r2, r3
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	899b      	ldrh	r3, [r3, #12]
 8005944:	461a      	mov	r2, r3
 8005946:	f7fd facb 	bl	8002ee0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	7d1b      	ldrb	r3, [r3, #20]
 800594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005952:	b2da      	uxtb	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	899b      	ldrh	r3, [r3, #12]
 800595c:	461a      	mov	r2, r3
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005966:	e04b      	b.n	8005a00 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d016      	beq.n	80059a0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800597a:	429a      	cmp	r2, r3
 800597c:	d210      	bcs.n	80059a0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	7858      	ldrb	r0, [r3, #1]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005988:	2301      	movs	r3, #1
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	f7fd f9c8 	bl	8002d20 <disk_read>
 8005990:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	755a      	strb	r2, [r3, #21]
 800599c:	2301      	movs	r3, #1
 800599e:	e05a      	b.n	8005a56 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	899b      	ldrh	r3, [r3, #12]
 80059aa:	4618      	mov	r0, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	8992      	ldrh	r2, [r2, #12]
 80059b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059b8:	fb01 f202 	mul.w	r2, r1, r2
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	1ac3      	subs	r3, r0, r3
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80059c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d901      	bls.n	80059ce <f_write+0x298>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	8992      	ldrh	r2, [r2, #12]
 80059dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80059e0:	fb00 f202 	mul.w	r2, r0, r2
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	440b      	add	r3, r1
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	69f9      	ldr	r1, [r7, #28]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fd fa77 	bl	8002ee0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	7d1b      	ldrb	r3, [r3, #20]
 80059f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	4413      	add	r3, r2
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	441a      	add	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	619a      	str	r2, [r3, #24]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	bf38      	it	cc
 8005a20:	461a      	movcc	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	441a      	add	r2, r3
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f47f aeb5 	bne.w	80057ac <f_write+0x76>
 8005a42:	e000      	b.n	8005a46 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a44:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	7d1b      	ldrb	r3, [r3, #20]
 8005a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3730      	adds	r7, #48	; 0x30
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f107 0208 	add.w	r2, r7, #8
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff faba 	bl	8004fe8 <validate>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d168      	bne.n	8005b50 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7d1b      	ldrb	r3, [r3, #20]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d062      	beq.n	8005b50 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7d1b      	ldrb	r3, [r3, #20]
 8005a8e:	b25b      	sxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da15      	bge.n	8005ac0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	7858      	ldrb	r0, [r3, #1]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f7fd f95c 	bl	8002d60 <disk_write>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <f_sync+0x54>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e04f      	b.n	8005b52 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	7d1b      	ldrb	r3, [r3, #20]
 8005ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005ac0:	f7fd f884 	bl	8002bcc <get_fattime>
 8005ac4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fd fc34 	bl	800333c <move_window>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d138      	bne.n	8005b50 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	330b      	adds	r3, #11
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	330b      	adds	r3, #11
 8005aee:	f042 0220 	orr.w	r2, r2, #32
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	f7fe f9c2 	bl	8003e8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f103 021c 	add.w	r2, r3, #28
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7fd f9b8 	bl	8002e88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3316      	adds	r3, #22
 8005b1c:	6939      	ldr	r1, [r7, #16]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fd f9b2 	bl	8002e88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3312      	adds	r3, #18
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd f991 	bl	8002e52 <st_word>
					fs->wflag = 1;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2201      	movs	r2, #1
 8005b34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fd fc2d 	bl	8003398 <sync_fs>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7d1b      	ldrb	r3, [r3, #20]
 8005b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ff7b 	bl	8005a5e <f_sync>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d118      	bne.n	8005ba4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f107 0208 	add.w	r2, r7, #8
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fa34 	bl	8004fe8 <validate>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10c      	bne.n	8005ba4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fd fb30 	bl	80031f4 <dec_lock>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b092      	sub	sp, #72	; 0x48
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005bba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005bbe:	f107 030c 	add.w	r3, r7, #12
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe ff89 	bl	8004adc <find_volume>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005bd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 8099 	bne.w	8005d0c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	3b02      	subs	r3, #2
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d804      	bhi.n	8005bf8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	e089      	b.n	8005d0c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d128      	bne.n	8005c56 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005c04:	2302      	movs	r3, #2
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fd fc4f 	bl	80034b6 <get_fat>
 8005c18:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d103      	bne.n	8005c2a <f_getfree+0x7c>
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005c28:	e063      	b.n	8005cf2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d103      	bne.n	8005c38 <f_getfree+0x8a>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005c36:	e05c      	b.n	8005cf2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <f_getfree+0x96>
 8005c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c40:	3301      	adds	r3, #1
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c46:	3301      	adds	r3, #1
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3db      	bcc.n	8005c0c <f_getfree+0x5e>
 8005c54:	e04d      	b.n	8005cf2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
 8005c66:	2300      	movs	r3, #0
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d113      	bne.n	8005c98 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f7fd fb5f 	bl	800333c <move_window>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005c84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d131      	bne.n	8005cf0 <f_getfree+0x142>
							p = fs->win;
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	3338      	adds	r3, #56	; 0x38
 8005c90:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	899b      	ldrh	r3, [r3, #12]
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d10f      	bne.n	8005cc0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ca2:	f7fd f89b 	bl	8002ddc <ld_word>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <f_getfree+0x104>
 8005cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cae:	3301      	adds	r3, #1
 8005cb0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	3b02      	subs	r3, #2
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cbe:	e010      	b.n	8005ce2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cc2:	f7fd f8a3 	bl	8002e0c <ld_dword>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <f_getfree+0x128>
 8005cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	3304      	adds	r3, #4
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	3b04      	subs	r3, #4
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1bd      	bne.n	8005c6a <f_getfree+0xbc>
 8005cee:	e000      	b.n	8005cf2 <f_getfree+0x144>
							if (res != FR_OK) break;
 8005cf0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cfc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	791a      	ldrb	r2, [r3, #4]
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3748      	adds	r7, #72	; 0x48
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005d2c:	e01b      	b.n	8005d66 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005d2e:	f107 0310 	add.w	r3, r7, #16
 8005d32:	f107 0114 	add.w	r1, r7, #20
 8005d36:	2201      	movs	r2, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fb9d 	bl	8005478 <f_read>
		if (rc != 1) break;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d116      	bne.n	8005d72 <f_gets+0x5a>
		c = s[0];
 8005d44:	7d3b      	ldrb	r3, [r7, #20]
 8005d46:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b0d      	cmp	r3, #13
 8005d4c:	d100      	bne.n	8005d50 <f_gets+0x38>
 8005d4e:	e00a      	b.n	8005d66 <f_gets+0x4e>
		*p++ = c;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	61ba      	str	r2, [r7, #24]
 8005d56:	7dfa      	ldrb	r2, [r7, #23]
 8005d58:	701a      	strb	r2, [r3, #0]
		n++;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	2b0a      	cmp	r3, #10
 8005d64:	d007      	beq.n	8005d76 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	dbde      	blt.n	8005d2e <f_gets+0x16>
 8005d70:	e002      	b.n	8005d78 <f_gets+0x60>
		if (rc != 1) break;
 8005d72:	bf00      	nop
 8005d74:	e000      	b.n	8005d78 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005d76:	bf00      	nop
	}
	*p = 0;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <f_gets+0x70>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	e000      	b.n	8005d8a <f_gets+0x72>
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	2b0a      	cmp	r3, #10
 8005da2:	d103      	bne.n	8005dac <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005da4:	210d      	movs	r1, #13
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fff3 	bl	8005d92 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db25      	blt.n	8005e04 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	60fa      	str	r2, [r7, #12]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	78fa      	ldrb	r2, [r7, #3]
 8005dc4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b3c      	cmp	r3, #60	; 0x3c
 8005dca:	dd12      	ble.n	8005df2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f103 010c 	add.w	r1, r3, #12
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f107 0308 	add.w	r3, r7, #8
 8005ddc:	f7ff fcab 	bl	8005736 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d101      	bne.n	8005dec <putc_bfd+0x5a>
 8005de8:	2300      	movs	r3, #0
 8005dea:	e001      	b.n	8005df0 <putc_bfd+0x5e>
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
 8005df0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	609a      	str	r2, [r3, #8]
 8005e02:	e000      	b.n	8005e06 <putc_bfd+0x74>
	if (i < 0) return;
 8005e04:	bf00      	nop
}
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	db16      	blt.n	8005e4a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f103 010c 	add.w	r1, r3, #12
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f107 030c 	add.w	r3, r7, #12
 8005e30:	f7ff fc81 	bl	8005736 <f_write>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d107      	bne.n	8005e4a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d102      	bne.n	8005e4a <putc_flush+0x3e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	e001      	b.n	8005e4e <putc_flush+0x42>
	return EOF;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	605a      	str	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b096      	sub	sp, #88	; 0x58
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005e8a:	f107 030c 	add.w	r3, r7, #12
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff ffe0 	bl	8005e56 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005e96:	e009      	b.n	8005eac <f_puts+0x2c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	f107 030c 	add.w	r3, r7, #12
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ff73 	bl	8005d92 <putc_bfd>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f1      	bne.n	8005e98 <f_puts+0x18>
	return putc_flush(&pb);
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff ffa7 	bl	8005e0c <putc_flush>
 8005ebe:	4603      	mov	r3, r0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3758      	adds	r7, #88	; 0x58
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005ee0:	7a5b      	ldrb	r3, [r3, #9]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d131      	bne.n	8005f4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ee8:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005eea:	7a5b      	ldrb	r3, [r3, #9]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005ef6:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005ef8:	7a5b      	ldrb	r3, [r3, #9]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005f06:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f08:	7a5b      	ldrb	r3, [r3, #9]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f10:	4413      	add	r3, r2
 8005f12:	79fa      	ldrb	r2, [r7, #7]
 8005f14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f18:	7a5b      	ldrb	r3, [r3, #9]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	b2d1      	uxtb	r1, r2
 8005f20:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f22:	7251      	strb	r1, [r2, #9]
 8005f24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005f26:	7dbb      	ldrb	r3, [r7, #22]
 8005f28:	3330      	adds	r3, #48	; 0x30
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3301      	adds	r3, #1
 8005f34:	223a      	movs	r2, #58	; 0x3a
 8005f36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	222f      	movs	r2, #47	; 0x2f
 8005f3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3303      	adds	r3, #3
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	200023b8 	.word	0x200023b8

08005f60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ffaa 	bl	8005ec8 <FATFS_LinkDriverEx>
 8005f74:	4603      	mov	r3, r0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f90:	d802      	bhi.n	8005f98 <ff_convert+0x18>
		c = chr;
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	81fb      	strh	r3, [r7, #14]
 8005f96:	e025      	b.n	8005fe4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2bff      	cmp	r3, #255	; 0xff
 8005fa2:	d805      	bhi.n	8005fb0 <ff_convert+0x30>
 8005fa4:	88fb      	ldrh	r3, [r7, #6]
 8005fa6:	3b80      	subs	r3, #128	; 0x80
 8005fa8:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <ff_convert+0x74>)
 8005faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fae:	e000      	b.n	8005fb2 <ff_convert+0x32>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	81fb      	strh	r3, [r7, #14]
 8005fb4:	e016      	b.n	8005fe4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	81fb      	strh	r3, [r7, #14]
 8005fba:	e009      	b.n	8005fd0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	4a0d      	ldr	r2, [pc, #52]	; (8005ff4 <ff_convert+0x74>)
 8005fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d006      	beq.n	8005fd8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005fca:	89fb      	ldrh	r3, [r7, #14]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	81fb      	strh	r3, [r7, #14]
 8005fd0:	89fb      	ldrh	r3, [r7, #14]
 8005fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd4:	d9f2      	bls.n	8005fbc <ff_convert+0x3c>
 8005fd6:	e000      	b.n	8005fda <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005fd8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	3380      	adds	r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	08006aa4 	.word	0x08006aa4

08005ff8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006008:	d201      	bcs.n	800600e <ff_wtoupper+0x16>
 800600a:	4b3e      	ldr	r3, [pc, #248]	; (8006104 <ff_wtoupper+0x10c>)
 800600c:	e000      	b.n	8006010 <ff_wtoupper+0x18>
 800600e:	4b3e      	ldr	r3, [pc, #248]	; (8006108 <ff_wtoupper+0x110>)
 8006010:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	1c9a      	adds	r2, r3, #2
 8006016:	617a      	str	r2, [r7, #20]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800601c:	8a7b      	ldrh	r3, [r7, #18]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d068      	beq.n	80060f4 <ff_wtoupper+0xfc>
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	8a7b      	ldrh	r3, [r7, #18]
 8006026:	429a      	cmp	r2, r3
 8006028:	d364      	bcc.n	80060f4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	1c9a      	adds	r2, r3, #2
 800602e:	617a      	str	r2, [r7, #20]
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	823b      	strh	r3, [r7, #16]
 8006034:	8a3b      	ldrh	r3, [r7, #16]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	81fb      	strh	r3, [r7, #14]
 800603a:	8a3b      	ldrh	r3, [r7, #16]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	8a79      	ldrh	r1, [r7, #18]
 8006044:	8a3b      	ldrh	r3, [r7, #16]
 8006046:	440b      	add	r3, r1
 8006048:	429a      	cmp	r2, r3
 800604a:	da49      	bge.n	80060e0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d84f      	bhi.n	80060f2 <ff_wtoupper+0xfa>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <ff_wtoupper+0x60>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	0800607d 	.word	0x0800607d
 800605c:	0800608f 	.word	0x0800608f
 8006060:	080060a5 	.word	0x080060a5
 8006064:	080060ad 	.word	0x080060ad
 8006068:	080060b5 	.word	0x080060b5
 800606c:	080060bd 	.word	0x080060bd
 8006070:	080060c5 	.word	0x080060c5
 8006074:	080060cd 	.word	0x080060cd
 8006078:	080060d5 	.word	0x080060d5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	8a7b      	ldrh	r3, [r7, #18]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	80fb      	strh	r3, [r7, #6]
 800608c:	e027      	b.n	80060de <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800608e:	88fa      	ldrh	r2, [r7, #6]
 8006090:	8a7b      	ldrh	r3, [r7, #18]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	b29b      	uxth	r3, r3
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	b29b      	uxth	r3, r3
 800609c:	88fa      	ldrh	r2, [r7, #6]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	80fb      	strh	r3, [r7, #6]
 80060a2:	e01c      	b.n	80060de <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	3b10      	subs	r3, #16
 80060a8:	80fb      	strh	r3, [r7, #6]
 80060aa:	e018      	b.n	80060de <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	3b20      	subs	r3, #32
 80060b0:	80fb      	strh	r3, [r7, #6]
 80060b2:	e014      	b.n	80060de <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	3b30      	subs	r3, #48	; 0x30
 80060b8:	80fb      	strh	r3, [r7, #6]
 80060ba:	e010      	b.n	80060de <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	3b1a      	subs	r3, #26
 80060c0:	80fb      	strh	r3, [r7, #6]
 80060c2:	e00c      	b.n	80060de <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	3308      	adds	r3, #8
 80060c8:	80fb      	strh	r3, [r7, #6]
 80060ca:	e008      	b.n	80060de <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	3b50      	subs	r3, #80	; 0x50
 80060d0:	80fb      	strh	r3, [r7, #6]
 80060d2:	e004      	b.n	80060de <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80060da:	80fb      	strh	r3, [r7, #6]
 80060dc:	bf00      	nop
			}
			break;
 80060de:	e008      	b.n	80060f2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d195      	bne.n	8006012 <ff_wtoupper+0x1a>
 80060e6:	8a3b      	ldrh	r3, [r7, #16]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4413      	add	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80060f0:	e78f      	b.n	8006012 <ff_wtoupper+0x1a>
			break;
 80060f2:	bf00      	nop
	}

	return chr;
 80060f4:	88fb      	ldrh	r3, [r7, #6]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	08006ba4 	.word	0x08006ba4
 8006108:	08006d98 	.word	0x08006d98

0800610c <SELECT>:
static volatile DSTATUS Stat =  STA_NOINIT ;               /* Disk Status Flag*/
static uint8_t CardType ;                                 /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag =  0 ;                           /* Power Status Flag */
/* SPI Chip Select */
static  void  SELECT ( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin( GPIOC , GPIO_PIN_4 ,  GPIO_PIN_RESET ) ;
 8006110:	2200      	movs	r2, #0
 8006112:	2110      	movs	r1, #16
 8006114:	4802      	ldr	r0, [pc, #8]	; (8006120 <SELECT+0x14>)
 8006116:	f7fb f8e7 	bl	80012e8 <HAL_GPIO_WritePin>
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	48000800 	.word	0x48000800

08006124 <DESELECT>:

/* SPI Chip Deselect */
static  void  DESELECT ( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin ( GPIOC , GPIO_PIN_4  ,  GPIO_PIN_SET ) ;
 8006128:	2201      	movs	r2, #1
 800612a:	2110      	movs	r1, #16
 800612c:	4802      	ldr	r0, [pc, #8]	; (8006138 <DESELECT+0x14>)
 800612e:	f7fb f8db 	bl	80012e8 <HAL_GPIO_WritePin>
}
 8006132:	bf00      	nop
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	48000800 	.word	0x48000800

0800613c <SPI_TxByte>:

/* Send SPI data */
static  void  SPI_TxByte ( BYTE data )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	71fb      	strb	r3, [r7, #7]
  while  ( HAL_SPI_GetState ( & hspi1 )  !=  HAL_SPI_STATE_READY ) ;
 8006146:	bf00      	nop
 8006148:	4808      	ldr	r0, [pc, #32]	; (800616c <SPI_TxByte+0x30>)
 800614a:	f7fc fbbb 	bl	80028c4 <HAL_SPI_GetState>
 800614e:	4603      	mov	r3, r0
 8006150:	2b01      	cmp	r3, #1
 8006152:	d1f9      	bne.n	8006148 <SPI_TxByte+0xc>
  HAL_SPI_Transmit ( & hspi1 ,  & data ,  1 ,  SPI_TIMEOUT ) ;
 8006154:	1df9      	adds	r1, r7, #7
 8006156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800615a:	2201      	movs	r2, #1
 800615c:	4803      	ldr	r0, [pc, #12]	; (800616c <SPI_TxByte+0x30>)
 800615e:	f7fc f830 	bl	80021c2 <HAL_SPI_Transmit>
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000040 	.word	0x20000040

08006170 <SPI_RxByte>:

/* Return type function for sending and receiving SPI data */
static uint8_t SPI_RxByte ( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af02      	add	r7, sp, #8
  uint8_t dummy , data ;
  dummy =  0xFF ;
 8006176:	23ff      	movs	r3, #255	; 0xff
 8006178:	71fb      	strb	r3, [r7, #7]
  data =  0 ;
 800617a:	2300      	movs	r3, #0
 800617c:	71bb      	strb	r3, [r7, #6]

  while  ( (HAL_SPI_GetState ( & hspi1 )  !=  HAL_SPI_STATE_READY ) ) ;
 800617e:	bf00      	nop
 8006180:	4809      	ldr	r0, [pc, #36]	; (80061a8 <SPI_RxByte+0x38>)
 8006182:	f7fc fb9f 	bl	80028c4 <HAL_SPI_GetState>
 8006186:	4603      	mov	r3, r0
 8006188:	2b01      	cmp	r3, #1
 800618a:	d1f9      	bne.n	8006180 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive ( & hspi1 ,  & dummy ,  & data ,  1 ,  SPI_TIMEOUT ) ;
 800618c:	1dba      	adds	r2, r7, #6
 800618e:	1df9      	adds	r1, r7, #7
 8006190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	2301      	movs	r3, #1
 8006198:	4803      	ldr	r0, [pc, #12]	; (80061a8 <SPI_RxByte+0x38>)
 800619a:	f7fc f980 	bl	800249e <HAL_SPI_TransmitReceive>

  return data ;
 800619e:	79bb      	ldrb	r3, [r7, #6]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000040 	.word	0x20000040

080061ac <SPI_RxBytePtr>:

/* Pointer function for sending and receiving SPI data */
static  void  SPI_RxBytePtr ( uint8_t *buff )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  * buff =  SPI_RxByte ( ) ;
 80061b4:	f7ff ffdc 	bl	8006170 <SPI_RxByte>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	701a      	strb	r2, [r3, #0]
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <SD_ReadyWait>:

/* Wait for SD card to be ready */
static uint8_t SD_ReadyWait ( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
  uint8_t res ;

  /* Prepare 500 ms counter */
  Timer2 =  50 ;
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <SD_ReadyWait+0x34>)
 80061d0:	2232      	movs	r2, #50	; 0x32
 80061d2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte ( ) ;
 80061d4:	f7ff ffcc 	bl	8006170 <SPI_RxByte>
  do
    {
      /* SPI communication until 0xFF value is received */
      res =  SPI_RxByte ( ) ;
 80061d8:	f7ff ffca 	bl	8006170 <SPI_RxByte>
 80061dc:	4603      	mov	r3, r0
 80061de:	71fb      	strb	r3, [r7, #7]
    }  while  ( ( res !=  0xFF )  && Timer2 ) ;
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	2bff      	cmp	r3, #255	; 0xff
 80061e4:	d004      	beq.n	80061f0 <SD_ReadyWait+0x28>
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <SD_ReadyWait+0x34>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f3      	bne.n	80061d8 <SD_ReadyWait+0x10>

    return res ;
 80061f0:	79fb      	ldrb	r3, [r7, #7]
  }
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20002182 	.word	0x20002182

08006200 <SD_PowerOn>:

  /* Power on */
  static  void  SD_PowerOn ( void )
  {
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
    uint8_t cmd_arg [ 6 ] ;
    uint32_t Count =  0x1FFF ;
 8006206:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800620a:	617b      	str	r3, [r7, #20]

    /* In the deselect state, send an SPI message to make it stand-by. */
    DESELECT ( ) ;
 800620c:	f7ff ff8a 	bl	8006124 <DESELECT>
    for ( int i =  0 ; i <  10 ; i ++ )
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	e005      	b.n	8006222 <SD_PowerOn+0x22>
      {
        SPI_TxByte ( 0xFF ) ;
 8006216:	20ff      	movs	r0, #255	; 0xff
 8006218:	f7ff ff90 	bl	800613c <SPI_TxByte>
    for ( int i =  0 ; i <  10 ; i ++ )
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	3301      	adds	r3, #1
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b09      	cmp	r3, #9
 8006226:	ddf6      	ble.n	8006216 <SD_PowerOn+0x16>
      }

      /* SPI Chips Select */
      SELECT ( ) ;
 8006228:	f7ff ff70 	bl	800610c <SELECT>

      /* Initial GO_IDLE_STATE state transition */
      cmd_arg [ 0 ]  =  ( CMD0 |  0x40 ) ;
 800622c:	2340      	movs	r3, #64	; 0x40
 800622e:	713b      	strb	r3, [r7, #4]
      cmd_arg [ 1 ]  =  0 ;
 8006230:	2300      	movs	r3, #0
 8006232:	717b      	strb	r3, [r7, #5]
      cmd_arg [ 2 ]  =  0 ;
 8006234:	2300      	movs	r3, #0
 8006236:	71bb      	strb	r3, [r7, #6]
      cmd_arg [ 3 ]  =  0 ;
 8006238:	2300      	movs	r3, #0
 800623a:	71fb      	strb	r3, [r7, #7]
      cmd_arg [ 4 ]  =  0 ;
 800623c:	2300      	movs	r3, #0
 800623e:	723b      	strb	r3, [r7, #8]
      cmd_arg [ 5 ]  =  0x95 ;
 8006240:	2395      	movs	r3, #149	; 0x95
 8006242:	727b      	strb	r3, [r7, #9]

      /* Send command */
        for  ( int i =  0 ; i <  6 ; i ++ )
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e009      	b.n	800625e <SD_PowerOn+0x5e>
        {
          SPI_TxByte( cmd_arg [ i ] ) ;
 800624a:	1d3a      	adds	r2, r7, #4
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ff72 	bl	800613c <SPI_TxByte>
        for  ( int i =  0 ; i <  6 ; i ++ )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b05      	cmp	r3, #5
 8006262:	ddf2      	ble.n	800624a <SD_PowerOn+0x4a>
        }

        /* Wait for response */
        while  ( ( SPI_RxByte ( )  !=  0x01 )  && Count )
 8006264:	e002      	b.n	800626c <SD_PowerOn+0x6c>
        {
          Count -- ;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	3b01      	subs	r3, #1
 800626a:	617b      	str	r3, [r7, #20]
        while  ( ( SPI_RxByte ( )  !=  0x01 )  && Count )
 800626c:	f7ff ff80 	bl	8006170 <SPI_RxByte>
 8006270:	4603      	mov	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d002      	beq.n	800627c <SD_PowerOn+0x7c>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f4      	bne.n	8006266 <SD_PowerOn+0x66>
        }

        DESELECT ( ) ;
 800627c:	f7ff ff52 	bl	8006124 <DESELECT>
        SPI_TxByte ( 0XFF ) ;
 8006280:	20ff      	movs	r0, #255	; 0xff
 8006282:	f7ff ff5b 	bl	800613c <SPI_TxByte>

        PowerFlag =  1 ;
 8006286:	4b03      	ldr	r3, [pc, #12]	; (8006294 <SD_PowerOn+0x94>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
      }
 800628c:	bf00      	nop
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200023c5 	.word	0x200023c5

08006298 <SD_PowerOff>:

  /* Power off */
  static  void  SD_PowerOff ( void )
  {
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
    PowerFlag =  0 ;
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <SD_PowerOff+0x14>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
  }
 80062a2:	bf00      	nop
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	200023c5 	.word	0x200023c5

080062b0 <SD_CheckPower>:

  /* Check power state */
  static uint8_t SD_CheckPower ( void )
  {
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
    /* 0=off, 1=on */
    return PowerFlag ;
 80062b4:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <SD_CheckPower+0x14>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
  }
 80062b8:	4618      	mov	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	200023c5 	.word	0x200023c5

080062c8 <SD_RxDataBlock>:

  /* Receive data packet */
  static bool SD_RxDataBlock ( BYTE *buff, UINT btr )
  {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
    uint8_t token ;
    /* 100 ms timer */
      Timer1 =  10 ;
 80062d2:	4b17      	ldr	r3, [pc, #92]	; (8006330 <SD_RxDataBlock+0x68>)
 80062d4:	220a      	movs	r2, #10
 80062d6:	701a      	strb	r2, [r3, #0]

      /* Wait for response */
      do
      {
        token =  SPI_RxByte ( ) ;
 80062d8:	f7ff ff4a 	bl	8006170 <SPI_RxByte>
 80062dc:	4603      	mov	r3, r0
 80062de:	73fb      	strb	r3, [r7, #15]
      }  while ( ( token ==  0xFF ) && Timer1 ) ;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2bff      	cmp	r3, #255	; 0xff
 80062e4:	d104      	bne.n	80062f0 <SD_RxDataBlock+0x28>
 80062e6:	4b12      	ldr	r3, [pc, #72]	; (8006330 <SD_RxDataBlock+0x68>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f3      	bne.n	80062d8 <SD_RxDataBlock+0x10>

      /* Error handling when receiving tokens other than 0xFE */
      if ( token !=  0xFE )
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2bfe      	cmp	r3, #254	; 0xfe
 80062f4:	d001      	beq.n	80062fa <SD_RxDataBlock+0x32>
        return  FALSE ;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e016      	b.n	8006328 <SD_RxDataBlock+0x60>

      /* Receive data in buffer */
        do
        {
          SPI_RxBytePtr ( buff ++ ) ;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff53 	bl	80061ac <SPI_RxBytePtr>
          SPI_RxBytePtr ( buff ++ ) ;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff4d 	bl	80061ac <SPI_RxBytePtr>
        }  while ( btr -=  2 ) ;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	3b02      	subs	r3, #2
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ed      	bne.n	80062fa <SD_RxDataBlock+0x32>

        SPI_RxByte ( ) ;  /* Ignore CRC */
 800631e:	f7ff ff27 	bl	8006170 <SPI_RxByte>
        SPI_RxByte ( ) ;
 8006322:	f7ff ff25 	bl	8006170 <SPI_RxByte>

        return  TRUE ;
 8006326:	2301      	movs	r3, #1
      }
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20002181 	.word	0x20002181

08006334 <SD_TxDataBlock>:
  /* data transfer packet */
  # if _READONLY ==  0
  static bool SD_TxDataBlock ( const BYTE *buff, BYTE token )
  {
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
    uint8_t resp , wc ;
    uint8_t i =  0 ;
 8006340:	2300      	movs	r3, #0
 8006342:	737b      	strb	r3, [r7, #13]

    /* Wait for SD card ready */
    if  ( SD_ReadyWait ( )  !=  0xFF )
 8006344:	f7ff ff40 	bl	80061c8 <SD_ReadyWait>
 8006348:	4603      	mov	r3, r0
 800634a:	2bff      	cmp	r3, #255	; 0xff
 800634c:	d001      	beq.n	8006352 <SD_TxDataBlock+0x1e>
      return  FALSE ;
 800634e:	2300      	movs	r3, #0
 8006350:	e040      	b.n	80063d4 <SD_TxDataBlock+0xa0>

    /* Token transfer */
    SPI_TxByte ( token ) ;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fef1 	bl	800613c <SPI_TxByte>

    /* if it is a data token */
    if  ( token !=  0xFD )
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	2bfd      	cmp	r3, #253	; 0xfd
 800635e:	d031      	beq.n	80063c4 <SD_TxDataBlock+0x90>
    {
      wc =  0 ;
 8006360:	2300      	movs	r3, #0
 8006362:	73bb      	strb	r3, [r7, #14]
      /* Send 512 bytes of data */
          do
          {
            SPI_TxByte ( * buff ++ ) ;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fee5 	bl	800613c <SPI_TxByte>
            SPI_TxByte ( * buff ++ ) ;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fede 	bl	800613c <SPI_TxByte>
          }  while  ( -- wc ) ;
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	3b01      	subs	r3, #1
 8006384:	73bb      	strb	r3, [r7, #14]
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1eb      	bne.n	8006364 <SD_TxDataBlock+0x30>

          SPI_RxByte ( ) ;        /* Ignore CRC */
 800638c:	f7ff fef0 	bl	8006170 <SPI_RxByte>
          SPI_RxByte ( ) ;
 8006390:	f7ff feee 	bl	8006170 <SPI_RxByte>

          /* Receive data response */
          while  ( i <=  64 )
 8006394:	e00b      	b.n	80063ae <SD_TxDataBlock+0x7a>
          {
            resp =  SPI_RxByte ( ) ;
 8006396:	f7ff feeb 	bl	8006170 <SPI_RxByte>
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]
            /* handle error response */
                  if  ( ( resp &  0x1F )  ==  0x05 )
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	d006      	beq.n	80063b6 <SD_TxDataBlock+0x82>
                    break ;

                  i ++ ;
 80063a8:	7b7b      	ldrb	r3, [r7, #13]
 80063aa:	3301      	adds	r3, #1
 80063ac:	737b      	strb	r3, [r7, #13]
          while  ( i <=  64 )
 80063ae:	7b7b      	ldrb	r3, [r7, #13]
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d9f0      	bls.n	8006396 <SD_TxDataBlock+0x62>
 80063b4:	e000      	b.n	80063b8 <SD_TxDataBlock+0x84>
                    break ;
 80063b6:	bf00      	nop
                }

                /* Clear the SPI receive buffer */
                while  ( SPI_RxByte ( )  ==  0 ) ;
 80063b8:	bf00      	nop
 80063ba:	f7ff fed9 	bl	8006170 <SPI_RxByte>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0fa      	beq.n	80063ba <SD_TxDataBlock+0x86>
              }

              if  ( ( resp &  0x1F )  ==  0x05 )
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d101      	bne.n	80063d2 <SD_TxDataBlock+0x9e>
                return  TRUE ;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <SD_TxDataBlock+0xa0>
              else
                return  FALSE ;
 80063d2:	2300      	movs	r3, #0
            }
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <SD_SendCmd>:
            #endif /* _READONLY */

  /* Send CMD packet */
  static  BYTE  SD_SendCmd ( BYTE cmd, DWORD arg )
  {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	6039      	str	r1, [r7, #0]
 80063e6:	71fb      	strb	r3, [r7, #7]
    uint8_t crc , res ;

    /* SD card waiting */
    if  ( SD_ReadyWait ( )  !=  0xFF )
 80063e8:	f7ff feee 	bl	80061c8 <SD_ReadyWait>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2bff      	cmp	r3, #255	; 0xff
 80063f0:	d001      	beq.n	80063f6 <SD_SendCmd+0x1a>
      return  0xFF ;
 80063f2:	23ff      	movs	r3, #255	; 0xff
 80063f4:	e040      	b.n	8006478 <SD_SendCmd+0x9c>

    /* Send command packet */
    SPI_TxByte ( cmd ) ;  			/* Command */
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fe9f 	bl	800613c <SPI_TxByte>
    SPI_TxByte ( ( BYTE )  ( arg >>  24 ) ) ;  	/* Argument[31..24] */
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	0e1b      	lsrs	r3, r3, #24
 8006402:	b2db      	uxtb	r3, r3
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe99 	bl	800613c <SPI_TxByte>
    SPI_TxByte ( ( BYTE)  ( arg >>  16 ) ) ;  	/* Argument[23..16] */
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	b2db      	uxtb	r3, r3
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff fe93 	bl	800613c <SPI_TxByte>
    SPI_TxByte ( ( BYTE )  ( arg >>  8 ) ) ;  	/* Argument[15..8] */
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	b2db      	uxtb	r3, r3
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fe8d 	bl	800613c <SPI_TxByte>
    SPI_TxByte ( ( BYTE ) arg ) ;  		/* Argument[7..0] */
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fe88 	bl	800613c <SPI_TxByte>
    /* Prepare CRC for each command */
      crc =  0 ;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
      if  ( cmd ==  CMD0 )
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d101      	bne.n	800643a <SD_SendCmd+0x5e>
        crc =  0x95 ;  /* CRC for CMD0(0) */
 8006436:	2395      	movs	r3, #149	; 0x95
 8006438:	73fb      	strb	r3, [r7, #15]

      if  ( cmd==  CMD8 )
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	2b48      	cmp	r3, #72	; 0x48
 800643e:	d101      	bne.n	8006444 <SD_SendCmd+0x68>
        crc =  0x87 ;  /* CRC for CMD8(0x1AA) */
 8006440:	2387      	movs	r3, #135	; 0x87
 8006442:	73fb      	strb	r3, [r7, #15]

      /* Send CRC */
      SPI_TxByte ( crc ) ;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fe78 	bl	800613c <SPI_TxByte>

      /* In case of CMD12 Stop Reading command, discard one response byte */
      if  ( cmd ==  CMD12 )
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	2b4c      	cmp	r3, #76	; 0x4c
 8006450:	d101      	bne.n	8006456 <SD_SendCmd+0x7a>
        SPI_RxByte ( ) ;
 8006452:	f7ff fe8d 	bl	8006170 <SPI_RxByte>
      /* Receive normal data within 10 times. */
        uint8_t n =  10 ;
 8006456:	230a      	movs	r3, #10
 8006458:	73bb      	strb	r3, [r7, #14]
        do
        {
          res =  SPI_RxByte ( ) ;
 800645a:	f7ff fe89 	bl	8006170 <SPI_RxByte>
 800645e:	4603      	mov	r3, r0
 8006460:	737b      	strb	r3, [r7, #13]
        }  while  ( ( res &  0x80 )  && -- n ) ;
 8006462:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da05      	bge.n	8006476 <SD_SendCmd+0x9a>
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	3b01      	subs	r3, #1
 800646e:	73bb      	strb	r3, [r7, #14]
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f1      	bne.n	800645a <SD_SendCmd+0x7e>

        return res ;
 8006476:	7b7b      	ldrb	r3, [r7, #13]
      }
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SD_disk_read>:
    return Stat ;
  }

  /* read sector */
  DRESULT  SD_disk_read ( BYTE pdrv, BYTE* buff, DWORD sector, UINT count )
  {
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
    if  ( pdrv||  ! count )
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <SD_disk_read+0x1c>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <SD_disk_read+0x20>
      return  RES_PARERR ;
 800649c:	2304      	movs	r3, #4
 800649e:	e051      	b.n	8006544 <SD_disk_read+0xc4>

    if  ( Stat &  STA_NOINIT )
 80064a0:	4b2a      	ldr	r3, [pc, #168]	; (800654c <SD_disk_read+0xcc>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <SD_disk_read+0x32>
      return  RES_NOTRDY ;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e048      	b.n	8006544 <SD_disk_read+0xc4>
    if  ( ! ( CardType &  4 ) )
 80064b2:	4b27      	ldr	r3, [pc, #156]	; (8006550 <SD_disk_read+0xd0>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <SD_disk_read+0x44>
        sector *=  512 ;       /* Change the designated sector by byte addressing unit */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	025b      	lsls	r3, r3, #9
 80064c2:	607b      	str	r3, [r7, #4]

      SELECT ( ) ;
 80064c4:	f7ff fe22 	bl	800610c <SELECT>

      if  ( count ==  1 )
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d111      	bne.n	80064f2 <SD_disk_read+0x72>
      {
        /* single block read */
        if  ( ( SD_SendCmd ( CMD17 , sector)  ==  0 )  &&  SD_RxDataBlock ( buff ,  512 ) )
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	2051      	movs	r0, #81	; 0x51
 80064d2:	f7ff ff83 	bl	80063dc <SD_SendCmd>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d129      	bne.n	8006530 <SD_disk_read+0xb0>
 80064dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	f7ff fef1 	bl	80062c8 <SD_RxDataBlock>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d021      	beq.n	8006530 <SD_disk_read+0xb0>
          count =  0 ;
 80064ec:	2300      	movs	r3, #0
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	e01e      	b.n	8006530 <SD_disk_read+0xb0>
      }
      else
      {
        /* read multiple blocks */
        if  ( SD_SendCmd ( CMD18 , sector )  ==  0 )
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	2052      	movs	r0, #82	; 0x52
 80064f6:	f7ff ff71 	bl	80063dc <SD_SendCmd>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d117      	bne.n	8006530 <SD_disk_read+0xb0>
        {
        	do  {
        	        if  ( ! SD_RxDataBlock ( buff ,  512 ) )
 8006500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006504:	68b8      	ldr	r0, [r7, #8]
 8006506:	f7ff fedf 	bl	80062c8 <SD_RxDataBlock>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <SD_disk_read+0xa6>
        	          break ;

        	        buff +=  512 ;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006516:	60bb      	str	r3, [r7, #8]
        	      }  while ( -- count ) ;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	603b      	str	r3, [r7, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1ed      	bne.n	8006500 <SD_disk_read+0x80>
 8006524:	e000      	b.n	8006528 <SD_disk_read+0xa8>
        	          break ;
 8006526:	bf00      	nop

        	      /* STOP_TRANSMISSION, request to stop transmission after reading all blocks */
        	      SD_SendCmd ( CMD12 ,  0 ) ;
 8006528:	2100      	movs	r1, #0
 800652a:	204c      	movs	r0, #76	; 0x4c
 800652c:	f7ff ff56 	bl	80063dc <SD_SendCmd>
        	    }
        	  }

        	  DESELECT ( ) ;
 8006530:	f7ff fdf8 	bl	8006124 <DESELECT>
        	  SPI_RxByte ( ) ;  /* Idle status (Release DO) */
 8006534:	f7ff fe1c 	bl	8006170 <SPI_RxByte>

        	  return count ?  RES_ERROR  :  RES_OK ;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf14      	ite	ne
 800653e:	2301      	movne	r3, #1
 8006540:	2300      	moveq	r3, #0
 8006542:	b2db      	uxtb	r3, r3
        	}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000020 	.word	0x20000020
 8006550:	200023c4 	.word	0x200023c4

08006554 <SD_disk_write>:

  /* write sector */
  # if _READONLY ==  0
  DRESULT  SD_disk_write ( BYTE pdrv, const BYTE* buff, DWORD sector, UINT count )
  {
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
    if  ( pdrv ||  ! count )
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d102      	bne.n	8006570 <SD_disk_write+0x1c>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <SD_disk_write+0x20>
      return  RES_PARERR ;
 8006570:	2304      	movs	r3, #4
 8006572:	e06b      	b.n	800664c <SD_disk_write+0xf8>

    if  ( Stat &  STA_NOINIT )
 8006574:	4b37      	ldr	r3, [pc, #220]	; (8006654 <SD_disk_write+0x100>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <SD_disk_write+0x32>
      return  RES_NOTRDY ;
 8006582:	2303      	movs	r3, #3
 8006584:	e062      	b.n	800664c <SD_disk_write+0xf8>

    if  ( Stat &  STA_PROTECT )
 8006586:	4b33      	ldr	r3, [pc, #204]	; (8006654 <SD_disk_write+0x100>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <SD_disk_write+0x44>
      return  RES_WRPRT ;
 8006594:	2302      	movs	r3, #2
 8006596:	e059      	b.n	800664c <SD_disk_write+0xf8>

    if  ( ! ( CardType &  4 ))
 8006598:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <SD_disk_write+0x104>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <SD_disk_write+0x56>
      sector *=  512 ;  /* Change the designated sector by byte addressing unit */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	025b      	lsls	r3, r3, #9
 80065a8:	607b      	str	r3, [r7, #4]

    SELECT ( ) ;
 80065aa:	f7ff fdaf 	bl	800610c <SELECT>
    if  ( count ==  1 )
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d110      	bne.n	80065d6 <SD_disk_write+0x82>
      {
        /* write single block */
        if  ( ( SD_SendCmd ( CMD24 , sector )  ==  0 )  &&  SD_TxDataBlock ( buff ,  0xFE ) )
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	2058      	movs	r0, #88	; 0x58
 80065b8:	f7ff ff10 	bl	80063dc <SD_SendCmd>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d13a      	bne.n	8006638 <SD_disk_write+0xe4>
 80065c2:	21fe      	movs	r1, #254	; 0xfe
 80065c4:	68b8      	ldr	r0, [r7, #8]
 80065c6:	f7ff feb5 	bl	8006334 <SD_TxDataBlock>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d033      	beq.n	8006638 <SD_disk_write+0xe4>
          count =  0 ;
 80065d0:	2300      	movs	r3, #0
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	e030      	b.n	8006638 <SD_disk_write+0xe4>
      }
      else
      {
        /* Write multiple blocks */
        if  ( CardType & 2 )
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <SD_disk_write+0x104>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <SD_disk_write+0x9e>
        {
          SD_SendCmd ( CMD55 ,  0 ) ;
 80065e2:	2100      	movs	r1, #0
 80065e4:	2077      	movs	r0, #119	; 0x77
 80065e6:	f7ff fef9 	bl	80063dc <SD_SendCmd>
          SD_SendCmd(CMD23,count); //ACMD23
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	2057      	movs	r0, #87	; 0x57
 80065ee:	f7ff fef5 	bl	80063dc <SD_SendCmd>
          //use count in above line of code
        }

        if  ( SD_SendCmd ( CMD25 , sector )  ==  0 )
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	2059      	movs	r0, #89	; 0x59
 80065f6:	f7ff fef1 	bl	80063dc <SD_SendCmd>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d11b      	bne.n	8006638 <SD_disk_write+0xe4>
        {
          do  {
            if ( ! SD_TxDataBlock ( buff ,  0xFC ) )
 8006600:	21fc      	movs	r1, #252	; 0xfc
 8006602:	68b8      	ldr	r0, [r7, #8]
 8006604:	f7ff fe96 	bl	8006334 <SD_TxDataBlock>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <SD_disk_write+0xd0>
              break ;
            buff +=  512 ;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006614:	60bb      	str	r3, [r7, #8]
                  }  while  ( --count ) ;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	3b01      	subs	r3, #1
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ee      	bne.n	8006600 <SD_disk_write+0xac>
 8006622:	e000      	b.n	8006626 <SD_disk_write+0xd2>
              break ;
 8006624:	bf00      	nop

                  if ( ! SD_TxDataBlock ( 0 ,  0xFD ) )
 8006626:	21fd      	movs	r1, #253	; 0xfd
 8006628:	2000      	movs	r0, #0
 800662a:	f7ff fe83 	bl	8006334 <SD_TxDataBlock>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <SD_disk_write+0xe4>
                  {
                    count =  1 ;
 8006634:	2301      	movs	r3, #1
 8006636:	603b      	str	r3, [r7, #0]
                  }
                }
              }

              DESELECT ( ) ;
 8006638:	f7ff fd74 	bl	8006124 <DESELECT>
              SPI_RxByte ( ) ;
 800663c:	f7ff fd98 	bl	8006170 <SPI_RxByte>

              return count ?  RES_ERROR  :  RES_OK ;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf14      	ite	ne
 8006646:	2301      	movne	r3, #1
 8006648:	2300      	moveq	r3, #0
 800664a:	b2db      	uxtb	r3, r3
            }
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000020 	.word	0x20000020
 8006658:	200023c4 	.word	0x200023c4

0800665c <SD_disk_ioctl>:
            #endif /* _READONLY */

            /* Other functions */
            DRESULT  SD_disk_ioctl ( BYTE drv, BYTE ctrl, void *buff )
            {
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b08b      	sub	sp, #44	; 0x2c
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	603a      	str	r2, [r7, #0]
 8006666:	71fb      	strb	r3, [r7, #7]
 8006668:	460b      	mov	r3, r1
 800666a:	71bb      	strb	r3, [r7, #6]
              DRESULT res ;
              BYTE n , csd [ 16 ] ,  * ptr = buff ;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	623b      	str	r3, [r7, #32]
              WORD csize ;

              if  ( drv )
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <SD_disk_ioctl+0x1e>
                return  RES_PARERR ;
 8006676:	2304      	movs	r3, #4
 8006678:	e11b      	b.n	80068b2 <SD_disk_ioctl+0x256>

              res =  RES_ERROR ;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              if  ( ctrl ==  CTRL_POWER )
 8006680:	79bb      	ldrb	r3, [r7, #6]
 8006682:	2b05      	cmp	r3, #5
 8006684:	d129      	bne.n	80066da <SD_disk_ioctl+0x7e>
              {
                switch  ( * ptr )
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d017      	beq.n	80066be <SD_disk_ioctl+0x62>
 800668e:	2b02      	cmp	r3, #2
 8006690:	dc1f      	bgt.n	80066d2 <SD_disk_ioctl+0x76>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <SD_disk_ioctl+0x40>
 8006696:	2b01      	cmp	r3, #1
 8006698:	d00b      	beq.n	80066b2 <SD_disk_ioctl+0x56>
 800669a:	e01a      	b.n	80066d2 <SD_disk_ioctl+0x76>
                {
                case  0 :
                  if  ( SD_CheckPower ( ) )
 800669c:	f7ff fe08 	bl	80062b0 <SD_CheckPower>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <SD_disk_ioctl+0x4e>
                    SD_PowerOff ( ) ;          /* Power Off */
 80066a6:	f7ff fdf7 	bl	8006298 <SD_PowerOff>
                  res =  RES_OK ;
 80066aa:	2300      	movs	r3, #0
 80066ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  break ;
 80066b0:	e0fd      	b.n	80068ae <SD_disk_ioctl+0x252>
                case  1 :
                      SD_PowerOn ( ) ;              /* Power On */
 80066b2:	f7ff fda5 	bl	8006200 <SD_PowerOn>
                      res =  RES_OK ;
 80066b6:	2300      	movs	r3, #0
 80066b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                      break ;
 80066bc:	e0f7      	b.n	80068ae <SD_disk_ioctl+0x252>
                    case  2 :
                      * ( ptr +  1 )  =  ( BYTE )  SD_CheckPower ( ) ;
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	1c5c      	adds	r4, r3, #1
 80066c2:	f7ff fdf5 	bl	80062b0 <SD_CheckPower>
 80066c6:	4603      	mov	r3, r0
 80066c8:	7023      	strb	r3, [r4, #0]
                      res =  RES_OK ;              /* Power Check */
 80066ca:	2300      	movs	r3, #0
 80066cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                      break ;
 80066d0:	e0ed      	b.n	80068ae <SD_disk_ioctl+0x252>
                    default :
                      res =  RES_PARERR;
 80066d2:	2304      	movs	r3, #4
 80066d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066d8:	e0e9      	b.n	80068ae <SD_disk_ioctl+0x252>
                    }
                  }
                  else
                  {
                    if  ( Stat &  STA_NOINIT )
 80066da:	4b78      	ldr	r3, [pc, #480]	; (80068bc <SD_disk_ioctl+0x260>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <SD_disk_ioctl+0x90>
                      return  RES_NOTRDY ;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e0e2      	b.n	80068b2 <SD_disk_ioctl+0x256>

                    SELECT ( ) ;
 80066ec:	f7ff fd0e 	bl	800610c <SELECT>

                    switch  ( ctrl )
 80066f0:	79bb      	ldrb	r3, [r7, #6]
 80066f2:	2b0d      	cmp	r3, #13
 80066f4:	f200 80cc 	bhi.w	8006890 <SD_disk_ioctl+0x234>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <SD_disk_ioctl+0xa4>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	080067fb 	.word	0x080067fb
 8006704:	08006739 	.word	0x08006739
 8006708:	080067eb 	.word	0x080067eb
 800670c:	08006891 	.word	0x08006891
 8006710:	08006891 	.word	0x08006891
 8006714:	08006891 	.word	0x08006891
 8006718:	08006891 	.word	0x08006891
 800671c:	08006891 	.word	0x08006891
 8006720:	08006891 	.word	0x08006891
 8006724:	08006891 	.word	0x08006891
 8006728:	08006891 	.word	0x08006891
 800672c:	0800680d 	.word	0x0800680d
 8006730:	08006831 	.word	0x08006831
 8006734:	08006855 	.word	0x08006855
                        {
                        case  GET_SECTOR_COUNT :
                          /* Number of sectors in SD card (DWORD) */
                          if  ( ( SD_SendCmd ( CMD9 ,  0 )  ==  0 )  &&  SD_RxDataBlock ( csd ,  16 ) )
 8006738:	2100      	movs	r1, #0
 800673a:	2049      	movs	r0, #73	; 0x49
 800673c:	f7ff fe4e 	bl	80063dc <SD_SendCmd>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 80a8 	bne.w	8006898 <SD_disk_ioctl+0x23c>
 8006748:	f107 030c 	add.w	r3, r7, #12
 800674c:	2110      	movs	r1, #16
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fdba 	bl	80062c8 <SD_RxDataBlock>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 809e 	beq.w	8006898 <SD_disk_ioctl+0x23c>
                          {
                            if  ( ( csd[ 0 ]  >>  6 )  ==  1 )
 800675c:	7b3b      	ldrb	r3, [r7, #12]
 800675e:	099b      	lsrs	r3, r3, #6
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10e      	bne.n	8006784 <SD_disk_ioctl+0x128>
                            {
                              /* SDC ver 2.00 */
                              csize = csd [ 9 ]  +  ( ( WORD ) csd [ 8 ]  <<  8 )  +  1 ;
 8006766:	7d7b      	ldrb	r3, [r7, #21]
 8006768:	b29a      	uxth	r2, r3
 800676a:	7d3b      	ldrb	r3, [r7, #20]
 800676c:	b29b      	uxth	r3, r3
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	b29b      	uxth	r3, r3
 8006772:	4413      	add	r3, r2
 8006774:	b29b      	uxth	r3, r3
 8006776:	3301      	adds	r3, #1
 8006778:	83fb      	strh	r3, [r7, #30]
                              * ( DWORD * ) buff =  ( DWORD ) csize <<  10 ;
 800677a:	8bfb      	ldrh	r3, [r7, #30]
 800677c:	029a      	lsls	r2, r3, #10
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e02e      	b.n	80067e2 <SD_disk_ioctl+0x186>
                            }
                            else
                            {
                              /* MMC or SDC ver 1.XX */
                              n =  (csd [ 5 ]  &  15 )  +  ( ( csd [ 10 ]  &  128 )  >>  7 )  +  ( ( csd [ 9 ]  &  3 )  <<  1 )  +  2 ;
 8006784:	7c7b      	ldrb	r3, [r7, #17]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	b2da      	uxtb	r2, r3
 800678c:	7dbb      	ldrb	r3, [r7, #22]
 800678e:	09db      	lsrs	r3, r3, #7
 8006790:	b2db      	uxtb	r3, r3
 8006792:	4413      	add	r3, r2
 8006794:	b2da      	uxtb	r2, r3
 8006796:	7d7b      	ldrb	r3, [r7, #21]
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f003 0306 	and.w	r3, r3, #6
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	4413      	add	r3, r2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	3302      	adds	r3, #2
 80067a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                              csize =  ( csd [ 8 ]  >>  6 )  +  ( ( WORD ) csd [ 7 ]  <<  2 ) +  ( ( WORD )  ( csd [ 6 ]  &  3 )  <<  10 )  +  1 ;
 80067ac:	7d3b      	ldrb	r3, [r7, #20]
 80067ae:	099b      	lsrs	r3, r3, #6
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	7cfb      	ldrb	r3, [r7, #19]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4413      	add	r3, r2
 80067be:	b29a      	uxth	r2, r3
 80067c0:	7cbb      	ldrb	r3, [r7, #18]
 80067c2:	029b      	lsls	r3, r3, #10
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3301      	adds	r3, #1
 80067d2:	83fb      	strh	r3, [r7, #30]
                              * ( DWORD * ) buff =  ( DWORD ) csize <<  ( n -  9 ) ;
 80067d4:	8bfa      	ldrh	r2, [r7, #30]
 80067d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067da:	3b09      	subs	r3, #9
 80067dc:	409a      	lsls	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	601a      	str	r2, [r3, #0]
                            }
                            res =  RES_OK ;
 80067e2:	2300      	movs	r3, #0
 80067e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 }
                                 break ;
 80067e8:	e056      	b.n	8006898 <SD_disk_ioctl+0x23c>

                               case  GET_SECTOR_SIZE :
                                 /* Unit size of sector (WORD) */
                                 * ( WORD * )buff =  512 ;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f0:	801a      	strh	r2, [r3, #0]
                                 res =  RES_OK ;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 break ;
 80067f8:	e055      	b.n	80068a6 <SD_disk_ioctl+0x24a>

                               case  CTRL_SYNC :
                                 /* sync write */
                                 if  ( SD_ReadyWait ( )  ==  0xFF )
 80067fa:	f7ff fce5 	bl	80061c8 <SD_ReadyWait>
 80067fe:	4603      	mov	r3, r0
 8006800:	2bff      	cmp	r3, #255	; 0xff
 8006802:	d14b      	bne.n	800689c <SD_disk_ioctl+0x240>
                                   res =  RES_OK ;
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 break ;
 800680a:	e047      	b.n	800689c <SD_disk_ioctl+0x240>

                               case  MMC_GET_CSD :
                            	   /* Receive CSD information (16 bytes) */
                            	         if  ( SD_SendCmd ( CMD9 ,  0 )  ==  0  &&  SD_RxDataBlock ( ptr ,  16 ) )
 800680c:	2100      	movs	r1, #0
 800680e:	2049      	movs	r0, #73	; 0x49
 8006810:	f7ff fde4 	bl	80063dc <SD_SendCmd>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d142      	bne.n	80068a0 <SD_disk_ioctl+0x244>
 800681a:	2110      	movs	r1, #16
 800681c:	6a38      	ldr	r0, [r7, #32]
 800681e:	f7ff fd53 	bl	80062c8 <SD_RxDataBlock>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d03b      	beq.n	80068a0 <SD_disk_ioctl+0x244>
                            	           res =  RES_OK ;
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            	         break ;
 800682e:	e037      	b.n	80068a0 <SD_disk_ioctl+0x244>

                            	       case  MMC_GET_CID :
                            	         /* Receive CID information (16 bytes) */
                            	         if  ( SD_SendCmd ( CMD10 ,  0 )  ==  0  &&  SD_RxDataBlock ( ptr ,  16 ) )
 8006830:	2100      	movs	r1, #0
 8006832:	204a      	movs	r0, #74	; 0x4a
 8006834:	f7ff fdd2 	bl	80063dc <SD_SendCmd>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d132      	bne.n	80068a4 <SD_disk_ioctl+0x248>
 800683e:	2110      	movs	r1, #16
 8006840:	6a38      	ldr	r0, [r7, #32]
 8006842:	f7ff fd41 	bl	80062c8 <SD_RxDataBlock>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d02b      	beq.n	80068a4 <SD_disk_ioctl+0x248>
                            	           res =  RES_OK ;
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            	         break ;
 8006852:	e027      	b.n	80068a4 <SD_disk_ioctl+0x248>

                            	       case  MMC_GET_OCR :
                            	         /* Receive OCR information (4 bytes) */
                            	         if  ( SD_SendCmd ( CMD58 ,  0 )  ==  0 )
 8006854:	2100      	movs	r1, #0
 8006856:	207a      	movs	r0, #122	; 0x7a
 8006858:	f7ff fdc0 	bl	80063dc <SD_SendCmd>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d116      	bne.n	8006890 <SD_disk_ioctl+0x234>
                            	         {
                            	           for  ( n =  0 ; n <  4 ; n ++ )
 8006862:	2300      	movs	r3, #0
 8006864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006868:	e00b      	b.n	8006882 <SD_disk_ioctl+0x226>
                            	           {
                            	             * ptr ++  =  SPI_RxByte ( ) ;
 800686a:	6a3c      	ldr	r4, [r7, #32]
 800686c:	1c63      	adds	r3, r4, #1
 800686e:	623b      	str	r3, [r7, #32]
 8006870:	f7ff fc7e 	bl	8006170 <SPI_RxByte>
 8006874:	4603      	mov	r3, r0
 8006876:	7023      	strb	r3, [r4, #0]
                            	           for  ( n =  0 ; n <  4 ; n ++ )
 8006878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800687c:	3301      	adds	r3, #1
 800687e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006882:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006886:	2b03      	cmp	r3, #3
 8006888:	d9ef      	bls.n	800686a <SD_disk_ioctl+0x20e>
                            	           }
                            	           res =  RES_OK ;
 800688a:	2300      	movs	r3, #0
 800688c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            	                }

                            	              default :
                            	                res =  RES_PARERR ;
 8006890:	2304      	movs	r3, #4
 8006892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006896:	e006      	b.n	80068a6 <SD_disk_ioctl+0x24a>
                                 break ;
 8006898:	bf00      	nop
 800689a:	e004      	b.n	80068a6 <SD_disk_ioctl+0x24a>
                                 break ;
 800689c:	bf00      	nop
 800689e:	e002      	b.n	80068a6 <SD_disk_ioctl+0x24a>
                            	         break ;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <SD_disk_ioctl+0x24a>
                            	         break ;
 80068a4:	bf00      	nop
                            	              }

                            	              DESELECT ( ) ;
 80068a6:	f7ff fc3d 	bl	8006124 <DESELECT>
                            	              SPI_RxByte ( ) ;
 80068aa:	f7ff fc61 	bl	8006170 <SPI_RxByte>
                            	            }

                            	            return res ;
 80068ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
                            	          }
 80068b2:	4618      	mov	r0, r3
 80068b4:	372c      	adds	r7, #44	; 0x2c
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd90      	pop	{r4, r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000020 	.word	0x20000020

080068c0 <__libc_init_array>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4d0d      	ldr	r5, [pc, #52]	; (80068f8 <__libc_init_array+0x38>)
 80068c4:	4c0d      	ldr	r4, [pc, #52]	; (80068fc <__libc_init_array+0x3c>)
 80068c6:	1b64      	subs	r4, r4, r5
 80068c8:	10a4      	asrs	r4, r4, #2
 80068ca:	2600      	movs	r6, #0
 80068cc:	42a6      	cmp	r6, r4
 80068ce:	d109      	bne.n	80068e4 <__libc_init_array+0x24>
 80068d0:	4d0b      	ldr	r5, [pc, #44]	; (8006900 <__libc_init_array+0x40>)
 80068d2:	4c0c      	ldr	r4, [pc, #48]	; (8006904 <__libc_init_array+0x44>)
 80068d4:	f000 f820 	bl	8006918 <_init>
 80068d8:	1b64      	subs	r4, r4, r5
 80068da:	10a4      	asrs	r4, r4, #2
 80068dc:	2600      	movs	r6, #0
 80068de:	42a6      	cmp	r6, r4
 80068e0:	d105      	bne.n	80068ee <__libc_init_array+0x2e>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e8:	4798      	blx	r3
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7ee      	b.n	80068cc <__libc_init_array+0xc>
 80068ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f2:	4798      	blx	r3
 80068f4:	3601      	adds	r6, #1
 80068f6:	e7f2      	b.n	80068de <__libc_init_array+0x1e>
 80068f8:	08006e54 	.word	0x08006e54
 80068fc:	08006e54 	.word	0x08006e54
 8006900:	08006e54 	.word	0x08006e54
 8006904:	08006e58 	.word	0x08006e58

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <_init>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr

08006924 <_fini>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	bf00      	nop
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr
